
PROY_SEU_E3_CI_21793606.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d104  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  0800d2a8  0800d2a8  0001d2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d90c  0800d90c  000204d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d90c  0800d90c  0001d90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d914  0800d914  000204d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d914  0800d914  0001d914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d918  0800d918  0001d918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d0  20000000  0800d91c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059f4  200004d0  0800ddec  000204d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005ec4  0800ddec  00025ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170ad  00000000  00000000  00020500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab0  00000000  00000000  000375ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003b060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b50a  00000000  00000000  0003d640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017394  00000000  00000000  00058b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f3ae  00000000  00000000  0006fede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f28c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c4  00000000  00000000  0010f2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004d0 	.word	0x200004d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d28c 	.word	0x0800d28c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004d4 	.word	0x200004d4
 80001dc:	0800d28c 	.word	0x0800d28c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b9aa 	b.w	8000f84 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f83c 	bl	8000cb4 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2lz>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	f7ff ff5b 	bl	8000b0c <__aeabi_dcmplt>
 8000c56:	b928      	cbnz	r0, 8000c64 <__aeabi_d2lz+0x1c>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c60:	f000 b80a 	b.w	8000c78 <__aeabi_d2ulz>
 8000c64:	4620      	mov	r0, r4
 8000c66:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c6a:	f000 f805 	bl	8000c78 <__aeabi_d2ulz>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__aeabi_d2ulz+0x34>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4606      	mov	r6, r0
 8000c80:	460f      	mov	r7, r1
 8000c82:	f7ff fcd1 	bl	8000628 <__aeabi_dmul>
 8000c86:	f7ff ffa7 	bl	8000bd8 <__aeabi_d2uiz>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	f7ff fc52 	bl	8000534 <__aeabi_ui2d>
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <__aeabi_d2ulz+0x38>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f7ff fcc8 	bl	8000628 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	f7ff fb0a 	bl	80002b8 <__aeabi_dsub>
 8000ca4:	f7ff ff98 	bl	8000bd8 <__aeabi_d2uiz>
 8000ca8:	4621      	mov	r1, r4
 8000caa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cac:	3df00000 	.word	0x3df00000
 8000cb0:	41f00000 	.word	0x41f00000

08000cb4 <__udivmoddi4>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	9d08      	ldr	r5, [sp, #32]
 8000cba:	4604      	mov	r4, r0
 8000cbc:	468e      	mov	lr, r1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d14d      	bne.n	8000d5e <__udivmoddi4+0xaa>
 8000cc2:	428a      	cmp	r2, r1
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	d969      	bls.n	8000d9c <__udivmoddi4+0xe8>
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	b152      	cbz	r2, 8000ce4 <__udivmoddi4+0x30>
 8000cce:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd2:	f1c2 0120 	rsb	r1, r2, #32
 8000cd6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cda:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cde:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce2:	4094      	lsls	r4, r2
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	0c21      	lsrs	r1, r4, #16
 8000cea:	fbbe f6f8 	udiv	r6, lr, r8
 8000cee:	fa1f f78c 	uxth.w	r7, ip
 8000cf2:	fb08 e316 	mls	r3, r8, r6, lr
 8000cf6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfa:	fb06 f107 	mul.w	r1, r6, r7
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x64>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 811f 	bcs.w	8000f4c <__udivmoddi4+0x298>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 811c 	bls.w	8000f4c <__udivmoddi4+0x298>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 f707 	mul.w	r7, r0, r7
 8000d2c:	42a7      	cmp	r7, r4
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x92>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d38:	f080 810a 	bcs.w	8000f50 <__udivmoddi4+0x29c>
 8000d3c:	42a7      	cmp	r7, r4
 8000d3e:	f240 8107 	bls.w	8000f50 <__udivmoddi4+0x29c>
 8000d42:	4464      	add	r4, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4a:	1be4      	subs	r4, r4, r7
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa4>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xc2>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	f000 80ef 	beq.w	8000f46 <__udivmoddi4+0x292>
 8000d68:	2600      	movs	r6, #0
 8000d6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f683 	clz	r6, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d14a      	bne.n	8000e14 <__udivmoddi4+0x160>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd4>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80f9 	bhi.w	8000f7a <__udivmoddi4+0x2c6>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	469e      	mov	lr, r3
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa4>
 8000d96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa4>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xec>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 8092 	bne.w	8000ece <__udivmoddi4+0x21a>
 8000daa:	eba1 010c 	sub.w	r1, r1, ip
 8000dae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	2601      	movs	r6, #1
 8000db8:	0c20      	lsrs	r0, r4, #16
 8000dba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dbe:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc6:	fb0e f003 	mul.w	r0, lr, r3
 8000dca:	4288      	cmp	r0, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x12c>
 8000dce:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x12a>
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	f200 80cb 	bhi.w	8000f74 <__udivmoddi4+0x2c0>
 8000dde:	4643      	mov	r3, r8
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de8:	fb07 1110 	mls	r1, r7, r0, r1
 8000dec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df0:	fb0e fe00 	mul.w	lr, lr, r0
 8000df4:	45a6      	cmp	lr, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x156>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x154>
 8000e02:	45a6      	cmp	lr, r4
 8000e04:	f200 80bb 	bhi.w	8000f7e <__udivmoddi4+0x2ca>
 8000e08:	4608      	mov	r0, r1
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x9a>
 8000e14:	f1c6 0720 	rsb	r7, r6, #32
 8000e18:	40b3      	lsls	r3, r6
 8000e1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e22:	fa20 f407 	lsr.w	r4, r0, r7
 8000e26:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2a:	431c      	orrs	r4, r3
 8000e2c:	40f9      	lsrs	r1, r7
 8000e2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e32:	fa00 f306 	lsl.w	r3, r0, r6
 8000e36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3a:	0c20      	lsrs	r0, r4, #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fb09 1118 	mls	r1, r9, r8, r1
 8000e44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e48:	fb08 f00e 	mul.w	r0, r8, lr
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e52:	d90b      	bls.n	8000e6c <__udivmoddi4+0x1b8>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e5c:	f080 8088 	bcs.w	8000f70 <__udivmoddi4+0x2bc>
 8000e60:	4288      	cmp	r0, r1
 8000e62:	f240 8085 	bls.w	8000f70 <__udivmoddi4+0x2bc>
 8000e66:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	1a09      	subs	r1, r1, r0
 8000e6e:	b2a4      	uxth	r4, r4
 8000e70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e74:	fb09 1110 	mls	r1, r9, r0, r1
 8000e78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e80:	458e      	cmp	lr, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1e2>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e8c:	d26c      	bcs.n	8000f68 <__udivmoddi4+0x2b4>
 8000e8e:	458e      	cmp	lr, r1
 8000e90:	d96a      	bls.n	8000f68 <__udivmoddi4+0x2b4>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ea2:	42a1      	cmp	r1, r4
 8000ea4:	46c8      	mov	r8, r9
 8000ea6:	46a6      	mov	lr, r4
 8000ea8:	d356      	bcc.n	8000f58 <__udivmoddi4+0x2a4>
 8000eaa:	d053      	beq.n	8000f54 <__udivmoddi4+0x2a0>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x212>
 8000eae:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000eb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eba:	fa22 f306 	lsr.w	r3, r2, r6
 8000ebe:	40f1      	lsrs	r1, r6
 8000ec0:	431f      	orrs	r7, r3
 8000ec2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	f1c2 0320 	rsb	r3, r2, #32
 8000ed2:	40d8      	lsrs	r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa21 f303 	lsr.w	r3, r1, r3
 8000edc:	4091      	lsls	r1, r2
 8000ede:	4301      	orrs	r1, r0
 8000ee0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee4:	fa1f fe8c 	uxth.w	lr, ip
 8000ee8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eec:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef0:	0c0b      	lsrs	r3, r1, #16
 8000ef2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ef6:	fb00 f60e 	mul.w	r6, r0, lr
 8000efa:	429e      	cmp	r6, r3
 8000efc:	fa04 f402 	lsl.w	r4, r4, r2
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x260>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0a:	d22f      	bcs.n	8000f6c <__udivmoddi4+0x2b8>
 8000f0c:	429e      	cmp	r6, r3
 8000f0e:	d92d      	bls.n	8000f6c <__udivmoddi4+0x2b8>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1b9b      	subs	r3, r3, r6
 8000f16:	b289      	uxth	r1, r1
 8000f18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f24:	fb06 f30e 	mul.w	r3, r6, lr
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x28a>
 8000f2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f34:	d216      	bcs.n	8000f64 <__udivmoddi4+0x2b0>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d914      	bls.n	8000f64 <__udivmoddi4+0x2b0>
 8000f3a:	3e02      	subs	r6, #2
 8000f3c:	4461      	add	r1, ip
 8000f3e:	1ac9      	subs	r1, r1, r3
 8000f40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f44:	e738      	b.n	8000db8 <__udivmoddi4+0x104>
 8000f46:	462e      	mov	r6, r5
 8000f48:	4628      	mov	r0, r5
 8000f4a:	e705      	b.n	8000d58 <__udivmoddi4+0xa4>
 8000f4c:	4606      	mov	r6, r0
 8000f4e:	e6e3      	b.n	8000d18 <__udivmoddi4+0x64>
 8000f50:	4618      	mov	r0, r3
 8000f52:	e6f8      	b.n	8000d46 <__udivmoddi4+0x92>
 8000f54:	454b      	cmp	r3, r9
 8000f56:	d2a9      	bcs.n	8000eac <__udivmoddi4+0x1f8>
 8000f58:	ebb9 0802 	subs.w	r8, r9, r2
 8000f5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f60:	3801      	subs	r0, #1
 8000f62:	e7a3      	b.n	8000eac <__udivmoddi4+0x1f8>
 8000f64:	4646      	mov	r6, r8
 8000f66:	e7ea      	b.n	8000f3e <__udivmoddi4+0x28a>
 8000f68:	4620      	mov	r0, r4
 8000f6a:	e794      	b.n	8000e96 <__udivmoddi4+0x1e2>
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	e7d1      	b.n	8000f14 <__udivmoddi4+0x260>
 8000f70:	46d0      	mov	r8, sl
 8000f72:	e77b      	b.n	8000e6c <__udivmoddi4+0x1b8>
 8000f74:	3b02      	subs	r3, #2
 8000f76:	4461      	add	r1, ip
 8000f78:	e732      	b.n	8000de0 <__udivmoddi4+0x12c>
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	e709      	b.n	8000d92 <__udivmoddi4+0xde>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e742      	b.n	8000e0a <__udivmoddi4+0x156>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <case_insensitive_strcmp+0x16>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e056      	b.n	8001050 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d10d      	bne.n	8000fc6 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e050      	b.n	8001050 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e04a      	b.n	8001050 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a22      	ldr	r2, [pc, #136]	; (800105c <case_insensitive_strcmp+0xd4>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <case_insensitive_strcmp+0x5e>
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f103 0220 	add.w	r2, r3, #32
 8000fe4:	e000      	b.n	8000fe8 <case_insensitive_strcmp+0x60>
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	73bb      	strb	r3, [r7, #14]
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	491a      	ldr	r1, [pc, #104]	; (800105c <case_insensitive_strcmp+0xd4>)
 8000ff4:	440b      	add	r3, r1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d102      	bne.n	8001006 <case_insensitive_strcmp+0x7e>
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	3320      	adds	r3, #32
 8001004:	e000      	b.n	8001008 <case_insensitive_strcmp+0x80>
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	429a      	cmp	r2, r3
 800100a:	d0d0      	beq.n	8000fae <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	737b      	strb	r3, [r7, #13]
 8001012:	7b7b      	ldrb	r3, [r7, #13]
 8001014:	3301      	adds	r3, #1
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <case_insensitive_strcmp+0xd4>)
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d103      	bne.n	800102c <case_insensitive_strcmp+0xa4>
 8001024:	7b7b      	ldrb	r3, [r7, #13]
 8001026:	f103 0220 	add.w	r2, r3, #32
 800102a:	e000      	b.n	800102e <case_insensitive_strcmp+0xa6>
 800102c:	7b7a      	ldrb	r2, [r7, #13]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	733b      	strb	r3, [r7, #12]
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	4908      	ldr	r1, [pc, #32]	; (800105c <case_insensitive_strcmp+0xd4>)
 800103a:	440b      	add	r3, r1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b01      	cmp	r3, #1
 8001044:	d102      	bne.n	800104c <case_insensitive_strcmp+0xc4>
 8001046:	7b3b      	ldrb	r3, [r7, #12]
 8001048:	3320      	adds	r3, #32
 800104a:	e000      	b.n	800104e <case_insensitive_strcmp+0xc6>
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	1ad3      	subs	r3, r2, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	0800d46c 	.word	0x0800d46c

08001060 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2028      	movs	r0, #40	; 0x28
 800106e:	4798      	blx	r3
 8001070:	60f8      	str	r0, [r7, #12]
    if (node)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d004      	beq.n	8001082 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001078:	2228      	movs	r2, #40	; 0x28
 800107a:	2100      	movs	r1, #0
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f007 ff2b 	bl	8008ed8 <memset>
    }

    return node;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001098:	e037      	b.n	800110a <cJSON_Delete+0x7e>
    {
        next = item->next;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d108      	bne.n	80010be <cJSON_Delete+0x32>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffe7 	bl	800108c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d109      	bne.n	80010de <cJSON_Delete+0x52>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <cJSON_Delete+0x90>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6912      	ldr	r2, [r2, #16]
 80010da:	4610      	mov	r0, r2
 80010dc:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <cJSON_Delete+0x72>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <cJSON_Delete+0x90>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6a12      	ldr	r2, [r2, #32]
 80010fa:	4610      	mov	r0, r2
 80010fc:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <cJSON_Delete+0x90>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	4798      	blx	r3
        item = next;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1c4      	bne.n	800109a <cJSON_Delete+0xe>
    }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000

08001120 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001124:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b098      	sub	sp, #96	; 0x60
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    double number = 0;
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8001146:	2300      	movs	r3, #0
 8001148:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800114a:	f7ff ffe9 	bl	8001120 <get_decimal_point>
 800114e:	4603      	mov	r3, r0
 8001150:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <parse_number+0x36>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <parse_number+0x3a>
    {
        return false;
 8001166:	2300      	movs	r3, #0
 8001168:	e0c6      	b.n	80012f8 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800116a:	2300      	movs	r3, #0
 800116c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800116e:	e063      	b.n	8001238 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	6899      	ldr	r1, [r3, #8]
 8001178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800117a:	440b      	add	r3, r1
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b45      	cmp	r3, #69	; 0x45
 8001182:	dc3d      	bgt.n	8001200 <parse_number+0xd0>
 8001184:	2b2b      	cmp	r3, #43	; 0x2b
 8001186:	db66      	blt.n	8001256 <parse_number+0x126>
 8001188:	3b2b      	subs	r3, #43	; 0x2b
 800118a:	2b1a      	cmp	r3, #26
 800118c:	d863      	bhi.n	8001256 <parse_number+0x126>
 800118e:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <parse_number+0x64>)
 8001190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001194:	08001205 	.word	0x08001205
 8001198:	08001257 	.word	0x08001257
 800119c:	08001205 	.word	0x08001205
 80011a0:	08001223 	.word	0x08001223
 80011a4:	08001257 	.word	0x08001257
 80011a8:	08001205 	.word	0x08001205
 80011ac:	08001205 	.word	0x08001205
 80011b0:	08001205 	.word	0x08001205
 80011b4:	08001205 	.word	0x08001205
 80011b8:	08001205 	.word	0x08001205
 80011bc:	08001205 	.word	0x08001205
 80011c0:	08001205 	.word	0x08001205
 80011c4:	08001205 	.word	0x08001205
 80011c8:	08001205 	.word	0x08001205
 80011cc:	08001205 	.word	0x08001205
 80011d0:	08001257 	.word	0x08001257
 80011d4:	08001257 	.word	0x08001257
 80011d8:	08001257 	.word	0x08001257
 80011dc:	08001257 	.word	0x08001257
 80011e0:	08001257 	.word	0x08001257
 80011e4:	08001257 	.word	0x08001257
 80011e8:	08001257 	.word	0x08001257
 80011ec:	08001257 	.word	0x08001257
 80011f0:	08001257 	.word	0x08001257
 80011f4:	08001257 	.word	0x08001257
 80011f8:	08001257 	.word	0x08001257
 80011fc:	08001205 	.word	0x08001205
 8001200:	2b65      	cmp	r3, #101	; 0x65
 8001202:	d128      	bne.n	8001256 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	6899      	ldr	r1, [r3, #8]
 800120c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800120e:	440b      	add	r3, r1
 8001210:	4413      	add	r3, r2
 8001212:	7819      	ldrb	r1, [r3, #0]
 8001214:	f107 0208 	add.w	r2, r7, #8
 8001218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800121a:	4413      	add	r3, r2
 800121c:	460a      	mov	r2, r1
 800121e:	701a      	strb	r2, [r3, #0]
                break;
 8001220:	e007      	b.n	8001232 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8001222:	f107 0208 	add.w	r2, r7, #8
 8001226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001228:	4413      	add	r3, r2
 800122a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800122e:	701a      	strb	r2, [r3, #0]
                break;
 8001230:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001234:	3301      	adds	r3, #1
 8001236:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800123a:	2b3e      	cmp	r3, #62	; 0x3e
 800123c:	d80d      	bhi.n	800125a <parse_number+0x12a>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00a      	beq.n	800125a <parse_number+0x12a>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800124a:	441a      	add	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	d38d      	bcc.n	8001170 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001254:	e001      	b.n	800125a <parse_number+0x12a>
                goto loop_end;
 8001256:	bf00      	nop
 8001258:	e000      	b.n	800125c <parse_number+0x12c>
loop_end:
 800125a:	bf00      	nop
    number_c_string[i] = '\0';
 800125c:	f107 0208 	add.w	r2, r7, #8
 8001260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001262:	4413      	add	r3, r2
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001268:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f009 face 	bl	800a814 <strtod>
 8001278:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800127c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	429a      	cmp	r2, r3
 8001284:	d101      	bne.n	800128a <parse_number+0x15a>
    {
        return false; /* parse_error */
 8001286:	2300      	movs	r3, #0
 8001288:	e036      	b.n	80012f8 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001290:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001294:	a31b      	add	r3, pc, #108	; (adr r3, 8001304 <parse_number+0x1d4>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800129e:	f7ff fc49 	bl	8000b34 <__aeabi_dcmpge>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	e015      	b.n	80012de <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <parse_number+0x1d0>)
 80012b8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012bc:	f7ff fc30 	bl	8000b20 <__aeabi_dcmple>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012cc:	615a      	str	r2, [r3, #20]
 80012ce:	e006      	b.n	80012de <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 80012d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012d4:	f7ff fc58 	bl	8000b88 <__aeabi_d2iz>
 80012d8:	4602      	mov	r2, r0
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2208      	movs	r2, #8
 80012e2:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80012ea:	f107 0208 	add.w	r2, r7, #8
 80012ee:	1a8a      	subs	r2, r1, r2
 80012f0:	441a      	add	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	609a      	str	r2, [r3, #8]
    return true;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3760      	adds	r7, #96	; 0x60
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	c1e00000 	.word	0xc1e00000
 8001304:	ffc00000 	.word	0xffc00000
 8001308:	41dfffff 	.word	0x41dfffff

0800130c <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	e04c      	b.n	80013bc <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b2f      	cmp	r3, #47	; 0x2f
 800132c:	d90f      	bls.n	800134e <parse_hex4+0x42>
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b39      	cmp	r3, #57	; 0x39
 8001338:	d809      	bhi.n	800134e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	3b30      	subs	r3, #48	; 0x30
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e02d      	b.n	80013aa <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b40      	cmp	r3, #64	; 0x40
 8001358:	d90f      	bls.n	800137a <parse_hex4+0x6e>
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b46      	cmp	r3, #70	; 0x46
 8001364:	d809      	bhi.n	800137a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	3b37      	subs	r3, #55	; 0x37
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e017      	b.n	80013aa <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4413      	add	r3, r2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b60      	cmp	r3, #96	; 0x60
 8001384:	d90f      	bls.n	80013a6 <parse_hex4+0x9a>
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b66      	cmp	r3, #102	; 0x66
 8001390:	d809      	bhi.n	80013a6 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4413      	add	r3, r2
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	3b57      	subs	r3, #87	; 0x57
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e001      	b.n	80013aa <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e00c      	b.n	80013c4 <parse_hex4+0xb8>
        }

        if (i < 3)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d802      	bhi.n	80013b6 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d9af      	bls.n	8001322 <parse_hex4+0x16>
        }
    }

    return h;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b05      	cmp	r3, #5
 8001408:	f340 80b7 	ble.w	800157a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	3302      	adds	r3, #2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff7b 	bl	800130c <parse_hex4>
 8001416:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800141e:	d304      	bcc.n	800142a <utf16_literal_to_utf8+0x5a>
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001426:	f0c0 80aa 	bcc.w	800157e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001430:	d337      	bcc.n	80014a2 <utf16_literal_to_utf8+0xd2>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001438:	d233      	bcs.n	80014a2 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	3306      	adds	r3, #6
 800143e:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001444:	230c      	movs	r3, #12
 8001446:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b05      	cmp	r3, #5
 8001452:	f340 8096 	ble.w	8001582 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b5c      	cmp	r3, #92	; 0x5c
 800145c:	f040 8093 	bne.w	8001586 <utf16_literal_to_utf8+0x1b6>
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b75      	cmp	r3, #117	; 0x75
 8001468:	f040 808d 	bne.w	8001586 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3302      	adds	r3, #2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff4b 	bl	800130c <parse_hex4>
 8001476:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800147e:	f0c0 8084 	bcc.w	800158a <utf16_literal_to_utf8+0x1ba>
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001488:	d27f      	bcs.n	800158a <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	029a      	lsls	r2, r3, #10
 800148e:	4b43      	ldr	r3, [pc, #268]	; (800159c <utf16_literal_to_utf8+0x1cc>)
 8001490:	4013      	ands	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001498:	4313      	orrs	r3, r2
 800149a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80014a0:	e004      	b.n	80014ac <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80014a2:	2306      	movs	r3, #6
 80014a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	2b7f      	cmp	r3, #127	; 0x7f
 80014b0:	d803      	bhi.n	80014ba <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80014b8:	e01f      	b.n	80014fa <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014c0:	d206      	bcs.n	80014d0 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80014c8:	23c0      	movs	r3, #192	; 0xc0
 80014ca:	f887 3020 	strb.w	r3, [r7, #32]
 80014ce:	e014      	b.n	80014fa <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d6:	d206      	bcs.n	80014e6 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80014d8:	2303      	movs	r3, #3
 80014da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80014de:	23e0      	movs	r3, #224	; 0xe0
 80014e0:	f887 3020 	strb.w	r3, [r7, #32]
 80014e4:	e009      	b.n	80014fa <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80014ec:	d24f      	bcs.n	800158e <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80014ee:	2304      	movs	r3, #4
 80014f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80014f4:	23f0      	movs	r3, #240	; 0xf0
 80014f6:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014fe:	3b01      	subs	r3, #1
 8001500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001504:	e015      	b.n	8001532 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800150e:	b2da      	uxtb	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6819      	ldr	r1, [r3, #0]
 8001514:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001518:	440b      	add	r3, r1
 800151a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001528:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800152c:	3b01      	subs	r3, #1
 800152e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001532:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1e5      	bne.n	8001506 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800153a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800153e:	2b01      	cmp	r3, #1
 8001540:	d909      	bls.n	8001556 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800154e:	430a      	orrs	r2, r1
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e007      	b.n	8001566 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	b2da      	uxtb	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800156e:	441a      	add	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001574:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001578:	e00b      	b.n	8001592 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800157a:	bf00      	nop
 800157c:	e008      	b.n	8001590 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800157e:	bf00      	nop
 8001580:	e006      	b.n	8001590 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001582:	bf00      	nop
 8001584:	e004      	b.n	8001590 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001586:	bf00      	nop
 8001588:	e002      	b.n	8001590 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800158a:	bf00      	nop
 800158c:	e000      	b.n	8001590 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800158e:	bf00      	nop

fail:
    return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	000ffc00 	.word	0x000ffc00

080015a0 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	3301      	adds	r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b22      	cmp	r3, #34	; 0x22
 80015dc:	f040 8102 	bne.w	80017e4 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015e8:	e017      	b.n	800161a <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b5c      	cmp	r3, #92	; 0x5c
 80015f0:	d110      	bne.n	8001614 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	f080 80f0 	bcs.w	80017e8 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	3301      	adds	r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
                input_end++;
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	3301      	adds	r3, #1
 8001612:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	3301      	adds	r3, #1
 8001618:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a3a      	ldr	r2, [r7, #32]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	461a      	mov	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	d203      	bcs.n	8001634 <parse_string+0x94>
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b22      	cmp	r3, #34	; 0x22
 8001632:	d1da      	bne.n	80015ea <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6a3a      	ldr	r2, [r7, #32]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	461a      	mov	r2, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	f080 80d2 	bcs.w	80017ec <parse_string+0x24c>
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b22      	cmp	r3, #34	; 0x22
 800164e:	f040 80cd 	bne.w	80017ec <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	4413      	add	r3, r2
 800165c:	6a3a      	ldr	r2, [r7, #32]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	461a      	mov	r2, r3
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	3201      	adds	r2, #1
 8001670:	4610      	mov	r0, r2
 8001672:	4798      	blx	r3
 8001674:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80b9 	beq.w	80017f0 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001682:	e093      	b.n	80017ac <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b5c      	cmp	r3, #92	; 0x5c
 800168a:	d008      	beq.n	800169e <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800168c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168e:	1c53      	adds	r3, r2, #1
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1c59      	adds	r1, r3, #1
 8001696:	60f9      	str	r1, [r7, #12]
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	e086      	b.n	80017ac <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800169e:	2302      	movs	r3, #2
 80016a0:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80016a2:	6a3a      	ldr	r2, [r7, #32]
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f340 80a3 	ble.w	80017f4 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	3301      	adds	r3, #1
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b75      	cmp	r3, #117	; 0x75
 80016b6:	f300 809f 	bgt.w	80017f8 <parse_string+0x258>
 80016ba:	2b5c      	cmp	r3, #92	; 0x5c
 80016bc:	da04      	bge.n	80016c8 <parse_string+0x128>
 80016be:	2b22      	cmp	r3, #34	; 0x22
 80016c0:	d05c      	beq.n	800177c <parse_string+0x1dc>
 80016c2:	2b2f      	cmp	r3, #47	; 0x2f
 80016c4:	d05a      	beq.n	800177c <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 80016c6:	e097      	b.n	80017f8 <parse_string+0x258>
            switch (input_pointer[1])
 80016c8:	3b5c      	subs	r3, #92	; 0x5c
 80016ca:	2b19      	cmp	r3, #25
 80016cc:	f200 8094 	bhi.w	80017f8 <parse_string+0x258>
 80016d0:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <parse_string+0x138>)
 80016d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d6:	bf00      	nop
 80016d8:	0800177d 	.word	0x0800177d
 80016dc:	080017f9 	.word	0x080017f9
 80016e0:	080017f9 	.word	0x080017f9
 80016e4:	080017f9 	.word	0x080017f9
 80016e8:	080017f9 	.word	0x080017f9
 80016ec:	080017f9 	.word	0x080017f9
 80016f0:	08001741 	.word	0x08001741
 80016f4:	080017f9 	.word	0x080017f9
 80016f8:	080017f9 	.word	0x080017f9
 80016fc:	080017f9 	.word	0x080017f9
 8001700:	0800174d 	.word	0x0800174d
 8001704:	080017f9 	.word	0x080017f9
 8001708:	080017f9 	.word	0x080017f9
 800170c:	080017f9 	.word	0x080017f9
 8001710:	080017f9 	.word	0x080017f9
 8001714:	080017f9 	.word	0x080017f9
 8001718:	080017f9 	.word	0x080017f9
 800171c:	080017f9 	.word	0x080017f9
 8001720:	08001759 	.word	0x08001759
 8001724:	080017f9 	.word	0x080017f9
 8001728:	080017f9 	.word	0x080017f9
 800172c:	080017f9 	.word	0x080017f9
 8001730:	08001765 	.word	0x08001765
 8001734:	080017f9 	.word	0x080017f9
 8001738:	08001771 	.word	0x08001771
 800173c:	0800178b 	.word	0x0800178b
                    *output_pointer++ = '\b';
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	60fa      	str	r2, [r7, #12]
 8001746:	2208      	movs	r2, #8
 8001748:	701a      	strb	r2, [r3, #0]
                    break;
 800174a:	e02b      	b.n	80017a4 <parse_string+0x204>
                    *output_pointer++ = '\f';
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	60fa      	str	r2, [r7, #12]
 8001752:	220c      	movs	r2, #12
 8001754:	701a      	strb	r2, [r3, #0]
                    break;
 8001756:	e025      	b.n	80017a4 <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60fa      	str	r2, [r7, #12]
 800175e:	220a      	movs	r2, #10
 8001760:	701a      	strb	r2, [r3, #0]
                    break;
 8001762:	e01f      	b.n	80017a4 <parse_string+0x204>
                    *output_pointer++ = '\r';
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60fa      	str	r2, [r7, #12]
 800176a:	220d      	movs	r2, #13
 800176c:	701a      	strb	r2, [r3, #0]
                    break;
 800176e:	e019      	b.n	80017a4 <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	60fa      	str	r2, [r7, #12]
 8001776:	2209      	movs	r2, #9
 8001778:	701a      	strb	r2, [r3, #0]
                    break;
 800177a:	e013      	b.n	80017a4 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60fa      	str	r2, [r7, #12]
 8001782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001784:	7852      	ldrb	r2, [r2, #1]
 8001786:	701a      	strb	r2, [r3, #0]
                    break;
 8001788:	e00c      	b.n	80017a4 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	461a      	mov	r2, r3
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001794:	f7ff fe1c 	bl	80013d0 <utf16_literal_to_utf8>
 8001798:	4603      	mov	r3, r0
 800179a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d02c      	beq.n	80017fc <parse_string+0x25c>
                    break;
 80017a2:	bf00      	nop
            }
            input_pointer += sequence_length;
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a8:	4413      	add	r3, r2
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80017ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	f4ff af67 	bcc.w	8001684 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2210      	movs	r2, #16
 80017c0:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	609a      	str	r2, [r3, #8]

    return true;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01e      	b.n	8001822 <parse_string+0x282>
        goto fail;
 80017e4:	bf00      	nop
 80017e6:	e00a      	b.n	80017fe <parse_string+0x25e>
                    goto fail;
 80017e8:	bf00      	nop
 80017ea:	e008      	b.n	80017fe <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 80017ec:	bf00      	nop
 80017ee:	e006      	b.n	80017fe <parse_string+0x25e>
            goto fail; /* allocation failure */
 80017f0:	bf00      	nop
 80017f2:	e004      	b.n	80017fe <parse_string+0x25e>
                goto fail;
 80017f4:	bf00      	nop
 80017f6:	e002      	b.n	80017fe <parse_string+0x25e>
                    goto fail;
 80017f8:	bf00      	nop
 80017fa:	e000      	b.n	80017fe <parse_string+0x25e>
                        goto fail;
 80017fc:	bf00      	nop

fail:
    if (output != NULL)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	69f8      	ldr	r0, [r7, #28]
 800180a:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	461a      	mov	r2, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3728      	adds	r7, #40	; 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop

0800182c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <buffer_skip_whitespace+0x16>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001842:	2300      	movs	r3, #0
 8001844:	e02c      	b.n	80018a0 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <buffer_skip_whitespace+0x2c>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	d306      	bcc.n	8001866 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	e021      	b.n	80018a0 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00d      	beq.n	8001888 <buffer_skip_whitespace+0x5c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <buffer_skip_whitespace+0x5c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b20      	cmp	r3, #32
 8001886:	d9e9      	bls.n	800185c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	d104      	bne.n	800189e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	1e5a      	subs	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800189e:	687b      	ldr	r3, [r7, #4]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <skip_utf8_bom+0x1e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <skip_utf8_bom+0x1e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <skip_utf8_bom+0x22>
    {
        return NULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e01c      	b.n	8001908 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d018      	beq.n	8001906 <skip_utf8_bom+0x5a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	1d1a      	adds	r2, r3, #4
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d211      	bcs.n	8001906 <skip_utf8_bom+0x5a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4413      	add	r3, r2
 80018ec:	2203      	movs	r2, #3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <skip_utf8_bom+0x64>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f008 f959 	bl	8009ba8 <strncmp>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d104      	bne.n	8001906 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	1cda      	adds	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	0800d2e0 	.word	0x0800d2e0

08001914 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001926:	2300      	movs	r3, #0
 8001928:	e00c      	b.n	8001944 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7fe fc62 	bl	80001f4 <strlen>
 8001930:	4603      	mov	r3, r0
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	6979      	ldr	r1, [r7, #20]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f805 	bl	800194c <cJSON_ParseWithLengthOpts>
 8001942:	4603      	mov	r3, r0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800195a:	f107 0318 	add.w	r3, r7, #24
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800196e:	2300      	movs	r3, #0
 8001970:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <cJSON_ParseWithLengthOpts+0x12c>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <cJSON_ParseWithLengthOpts+0x12c>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d042      	beq.n	8001a0a <cJSON_ParseWithLengthOpts+0xbe>
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03f      	beq.n	8001a0a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001996:	4a39      	ldr	r2, [pc, #228]	; (8001a7c <cJSON_ParseWithLengthOpts+0x130>)
 8001998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199c:	ca07      	ldmia	r2, {r0, r1, r2}
 800199e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80019a2:	4836      	ldr	r0, [pc, #216]	; (8001a7c <cJSON_ParseWithLengthOpts+0x130>)
 80019a4:	f7ff fb5c 	bl	8001060 <cJSON_New_Item>
 80019a8:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80019aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d02e      	beq.n	8001a0e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff79 	bl	80018ac <skip_utf8_bom>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff35 	bl	800182c <buffer_skip_whitespace>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4619      	mov	r1, r3
 80019c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019c8:	f000 f868 	bl	8001a9c <parse_value>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01f      	beq.n	8001a12 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00e      	beq.n	80019f6 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80019d8:	f107 0318 	add.w	r3, r7, #24
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff25 	bl	800182c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80019e2:	6a3a      	ldr	r2, [r7, #32]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d215      	bcs.n	8001a16 <cJSON_ParseWithLengthOpts+0xca>
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10f      	bne.n	8001a16 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	441a      	add	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a08:	e031      	b.n	8001a6e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001a0a:	bf00      	nop
 8001a0c:	e004      	b.n	8001a18 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a0e:	bf00      	nop
 8001a10:	e002      	b.n	8001a18 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a12:	bf00      	nop
 8001a14:	e000      	b.n	8001a18 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001a16:	bf00      	nop

fail:
    if (item != NULL)
 8001a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a20:	f7ff fb34 	bl	800108c <cJSON_Delete>
    }

    if (value != NULL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d020      	beq.n	8001a6c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a32:	6a3a      	ldr	r2, [r7, #32]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d202      	bcs.n	8001a40 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e005      	b.n	8001a4c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d004      	beq.n	8001a5c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	441a      	add	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <cJSON_ParseWithLengthOpts+0x12c>)
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a68:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3738      	adds	r7, #56	; 0x38
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200004ec 	.word	0x200004ec
 8001a7c:	20000000 	.word	0x20000000

08001a80 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff41 	bl	8001914 <cJSON_ParseWithOpts>
 8001a92:	4603      	mov	r3, r0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <parse_value+0x18>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <parse_value+0x1c>
    {
        return false; /* no input */
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e0d2      	b.n	8001c5e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01d      	beq.n	8001afa <parse_value+0x5e>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	1d1a      	adds	r2, r3, #4
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d816      	bhi.n	8001afa <parse_value+0x5e>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	4963      	ldr	r1, [pc, #396]	; (8001c68 <parse_value+0x1cc>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f008 f864 	bl	8009ba8 <strncmp>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	1d1a      	adds	r2, r3, #4
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	609a      	str	r2, [r3, #8]
        return true;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0b1      	b.n	8001c5e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01d      	beq.n	8001b3c <parse_value+0xa0>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	1d5a      	adds	r2, r3, #5
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d816      	bhi.n	8001b3c <parse_value+0xa0>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	4413      	add	r3, r2
 8001b18:	2205      	movs	r2, #5
 8001b1a:	4954      	ldr	r1, [pc, #336]	; (8001c6c <parse_value+0x1d0>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f008 f843 	bl	8009ba8 <strncmp>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	1d5a      	adds	r2, r3, #5
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	609a      	str	r2, [r3, #8]
        return true;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e090      	b.n	8001c5e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d020      	beq.n	8001b84 <parse_value+0xe8>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	1d1a      	adds	r2, r3, #4
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d819      	bhi.n	8001b84 <parse_value+0xe8>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4413      	add	r3, r2
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	4944      	ldr	r1, [pc, #272]	; (8001c70 <parse_value+0x1d4>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f008 f822 	bl	8009ba8 <strncmp>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	1d1a      	adds	r2, r3, #4
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	609a      	str	r2, [r3, #8]
        return true;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e06c      	b.n	8001c5e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d013      	beq.n	8001bb2 <parse_value+0x116>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d20d      	bcs.n	8001bb2 <parse_value+0x116>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b22      	cmp	r3, #34	; 0x22
 8001ba4:	d105      	bne.n	8001bb2 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001ba6:	6839      	ldr	r1, [r7, #0]
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fcf9 	bl	80015a0 <parse_string>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	e055      	b.n	8001c5e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d023      	beq.n	8001c00 <parse_value+0x164>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d21d      	bcs.n	8001c00 <parse_value+0x164>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4413      	add	r3, r2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b2d      	cmp	r3, #45	; 0x2d
 8001bd2:	d00f      	beq.n	8001bf4 <parse_value+0x158>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b2f      	cmp	r3, #47	; 0x2f
 8001be2:	d90d      	bls.n	8001c00 <parse_value+0x164>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b39      	cmp	r3, #57	; 0x39
 8001bf2:	d805      	bhi.n	8001c00 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fa9a 	bl	8001130 <parse_number>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	e02e      	b.n	8001c5e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d013      	beq.n	8001c2e <parse_value+0x192>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d20d      	bcs.n	8001c2e <parse_value+0x192>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b5b      	cmp	r3, #91	; 0x5b
 8001c20:	d105      	bne.n	8001c2e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f825 	bl	8001c74 <parse_array>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	e017      	b.n	8001c5e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <parse_value+0x1c0>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d20d      	bcs.n	8001c5c <parse_value+0x1c0>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4413      	add	r3, r2
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b7b      	cmp	r3, #123	; 0x7b
 8001c4e:	d105      	bne.n	8001c5c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001c50:	6839      	ldr	r1, [r7, #0]
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8d2 	bl	8001dfc <parse_object>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	e000      	b.n	8001c5e <parse_value+0x1c2>
    }

    return false;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	0800d2b4 	.word	0x0800d2b4
 8001c6c:	0800d2e4 	.word	0x0800d2e4
 8001c70:	0800d2ec 	.word	0x0800d2ec

08001c74 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c8e:	d301      	bcc.n	8001c94 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001c90:	2300      	movs	r3, #0
 8001c92:	e0af      	b.n	8001df4 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b5b      	cmp	r3, #91	; 0x5b
 8001cac:	f040 8094 	bne.w	8001dd8 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001cba:	6838      	ldr	r0, [r7, #0]
 8001cbc:	f7ff fdb6 	bl	800182c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00d      	beq.n	8001ce2 <parse_array+0x6e>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d207      	bcs.n	8001ce2 <parse_array+0x6e>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b5d      	cmp	r3, #93	; 0x5d
 8001ce0:	d061      	beq.n	8001da6 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <parse_array+0x80>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d305      	bcc.n	8001d00 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	1e5a      	subs	r2, r3, #1
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	609a      	str	r2, [r3, #8]
        goto fail;
 8001cfe:	e072      	b.n	8001de6 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f9a6 	bl	8001060 <cJSON_New_Item>
 8001d14:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d05f      	beq.n	8001ddc <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d104      	bne.n	8001d2c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	e007      	b.n	8001d3c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f7ff fd70 	bl	800182c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001d4c:	6839      	ldr	r1, [r7, #0]
 8001d4e:	6938      	ldr	r0, [r7, #16]
 8001d50:	f7ff fea4 	bl	8001a9c <parse_value>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d042      	beq.n	8001de0 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001d5a:	6838      	ldr	r0, [r7, #0]
 8001d5c:	f7ff fd66 	bl	800182c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00d      	beq.n	8001d82 <parse_array+0x10e>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d207      	bcs.n	8001d82 <parse_array+0x10e>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b2c      	cmp	r3, #44	; 0x2c
 8001d80:	d0c3      	beq.n	8001d0a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d02d      	beq.n	8001de4 <parse_array+0x170>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d227      	bcs.n	8001de4 <parse_array+0x170>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b5d      	cmp	r3, #93	; 0x5d
 8001da2:	d11f      	bne.n	8001de4 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001da4:	e000      	b.n	8001da8 <parse_array+0x134>
        goto success;
 8001da6:	bf00      	nop
    input_buffer->depth--;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <parse_array+0x14a>
        head->prev = current_item;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	609a      	str	r2, [r3, #8]

    return true;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e00d      	b.n	8001df4 <parse_array+0x180>
        goto fail;
 8001dd8:	bf00      	nop
 8001dda:	e004      	b.n	8001de6 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001ddc:	bf00      	nop
 8001dde:	e002      	b.n	8001de6 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001de0:	bf00      	nop
 8001de2:	e000      	b.n	8001de6 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001de4:	bf00      	nop

fail:
    if (head != NULL)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001dec:	6978      	ldr	r0, [r7, #20]
 8001dee:	f7ff f94d 	bl	800108c <cJSON_Delete>
    }

    return false;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e16:	d301      	bcc.n	8001e1c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e0ea      	b.n	8001ff2 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80d0 	beq.w	8001fce <parse_object+0x1d2>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	f080 80c9 	bcs.w	8001fce <parse_object+0x1d2>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b7b      	cmp	r3, #123	; 0x7b
 8001e4a:	f040 80c0 	bne.w	8001fce <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e58:	6838      	ldr	r0, [r7, #0]
 8001e5a:	f7ff fce7 	bl	800182c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00e      	beq.n	8001e82 <parse_object+0x86>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d208      	bcs.n	8001e82 <parse_object+0x86>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b7d      	cmp	r3, #125	; 0x7d
 8001e7e:	f000 808d 	beq.w	8001f9c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <parse_object+0x98>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d305      	bcc.n	8001ea0 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e9e:	e0a1      	b.n	8001fe4 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	1e5a      	subs	r2, r3, #1
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	3310      	adds	r3, #16
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f8d6 	bl	8001060 <cJSON_New_Item>
 8001eb4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 808a 	beq.w	8001fd2 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d104      	bne.n	8001ece <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e007      	b.n	8001ede <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ee8:	6838      	ldr	r0, [r7, #0]
 8001eea:	f7ff fc9f 	bl	800182c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001eee:	6839      	ldr	r1, [r7, #0]
 8001ef0:	6938      	ldr	r0, [r7, #16]
 8001ef2:	f7ff fb55 	bl	80015a0 <parse_string>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d06c      	beq.n	8001fd6 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001efc:	6838      	ldr	r0, [r7, #0]
 8001efe:	f7ff fc95 	bl	800182c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d061      	beq.n	8001fda <parse_object+0x1de>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d25b      	bcs.n	8001fda <parse_object+0x1de>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b3a      	cmp	r3, #58	; 0x3a
 8001f30:	d153      	bne.n	8001fda <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f3c:	6838      	ldr	r0, [r7, #0]
 8001f3e:	f7ff fc75 	bl	800182c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	6938      	ldr	r0, [r7, #16]
 8001f46:	f7ff fda9 	bl	8001a9c <parse_value>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d046      	beq.n	8001fde <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001f50:	6838      	ldr	r0, [r7, #0]
 8001f52:	f7ff fc6b 	bl	800182c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00d      	beq.n	8001f78 <parse_object+0x17c>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <parse_object+0x17c>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b2c      	cmp	r3, #44	; 0x2c
 8001f76:	d098      	beq.n	8001eaa <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d031      	beq.n	8001fe2 <parse_object+0x1e6>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d22b      	bcs.n	8001fe2 <parse_object+0x1e6>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b7d      	cmp	r3, #125	; 0x7d
 8001f98:	d123      	bne.n	8001fe2 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001f9a:	e000      	b.n	8001f9e <parse_object+0x1a2>
        goto success; /* empty object */
 8001f9c:	bf00      	nop
    input_buffer->depth--;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	1e5a      	subs	r2, r3, #1
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <parse_object+0x1b8>
        head->prev = current_item;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	609a      	str	r2, [r3, #8]
    return true;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e011      	b.n	8001ff2 <parse_object+0x1f6>
        goto fail; /* not an object */
 8001fce:	bf00      	nop
 8001fd0:	e008      	b.n	8001fe4 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001fd2:	bf00      	nop
 8001fd4:	e006      	b.n	8001fe4 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001fd6:	bf00      	nop
 8001fd8:	e004      	b.n	8001fe4 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001fda:	bf00      	nop
 8001fdc:	e002      	b.n	8001fe4 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001fde:	bf00      	nop
 8001fe0:	e000      	b.n	8001fe4 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001fe2:	bf00      	nop

fail:
    if (head != NULL)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff f84e 	bl	800108c <cJSON_Delete>
    }

    return false;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <get_object_item+0x1c>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <get_object_item+0x20>
    {
        return NULL;
 8002016:	2300      	movs	r3, #0
 8002018:	e033      	b.n	8002082 <get_object_item+0x88>
    }

    current_element = object->child;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d017      	beq.n	8002056 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002026:	e002      	b.n	800202e <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01c      	beq.n	800206e <get_object_item+0x74>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d018      	beq.n	800206e <get_object_item+0x74>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4619      	mov	r1, r3
 8002042:	68b8      	ldr	r0, [r7, #8]
 8002044:	f7fe f8cc 	bl	80001e0 <strcmp>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ec      	bne.n	8002028 <get_object_item+0x2e>
 800204e:	e00e      	b.n	800206e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <get_object_item+0x74>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4619      	mov	r1, r3
 8002062:	68b8      	ldr	r0, [r7, #8]
 8002064:	f7fe ff90 	bl	8000f88 <case_insensitive_strcmp>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <get_object_item+0x82>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <get_object_item+0x86>
        return NULL;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <get_object_item+0x88>
    }

    return current_element;
 8002080:	697b      	ldr	r3, [r7, #20]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002094:	2201      	movs	r2, #1
 8002096:	6839      	ldr	r1, [r7, #0]
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ffae 	bl	8001ffa <get_object_item>
 800209e:	4603      	mov	r3, r0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <lecturaPonteciometroSetAlarma>:
	}else{
		llamadas++;
	}
}

void lecturaPonteciometroSetAlarma(void){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0

	sConfig.Channel = ADC_CHANNEL_4;
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <lecturaPonteciometroSetAlarma+0x120>)
 80020b0:	2204      	movs	r2, #4
 80020b2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80020b4:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <lecturaPonteciometroSetAlarma+0x120>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020ba:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <lecturaPonteciometroSetAlarma+0x120>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c0:	4941      	ldr	r1, [pc, #260]	; (80021c8 <lecturaPonteciometroSetAlarma+0x120>)
 80020c2:	4842      	ldr	r0, [pc, #264]	; (80021cc <lecturaPonteciometroSetAlarma+0x124>)
 80020c4:	f001 ffca 	bl	800405c <HAL_ADC_ConfigChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <lecturaPonteciometroSetAlarma+0x2a>
	{
		Error_Handler();
 80020ce:	f000 fc3b 	bl	8002948 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 80020d2:	483e      	ldr	r0, [pc, #248]	; (80021cc <lecturaPonteciometroSetAlarma+0x124>)
 80020d4:	f001 fe42 	bl	8003d5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,10000);
 80020d8:	f242 7110 	movw	r1, #10000	; 0x2710
 80020dc:	483b      	ldr	r0, [pc, #236]	; (80021cc <lecturaPonteciometroSetAlarma+0x124>)
 80020de:	f001 ff24 	bl	8003f2a <HAL_ADC_PollForConversion>
	valor=HAL_ADC_GetValue(&hadc1);
 80020e2:	483a      	ldr	r0, [pc, #232]	; (80021cc <lecturaPonteciometroSetAlarma+0x124>)
 80020e4:	f001 ffac 	bl	8004040 <HAL_ADC_GetValue>
 80020e8:	ee07 0a90 	vmov	s15, r0
 80020ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f0:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <lecturaPonteciometroSetAlarma+0x128>)
 80020f2:	edc3 7a00 	vstr	s15, [r3]
	luzSalto = (valor/(float)4100)*100;
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <lecturaPonteciometroSetAlarma+0x128>)
 80020f8:	ed93 7a00 	vldr	s14, [r3]
 80020fc:	eddf 6a35 	vldr	s13, [pc, #212]	; 80021d4 <lecturaPonteciometroSetAlarma+0x12c>
 8002100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002104:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80021d8 <lecturaPonteciometroSetAlarma+0x130>
 8002108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <lecturaPonteciometroSetAlarma+0x134>)
 800210e:	edc3 7a00 	vstr	s15, [r3]
	tempSalto = 25 + (valor/(float)4100)*5;
 8002112:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <lecturaPonteciometroSetAlarma+0x128>)
 8002114:	ed93 7a00 	vldr	s14, [r3]
 8002118:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80021d4 <lecturaPonteciometroSetAlarma+0x12c>
 800211c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002120:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002128:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800212c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <lecturaPonteciometroSetAlarma+0x138>)
 8002132:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8002136:	4825      	ldr	r0, [pc, #148]	; (80021cc <lecturaPonteciometroSetAlarma+0x124>)
 8002138:	f001 fec4 	bl	8003ec4 <HAL_ADC_Stop>

		if(valor>20){
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <lecturaPonteciometroSetAlarma+0x128>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214e:	dd0d      	ble.n	800216c <lecturaPonteciometroSetAlarma+0xc4>
			led_level_buzzer=valor/500;
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <lecturaPonteciometroSetAlarma+0x128>)
 8002152:	ed93 7a00 	vldr	s14, [r3]
 8002156:	eddf 6a23 	vldr	s13, [pc, #140]	; 80021e4 <lecturaPonteciometroSetAlarma+0x13c>
 800215a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002162:	ee17 2a90 	vmov	r2, s15
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <lecturaPonteciometroSetAlarma+0x140>)
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e003      	b.n	8002174 <lecturaPonteciometroSetAlarma+0xcc>
		}else{
			led_level_buzzer=-1;
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <lecturaPonteciometroSetAlarma+0x140>)
 800216e:	f04f 32ff 	mov.w	r2, #4294967295
 8002172:	601a      	str	r2, [r3, #0]
		}
		if (led_level_buzzer>7){
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <lecturaPonteciometroSetAlarma+0x140>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b07      	cmp	r3, #7
 800217a:	dd02      	ble.n	8002182 <lecturaPonteciometroSetAlarma+0xda>
			led_level_buzzer=7;
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <lecturaPonteciometroSetAlarma+0x140>)
 800217e:	2207      	movs	r2, #7
 8002180:	601a      	str	r2, [r3, #0]
		}
		for(int i = 0 ;i<8;i++){
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	e016      	b.n	80021b6 <lecturaPonteciometroSetAlarma+0x10e>
		if (led_level_buzzer>=0 && led_level_buzzer>=i){
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <lecturaPonteciometroSetAlarma+0x140>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <lecturaPonteciometroSetAlarma+0xfe>
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <lecturaPonteciometroSetAlarma+0x140>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	dc05      	bgt.n	80021a6 <lecturaPonteciometroSetAlarma+0xfe>
			ledsEncendidos[i]= 1;
 800219a:	4a14      	ldr	r2, [pc, #80]	; (80021ec <lecturaPonteciometroSetAlarma+0x144>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2101      	movs	r1, #1
 80021a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80021a4:	e004      	b.n	80021b0 <lecturaPonteciometroSetAlarma+0x108>
		}else{
			ledsEncendidos[i]= 0;
 80021a6:	4a11      	ldr	r2, [pc, #68]	; (80021ec <lecturaPonteciometroSetAlarma+0x144>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2100      	movs	r1, #0
 80021ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0 ;i<8;i++){
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3301      	adds	r3, #1
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b07      	cmp	r3, #7
 80021ba:	dde5      	ble.n	8002188 <lecturaPonteciometroSetAlarma+0xe0>
		}
	}
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000051c 	.word	0x2000051c
 80021cc:	200007a4 	.word	0x200007a4
 80021d0:	2000054c 	.word	0x2000054c
 80021d4:	45802000 	.word	0x45802000
 80021d8:	42c80000 	.word	0x42c80000
 80021dc:	20000544 	.word	0x20000544
 80021e0:	20000548 	.word	0x20000548
 80021e4:	43fa0000 	.word	0x43fa0000
 80021e8:	20000514 	.word	0x20000514
 80021ec:	200004f4 	.word	0x200004f4

080021f0 <ldrReadAndmodify>:

void ldrReadAndmodify(void){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0

	sConfig.Channel = ADC_CHANNEL_0;
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <ldrReadAndmodify+0x10c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80021fc:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <ldrReadAndmodify+0x10c>)
 80021fe:	2201      	movs	r2, #1
 8002200:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <ldrReadAndmodify+0x10c>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002208:	493c      	ldr	r1, [pc, #240]	; (80022fc <ldrReadAndmodify+0x10c>)
 800220a:	483d      	ldr	r0, [pc, #244]	; (8002300 <ldrReadAndmodify+0x110>)
 800220c:	f001 ff26 	bl	800405c <HAL_ADC_ConfigChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <ldrReadAndmodify+0x2a>
	{
		Error_Handler();
 8002216:	f000 fb97 	bl	8002948 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 800221a:	4839      	ldr	r0, [pc, #228]	; (8002300 <ldrReadAndmodify+0x110>)
 800221c:	f001 fd9e 	bl	8003d5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,10000);
 8002220:	f242 7110 	movw	r1, #10000	; 0x2710
 8002224:	4836      	ldr	r0, [pc, #216]	; (8002300 <ldrReadAndmodify+0x110>)
 8002226:	f001 fe80 	bl	8003f2a <HAL_ADC_PollForConversion>
	float valorL=HAL_ADC_GetValue(&hadc1);
 800222a:	4835      	ldr	r0, [pc, #212]	; (8002300 <ldrReadAndmodify+0x110>)
 800222c:	f001 ff08 	bl	8004040 <HAL_ADC_GetValue>
 8002230:	ee07 0a90 	vmov	s15, r0
 8002234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002238:	edc7 7a02 	vstr	s15, [r7, #8]
	valorReal = (1-(valorL/(float)0xfff))*100;//porcentaje de luminiscencia
 800223c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002240:	eddf 6a30 	vldr	s13, [pc, #192]	; 8002304 <ldrReadAndmodify+0x114>
 8002244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800224c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002250:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002308 <ldrReadAndmodify+0x118>
 8002254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002258:	4b2c      	ldr	r3, [pc, #176]	; (800230c <ldrReadAndmodify+0x11c>)
 800225a:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 800225e:	4828      	ldr	r0, [pc, #160]	; (8002300 <ldrReadAndmodify+0x110>)
 8002260:	f001 fe30 	bl	8003ec4 <HAL_ADC_Stop>
	float stepLDR=12.5;
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <ldrReadAndmodify+0x120>)
 8002266:	607b      	str	r3, [r7, #4]
	ultimo_led=valorReal/stepLDR;//division para calcular el ultimo led encedido
 8002268:	4b28      	ldr	r3, [pc, #160]	; (800230c <ldrReadAndmodify+0x11c>)
 800226a:	edd3 6a00 	vldr	s13, [r3]
 800226e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800227a:	ee17 2a90 	vmov	r2, s15
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <ldrReadAndmodify+0x124>)
 8002280:	601a      	str	r2, [r3, #0]

	if (valorReal>luzMax){
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <ldrReadAndmodify+0x11c>)
 8002284:	ed93 7a00 	vldr	s14, [r3]
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <ldrReadAndmodify+0x128>)
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	dd03      	ble.n	80022a0 <ldrReadAndmodify+0xb0>
		luzMax = valorReal;
 8002298:	4b1c      	ldr	r3, [pc, #112]	; (800230c <ldrReadAndmodify+0x11c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <ldrReadAndmodify+0x128>)
 800229e:	6013      	str	r3, [r2, #0]
	}
	if (valorReal<luzMin){
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <ldrReadAndmodify+0x11c>)
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <ldrReadAndmodify+0x12c>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d503      	bpl.n	80022be <ldrReadAndmodify+0xce>
		luzMin = valorReal;
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <ldrReadAndmodify+0x11c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <ldrReadAndmodify+0x12c>)
 80022bc:	6013      	str	r3, [r2, #0]
	}

	for(int i = 0 ;i<8;i++){
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e012      	b.n	80022ea <ldrReadAndmodify+0xfa>
			if ( ultimo_led>=i){
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <ldrReadAndmodify+0x124>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	dc05      	bgt.n	80022da <ldrReadAndmodify+0xea>
				ledsEncendidos[i]= 1;
 80022ce:	4a14      	ldr	r2, [pc, #80]	; (8002320 <ldrReadAndmodify+0x130>)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2101      	movs	r1, #1
 80022d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80022d8:	e004      	b.n	80022e4 <ldrReadAndmodify+0xf4>
			}else{
				ledsEncendidos[i]= 0;
 80022da:	4a11      	ldr	r2, [pc, #68]	; (8002320 <ldrReadAndmodify+0x130>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2100      	movs	r1, #0
 80022e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ;i<8;i++){
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b07      	cmp	r3, #7
 80022ee:	dde9      	ble.n	80022c4 <ldrReadAndmodify+0xd4>
			}
		}

}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000051c 	.word	0x2000051c
 8002300:	200007a4 	.word	0x200007a4
 8002304:	457ff000 	.word	0x457ff000
 8002308:	42c80000 	.word	0x42c80000
 800230c:	20000530 	.word	0x20000530
 8002310:	41480000 	.word	0x41480000
 8002314:	20000518 	.word	0x20000518
 8002318:	2000053c 	.word	0x2000053c
 800231c:	20000540 	.word	0x20000540
 8002320:	200004f4 	.word	0x200004f4

08002324 <ntcReadAndmodify>:
void ntcReadAndmodify(void){
 8002324:	b580      	push	{r7, lr}
 8002326:	ed2d 8b02 	vpush	{d8}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_1;
 800232e:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <ntcReadAndmodify+0x17c>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8002334:	4b5a      	ldr	r3, [pc, #360]	; (80024a0 <ntcReadAndmodify+0x17c>)
 8002336:	2201      	movs	r2, #1
 8002338:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800233a:	4b59      	ldr	r3, [pc, #356]	; (80024a0 <ntcReadAndmodify+0x17c>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002340:	4957      	ldr	r1, [pc, #348]	; (80024a0 <ntcReadAndmodify+0x17c>)
 8002342:	4858      	ldr	r0, [pc, #352]	; (80024a4 <ntcReadAndmodify+0x180>)
 8002344:	f001 fe8a 	bl	800405c <HAL_ADC_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <ntcReadAndmodify+0x2e>
	{
			Error_Handler();
 800234e:	f000 fafb 	bl	8002948 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8002352:	4854      	ldr	r0, [pc, #336]	; (80024a4 <ntcReadAndmodify+0x180>)
 8002354:	f001 fd02 	bl	8003d5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,10000);
 8002358:	f242 7110 	movw	r1, #10000	; 0x2710
 800235c:	4851      	ldr	r0, [pc, #324]	; (80024a4 <ntcReadAndmodify+0x180>)
 800235e:	f001 fde4 	bl	8003f2a <HAL_ADC_PollForConversion>
	float c = HAL_ADC_GetValue(&hadc1);
 8002362:	4850      	ldr	r0, [pc, #320]	; (80024a4 <ntcReadAndmodify+0x180>)
 8002364:	f001 fe6c 	bl	8004040 <HAL_ADC_GetValue>
 8002368:	ee07 0a90 	vmov	s15, r0
 800236c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002370:	edc7 7a04 	vstr	s15, [r7, #16]
	float finalVal = c/(float)0xFFF * 3.3f;
 8002374:	ed97 7a04 	vldr	s14, [r7, #16]
 8002378:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80024a8 <ntcReadAndmodify+0x184>
 800237c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002380:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80024ac <ntcReadAndmodify+0x188>
 8002384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002388:	edc7 7a03 	vstr	s15, [r7, #12]
	float resistencia = (3.3f * NTC_RDIV) / (3.3f - finalVal) - NTC_RDIV;
 800238c:	4b48      	ldr	r3, [pc, #288]	; (80024b0 <ntcReadAndmodify+0x18c>)
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80024ac <ntcReadAndmodify+0x188>
 8002396:	ee67 6a87 	vmul.f32	s13, s15, s14
 800239a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80024ac <ntcReadAndmodify+0x188>
 800239e:	edd7 7a03 	vldr	s15, [r7, #12]
 80023a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <ntcReadAndmodify+0x18c>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b4:	edc7 7a02 	vstr	s15, [r7, #8]
	temperatura = (NTC_B / (logf(resistencia / NTC_RDIV )+ NTC_B/NTC_T25)) - 273.f;
 80023b8:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <ntcReadAndmodify+0x190>)
 80023ba:	ed93 8a00 	vldr	s16, [r3]
 80023be:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <ntcReadAndmodify+0x18c>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80023c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023cc:	eeb0 0a66 	vmov.f32	s0, s13
 80023d0:	f00a fe3e 	bl	800d050 <logf>
 80023d4:	eeb0 6a40 	vmov.f32	s12, s0
 80023d8:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <ntcReadAndmodify+0x190>)
 80023da:	edd3 6a00 	vldr	s13, [r3]
 80023de:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <ntcReadAndmodify+0x194>)
 80023e0:	ed93 7a00 	vldr	s14, [r3]
 80023e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e8:	ee36 7a27 	vadd.f32	s14, s12, s15
 80023ec:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80023f0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80024bc <ntcReadAndmodify+0x198>
 80023f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <ntcReadAndmodify+0x19c>)
 80023fa:	edc3 7a00 	vstr	s15, [r3]
	float stepNTC=0.625;
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <ntcReadAndmodify+0x1a0>)
 8002400:	607b      	str	r3, [r7, #4]
	ultimo_led=(temperatura-25)/stepNTC;//division para calcular el ultimo led encedido
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <ntcReadAndmodify+0x19c>)
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800240c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002410:	ed97 7a01 	vldr	s14, [r7, #4]
 8002414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241c:	ee17 2a90 	vmov	r2, s15
 8002420:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <ntcReadAndmodify+0x1a4>)
 8002422:	601a      	str	r2, [r3, #0]
	if(tempMax<temperatura){
 8002424:	4b29      	ldr	r3, [pc, #164]	; (80024cc <ntcReadAndmodify+0x1a8>)
 8002426:	ed93 7a00 	vldr	s14, [r3]
 800242a:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <ntcReadAndmodify+0x19c>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	d503      	bpl.n	8002442 <ntcReadAndmodify+0x11e>
		tempMax=temperatura;
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <ntcReadAndmodify+0x19c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a23      	ldr	r2, [pc, #140]	; (80024cc <ntcReadAndmodify+0x1a8>)
 8002440:	6013      	str	r3, [r2, #0]
	}
	if(tempMin>temperatura){
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <ntcReadAndmodify+0x1ac>)
 8002444:	ed93 7a00 	vldr	s14, [r3]
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <ntcReadAndmodify+0x19c>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	dd03      	ble.n	8002460 <ntcReadAndmodify+0x13c>
		tempMin=temperatura;
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <ntcReadAndmodify+0x19c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <ntcReadAndmodify+0x1ac>)
 800245e:	6013      	str	r3, [r2, #0]
	}

	for(int i = 0 ;i<8;i++){
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e012      	b.n	800248c <ntcReadAndmodify+0x168>
		if ( ultimo_led>=i){
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <ntcReadAndmodify+0x1a4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	dc05      	bgt.n	800247c <ntcReadAndmodify+0x158>
			ledsEncendidos[i]= 1;
 8002470:	4a18      	ldr	r2, [pc, #96]	; (80024d4 <ntcReadAndmodify+0x1b0>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2101      	movs	r1, #1
 8002476:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800247a:	e004      	b.n	8002486 <ntcReadAndmodify+0x162>
		}else{
			ledsEncendidos[i]= 0;
 800247c:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <ntcReadAndmodify+0x1b0>)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2100      	movs	r1, #0
 8002482:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ;i<8;i++){
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b07      	cmp	r3, #7
 8002490:	dde9      	ble.n	8002466 <ntcReadAndmodify+0x142>
		}
	}


}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	ecbd 8b02 	vpop	{d8}
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2000051c 	.word	0x2000051c
 80024a4:	200007a4 	.word	0x200007a4
 80024a8:	457ff000 	.word	0x457ff000
 80024ac:	40533333 	.word	0x40533333
 80024b0:	20000014 	.word	0x20000014
 80024b4:	2000000c 	.word	0x2000000c
 80024b8:	20000010 	.word	0x20000010
 80024bc:	43888000 	.word	0x43888000
 80024c0:	2000052c 	.word	0x2000052c
 80024c4:	3f200000 	.word	0x3f200000
 80024c8:	20000518 	.word	0x20000518
 80024cc:	20000534 	.word	0x20000534
 80024d0:	20000538 	.word	0x20000538
 80024d4:	200004f4 	.word	0x200004f4

080024d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a07      	ldr	r2, [pc, #28]	; (8002504 <vApplicationGetIdleTaskMemory+0x2c>)
 80024e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <vApplicationGetIdleTaskMemory+0x30>)
 80024ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000550 	.word	0x20000550
 8002508:	200005a4 	.word	0x200005a4

0800250c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002512:	f001 fb6d 	bl	8003bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002516:	f000 f825 	bl	8002564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800251a:	f000 f969 	bl	80027f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800251e:	f000 f931 	bl	8002784 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002522:	f000 f905 	bl	8002730 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002526:	f000 f8d9 	bl	80026dc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800252a:	f000 f885 	bl	8002638 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <main+0x50>)
 8002530:	1d3c      	adds	r4, r7, #4
 8002532:	461d      	mov	r5, r3
 8002534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002538:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800253c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f004 f9ba 	bl	80068be <osThreadCreate>
 800254a:	4603      	mov	r3, r0
 800254c:	4a04      	ldr	r2, [pc, #16]	; (8002560 <main+0x54>)
 800254e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  serie_Init_FreeRTOS();
 8002550:	f000 fd22 	bl	8002f98 <serie_Init_FreeRTOS>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002554:	f004 f9ac 	bl	80068b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002558:	e7fe      	b.n	8002558 <main+0x4c>
 800255a:	bf00      	nop
 800255c:	0800d300 	.word	0x0800d300
 8002560:	20000934 	.word	0x20000934

08002564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b094      	sub	sp, #80	; 0x50
 8002568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256a:	f107 0320 	add.w	r3, r7, #32
 800256e:	2230      	movs	r2, #48	; 0x30
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f006 fcb0 	bl	8008ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <SystemClock_Config+0xcc>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	4a27      	ldr	r2, [pc, #156]	; (8002630 <SystemClock_Config+0xcc>)
 8002592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002596:	6413      	str	r3, [r2, #64]	; 0x40
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <SystemClock_Config+0xcc>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a4:	2300      	movs	r3, #0
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <SystemClock_Config+0xd0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a21      	ldr	r2, [pc, #132]	; (8002634 <SystemClock_Config+0xd0>)
 80025ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <SystemClock_Config+0xd0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025c4:	2301      	movs	r3, #1
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025c8:	2310      	movs	r3, #16
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025cc:	2302      	movs	r3, #2
 80025ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025d0:	2300      	movs	r3, #0
 80025d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80025d4:	2310      	movs	r3, #16
 80025d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80025d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80025dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80025de:	2304      	movs	r3, #4
 80025e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025e2:	2304      	movs	r3, #4
 80025e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e6:	f107 0320 	add.w	r3, r7, #32
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fdf4 	bl	80051d8 <HAL_RCC_OscConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80025f6:	f000 f9a7 	bl	8002948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025fa:	230f      	movs	r3, #15
 80025fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025fe:	2302      	movs	r3, #2
 8002600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	2102      	movs	r1, #2
 8002616:	4618      	mov	r0, r3
 8002618:	f003 f856 	bl	80056c8 <HAL_RCC_ClockConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002622:	f000 f991 	bl	8002948 <Error_Handler>
  }
}
 8002626:	bf00      	nop
 8002628:	3750      	adds	r7, #80	; 0x50
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40007000 	.word	0x40007000

08002638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800263e:	463b      	mov	r3, r7
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <MX_ADC1_Init+0x98>)
 800264c:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <MX_ADC1_Init+0x9c>)
 800264e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002656:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <MX_ADC1_Init+0x98>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002666:	2200      	movs	r2, #0
 8002668:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <MX_ADC1_Init+0x98>)
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002674:	2200      	movs	r2, #0
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_ADC1_Init+0x98>)
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <MX_ADC1_Init+0xa0>)
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002686:	2201      	movs	r2, #1
 8002688:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_ADC1_Init+0x98>)
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002694:	2201      	movs	r2, #1
 8002696:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002698:	480d      	ldr	r0, [pc, #52]	; (80026d0 <MX_ADC1_Init+0x98>)
 800269a:	f001 fb1b 	bl	8003cd4 <HAL_ADC_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80026a4:	f000 f950 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80026ac:	2301      	movs	r3, #1
 80026ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026b4:	463b      	mov	r3, r7
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_ADC1_Init+0x98>)
 80026ba:	f001 fccf 	bl	800405c <HAL_ADC_ConfigChannel>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80026c4:	f000 f940 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	200007a4 	.word	0x200007a4
 80026d4:	40012000 	.word	0x40012000
 80026d8:	0f000001 	.word	0x0f000001

080026dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_USART1_UART_Init+0x4c>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <MX_USART1_UART_Init+0x50>)
 80026e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <MX_USART1_UART_Init+0x4c>)
 80026e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_USART1_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_USART1_UART_Init+0x4c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <MX_USART1_UART_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_USART1_UART_Init+0x4c>)
 8002702:	220c      	movs	r2, #12
 8002704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <MX_USART1_UART_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_USART1_UART_Init+0x4c>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_USART1_UART_Init+0x4c>)
 8002714:	f003 f9f8 	bl	8005b08 <HAL_UART_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800271e:	f000 f913 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200007ec 	.word	0x200007ec
 800272c:	40011000 	.word	0x40011000

08002730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <MX_USART2_UART_Init+0x4c>)
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <MX_USART2_UART_Init+0x50>)
 8002738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <MX_USART2_UART_Init+0x4c>)
 800273c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_USART2_UART_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_USART2_UART_Init+0x4c>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <MX_USART2_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_USART2_UART_Init+0x4c>)
 8002756:	220c      	movs	r2, #12
 8002758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <MX_USART2_UART_Init+0x4c>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <MX_USART2_UART_Init+0x4c>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002766:	4805      	ldr	r0, [pc, #20]	; (800277c <MX_USART2_UART_Init+0x4c>)
 8002768:	f003 f9ce 	bl	8005b08 <HAL_UART_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002772:	f000 f8e9 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000830 	.word	0x20000830
 8002780:	40004400 	.word	0x40004400

08002784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_DMA_Init+0x68>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <MX_DMA_Init+0x68>)
 8002794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_DMA_Init+0x68>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <MX_DMA_Init+0x68>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a0f      	ldr	r2, [pc, #60]	; (80027ec <MX_DMA_Init+0x68>)
 80027b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <MX_DMA_Init+0x68>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2105      	movs	r1, #5
 80027c6:	2010      	movs	r0, #16
 80027c8:	f001 ff51 	bl	800466e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027cc:	2010      	movs	r0, #16
 80027ce:	f001 ff6a 	bl	80046a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2105      	movs	r1, #5
 80027d6:	203a      	movs	r0, #58	; 0x3a
 80027d8:	f001 ff49 	bl	800466e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80027dc:	203a      	movs	r0, #58	; 0x3a
 80027de:	f001 ff62 	bl	80046a6 <HAL_NVIC_EnableIRQ>

}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800

080027f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <MX_GPIO_Init+0x138>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a46      	ldr	r2, [pc, #280]	; (8002928 <MX_GPIO_Init+0x138>)
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b44      	ldr	r3, [pc, #272]	; (8002928 <MX_GPIO_Init+0x138>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <MX_GPIO_Init+0x138>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a3f      	ldr	r2, [pc, #252]	; (8002928 <MX_GPIO_Init+0x138>)
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <MX_GPIO_Init+0x138>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <MX_GPIO_Init+0x138>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a38      	ldr	r2, [pc, #224]	; (8002928 <MX_GPIO_Init+0x138>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <MX_GPIO_Init+0x138>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	4b32      	ldr	r3, [pc, #200]	; (8002928 <MX_GPIO_Init+0x138>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a31      	ldr	r2, [pc, #196]	; (8002928 <MX_GPIO_Init+0x138>)
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <MX_GPIO_Init+0x138>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);
 8002876:	2201      	movs	r2, #1
 8002878:	2120      	movs	r1, #32
 800287a:	482c      	ldr	r0, [pc, #176]	; (800292c <MX_GPIO_Init+0x13c>)
 800287c:	f002 fc92 	bl	80051a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D6_Pin|Buzzer_Pin|D3_Pin, GPIO_PIN_RESET);
 8002880:	2200      	movs	r2, #0
 8002882:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002886:	4829      	ldr	r0, [pc, #164]	; (800292c <MX_GPIO_Init+0x13c>)
 8002888:	f002 fc8c 	bl	80051a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D2_Pin|D5_Pin|D1_Pin
 800288c:	2200      	movs	r2, #0
 800288e:	f240 4139 	movw	r1, #1081	; 0x439
 8002892:	4827      	ldr	r0, [pc, #156]	; (8002930 <MX_GPIO_Init+0x140>)
 8002894:	f002 fc86 	bl	80051a4 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800289e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80028a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	4619      	mov	r1, r3
 80028ae:	4821      	ldr	r0, [pc, #132]	; (8002934 <MX_GPIO_Init+0x144>)
 80028b0:	f002 faf4 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : D8_Pin D6_Pin Buzzer_Pin D3_Pin */
  GPIO_InitStruct.Pin = D8_Pin|D6_Pin|Buzzer_Pin|D3_Pin;
 80028b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	4817      	ldr	r0, [pc, #92]	; (800292c <MX_GPIO_Init+0x13c>)
 80028ce:	f002 fae5 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin D5_Pin D1_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin|D5_Pin|D1_Pin
 80028d2:	f240 4339 	movw	r3, #1081	; 0x439
 80028d6:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d8:	2301      	movs	r3, #1
 80028da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4619      	mov	r1, r3
 80028ea:	4811      	ldr	r0, [pc, #68]	; (8002930 <MX_GPIO_Init+0x140>)
 80028ec:	f002 fad6 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulsador2_Pin */
  GPIO_InitStruct.Pin = Pulsador2_Pin;
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pulsador2_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4619      	mov	r1, r3
 8002902:	480c      	ldr	r0, [pc, #48]	; (8002934 <MX_GPIO_Init+0x144>)
 8002904:	f002 faca 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulsador1_Pin */
  GPIO_InitStruct.Pin = Pulsador1_Pin;
 8002908:	2340      	movs	r3, #64	; 0x40
 800290a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002910:	2301      	movs	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pulsador1_GPIO_Port, &GPIO_InitStruct);
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4619      	mov	r1, r3
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_GPIO_Init+0x140>)
 800291c:	f002 fabe 	bl	8004e9c <HAL_GPIO_Init>

}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40020800 	.word	0x40020800

08002938 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002940:	2001      	movs	r0, #1
 8002942:	f004 f808 	bl	8006956 <osDelay>
 8002946:	e7fb      	b.n	8002940 <StartDefaultTask+0x8>

08002948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800294c:	b672      	cpsid	i
}
 800294e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002950:	e7fe      	b.n	8002950 <Error_Handler+0x8>
	...

08002954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_MspInit+0x54>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <HAL_MspInit+0x54>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_MspInit+0x54>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_MspInit+0x54>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_MspInit+0x54>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_MspInit+0x54>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	210f      	movs	r1, #15
 8002996:	f06f 0001 	mvn.w	r0, #1
 800299a:	f001 fe68 	bl	800466e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_ADC_MspInit+0x7c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d127      	bne.n	8002a1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <HAL_ADC_MspInit+0x80>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002a06:	2313      	movs	r3, #19
 8002a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	4805      	ldr	r0, [pc, #20]	; (8002a30 <HAL_ADC_MspInit+0x84>)
 8002a1a:	f002 fa3f 	bl	8004e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3728      	adds	r7, #40	; 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40012000 	.word	0x40012000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020000 	.word	0x40020000

08002a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a60      	ldr	r2, [pc, #384]	; (8002bd4 <HAL_UART_MspInit+0x1a0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d15b      	bne.n	8002b0e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	4b5f      	ldr	r3, [pc, #380]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	4a5e      	ldr	r2, [pc, #376]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002a60:	f043 0310 	orr.w	r3, r3, #16
 8002a64:	6453      	str	r3, [r2, #68]	; 0x44
 8002a66:	4b5c      	ldr	r3, [pc, #368]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	4b58      	ldr	r3, [pc, #352]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a57      	ldr	r2, [pc, #348]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b55      	ldr	r3, [pc, #340]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a94:	2302      	movs	r3, #2
 8002a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aa0:	2307      	movs	r3, #7
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	484c      	ldr	r0, [pc, #304]	; (8002bdc <HAL_UART_MspInit+0x1a8>)
 8002aac:	f002 f9f6 	bl	8004e9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002ab2:	4a4c      	ldr	r2, [pc, #304]	; (8002be4 <HAL_UART_MspInit+0x1b0>)
 8002ab4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002ab8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002abc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002abe:	4b48      	ldr	r3, [pc, #288]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac4:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aca:	4b45      	ldr	r3, [pc, #276]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad2:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ad8:	4b41      	ldr	r3, [pc, #260]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ade:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae4:	4b3e      	ldr	r3, [pc, #248]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aea:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002af0:	483b      	ldr	r0, [pc, #236]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002af2:	f001 fdf3 	bl	80046dc <HAL_DMA_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002afc:	f7ff ff24 	bl	8002948 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a37      	ldr	r2, [pc, #220]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
 8002b06:	4a36      	ldr	r2, [pc, #216]	; (8002be0 <HAL_UART_MspInit+0x1ac>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b0c:	e05e      	b.n	8002bcc <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a35      	ldr	r2, [pc, #212]	; (8002be8 <HAL_UART_MspInit+0x1b4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d159      	bne.n	8002bcc <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	4b2e      	ldr	r3, [pc, #184]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	4a2d      	ldr	r2, [pc, #180]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b26:	6413      	str	r3, [r2, #64]	; 0x40
 8002b28:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6313      	str	r3, [r2, #48]	; 0x30
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_UART_MspInit+0x1a4>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b50:	230c      	movs	r3, #12
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b60:	2307      	movs	r3, #7
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	4619      	mov	r1, r3
 8002b6a:	481c      	ldr	r0, [pc, #112]	; (8002bdc <HAL_UART_MspInit+0x1a8>)
 8002b6c:	f002 f996 	bl	8004e9c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b70:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002b72:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_UART_MspInit+0x1bc>)
 8002b74:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002b78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002bb0:	480e      	ldr	r0, [pc, #56]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002bb2:	f001 fd93 	bl	80046dc <HAL_DMA_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002bbc:	f7ff fec4 	bl	8002948 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_UART_MspInit+0x1b8>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002bcc:	bf00      	nop
 8002bce:	3730      	adds	r7, #48	; 0x30
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40011000 	.word	0x40011000
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	20000874 	.word	0x20000874
 8002be4:	40026440 	.word	0x40026440
 8002be8:	40004400 	.word	0x40004400
 8002bec:	200008d4 	.word	0x200008d4
 8002bf0:	40026088 	.word	0x40026088

08002bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bf8:	e7fe      	b.n	8002bf8 <NMI_Handler+0x4>

08002bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bfe:	e7fe      	b.n	8002bfe <HardFault_Handler+0x4>

08002c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <MemManage_Handler+0x4>

08002c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c0a:	e7fe      	b.n	8002c0a <BusFault_Handler+0x4>

08002c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <UsageFault_Handler+0x4>

08002c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c24:	f001 f836 	bl	8003c94 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002c28:	f005 f924 	bl	8007e74 <xTaskGetSchedulerState>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d001      	beq.n	8002c36 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002c32:	f005 fd01 	bl	8008638 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <DMA1_Stream5_IRQHandler+0x10>)
 8002c42:	f001 fec1 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200008d4 	.word	0x200008d4

08002c50 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <DMA2_Stream2_IRQHandler+0x10>)
 8002c56:	f001 feb7 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000874 	.word	0x20000874

08002c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
	return 1;
 8002c68:	2301      	movs	r3, #1
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <_kill>:

int _kill(int pid, int sig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c7e:	f005 ff15 	bl	8008aac <__errno>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2216      	movs	r2, #22
 8002c86:	601a      	str	r2, [r3, #0]
	return -1;
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_exit>:

void _exit (int status)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ffe7 	bl	8002c74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ca6:	e7fe      	b.n	8002ca6 <_exit+0x12>

08002ca8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e00a      	b.n	8002cd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cba:	f3af 8000 	nop.w
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	60ba      	str	r2, [r7, #8]
 8002cc6:	b2ca      	uxtb	r2, r1
 8002cc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	dbf0      	blt.n	8002cba <_read+0x12>
	}

return len;
 8002cd8:	687b      	ldr	r3, [r7, #4]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
	return -1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <_isatty>:

int _isatty(int file)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
	return 1;
 8002d22:	2301      	movs	r3, #1
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d54:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <_sbrk+0x5c>)
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <_sbrk+0x60>)
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d60:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <_sbrk+0x64>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <_sbrk+0x68>)
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d207      	bcs.n	8002d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d7c:	f005 fe96 	bl	8008aac <__errno>
 8002d80:	4603      	mov	r3, r0
 8002d82:	220c      	movs	r2, #12
 8002d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8a:	e009      	b.n	8002da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <_sbrk+0x64>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <_sbrk+0x64>)
 8002d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20020000 	.word	0x20020000
 8002dac:	00000400 	.word	0x00000400
 8002db0:	20000998 	.word	0x20000998
 8002db4:	20005ec8 	.word	0x20005ec8

08002db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <SystemInit+0x20>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <SystemInit+0x20>)
 8002dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <Task_DMA>:
extern uint8_t buffer_DMA_1[buffer_SIZE];
extern uint8_t buffer_DMA_2[buffer_SIZE];



void Task_DMA( void *pvParameters ){
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef res;
	uint32_t nbuff;



    hdma_usart2_rx2.Instance = DMA1_Stream7;
 8002de4:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <Task_DMA+0x15c>)
 8002de6:	4a55      	ldr	r2, [pc, #340]	; (8002f3c <Task_DMA+0x160>)
 8002de8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx2.Init.Channel = DMA_CHANNEL_6;
 8002dea:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <Task_DMA+0x15c>)
 8002dec:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002df0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002df2:	4b51      	ldr	r3, [pc, #324]	; (8002f38 <Task_DMA+0x15c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df8:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <Task_DMA+0x15c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx2.Init.MemInc = DMA_MINC_ENABLE;
 8002dfe:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <Task_DMA+0x15c>)
 8002e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e04:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e06:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <Task_DMA+0x15c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e0c:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <Task_DMA+0x15c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx2.Init.Mode = DMA_NORMAL;
 8002e12:	4b49      	ldr	r3, [pc, #292]	; (8002f38 <Task_DMA+0x15c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx2.Init.Priority = DMA_PRIORITY_LOW;
 8002e18:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <Task_DMA+0x15c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e1e:	4b46      	ldr	r3, [pc, #280]	; (8002f38 <Task_DMA+0x15c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24



    if (HAL_DMA_Init(&hdma_usart2_rx2) != HAL_OK)
 8002e24:	4844      	ldr	r0, [pc, #272]	; (8002f38 <Task_DMA+0x15c>)
 8002e26:	f001 fc59 	bl	80046dc <HAL_DMA_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <Task_DMA+0x58>
    {
      Error_Handler();
 8002e30:	f7ff fd8a 	bl	8002948 <Error_Handler>
    }

	nbuff=0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
	res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE); // Para arrancar
 8002e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3c:	4940      	ldr	r1, [pc, #256]	; (8002f40 <Task_DMA+0x164>)
 8002e3e:	4841      	ldr	r0, [pc, #260]	; (8002f44 <Task_DMA+0x168>)
 8002e40:	f002 ff41 	bl	8005cc6 <HAL_UART_Receive_DMA>
 8002e44:	4603      	mov	r3, r0
 8002e46:	73fb      	strb	r3, [r7, #15]

	it=0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
	while(1){

		switch (nbuff){
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <Task_DMA+0x7e>
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d032      	beq.n	8002ebe <Task_DMA+0xe2>
 8002e58:	e066      	b.n	8002f28 <Task_DMA+0x14c>
		case 0: 	num=hdma_usart2_rx.Instance->NDTR;
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <Task_DMA+0x16c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	60bb      	str	r3, [r7, #8]
					if (num<buffer_SIZE){
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e68:	d25b      	bcs.n	8002f22 <Task_DMA+0x146>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6a:	b672      	cpsid	i
}
 8002e6c:	bf00      	nop
						__disable_irq();
						res=HAL_UART_DMAStop_PAS(&huart2);
 8002e6e:	4835      	ldr	r0, [pc, #212]	; (8002f44 <Task_DMA+0x168>)
 8002e70:	f000 fe40 	bl	8003af4 <HAL_UART_DMAStop_PAS>
 8002e74:	4603      	mov	r3, r0
 8002e76:	73fb      	strb	r3, [r7, #15]
					   __HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx2);
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <Task_DMA+0x168>)
 8002e7a:	4a2f      	ldr	r2, [pc, #188]	; (8002f38 <Task_DMA+0x15c>)
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e7e:	4b2e      	ldr	r3, [pc, #184]	; (8002f38 <Task_DMA+0x15c>)
 8002e80:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <Task_DMA+0x168>)
 8002e82:	639a      	str	r2, [r3, #56]	; 0x38
					   res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_2,buffer_SIZE);
 8002e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e88:	4930      	ldr	r1, [pc, #192]	; (8002f4c <Task_DMA+0x170>)
 8002e8a:	482e      	ldr	r0, [pc, #184]	; (8002f44 <Task_DMA+0x168>)
 8002e8c:	f002 ff1b 	bl	8005cc6 <HAL_UART_Receive_DMA>
 8002e90:	4603      	mov	r3, r0
 8002e92:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e94:	b662      	cpsie	i
}
 8002e96:	bf00      	nop
					   __enable_irq();
					   nbuff=1;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	613b      	str	r3, [r7, #16]
					   num=hdma_usart2_rx.Instance->NDTR;
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <Task_DMA+0x16c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60bb      	str	r3, [r7, #8]
					   res=buff->puts(buff_rx,buffer_DMA_1,buffer_SIZE-num);
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <Task_DMA+0x174>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <Task_DMA+0x178>)
 8002eac:	6810      	ldr	r0, [r2, #0]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8002eb4:	4922      	ldr	r1, [pc, #136]	; (8002f40 <Task_DMA+0x164>)
 8002eb6:	4798      	blx	r3
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]
					}else
						;

					break;
 8002ebc:	e031      	b.n	8002f22 <Task_DMA+0x146>
		case 1:
	    			num=hdma_usart2_rx2.Instance->NDTR;
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <Task_DMA+0x15c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	60bb      	str	r3, [r7, #8]
	    			if (num<buffer_SIZE){
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d22b      	bcs.n	8002f26 <Task_DMA+0x14a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ece:	b672      	cpsid	i
}
 8002ed0:	bf00      	nop
	    				__disable_irq();
	    				res=HAL_UART_DMAStop_PAS(&huart2);
 8002ed2:	481c      	ldr	r0, [pc, #112]	; (8002f44 <Task_DMA+0x168>)
 8002ed4:	f000 fe0e 	bl	8003af4 <HAL_UART_DMAStop_PAS>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	73fb      	strb	r3, [r7, #15]
	    				__HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <Task_DMA+0x168>)
 8002ede:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <Task_DMA+0x16c>)
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ee2:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <Task_DMA+0x16c>)
 8002ee4:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <Task_DMA+0x168>)
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
	    				res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE);
 8002ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eec:	4914      	ldr	r1, [pc, #80]	; (8002f40 <Task_DMA+0x164>)
 8002eee:	4815      	ldr	r0, [pc, #84]	; (8002f44 <Task_DMA+0x168>)
 8002ef0:	f002 fee9 	bl	8005cc6 <HAL_UART_Receive_DMA>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ef8:	b662      	cpsie	i
}
 8002efa:	bf00      	nop
	    				__enable_irq();
	    				nbuff=0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
	    				num=hdma_usart2_rx2.Instance->NDTR;
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <Task_DMA+0x15c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	60bb      	str	r3, [r7, #8]
	    				res=buff->puts(buff_rx,buffer_DMA_2,buffer_SIZE-num);
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <Task_DMA+0x174>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <Task_DMA+0x178>)
 8002f10:	6810      	ldr	r0, [r2, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8002f18:	490c      	ldr	r1, [pc, #48]	; (8002f4c <Task_DMA+0x170>)
 8002f1a:	4798      	blx	r3
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]
	    			}else
	    				;
	    			break;
 8002f20:	e001      	b.n	8002f26 <Task_DMA+0x14a>
					break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <Task_DMA+0x14c>
	    			break;
 8002f26:	bf00      	nop
		}

		it++;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
		vTaskDelay(1/portTICK_RATE_MS );
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f004 fb6e 	bl	8007610 <vTaskDelay>
		switch (nbuff){
 8002f34:	e78a      	b.n	8002e4c <Task_DMA+0x70>
 8002f36:	bf00      	nop
 8002f38:	20000938 	.word	0x20000938
 8002f3c:	400260b8 	.word	0x400260b8
 8002f40:	20001d5c 	.word	0x20001d5c
 8002f44:	20000830 	.word	0x20000830
 8002f48:	200008d4 	.word	0x200008d4
 8002f4c:	20001f5c 	.word	0x20001f5c
 8002f50:	20001d54 	.word	0x20001d54
 8002f54:	20001d58 	.word	0x20001d58

08002f58 <Task_Display>:
	}
}


void Task_Display( void *pvParameters ){
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

	uint32_t it;
	BUFF_ITEM_t car;
	HAL_StatusTypeDef res;

    it=0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
	while(1){

		buff->get(buff,&car);
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <Task_Display+0x38>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <Task_Display+0x38>)
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	f107 010a 	add.w	r1, r7, #10
 8002f72:	4610      	mov	r0, r2
 8002f74:	4798      	blx	r3
		res=HAL_UART_Transmit(& huart2,&car,1,100);
 8002f76:	f107 010a 	add.w	r1, r7, #10
 8002f7a:	2364      	movs	r3, #100	; 0x64
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4805      	ldr	r0, [pc, #20]	; (8002f94 <Task_Display+0x3c>)
 8002f80:	f002 fe0f 	bl	8005ba2 <HAL_UART_Transmit>
 8002f84:	4603      	mov	r3, r0
 8002f86:	72fb      	strb	r3, [r7, #11]
		it++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
		buff->get(buff,&car);
 8002f8e:	e7e9      	b.n	8002f64 <Task_Display+0xc>
 8002f90:	20001d54 	.word	0x20001d54
 8002f94:	20000830 	.word	0x20000830

08002f98 <serie_Init_FreeRTOS>:


extern BUFF_BUFFER_t * buff;
extern BUFF_BUFFER_t * buff_rx;

void serie_Init_FreeRTOS(void){
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af02      	add	r7, sp, #8

	BaseType_t res_task;

	//printf (PASCU_PRJ " at "__TIME__);
	fflush(0);
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f005 fe4c 	bl	8008c3c <fflush>

	buff=bufferCreat(128);
 8002fa4:	2080      	movs	r0, #128	; 0x80
 8002fa6:	f000 fc5d 	bl	8003864 <bufferCreat>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <serie_Init_FreeRTOS+0x114>)
 8002fae:	6013      	str	r3, [r2, #0]
	if (!buff) return;
 8002fb0:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <serie_Init_FreeRTOS+0x114>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d072      	beq.n	800309e <serie_Init_FreeRTOS+0x106>

	buff_rx=bufferCreat(512);
 8002fb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002fbc:	f000 fc52 	bl	8003864 <bufferCreat>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4a3b      	ldr	r2, [pc, #236]	; (80030b0 <serie_Init_FreeRTOS+0x118>)
 8002fc4:	6013      	str	r3, [r2, #0]
	if (!buff_rx) return;
 8002fc6:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <serie_Init_FreeRTOS+0x118>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d069      	beq.n	80030a2 <serie_Init_FreeRTOS+0x10a>

	res_task=xTaskCreate(Task_Display,"DISPLAY",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f000 fca2 	bl	8003918 <makeFreeRtosPriority>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2300      	movs	r3, #0
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	9200      	str	r2, [sp, #0]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe4:	4933      	ldr	r1, [pc, #204]	; (80030b4 <serie_Init_FreeRTOS+0x11c>)
 8002fe6:	4834      	ldr	r0, [pc, #208]	; (80030b8 <serie_Init_FreeRTOS+0x120>)
 8002fe8:	f004 f9db 	bl	80073a2 <xTaskCreate>
 8002fec:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d006      	beq.n	8003002 <serie_Init_FreeRTOS+0x6a>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002ff4:	4831      	ldr	r0, [pc, #196]	; (80030bc <serie_Init_FreeRTOS+0x124>)
 8002ff6:	f006 fd47 	bl	8009a88 <puts>
			fflush(NULL);
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f005 fe1e 	bl	8008c3c <fflush>
			while(1);
 8003000:	e7fe      	b.n	8003000 <serie_Init_FreeRTOS+0x68>
	}

	res_task=xTaskCreate(Task_DMA,"DMA",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8003002:	2000      	movs	r0, #0
 8003004:	f000 fc88 	bl	8003918 <makeFreeRtosPriority>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	2300      	movs	r3, #0
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	2300      	movs	r3, #0
 8003014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003018:	4929      	ldr	r1, [pc, #164]	; (80030c0 <serie_Init_FreeRTOS+0x128>)
 800301a:	482a      	ldr	r0, [pc, #168]	; (80030c4 <serie_Init_FreeRTOS+0x12c>)
 800301c:	f004 f9c1 	bl	80073a2 <xTaskCreate>
 8003020:	6078      	str	r0, [r7, #4]
		if( res_task != pdPASS ){
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d006      	beq.n	8003036 <serie_Init_FreeRTOS+0x9e>
				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8003028:	4824      	ldr	r0, [pc, #144]	; (80030bc <serie_Init_FreeRTOS+0x124>)
 800302a:	f006 fd2d 	bl	8009a88 <puts>
				fflush(NULL);
 800302e:	2000      	movs	r0, #0
 8003030:	f005 fe04 	bl	8008c3c <fflush>
				while(1);
 8003034:	e7fe      	b.n	8003034 <serie_Init_FreeRTOS+0x9c>
		}

	res_task=xTaskCreate(Task_Send,"ENVIO",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8003036:	2000      	movs	r0, #0
 8003038:	f000 fc6e 	bl	8003918 <makeFreeRtosPriority>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	2300      	movs	r3, #0
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	9200      	str	r2, [sp, #0]
 8003046:	2300      	movs	r3, #0
 8003048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800304c:	491e      	ldr	r1, [pc, #120]	; (80030c8 <serie_Init_FreeRTOS+0x130>)
 800304e:	481f      	ldr	r0, [pc, #124]	; (80030cc <serie_Init_FreeRTOS+0x134>)
 8003050:	f004 f9a7 	bl	80073a2 <xTaskCreate>
 8003054:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d006      	beq.n	800306a <serie_Init_FreeRTOS+0xd2>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 800305c:	4817      	ldr	r0, [pc, #92]	; (80030bc <serie_Init_FreeRTOS+0x124>)
 800305e:	f006 fd13 	bl	8009a88 <puts>
			fflush(NULL);
 8003062:	2000      	movs	r0, #0
 8003064:	f005 fdea 	bl	8008c3c <fflush>
			while(1);
 8003068:	e7fe      	b.n	8003068 <serie_Init_FreeRTOS+0xd0>
	}

	res_task=xTaskCreate(Task_Receive,"RECEIVE",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 800306a:	2000      	movs	r0, #0
 800306c:	f000 fc54 	bl	8003918 <makeFreeRtosPriority>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	2300      	movs	r3, #0
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	9200      	str	r2, [sp, #0]
 800307a:	2300      	movs	r3, #0
 800307c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003080:	4913      	ldr	r1, [pc, #76]	; (80030d0 <serie_Init_FreeRTOS+0x138>)
 8003082:	4814      	ldr	r0, [pc, #80]	; (80030d4 <serie_Init_FreeRTOS+0x13c>)
 8003084:	f004 f98d 	bl	80073a2 <xTaskCreate>
 8003088:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d009      	beq.n	80030a4 <serie_Init_FreeRTOS+0x10c>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8003090:	480a      	ldr	r0, [pc, #40]	; (80030bc <serie_Init_FreeRTOS+0x124>)
 8003092:	f006 fcf9 	bl	8009a88 <puts>
			fflush(NULL);
 8003096:	2000      	movs	r0, #0
 8003098:	f005 fdd0 	bl	8008c3c <fflush>
			while(1);
 800309c:	e7fe      	b.n	800309c <serie_Init_FreeRTOS+0x104>
	if (!buff) return;
 800309e:	bf00      	nop
 80030a0:	e000      	b.n	80030a4 <serie_Init_FreeRTOS+0x10c>
	if (!buff_rx) return;
 80030a2:	bf00      	nop
	}
}
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20001d54 	.word	0x20001d54
 80030b0:	20001d58 	.word	0x20001d58
 80030b4:	0800d31c 	.word	0x0800d31c
 80030b8:	08002f59 	.word	0x08002f59
 80030bc:	0800d324 	.word	0x0800d324
 80030c0:	0800d350 	.word	0x0800d350
 80030c4:	08002ddd 	.word	0x08002ddd
 80030c8:	0800d354 	.word	0x0800d354
 80030cc:	080034bd 	.word	0x080034bd
 80030d0:	0800d35c 	.word	0x0800d35c
 80030d4:	080034fd 	.word	0x080034fd

080030d8 <funcion_conf>:

char candenafinal[2000];
int funcion_conf(char * cadena,int len,int  osDelay_, int  osDelay_2){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
	int vuelta=1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
	uint32_t res;
	res=HAL_UART_Transmit(UART_ESP_AT_WIFI,cadena,len,1000);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	481b      	ldr	r0, [pc, #108]	; (8003164 <funcion_conf+0x8c>)
 80030f6:	f002 fd54 	bl	8005ba2 <HAL_UART_Transmit>
 80030fa:	4603      	mov	r3, r0
 80030fc:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 80030fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003102:	4919      	ldr	r1, [pc, #100]	; (8003168 <funcion_conf+0x90>)
 8003104:	4817      	ldr	r0, [pc, #92]	; (8003164 <funcion_conf+0x8c>)
 8003106:	f002 fdde 	bl	8005cc6 <HAL_UART_Receive_DMA>
	osDelay(osDelay_);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f003 fc22 	bl	8006956 <osDelay>
	HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8003112:	4814      	ldr	r0, [pc, #80]	; (8003164 <funcion_conf+0x8c>)
 8003114:	f002 fe07 	bl	8005d26 <HAL_UART_DMAStop>
	int buffer_ct1=buffer_DMA_size - HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8003118:	4812      	ldr	r0, [pc, #72]	; (8003164 <funcion_conf+0x8c>)
 800311a:	f000 fd30 	bl	8003b7e <HAL_DMA_getcounter>
 800311e:	4603      	mov	r3, r0
 8003120:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003124:	613b      	str	r3, [r7, #16]
	int buffer_ct=0;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
	while (buffer_ct<buffer_ct1)
 800312a:	e00d      	b.n	8003148 <funcion_conf+0x70>
		res=buff->put(buff,buffer_DMA[buffer_ct++]);
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <funcion_conf+0x94>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <funcion_conf+0x94>)
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	1c59      	adds	r1, r3, #1
 800313a:	61f9      	str	r1, [r7, #28]
 800313c:	490a      	ldr	r1, [pc, #40]	; (8003168 <funcion_conf+0x90>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	4619      	mov	r1, r3
 8003142:	4790      	blx	r2
 8003144:	4603      	mov	r3, r0
 8003146:	617b      	str	r3, [r7, #20]
	while (buffer_ct<buffer_ct1)
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	429a      	cmp	r2, r3
 800314e:	dbed      	blt.n	800312c <funcion_conf+0x54>
	osDelay(osDelay_2);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f003 fbff 	bl	8006956 <osDelay>

	return vuelta;
 8003158:	69bb      	ldr	r3, [r7, #24]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200007ec 	.word	0x200007ec
 8003168:	2000099c 	.word	0x2000099c
 800316c:	20001d54 	.word	0x20001d54

08003170 <conexion>:
	}



}
void conexion(char * nombreMaquina,char * ssid, char * passwd, char * puerto){
 8003170:	b5b0      	push	{r4, r5, r7, lr}
 8003172:	b09c      	sub	sp, #112	; 0x70
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
	uint32_t res;
	char cad[]="AT+CWJAP=\"%s\",\"%s\"\r\n";
 800317e:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <conexion+0xf8>)
 8003180:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003184:	461d      	mov	r5, r3
 8003186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800318a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800318e:	6020      	str	r0, [r4, #0]
 8003190:	3404      	adds	r4, #4
 8003192:	7021      	strb	r1, [r4, #0]
	char cad1[]="AT+CWMODE=1\r\n";
 8003194:	4b35      	ldr	r3, [pc, #212]	; (800326c <conexion+0xfc>)
 8003196:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800319a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800319c:	c407      	stmia	r4!, {r0, r1, r2}
 800319e:	8023      	strh	r3, [r4, #0]
	char cad2[]="AT+CIFSR\r\n";
 80031a0:	4a33      	ldr	r2, [pc, #204]	; (8003270 <conexion+0x100>)
 80031a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80031a8:	c303      	stmia	r3!, {r0, r1}
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	3302      	adds	r3, #2
 80031ae:	0c12      	lsrs	r2, r2, #16
 80031b0:	701a      	strb	r2, [r3, #0]
	char cad3[]="AT+CIPSTART=\"TCP\",\"%s\",%s\r\n";
 80031b2:	4b30      	ldr	r3, [pc, #192]	; (8003274 <conexion+0x104>)
 80031b4:	f107 0410 	add.w	r4, r7, #16
 80031b8:	461d      	mov	r5, r3
 80031ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sprintf(candenafinal,cad3,nombreMaquina,puerto);
 80031c6:	f107 0110 	add.w	r1, r7, #16
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	482a      	ldr	r0, [pc, #168]	; (8003278 <conexion+0x108>)
 80031d0:	f006 fc7a 	bl	8009ac8 <siprintf>
	int r = funcion_conf(cad1,strlen(cad1),2000,1);
 80031d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f80b 	bl	80001f4 <strlen>
 80031de:	4603      	mov	r3, r0
 80031e0:	4619      	mov	r1, r3
 80031e2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80031e6:	2301      	movs	r3, #1
 80031e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80031ec:	f7ff ff74 	bl	80030d8 <funcion_conf>
 80031f0:	66f8      	str	r0, [r7, #108]	; 0x6c
	sprintf(candenafinal,cad,ssid,passwd);
 80031f2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	481f      	ldr	r0, [pc, #124]	; (8003278 <conexion+0x108>)
 80031fc:	f006 fc64 	bl	8009ac8 <siprintf>
	int r2 = funcion_conf(candenafinal,strlen(candenafinal),2000,1);
 8003200:	481d      	ldr	r0, [pc, #116]	; (8003278 <conexion+0x108>)
 8003202:	f7fc fff7 	bl	80001f4 <strlen>
 8003206:	4603      	mov	r3, r0
 8003208:	4619      	mov	r1, r3
 800320a:	2301      	movs	r3, #1
 800320c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003210:	4819      	ldr	r0, [pc, #100]	; (8003278 <conexion+0x108>)
 8003212:	f7ff ff61 	bl	80030d8 <funcion_conf>
 8003216:	66b8      	str	r0, [r7, #104]	; 0x68
	int r3 = funcion_conf(cad2,strlen(cad2),2000,1);
 8003218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800321c:	4618      	mov	r0, r3
 800321e:	f7fc ffe9 	bl	80001f4 <strlen>
 8003222:	4603      	mov	r3, r0
 8003224:	4619      	mov	r1, r3
 8003226:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800322a:	2301      	movs	r3, #1
 800322c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003230:	f7ff ff52 	bl	80030d8 <funcion_conf>
 8003234:	6678      	str	r0, [r7, #100]	; 0x64
	sprintf(candenafinal,cad3,nombreMaquina,puerto);
 8003236:	f107 0110 	add.w	r1, r7, #16
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	480e      	ldr	r0, [pc, #56]	; (8003278 <conexion+0x108>)
 8003240:	f006 fc42 	bl	8009ac8 <siprintf>
	int r4 = funcion_conf(candenafinal,strlen(candenafinal),500,1000);
 8003244:	480c      	ldr	r0, [pc, #48]	; (8003278 <conexion+0x108>)
 8003246:	f7fc ffd5 	bl	80001f4 <strlen>
 800324a:	4603      	mov	r3, r0
 800324c:	4619      	mov	r1, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003252:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003256:	4808      	ldr	r0, [pc, #32]	; (8003278 <conexion+0x108>)
 8003258:	f7ff ff3e 	bl	80030d8 <funcion_conf>
 800325c:	6638      	str	r0, [r7, #96]	; 0x60
}
 800325e:	bf00      	nop
 8003260:	3770      	adds	r7, #112	; 0x70
 8003262:	46bd      	mov	sp, r7
 8003264:	bdb0      	pop	{r4, r5, r7, pc}
 8003266:	bf00      	nop
 8003268:	0800d39c 	.word	0x0800d39c
 800326c:	0800d3b4 	.word	0x0800d3b4
 8003270:	0800d3c4 	.word	0x0800d3c4
 8003274:	0800d3d0 	.word	0x0800d3d0
 8003278:	20001584 	.word	0x20001584

0800327c <json_querryTotal>:
void json_querryTotal(void){
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
	//tratado del json
	char *jsonp = strstr(buffer_DMA,"{");
 8003282:	217b      	movs	r1, #123	; 0x7b
 8003284:	4819      	ldr	r0, [pc, #100]	; (80032ec <json_querryTotal+0x70>)
 8003286:	f006 fc82 	bl	8009b8e <strchr>
 800328a:	61f8      	str	r0, [r7, #28]
	jsonp[strlen(jsonp)-2] = '\0';
 800328c:	69f8      	ldr	r0, [r7, #28]
 800328e:	f7fc ffb1 	bl	80001f4 <strlen>
 8003292:	4603      	mov	r3, r0
 8003294:	3b02      	subs	r3, #2
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
	cJSON * contextResponses = cJSON_Parse(jsonp);
 800329e:	69f8      	ldr	r0, [r7, #28]
 80032a0:	f7fe fbee 	bl	8001a80 <cJSON_Parse>
 80032a4:	61b8      	str	r0, [r7, #24]
	cJSON * contextEl = cJSON_GetObjectItemCaseSensitive(contextResponses,"contextResponses");
 80032a6:	4912      	ldr	r1, [pc, #72]	; (80032f0 <json_querryTotal+0x74>)
 80032a8:	69b8      	ldr	r0, [r7, #24]
 80032aa:	f7fe feee 	bl	800208a <cJSON_GetObjectItemCaseSensitive>
 80032ae:	6178      	str	r0, [r7, #20]
	cJSON * array1 = cJSON_GetObjectItemCaseSensitive(contextEl, "contextElement");
 80032b0:	4910      	ldr	r1, [pc, #64]	; (80032f4 <json_querryTotal+0x78>)
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7fe fee9 	bl	800208a <cJSON_GetObjectItemCaseSensitive>
 80032b8:	6138      	str	r0, [r7, #16]
	//cJSON * array1 = cJSON_GetArrayItem(contextEl,0);
	//cJSON * contextElement = cJSON_GetObjectItemCaseSensitive(array1,"contextElement");
	cJSON * atributes = cJSON_GetObjectItemCaseSensitive(array1,"attributes");
 80032ba:	490f      	ldr	r1, [pc, #60]	; (80032f8 <json_querryTotal+0x7c>)
 80032bc:	6938      	ldr	r0, [r7, #16]
 80032be:	f7fe fee4 	bl	800208a <cJSON_GetObjectItemCaseSensitive>
 80032c2:	60f8      	str	r0, [r7, #12]


	cJSON * atributo =  cJSON_GetObjectItemCaseSensitive(atributes, "Alarma");
 80032c4:	490d      	ldr	r1, [pc, #52]	; (80032fc <json_querryTotal+0x80>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7fe fedf 	bl	800208a <cJSON_GetObjectItemCaseSensitive>
 80032cc:	60b8      	str	r0, [r7, #8]
	cJSON * values = cJSON_GetObjectItemCaseSensitive(atributo,"value");
 80032ce:	490c      	ldr	r1, [pc, #48]	; (8003300 <json_querryTotal+0x84>)
 80032d0:	68b8      	ldr	r0, [r7, #8]
 80032d2:	f7fe feda 	bl	800208a <cJSON_GetObjectItemCaseSensitive>
 80032d6:	6078      	str	r0, [r7, #4]
	char* leds= values->valuestring;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	603b      	str	r3, [r7, #0]
	printf(leds);
 80032de:	6838      	ldr	r0, [r7, #0]
 80032e0:	f006 fb4c 	bl	800997c <iprintf>
}
 80032e4:	bf00      	nop
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	2000099c 	.word	0x2000099c
 80032f0:	0800d364 	.word	0x0800d364
 80032f4:	0800d378 	.word	0x0800d378
 80032f8:	0800d388 	.word	0x0800d388
 80032fc:	0800d3fc 	.word	0x0800d3fc
 8003300:	0800d394 	.word	0x0800d394

08003304 <conectado>:
void conectado(void){
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b0a0      	sub	sp, #128	; 0x80
 800330a:	af10      	add	r7, sp, #64	; 0x40
	//***post***
	char cad4[]="AT+CIPSEND=%d\r\n";
 800330c:	4b5b      	ldr	r3, [pc, #364]	; (800347c <conectado+0x178>)
 800330e:	f107 0420 	add.w	r4, r7, #32
 8003312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sprintf(cadenafinalv2,body_update_todo,valorReal,luzMax,luzMin,luzSalto,temperatura,tempMax,tempMin,tempSalto,"true");
 8003318:	4b59      	ldr	r3, [pc, #356]	; (8003480 <conectado+0x17c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd f92b 	bl	8000578 <__aeabi_f2d>
 8003322:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003326:	4b57      	ldr	r3, [pc, #348]	; (8003484 <conectado+0x180>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f924 	bl	8000578 <__aeabi_f2d>
 8003330:	4682      	mov	sl, r0
 8003332:	468b      	mov	fp, r1
 8003334:	4b54      	ldr	r3, [pc, #336]	; (8003488 <conectado+0x184>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f91d 	bl	8000578 <__aeabi_f2d>
 800333e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003342:	4b52      	ldr	r3, [pc, #328]	; (800348c <conectado+0x188>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f916 	bl	8000578 <__aeabi_f2d>
 800334c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003350:	4b4f      	ldr	r3, [pc, #316]	; (8003490 <conectado+0x18c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd f90f 	bl	8000578 <__aeabi_f2d>
 800335a:	e9c7 0100 	strd	r0, r1, [r7]
 800335e:	4b4d      	ldr	r3, [pc, #308]	; (8003494 <conectado+0x190>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f908 	bl	8000578 <__aeabi_f2d>
 8003368:	4680      	mov	r8, r0
 800336a:	4689      	mov	r9, r1
 800336c:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <conectado+0x194>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd f901 	bl	8000578 <__aeabi_f2d>
 8003376:	4604      	mov	r4, r0
 8003378:	460d      	mov	r5, r1
 800337a:	4b48      	ldr	r3, [pc, #288]	; (800349c <conectado+0x198>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f8fa 	bl	8000578 <__aeabi_f2d>
 8003384:	4b46      	ldr	r3, [pc, #280]	; (80034a0 <conectado+0x19c>)
 8003386:	930e      	str	r3, [sp, #56]	; 0x38
 8003388:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800338c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003390:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003394:	ed97 7b00 	vldr	d7, [r7]
 8003398:	ed8d 7b06 	vstr	d7, [sp, #24]
 800339c:	ed97 7b02 	vldr	d7, [r7, #8]
 80033a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80033a4:	ed97 7b04 	vldr	d7, [r7, #16]
 80033a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80033ac:	e9cd ab00 	strd	sl, fp, [sp]
 80033b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b4:	493b      	ldr	r1, [pc, #236]	; (80034a4 <conectado+0x1a0>)
 80033b6:	483c      	ldr	r0, [pc, #240]	; (80034a8 <conectado+0x1a4>)
 80033b8:	f006 fb86 	bl	8009ac8 <siprintf>
	sprintf(candenafinal,post_temp_apli,strlen(cadenafinalv2),cadenafinalv2);
 80033bc:	483a      	ldr	r0, [pc, #232]	; (80034a8 <conectado+0x1a4>)
 80033be:	f7fc ff19 	bl	80001f4 <strlen>
 80033c2:	4602      	mov	r2, r0
 80033c4:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <conectado+0x1a4>)
 80033c6:	4939      	ldr	r1, [pc, #228]	; (80034ac <conectado+0x1a8>)
 80033c8:	4839      	ldr	r0, [pc, #228]	; (80034b0 <conectado+0x1ac>)
 80033ca:	f006 fb7d 	bl	8009ac8 <siprintf>
	sprintf(cadenafinalv2,cad4,strlen(candenafinal));
 80033ce:	4838      	ldr	r0, [pc, #224]	; (80034b0 <conectado+0x1ac>)
 80033d0:	f7fc ff10 	bl	80001f4 <strlen>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f107 0320 	add.w	r3, r7, #32
 80033da:	4619      	mov	r1, r3
 80033dc:	4832      	ldr	r0, [pc, #200]	; (80034a8 <conectado+0x1a4>)
 80033de:	f006 fb73 	bl	8009ac8 <siprintf>
	int r5 = funcion_conf(cadenafinalv2,strlen(cadenafinalv2),500,20);//send=de bytes
 80033e2:	4831      	ldr	r0, [pc, #196]	; (80034a8 <conectado+0x1a4>)
 80033e4:	f7fc ff06 	bl	80001f4 <strlen>
 80033e8:	4603      	mov	r3, r0
 80033ea:	4619      	mov	r1, r3
 80033ec:	2314      	movs	r3, #20
 80033ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033f2:	482d      	ldr	r0, [pc, #180]	; (80034a8 <conectado+0x1a4>)
 80033f4:	f7ff fe70 	bl	80030d8 <funcion_conf>
 80033f8:	63f8      	str	r0, [r7, #60]	; 0x3c
	int r6 = funcion_conf(candenafinal,strlen(candenafinal),500,20);//json peticion
 80033fa:	482d      	ldr	r0, [pc, #180]	; (80034b0 <conectado+0x1ac>)
 80033fc:	f7fc fefa 	bl	80001f4 <strlen>
 8003400:	4603      	mov	r3, r0
 8003402:	4619      	mov	r1, r3
 8003404:	2314      	movs	r3, #20
 8003406:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800340a:	4829      	ldr	r0, [pc, #164]	; (80034b0 <conectado+0x1ac>)
 800340c:	f7ff fe64 	bl	80030d8 <funcion_conf>
 8003410:	63b8      	str	r0, [r7, #56]	; 0x38

	sprintf(candenafinal,post_temp,strlen(body),&body);
 8003412:	4828      	ldr	r0, [pc, #160]	; (80034b4 <conectado+0x1b0>)
 8003414:	f7fc feee 	bl	80001f4 <strlen>
 8003418:	4602      	mov	r2, r0
 800341a:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <conectado+0x1b0>)
 800341c:	4926      	ldr	r1, [pc, #152]	; (80034b8 <conectado+0x1b4>)
 800341e:	4824      	ldr	r0, [pc, #144]	; (80034b0 <conectado+0x1ac>)
 8003420:	f006 fb52 	bl	8009ac8 <siprintf>
	sprintf(cadenafinalv2,cad4,strlen(candenafinal));
 8003424:	4822      	ldr	r0, [pc, #136]	; (80034b0 <conectado+0x1ac>)
 8003426:	f7fc fee5 	bl	80001f4 <strlen>
 800342a:	4602      	mov	r2, r0
 800342c:	f107 0320 	add.w	r3, r7, #32
 8003430:	4619      	mov	r1, r3
 8003432:	481d      	ldr	r0, [pc, #116]	; (80034a8 <conectado+0x1a4>)
 8003434:	f006 fb48 	bl	8009ac8 <siprintf>
	int r7 = funcion_conf(cadenafinalv2,strlen(cadenafinalv2),1000,2000);
 8003438:	481b      	ldr	r0, [pc, #108]	; (80034a8 <conectado+0x1a4>)
 800343a:	f7fc fedb 	bl	80001f4 <strlen>
 800343e:	4603      	mov	r3, r0
 8003440:	4619      	mov	r1, r3
 8003442:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800344a:	4817      	ldr	r0, [pc, #92]	; (80034a8 <conectado+0x1a4>)
 800344c:	f7ff fe44 	bl	80030d8 <funcion_conf>
 8003450:	6378      	str	r0, [r7, #52]	; 0x34
	int r8 = funcion_conf(candenafinal,strlen(candenafinal),1000,2000);
 8003452:	4817      	ldr	r0, [pc, #92]	; (80034b0 <conectado+0x1ac>)
 8003454:	f7fc fece 	bl	80001f4 <strlen>
 8003458:	4603      	mov	r3, r0
 800345a:	4619      	mov	r1, r3
 800345c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003464:	4812      	ldr	r0, [pc, #72]	; (80034b0 <conectado+0x1ac>)
 8003466:	f7ff fe37 	bl	80030d8 <funcion_conf>
 800346a:	6338      	str	r0, [r7, #48]	; 0x30
	json_querryTotal();
 800346c:	f7ff ff06 	bl	800327c <json_querryTotal>
}
 8003470:	bf00      	nop
 8003472:	3740      	adds	r7, #64	; 0x40
 8003474:	46bd      	mov	sp, r7
 8003476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347a:	bf00      	nop
 800347c:	0800d3ec 	.word	0x0800d3ec
 8003480:	20000530 	.word	0x20000530
 8003484:	2000053c 	.word	0x2000053c
 8003488:	20000540 	.word	0x20000540
 800348c:	20000544 	.word	0x20000544
 8003490:	2000052c 	.word	0x2000052c
 8003494:	20000534 	.word	0x20000534
 8003498:	20000538 	.word	0x20000538
 800349c:	20000548 	.word	0x20000548
 80034a0:	0800d404 	.word	0x0800d404
 80034a4:	2000019c 	.word	0x2000019c
 80034a8:	2000119c 	.word	0x2000119c
 80034ac:	200000b4 	.word	0x200000b4
 80034b0:	20001584 	.word	0x20001584
 80034b4:	2000014c 	.word	0x2000014c
 80034b8:	2000001c 	.word	0x2000001c

080034bc <Task_Send>:


void Task_Send( void *pvParameters ){
 80034bc:	b580      	push	{r7, lr}
 80034be:	b09c      	sub	sp, #112	; 0x70
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

	uint32_t it;
    uint32_t res;

	char cad[100];
	it=0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	66fb      	str	r3, [r7, #108]	; 0x6c
	//boot_wifi("OPPOReno2","ilovematy");
	//entregable("worldclockapi.com","OPPOReno2","ilovematy","80");
	//postfunc("pperez-seu-or.disca.upv.es","routerSEU","00000000","10000");
	ldrReadAndmodify();
 80034c8:	f7fe fe92 	bl	80021f0 <ldrReadAndmodify>
	ntcReadAndmodify();
 80034cc:	f7fe ff2a 	bl	8002324 <ntcReadAndmodify>
	lecturaPonteciometroSetAlarma();
 80034d0:	f7fe fdea 	bl	80020a8 <lecturaPonteciometroSetAlarma>
	//postfunc("pperez2.disca.upv.es","OPPOReno2","ilovematy","10000");/*
	conexion("pperez2.disca.upv.es","OPPOReno2","ilovematy","10000");
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <Task_Send+0x30>)
 80034d6:	4a06      	ldr	r2, [pc, #24]	; (80034f0 <Task_Send+0x34>)
 80034d8:	4906      	ldr	r1, [pc, #24]	; (80034f4 <Task_Send+0x38>)
 80034da:	4807      	ldr	r0, [pc, #28]	; (80034f8 <Task_Send+0x3c>)
 80034dc:	f7ff fe48 	bl	8003170 <conexion>
	conectado();
 80034e0:	f7ff ff10 	bl	8003304 <conectado>
		sprintf(cad,"IT %d\r\n",(int)it);
		res=buff->puts(buff,(BUFF_ITEM_t *)cad,strlen(cad));
		vTaskDelay(10000/portTICK_RATE_MS );

	}*/
}
 80034e4:	bf00      	nop
 80034e6:	3770      	adds	r7, #112	; 0x70
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	0800d40c 	.word	0x0800d40c
 80034f0:	0800d414 	.word	0x0800d414
 80034f4:	0800d420 	.word	0x0800d420
 80034f8:	0800d42c 	.word	0x0800d42c

080034fc <Task_Receive>:

void Task_Receive( void *pvParameters ){
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b0a8      	sub	sp, #160	; 0xa0
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
#define buffer_length	128
    BUFF_ITEM_t  buffer[buffer_length];
    int buffer_ct,buffer_ct1;
    int crln_detect;

	it=0;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


	while(1){
		it++;
 800350a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800350e:	3301      	adds	r3, #1
 8003510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		crln_detect=0;
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		buffer_ct=0;
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		while(crln_detect<2){
 8003520:	e037      	b.n	8003592 <Task_Receive+0x96>
	    	res=buff->get(buff_rx,&car);
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <Task_Receive+0x11c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3c      	ldr	r2, [pc, #240]	; (800361c <Task_Receive+0x120>)
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	f107 018b 	add.w	r1, r7, #139	; 0x8b
 8003530:	4610      	mov	r0, r2
 8003532:	4798      	blx	r3
 8003534:	4603      	mov	r3, r0
 8003536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	    	buffer[buffer_ct++]=car;
 800353a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8003544:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8003548:	33a0      	adds	r3, #160	; 0xa0
 800354a:	443b      	add	r3, r7
 800354c:	f803 2c98 	strb.w	r2, [r3, #-152]
	    	if (buffer_ct>1){
 8003550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003554:	2b01      	cmp	r3, #1
 8003556:	dd1c      	ble.n	8003592 <Task_Receive+0x96>

	    		if ((buffer[buffer_ct-2]=='\r')&&(buffer[buffer_ct-1]=='\n')) // \r\n detection end of line
 8003558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800355c:	3b02      	subs	r3, #2
 800355e:	33a0      	adds	r3, #160	; 0xa0
 8003560:	443b      	add	r3, r7
 8003562:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8003566:	2b0d      	cmp	r3, #13
 8003568:	d10c      	bne.n	8003584 <Task_Receive+0x88>
 800356a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800356e:	3b01      	subs	r3, #1
 8003570:	33a0      	adds	r3, #160	; 0xa0
 8003572:	443b      	add	r3, r7
 8003574:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8003578:	2b0a      	cmp	r3, #10
 800357a:	d103      	bne.n	8003584 <Task_Receive+0x88>
					crln_detect=2;
 800357c:	2302      	movs	r3, #2
 800357e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003582:	e006      	b.n	8003592 <Task_Receive+0x96>
				else
					if ((buffer_ct)==buffer_length)  // line out of limits --> error
 8003584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d102      	bne.n	8003592 <Task_Receive+0x96>
						crln_detect=3;
 800358c:	2303      	movs	r3, #3
 800358e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(crln_detect<2){
 8003592:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003596:	2b01      	cmp	r3, #1
 8003598:	ddc3      	ble.n	8003522 <Task_Receive+0x26>
	    	}

		}

		// prepare reception buffer from ESP
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 800359a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800359e:	4920      	ldr	r1, [pc, #128]	; (8003620 <Task_Receive+0x124>)
 80035a0:	4820      	ldr	r0, [pc, #128]	; (8003624 <Task_Receive+0x128>)
 80035a2:	f002 fb90 	bl	8005cc6 <HAL_UART_Receive_DMA>
		// send line (command) to ESP
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,buffer,buffer_ct,1000);
 80035a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	f107 0108 	add.w	r1, r7, #8
 80035b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035b4:	481b      	ldr	r0, [pc, #108]	; (8003624 <Task_Receive+0x128>)
 80035b6:	f002 faf4 	bl	8005ba2 <HAL_UART_Transmit>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		// wait a bit time
		osDelay(500);
 80035c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035c4:	f003 f9c7 	bl	8006956 <osDelay>
		//stop reception probably all data are in dma buffer
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 80035c8:	4816      	ldr	r0, [pc, #88]	; (8003624 <Task_Receive+0x128>)
 80035ca:	f002 fbac 	bl	8005d26 <HAL_UART_DMAStop>

		// send to console ESP answer.
		buffer_ct1=HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 80035ce:	4815      	ldr	r0, [pc, #84]	; (8003624 <Task_Receive+0x128>)
 80035d0:	f000 fad5 	bl	8003b7e <HAL_DMA_getcounter>
 80035d4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		buffer_ct=0;
 80035d8:	2300      	movs	r3, #0
 80035da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while (buffer_ct<buffer_ct1)
 80035de:	e010      	b.n	8003602 <Task_Receive+0x106>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <Task_Receive+0x11c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <Task_Receive+0x11c>)
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035ee:	1c59      	adds	r1, r3, #1
 80035f0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80035f4:	490a      	ldr	r1, [pc, #40]	; (8003620 <Task_Receive+0x124>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	4619      	mov	r1, r3
 80035fa:	4790      	blx	r2
 80035fc:	4603      	mov	r3, r0
 80035fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (buffer_ct<buffer_ct1)
 8003602:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800360a:	429a      	cmp	r2, r3
 800360c:	dbe8      	blt.n	80035e0 <Task_Receive+0xe4>
		// wait a bit time
		osDelay(1);
 800360e:	2001      	movs	r0, #1
 8003610:	f003 f9a1 	bl	8006956 <osDelay>
	while(1){
 8003614:	e779      	b.n	800350a <Task_Receive+0xe>
 8003616:	bf00      	nop
 8003618:	20001d54 	.word	0x20001d54
 800361c:	20001d58 	.word	0x20001d58
 8003620:	2000099c 	.word	0x2000099c
 8003624:	200007ec 	.word	0x200007ec

08003628 <BUFF_is_empty>:
#include <task.h>
#include <math.h>

/////////////////////////////////////////////////////////////////////////////////////// BUFFER sin proteccion

uint32_t BUFF_is_empty(BUFF_BUFFER_t * buffer){
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==0);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <BUFF_is_full>:

uint32_t BUFF_is_full(BUFF_BUFFER_t * buffer){
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==buffer->size);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	429a      	cmp	r2, r3
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <BUFF_inserta>:

uint32_t BUFF_inserta(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item){
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]

	if (!buffer->isfull(buffer)){
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d119      	bne.n	80036be <BUFF_inserta+0x4e>
		buffer->buff[buffer->cabeza]=item;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	4413      	add	r3, r2
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	701a      	strb	r2, [r3, #0]
		buffer->cabeza=((buffer->cabeza)+1)%(buffer->size);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	3301      	adds	r3, #1
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6a12      	ldr	r2, [r2, #32]
 80036a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80036a6:	fb01 f202 	mul.w	r2, r1, r2
 80036aa:	1a9a      	subs	r2, r3, r2
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	619a      	str	r2, [r3, #24]
		buffer->n_elem++;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
		return 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <BUFF_inserta+0x50>
	} else return 0;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <BUFF_extrae>:

uint32_t BUFF_extrae(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item){
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]

	if (!buffer->isempty(buffer)){
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11a      	bne.n	8003716 <BUFF_extrae+0x4e>
			*item=buffer->buff[buffer->cola];
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	701a      	strb	r2, [r3, #0]
			buffer->cola=(buffer->cola+1)%(buffer->size);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	3301      	adds	r3, #1
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6a12      	ldr	r2, [r2, #32]
 80036fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80036fe:	fb01 f202 	mul.w	r2, r1, r2
 8003702:	1a9a      	subs	r2, r3, r2
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	61da      	str	r2, [r3, #28]
			buffer->n_elem--;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	1e5a      	subs	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	629a      	str	r2, [r3, #40]	; 0x28

	} else return 0;

   return 1;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <BUFF_extrae+0x50>
	} else return 0;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <BUFF_extrae_prot>:

uint32_t BUFF_extrae_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item)
{ //variable condicion
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
	int it;

	it=0;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800372e:	bf00      	nop
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f242 7110 	movw	r1, #10000	; 0x2710
 8003738:	4618      	mov	r0, r3
 800373a:	f003 fbc7 	bl	8006ecc <xQueueSemaphoreTake>
 800373e:	4603      	mov	r3, r0
 8003740:	2b01      	cmp	r3, #1
 8003742:	d1f5      	bne.n	8003730 <BUFF_extrae_prot+0x10>
	 // lock
	while(!BUFF_extrae(buffer,item)){
 8003744:	e017      	b.n	8003776 <BUFF_extrae_prot+0x56>
			 xSemaphoreGive(buffer->xSem);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6958      	ldr	r0, [r3, #20]
 800374a:	2300      	movs	r3, #0
 800374c:	2200      	movs	r2, #0
 800374e:	2100      	movs	r1, #0
 8003750:	f003 fabe 	bl	8006cd0 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8003754:	2064      	movs	r0, #100	; 0x64
 8003756:	f003 ff5b 	bl	8007610 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800375a:	bf00      	nop
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f242 7110 	movw	r1, #10000	; 0x2710
 8003764:	4618      	mov	r0, r3
 8003766:	f003 fbb1 	bl	8006ecc <xQueueSemaphoreTake>
 800376a:	4603      	mov	r3, r0
 800376c:	2b01      	cmp	r3, #1
 800376e:	d1f5      	bne.n	800375c <BUFF_extrae_prot+0x3c>
	 		 it++;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3301      	adds	r3, #1
 8003774:	60fb      	str	r3, [r7, #12]
	while(!BUFF_extrae(buffer,item)){
 8003776:	6839      	ldr	r1, [r7, #0]
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ffa5 	bl	80036c8 <BUFF_extrae>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0e0      	beq.n	8003746 <BUFF_extrae_prot+0x26>
	}
	xSemaphoreGive(buffer->xSem);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6958      	ldr	r0, [r3, #20]
 8003788:	2300      	movs	r3, #0
 800378a:	2200      	movs	r2, #0
 800378c:	2100      	movs	r1, #0
 800378e:	f003 fa9f 	bl	8006cd0 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 8003792:	2301      	movs	r3, #1
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <BUFF_inserta_prot>:
uint32_t BUFF_inserta_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item)
{ //variable condicion
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
	int it;

	it=0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 80037ac:	bf00      	nop
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f242 7110 	movw	r1, #10000	; 0x2710
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fb88 	bl	8006ecc <xQueueSemaphoreTake>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d1f5      	bne.n	80037ae <BUFF_inserta_prot+0x12>
	 // lock
	while(!BUFF_inserta(buffer,item)){
 80037c2:	e017      	b.n	80037f4 <BUFF_inserta_prot+0x58>
	 		 xSemaphoreGive(buffer->xSem);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6958      	ldr	r0, [r3, #20]
 80037c8:	2300      	movs	r3, #0
 80037ca:	2200      	movs	r2, #0
 80037cc:	2100      	movs	r1, #0
 80037ce:	f003 fa7f 	bl	8006cd0 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 80037d2:	2064      	movs	r0, #100	; 0x64
 80037d4:	f003 ff1c 	bl	8007610 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 80037d8:	bf00      	nop
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f242 7110 	movw	r1, #10000	; 0x2710
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fb72 	bl	8006ecc <xQueueSemaphoreTake>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d1f5      	bne.n	80037da <BUFF_inserta_prot+0x3e>
	 		 it++;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3301      	adds	r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
	while(!BUFF_inserta(buffer,item)){
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff39 	bl	8003670 <BUFF_inserta>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0df      	beq.n	80037c4 <BUFF_inserta_prot+0x28>
	}
	xSemaphoreGive(buffer->xSem);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6958      	ldr	r0, [r3, #20]
 8003808:	2300      	movs	r3, #0
 800380a:	2200      	movs	r2, #0
 800380c:	2100      	movs	r1, #0
 800380e:	f003 fa5f 	bl	8006cd0 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 8003812:	2301      	movs	r3, #1
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <BUFF_inserta_cad>:

uint32_t BUFF_inserta_cad(BUFF_BUFFER_t * buffer,BUFF_ITEM_t * cad,uint32_t nitems)
{ //variable condicion
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]

	int it;
	uint32_t res;
	for (it=0;it<nitems;it++)
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e010      	b.n	8003850 <BUFF_inserta_cad+0x34>
	{
		res=BUFF_inserta_prot(buffer,cad[it]);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	4413      	add	r3, r2
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	4619      	mov	r1, r3
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff ffaf 	bl	800379c <BUFF_inserta_prot>
 800383e:	6138      	str	r0, [r7, #16]
		if (!res) return it;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <BUFF_inserta_cad+0x2e>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	e007      	b.n	800385a <BUFF_inserta_cad+0x3e>
	for (it=0;it<nitems;it++)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3301      	adds	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	d8ea      	bhi.n	800382e <BUFF_inserta_cad+0x12>
	}
	return 1; // siempre tiene éxito
 8003858:	2301      	movs	r3, #1
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <bufferCreat>:
} BUFF_BUFFER_t;
*/


// API
BUFF_BUFFER_t * bufferCreat(int size){
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	BUFF_BUFFER_t * tmp;
	void * bff;

	tmp=malloc(sizeof(BUFF_BUFFER_t));
 800386c:	202c      	movs	r0, #44	; 0x2c
 800386e:	f005 fb15 	bl	8008e9c <malloc>
 8003872:	4603      	mov	r3, r0
 8003874:	60fb      	str	r3, [r7, #12]
	if (tmp){ // enought for structure
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d03d      	beq.n	80038f8 <bufferCreat+0x94>

		bff=malloc(sizeof(uint8_t)*size);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4618      	mov	r0, r3
 8003880:	f005 fb0c 	bl	8008e9c <malloc>
 8003884:	4603      	mov	r3, r0
 8003886:	60bb      	str	r3, [r7, #8]
		if (bff){ //enought for buffer
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d031      	beq.n	80038f2 <bufferCreat+0x8e>
			tmp->xSem=xSemaphoreCreateMutex();
 800388e:	2001      	movs	r0, #1
 8003890:	f003 fa05 	bl	8006c9e <xQueueCreateMutex>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	615a      	str	r2, [r3, #20]
			if (!tmp->xSem){
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d107      	bne.n	80038b2 <bufferCreat+0x4e>
				free(bff);
 80038a2:	68b8      	ldr	r0, [r7, #8]
 80038a4:	f005 fb02 	bl	8008eac <free>
				free(tmp);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f005 faff 	bl	8008eac <free>
				return NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e023      	b.n	80038fa <bufferCreat+0x96>
			};
            tmp->buff=bff;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24
			tmp->cabeza=0;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	619a      	str	r2, [r3, #24]
			tmp->cola=0;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	61da      	str	r2, [r3, #28]
			tmp->size=size;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	621a      	str	r2, [r3, #32]
			tmp->n_elem=0;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
			tmp->get=(void*)BUFF_extrae_prot;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <bufferCreat+0xa0>)
 80038d4:	601a      	str	r2, [r3, #0]
			tmp->put=(void*)BUFF_inserta_prot;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a0b      	ldr	r2, [pc, #44]	; (8003908 <bufferCreat+0xa4>)
 80038da:	605a      	str	r2, [r3, #4]
			tmp->puts=(void*)BUFF_inserta_cad;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a0b      	ldr	r2, [pc, #44]	; (800390c <bufferCreat+0xa8>)
 80038e0:	611a      	str	r2, [r3, #16]

			tmp->isfull=(void*)BUFF_is_full;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <bufferCreat+0xac>)
 80038e6:	60da      	str	r2, [r3, #12]
			tmp->isempty=(void*)BUFF_is_empty;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <bufferCreat+0xb0>)
 80038ec:	609a      	str	r2, [r3, #8]
			return tmp;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	e003      	b.n	80038fa <bufferCreat+0x96>
		}
		else
			free(tmp);
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f005 fada 	bl	8008eac <free>
	}
	return NULL;
 80038f8:	2300      	movs	r3, #0

}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	08003721 	.word	0x08003721
 8003908:	0800379d 	.word	0x0800379d
 800390c:	0800381d 	.word	0x0800381d
 8003910:	0800364b 	.word	0x0800364b
 8003914:	08003629 	.word	0x08003629

08003918 <makeFreeRtosPriority>:
uint8_t buffer_DMA_1[buffer_SIZE];
uint8_t buffer_DMA_2[buffer_SIZE];


unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	80fb      	strh	r3, [r7, #6]
unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]

if (priority != osPriorityError) {
 8003926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800392a:	2b84      	cmp	r3, #132	; 0x84
 800392c:	d005      	beq.n	800393a <makeFreeRtosPriority+0x22>
fpriority += (priority - osPriorityIdle);
 800392e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	3303      	adds	r3, #3
 8003938:	60fb      	str	r3, [r7, #12]
}

return fpriority;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_write>:

int _write(int file, char *ptr, int len){
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++){
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e00a      	b.n	8003970 <_write+0x28>
       //ITM_SendChar( ptr++ );
       HAL_UART_Transmit(&huart2, ptr,len,1000);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	b29a      	uxth	r2, r3
 800395e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	4807      	ldr	r0, [pc, #28]	; (8003984 <_write+0x3c>)
 8003966:	f002 f91c 	bl	8005ba2 <HAL_UART_Transmit>
    for (DataIdx = 0; DataIdx < len; DataIdx++){
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	3301      	adds	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	dbf0      	blt.n	800395a <_write+0x12>
    }
    return len;
 8003978:	687b      	ldr	r3, [r7, #4]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000830 	.word	0x20000830

08003988 <UART_EndRxTransfer>:
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */

static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003988:	b480      	push	{r7}
 800398a:	b095      	sub	sp, #84	; 0x54
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039b0:	643a      	str	r2, [r7, #64]	; 0x40
 80039b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e5      	bne.n	8003990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	64bb      	str	r3, [r7, #72]	; 0x48
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3314      	adds	r3, #20
 80039e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e5      	bne.n	80039c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d119      	bne.n	8003a34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f023 0310 	bic.w	r3, r3, #16
 8003a16:	647b      	str	r3, [r7, #68]	; 0x44
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a20:	61ba      	str	r2, [r7, #24]
 8003a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6979      	ldr	r1, [r7, #20]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e5      	bne.n	8003a00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a42:	bf00      	nop
 8003a44:	3754      	adds	r7, #84	; 0x54
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_DMA_Abort_PAS>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_PAS(DMA_HandleTypeDef *hdma)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	60fb      	str	r3, [r7, #12]

  //uint32_t tickstart = HAL_GetTick();

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d008      	beq.n	8003a7a <HAL_DMA_Abort_PAS+0x2c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2280      	movs	r2, #128	; 0x80
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e036      	b.n	8003ae8 <HAL_DMA_Abort_PAS+0x9a>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0216 	bic.w	r2, r2, #22
 8003a88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a98:	615a      	str	r2, [r3, #20]

    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <HAL_DMA_Abort_PAS+0x5c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_DMA_Abort_PAS+0x6c>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0208 	bic.w	r2, r2, #8
 8003ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
        return HAL_TIMEOUT;
      }
    }*/

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	223f      	movs	r2, #63	; 0x3f
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	609a      	str	r2, [r3, #8]

    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_UART_DMAStop_PAS>:

HAL_StatusTypeDef HAL_UART_DMAStop_PAS(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	; 0x28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */


  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	bf0c      	ite	eq
 8003b0e:	2301      	moveq	r3, #1
 8003b10:	2300      	movne	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b22      	cmp	r3, #34	; 0x22
 8003b20:	d128      	bne.n	8003b74 <HAL_UART_DMAStop_PAS+0x80>
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d025      	beq.n	8003b74 <HAL_UART_DMAStop_PAS+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3314      	adds	r3, #20
 8003b46:	6a3a      	ldr	r2, [r7, #32]
 8003b48:	61fa      	str	r2, [r7, #28]
 8003b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	69b9      	ldr	r1, [r7, #24]
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	617b      	str	r3, [r7, #20]
   return(result);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <HAL_UART_DMAStop_PAS+0x34>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <HAL_UART_DMAStop_PAS+0x7a>
    {
      HAL_DMA_Abort_PAS(huart->hdmarx);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff70 	bl	8003a4e <HAL_DMA_Abort_PAS>
    }
    UART_EndRxTransfer(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ff0a 	bl	8003988 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3728      	adds	r7, #40	; 0x28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_DMA_getcounter>:



uint32_t HAL_DMA_getcounter(UART_HandleTypeDef *huart){
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
	return huart->hdmarx->Instance->NDTR;}
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ba0:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ba2:	490e      	ldr	r1, [pc, #56]	; (8003bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ba4:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ba8:	e002      	b.n	8003bb0 <LoopCopyDataInit>

08003baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bae:	3304      	adds	r3, #4

08003bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bb4:	d3f9      	bcc.n	8003baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bb6:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bb8:	4c0b      	ldr	r4, [pc, #44]	; (8003be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bbc:	e001      	b.n	8003bc2 <LoopFillZerobss>

08003bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc0:	3204      	adds	r2, #4

08003bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bc4:	d3fb      	bcc.n	8003bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bc6:	f7ff f8f7 	bl	8002db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bca:	f005 f93f 	bl	8008e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bce:	f7fe fc9d 	bl	800250c <main>
  bx  lr    
 8003bd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bdc:	200004d0 	.word	0x200004d0
  ldr r2, =_sidata
 8003be0:	0800d91c 	.word	0x0800d91c
  ldr r2, =_sbss
 8003be4:	200004d0 	.word	0x200004d0
  ldr r4, =_ebss
 8003be8:	20005ec4 	.word	0x20005ec4

08003bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bec:	e7fe      	b.n	8003bec <ADC_IRQHandler>
	...

08003bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <HAL_Init+0x40>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a0d      	ldr	r2, [pc, #52]	; (8003c30 <HAL_Init+0x40>)
 8003bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_Init+0x40>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <HAL_Init+0x40>)
 8003c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_Init+0x40>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <HAL_Init+0x40>)
 8003c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c18:	2003      	movs	r0, #3
 8003c1a:	f000 fd1d 	bl	8004658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c1e:	200f      	movs	r0, #15
 8003c20:	f000 f808 	bl	8003c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c24:	f7fe fe96 	bl	8002954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023c00 	.word	0x40023c00

08003c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_InitTick+0x54>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_InitTick+0x58>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fd35 	bl	80046c2 <HAL_SYSTICK_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e00e      	b.n	8003c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b0f      	cmp	r3, #15
 8003c66:	d80a      	bhi.n	8003c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c68:	2200      	movs	r2, #0
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	f000 fcfd 	bl	800466e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c74:	4a06      	ldr	r2, [pc, #24]	; (8003c90 <HAL_InitTick+0x5c>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000018 	.word	0x20000018
 8003c8c:	200002f4 	.word	0x200002f4
 8003c90:	200002f0 	.word	0x200002f0

08003c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_IncTick+0x20>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_IncTick+0x24>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <HAL_IncTick+0x24>)
 8003ca6:	6013      	str	r3, [r2, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	200002f4 	.word	0x200002f4
 8003cb8:	2000215c 	.word	0x2000215c

08003cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <HAL_GetTick+0x14>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	2000215c 	.word	0x2000215c

08003cd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e033      	b.n	8003d52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fe fe5a 	bl	80029ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d118      	bne.n	8003d44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d1a:	f023 0302 	bic.w	r3, r3, #2
 8003d1e:	f043 0202 	orr.w	r2, r3, #2
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 faca 	bl	80042c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	f043 0201 	orr.w	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
 8003d42:	e001      	b.n	8003d48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_ADC_Start+0x1a>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e097      	b.n	8003ea6 <HAL_ADC_Start+0x14a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d018      	beq.n	8003dbe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d9c:	4b45      	ldr	r3, [pc, #276]	; (8003eb4 <HAL_ADC_Start+0x158>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a45      	ldr	r2, [pc, #276]	; (8003eb8 <HAL_ADC_Start+0x15c>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0c9a      	lsrs	r2, r3, #18
 8003da8:	4613      	mov	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003db0:	e002      	b.n	8003db8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f9      	bne.n	8003db2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d15f      	bne.n	8003e8c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d007      	beq.n	8003dfe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003df6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0a:	d106      	bne.n	8003e1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	f023 0206 	bic.w	r2, r3, #6
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	645a      	str	r2, [r3, #68]	; 0x44
 8003e18:	e002      	b.n	8003e20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <HAL_ADC_Start+0x160>)
 8003e2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10f      	bne.n	8003e62 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d129      	bne.n	8003ea4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	e020      	b.n	8003ea4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <HAL_ADC_Start+0x164>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_ADC_Start+0x148>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d114      	bne.n	8003ea4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e88:	609a      	str	r2, [r3, #8]
 8003e8a:	e00b      	b.n	8003ea4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	f043 0210 	orr.w	r2, r3, #16
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	f043 0201 	orr.w	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000018 	.word	0x20000018
 8003eb8:	431bde83 	.word	0x431bde83
 8003ebc:	40012300 	.word	0x40012300
 8003ec0:	40012000 	.word	0x40012000

08003ec4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_ADC_Stop+0x16>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e021      	b.n	8003f1e <HAL_ADC_Stop+0x5a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f043 0201 	orr.w	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f46:	d113      	bne.n	8003f70 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f56:	d10b      	bne.n	8003f70 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e063      	b.n	8004038 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003f70:	f7ff fea4 	bl	8003cbc <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f76:	e021      	b.n	8003fbc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d01d      	beq.n	8003fbc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <HAL_ADC_PollForConversion+0x6c>
 8003f86:	f7ff fe99 	bl	8003cbc <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d212      	bcs.n	8003fbc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d00b      	beq.n	8003fbc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e03d      	b.n	8004038 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d1d6      	bne.n	8003f78 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f06f 0212 	mvn.w	r2, #18
 8003fd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d123      	bne.n	8004036 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11f      	bne.n	8004036 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004000:	2b00      	cmp	r3, #0
 8004002:	d006      	beq.n	8004012 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800400e:	2b00      	cmp	r3, #0
 8004010:	d111      	bne.n	8004036 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d105      	bne.n	8004036 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f043 0201 	orr.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800404e:	4618      	mov	r0, r3
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x1c>
 8004074:	2302      	movs	r3, #2
 8004076:	e113      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x244>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b09      	cmp	r3, #9
 8004086:	d925      	bls.n	80040d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68d9      	ldr	r1, [r3, #12]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	3b1e      	subs	r3, #30
 800409e:	2207      	movs	r2, #7
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43da      	mvns	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	400a      	ands	r2, r1
 80040ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68d9      	ldr	r1, [r3, #12]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	4618      	mov	r0, r3
 80040c0:	4603      	mov	r3, r0
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4403      	add	r3, r0
 80040c6:	3b1e      	subs	r3, #30
 80040c8:	409a      	lsls	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	60da      	str	r2, [r3, #12]
 80040d2:	e022      	b.n	800411a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6919      	ldr	r1, [r3, #16]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	2207      	movs	r2, #7
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	400a      	ands	r2, r1
 80040f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6919      	ldr	r1, [r3, #16]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	4618      	mov	r0, r3
 800410a:	4603      	mov	r3, r0
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4403      	add	r3, r0
 8004110:	409a      	lsls	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b06      	cmp	r3, #6
 8004120:	d824      	bhi.n	800416c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	3b05      	subs	r3, #5
 8004134:	221f      	movs	r2, #31
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43da      	mvns	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	400a      	ands	r2, r1
 8004142:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	4618      	mov	r0, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	3b05      	subs	r3, #5
 800415e:	fa00 f203 	lsl.w	r2, r0, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	635a      	str	r2, [r3, #52]	; 0x34
 800416a:	e04c      	b.n	8004206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d824      	bhi.n	80041be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	3b23      	subs	r3, #35	; 0x23
 8004186:	221f      	movs	r2, #31
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43da      	mvns	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	400a      	ands	r2, r1
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	4618      	mov	r0, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	3b23      	subs	r3, #35	; 0x23
 80041b0:	fa00 f203 	lsl.w	r2, r0, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
 80041bc:	e023      	b.n	8004206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	3b41      	subs	r3, #65	; 0x41
 80041d0:	221f      	movs	r2, #31
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43da      	mvns	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	400a      	ands	r2, r1
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	4618      	mov	r0, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	3b41      	subs	r3, #65	; 0x41
 80041fa:	fa00 f203 	lsl.w	r2, r0, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004206:	4b29      	ldr	r3, [pc, #164]	; (80042ac <HAL_ADC_ConfigChannel+0x250>)
 8004208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a28      	ldr	r2, [pc, #160]	; (80042b0 <HAL_ADC_ConfigChannel+0x254>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10f      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x1d8>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b12      	cmp	r3, #18
 800421a:	d10b      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <HAL_ADC_ConfigChannel+0x254>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d12b      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x23a>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <HAL_ADC_ConfigChannel+0x258>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <HAL_ADC_ConfigChannel+0x1f4>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b11      	cmp	r3, #17
 800424e:	d122      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a11      	ldr	r2, [pc, #68]	; (80042b4 <HAL_ADC_ConfigChannel+0x258>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d111      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004272:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <HAL_ADC_ConfigChannel+0x25c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a11      	ldr	r2, [pc, #68]	; (80042bc <HAL_ADC_ConfigChannel+0x260>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	0c9a      	lsrs	r2, r3, #18
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004288:	e002      	b.n	8004290 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	3b01      	subs	r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f9      	bne.n	800428a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40012300 	.word	0x40012300
 80042b0:	40012000 	.word	0x40012000
 80042b4:	10000012 	.word	0x10000012
 80042b8:	20000018 	.word	0x20000018
 80042bc:	431bde83 	.word	0x431bde83

080042c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042c8:	4b79      	ldr	r3, [pc, #484]	; (80044b0 <ADC_Init+0x1f0>)
 80042ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	021a      	lsls	r2, r3, #8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6899      	ldr	r1, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	4a58      	ldr	r2, [pc, #352]	; (80044b4 <ADC_Init+0x1f4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d022      	beq.n	800439e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004366:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6899      	ldr	r1, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	e00f      	b.n	80043be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0202 	bic.w	r2, r2, #2
 80043cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6899      	ldr	r1, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	7e1b      	ldrb	r3, [r3, #24]
 80043d8:	005a      	lsls	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01b      	beq.n	8004424 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800440a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	3b01      	subs	r3, #1
 8004418:	035a      	lsls	r2, r3, #13
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e007      	b.n	8004434 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004432:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	3b01      	subs	r3, #1
 8004450:	051a      	lsls	r2, r3, #20
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6899      	ldr	r1, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004476:	025a      	lsls	r2, r3, #9
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6899      	ldr	r1, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	029a      	lsls	r2, r3, #10
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	40012300 	.word	0x40012300
 80044b4:	0f000001 	.word	0x0f000001

080044b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <__NVIC_SetPriorityGrouping+0x44>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d4:	4013      	ands	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ea:	4a04      	ldr	r2, [pc, #16]	; (80044fc <__NVIC_SetPriorityGrouping+0x44>)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	60d3      	str	r3, [r2, #12]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <__NVIC_GetPriorityGrouping+0x18>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	0a1b      	lsrs	r3, r3, #8
 800450a:	f003 0307 	and.w	r3, r3, #7
}
 800450e:	4618      	mov	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	2b00      	cmp	r3, #0
 800452c:	db0b      	blt.n	8004546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	f003 021f 	and.w	r2, r3, #31
 8004534:	4907      	ldr	r1, [pc, #28]	; (8004554 <__NVIC_EnableIRQ+0x38>)
 8004536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	2001      	movs	r0, #1
 800453e:	fa00 f202 	lsl.w	r2, r0, r2
 8004542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	e000e100 	.word	0xe000e100

08004558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	6039      	str	r1, [r7, #0]
 8004562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004568:	2b00      	cmp	r3, #0
 800456a:	db0a      	blt.n	8004582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	490c      	ldr	r1, [pc, #48]	; (80045a4 <__NVIC_SetPriority+0x4c>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	440b      	add	r3, r1
 800457c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004580:	e00a      	b.n	8004598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	4908      	ldr	r1, [pc, #32]	; (80045a8 <__NVIC_SetPriority+0x50>)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3b04      	subs	r3, #4
 8004590:	0112      	lsls	r2, r2, #4
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	440b      	add	r3, r1
 8004596:	761a      	strb	r2, [r3, #24]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000e100 	.word	0xe000e100
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	; 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f1c3 0307 	rsb	r3, r3, #7
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	bf28      	it	cs
 80045ca:	2304      	movcs	r3, #4
 80045cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d902      	bls.n	80045dc <NVIC_EncodePriority+0x30>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3b03      	subs	r3, #3
 80045da:	e000      	b.n	80045de <NVIC_EncodePriority+0x32>
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43da      	mvns	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	401a      	ands	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f4:	f04f 31ff 	mov.w	r1, #4294967295
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	43d9      	mvns	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004604:	4313      	orrs	r3, r2
         );
}
 8004606:	4618      	mov	r0, r3
 8004608:	3724      	adds	r7, #36	; 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004624:	d301      	bcc.n	800462a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004626:	2301      	movs	r3, #1
 8004628:	e00f      	b.n	800464a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <SysTick_Config+0x40>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3b01      	subs	r3, #1
 8004630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004632:	210f      	movs	r1, #15
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	f7ff ff8e 	bl	8004558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <SysTick_Config+0x40>)
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004642:	4b04      	ldr	r3, [pc, #16]	; (8004654 <SysTick_Config+0x40>)
 8004644:	2207      	movs	r2, #7
 8004646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	e000e010 	.word	0xe000e010

08004658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ff29 	bl	80044b8 <__NVIC_SetPriorityGrouping>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800466e:	b580      	push	{r7, lr}
 8004670:	b086      	sub	sp, #24
 8004672:	af00      	add	r7, sp, #0
 8004674:	4603      	mov	r3, r0
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004680:	f7ff ff3e 	bl	8004500 <__NVIC_GetPriorityGrouping>
 8004684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	6978      	ldr	r0, [r7, #20]
 800468c:	f7ff ff8e 	bl	80045ac <NVIC_EncodePriority>
 8004690:	4602      	mov	r2, r0
 8004692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff5d 	bl	8004558 <__NVIC_SetPriority>
}
 800469e:	bf00      	nop
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ff31 	bl	800451c <__NVIC_EnableIRQ>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff ffa2 	bl	8004614 <SysTick_Config>
 80046d0:	4603      	mov	r3, r0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046e8:	f7ff fae8 	bl	8003cbc <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e099      	b.n	800482c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0201 	bic.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004718:	e00f      	b.n	800473a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800471a:	f7ff facf 	bl	8003cbc <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b05      	cmp	r3, #5
 8004726:	d908      	bls.n	800473a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2203      	movs	r2, #3
 8004732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e078      	b.n	800482c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e8      	bne.n	800471a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4b38      	ldr	r3, [pc, #224]	; (8004834 <HAL_DMA_Init+0x158>)
 8004754:	4013      	ands	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004766:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004772:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800477e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	2b04      	cmp	r3, #4
 8004792:	d107      	bne.n	80047a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	4313      	orrs	r3, r2
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 0307 	bic.w	r3, r3, #7
 80047ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d117      	bne.n	80047fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fadf 	bl	8004da4 <DMA_CheckFifoParam>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2240      	movs	r2, #64	; 0x40
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047fa:	2301      	movs	r3, #1
 80047fc:	e016      	b.n	800482c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa96 	bl	8004d38 <DMA_CalcBaseAndBitshift>
 800480c:	4603      	mov	r3, r0
 800480e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004814:	223f      	movs	r2, #63	; 0x3f
 8004816:	409a      	lsls	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	f010803f 	.word	0xf010803f

08004838 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_DMA_Start_IT+0x26>
 800485a:	2302      	movs	r3, #2
 800485c:	e040      	b.n	80048e0 <HAL_DMA_Start_IT+0xa8>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	d12f      	bne.n	80048d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa28 	bl	8004cdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004890:	223f      	movs	r2, #63	; 0x3f
 8004892:	409a      	lsls	r2, r3
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0216 	orr.w	r2, r2, #22
 80048a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0208 	orr.w	r2, r2, #8
 80048be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e005      	b.n	80048de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048da:	2302      	movs	r3, #2
 80048dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048de:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048f6:	f7ff f9e1 	bl	8003cbc <HAL_GetTick>
 80048fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d008      	beq.n	800491a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2280      	movs	r2, #128	; 0x80
 800490c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e052      	b.n	80049c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0216 	bic.w	r2, r2, #22
 8004928:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004938:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d103      	bne.n	800494a <HAL_DMA_Abort+0x62>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0208 	bic.w	r2, r2, #8
 8004958:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800496a:	e013      	b.n	8004994 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800496c:	f7ff f9a6 	bl	8003cbc <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b05      	cmp	r3, #5
 8004978:	d90c      	bls.n	8004994 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2203      	movs	r2, #3
 8004984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e015      	b.n	80049c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e4      	bne.n	800496c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	223f      	movs	r2, #63	; 0x3f
 80049a8:	409a      	lsls	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049d4:	4b8e      	ldr	r3, [pc, #568]	; (8004c10 <HAL_DMA_IRQHandler+0x248>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a8e      	ldr	r2, [pc, #568]	; (8004c14 <HAL_DMA_IRQHandler+0x24c>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	0a9b      	lsrs	r3, r3, #10
 80049e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	2208      	movs	r2, #8
 80049f4:	409a      	lsls	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01a      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d013      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0204 	bic.w	r2, r2, #4
 8004a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a20:	2208      	movs	r2, #8
 8004a22:	409a      	lsls	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a38:	2201      	movs	r2, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d012      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a56:	2201      	movs	r2, #1
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	f043 0202 	orr.w	r2, r3, #2
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6e:	2204      	movs	r2, #4
 8004a70:	409a      	lsls	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d012      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00b      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a98:	f043 0204 	orr.w	r2, r3, #4
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d043      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d03c      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	2210      	movs	r2, #16
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d018      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d108      	bne.n	8004af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d024      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
 8004af6:	e01f      	b.n	8004b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
 8004b08:	e016      	b.n	8004b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0208 	bic.w	r2, r2, #8
 8004b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 808f 	beq.w	8004c68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8087 	beq.w	8004c68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5e:	2220      	movs	r2, #32
 8004b60:	409a      	lsls	r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d136      	bne.n	8004be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0216 	bic.w	r2, r2, #22
 8004b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <HAL_DMA_IRQHandler+0x1da>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0208 	bic.w	r2, r2, #8
 8004bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb6:	223f      	movs	r2, #63	; 0x3f
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d07e      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	4798      	blx	r3
        }
        return;
 8004bde:	e079      	b.n	8004cd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01d      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10d      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d031      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	4798      	blx	r3
 8004c0c:	e02c      	b.n	8004c68 <HAL_DMA_IRQHandler+0x2a0>
 8004c0e:	bf00      	nop
 8004c10:	20000018 	.word	0x20000018
 8004c14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d023      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	4798      	blx	r3
 8004c28:	e01e      	b.n	8004c68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10f      	bne.n	8004c58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0210 	bic.w	r2, r2, #16
 8004c46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d032      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d022      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2205      	movs	r2, #5
 8004c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	3301      	adds	r3, #1
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d307      	bcc.n	8004cb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f2      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x2cc>
 8004cae:	e000      	b.n	8004cb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004cb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	4798      	blx	r3
 8004cd2:	e000      	b.n	8004cd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004cd4:	bf00      	nop
    }
  }
}
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d108      	bne.n	8004d1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d1a:	e007      	b.n	8004d2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]
}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	3b10      	subs	r3, #16
 8004d48:	4a14      	ldr	r2, [pc, #80]	; (8004d9c <DMA_CalcBaseAndBitshift+0x64>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d52:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <DMA_CalcBaseAndBitshift+0x68>)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d909      	bls.n	8004d7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	1d1a      	adds	r2, r3, #4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	659a      	str	r2, [r3, #88]	; 0x58
 8004d78:	e007      	b.n	8004d8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	aaaaaaab 	.word	0xaaaaaaab
 8004da0:	0800d464 	.word	0x0800d464

08004da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11f      	bne.n	8004dfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d856      	bhi.n	8004e72 <DMA_CheckFifoParam+0xce>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <DMA_CheckFifoParam+0x28>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004ddd 	.word	0x08004ddd
 8004dd0:	08004def 	.word	0x08004def
 8004dd4:	08004ddd 	.word	0x08004ddd
 8004dd8:	08004e73 	.word	0x08004e73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d046      	beq.n	8004e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dec:	e043      	b.n	8004e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004df6:	d140      	bne.n	8004e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dfc:	e03d      	b.n	8004e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e06:	d121      	bne.n	8004e4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d837      	bhi.n	8004e7e <DMA_CheckFifoParam+0xda>
 8004e0e:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <DMA_CheckFifoParam+0x70>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004e2b 	.word	0x08004e2b
 8004e1c:	08004e25 	.word	0x08004e25
 8004e20:	08004e3d 	.word	0x08004e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
      break;
 8004e28:	e030      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d025      	beq.n	8004e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3a:	e022      	b.n	8004e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e44:	d11f      	bne.n	8004e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e4a:	e01c      	b.n	8004e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d903      	bls.n	8004e5a <DMA_CheckFifoParam+0xb6>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d003      	beq.n	8004e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e58:	e018      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5e:	e015      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00e      	beq.n	8004e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e00b      	b.n	8004e8a <DMA_CheckFifoParam+0xe6>
      break;
 8004e72:	bf00      	nop
 8004e74:	e00a      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;
 8004e76:	bf00      	nop
 8004e78:	e008      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e006      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;
 8004e7e:	bf00      	nop
 8004e80:	e004      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;
 8004e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop

08004e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b089      	sub	sp, #36	; 0x24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e159      	b.n	800516c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004eb8:	2201      	movs	r2, #1
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	f040 8148 	bne.w	8005166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d005      	beq.n	8004eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d130      	bne.n	8004f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	2203      	movs	r2, #3
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f24:	2201      	movs	r2, #1
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 0201 	and.w	r2, r3, #1
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d017      	beq.n	8004f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	2203      	movs	r2, #3
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d123      	bne.n	8004fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	08da      	lsrs	r2, r3, #3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3208      	adds	r2, #8
 8004fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	220f      	movs	r2, #15
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	08da      	lsrs	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3208      	adds	r2, #8
 8004fda:	69b9      	ldr	r1, [r7, #24]
 8004fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	2203      	movs	r2, #3
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 0203 	and.w	r2, r3, #3
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80a2 	beq.w	8005166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	4b57      	ldr	r3, [pc, #348]	; (8005184 <HAL_GPIO_Init+0x2e8>)
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	4a56      	ldr	r2, [pc, #344]	; (8005184 <HAL_GPIO_Init+0x2e8>)
 800502c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005030:	6453      	str	r3, [r2, #68]	; 0x44
 8005032:	4b54      	ldr	r3, [pc, #336]	; (8005184 <HAL_GPIO_Init+0x2e8>)
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800503e:	4a52      	ldr	r2, [pc, #328]	; (8005188 <HAL_GPIO_Init+0x2ec>)
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	3302      	adds	r3, #2
 8005046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	220f      	movs	r2, #15
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4013      	ands	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a49      	ldr	r2, [pc, #292]	; (800518c <HAL_GPIO_Init+0x2f0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d019      	beq.n	800509e <HAL_GPIO_Init+0x202>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a48      	ldr	r2, [pc, #288]	; (8005190 <HAL_GPIO_Init+0x2f4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <HAL_GPIO_Init+0x1fe>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a47      	ldr	r2, [pc, #284]	; (8005194 <HAL_GPIO_Init+0x2f8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00d      	beq.n	8005096 <HAL_GPIO_Init+0x1fa>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a46      	ldr	r2, [pc, #280]	; (8005198 <HAL_GPIO_Init+0x2fc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d007      	beq.n	8005092 <HAL_GPIO_Init+0x1f6>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a45      	ldr	r2, [pc, #276]	; (800519c <HAL_GPIO_Init+0x300>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d101      	bne.n	800508e <HAL_GPIO_Init+0x1f2>
 800508a:	2304      	movs	r3, #4
 800508c:	e008      	b.n	80050a0 <HAL_GPIO_Init+0x204>
 800508e:	2307      	movs	r3, #7
 8005090:	e006      	b.n	80050a0 <HAL_GPIO_Init+0x204>
 8005092:	2303      	movs	r3, #3
 8005094:	e004      	b.n	80050a0 <HAL_GPIO_Init+0x204>
 8005096:	2302      	movs	r3, #2
 8005098:	e002      	b.n	80050a0 <HAL_GPIO_Init+0x204>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <HAL_GPIO_Init+0x204>
 800509e:	2300      	movs	r3, #0
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	f002 0203 	and.w	r2, r2, #3
 80050a6:	0092      	lsls	r2, r2, #2
 80050a8:	4093      	lsls	r3, r2
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050b0:	4935      	ldr	r1, [pc, #212]	; (8005188 <HAL_GPIO_Init+0x2ec>)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	089b      	lsrs	r3, r3, #2
 80050b6:	3302      	adds	r3, #2
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050be:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <HAL_GPIO_Init+0x304>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	43db      	mvns	r3, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4013      	ands	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050e2:	4a2f      	ldr	r2, [pc, #188]	; (80051a0 <HAL_GPIO_Init+0x304>)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050e8:	4b2d      	ldr	r3, [pc, #180]	; (80051a0 <HAL_GPIO_Init+0x304>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	43db      	mvns	r3, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4013      	ands	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800510c:	4a24      	ldr	r2, [pc, #144]	; (80051a0 <HAL_GPIO_Init+0x304>)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005112:	4b23      	ldr	r3, [pc, #140]	; (80051a0 <HAL_GPIO_Init+0x304>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	43db      	mvns	r3, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4013      	ands	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005136:	4a1a      	ldr	r2, [pc, #104]	; (80051a0 <HAL_GPIO_Init+0x304>)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800513c:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <HAL_GPIO_Init+0x304>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	43db      	mvns	r3, r3
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	4013      	ands	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005160:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <HAL_GPIO_Init+0x304>)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3301      	adds	r3, #1
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b0f      	cmp	r3, #15
 8005170:	f67f aea2 	bls.w	8004eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	3724      	adds	r7, #36	; 0x24
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800
 8005188:	40013800 	.word	0x40013800
 800518c:	40020000 	.word	0x40020000
 8005190:	40020400 	.word	0x40020400
 8005194:	40020800 	.word	0x40020800
 8005198:	40020c00 	.word	0x40020c00
 800519c:	40021000 	.word	0x40021000
 80051a0:	40013c00 	.word	0x40013c00

080051a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	807b      	strh	r3, [r7, #2]
 80051b0:	4613      	mov	r3, r2
 80051b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051b4:	787b      	ldrb	r3, [r7, #1]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051ba:	887a      	ldrh	r2, [r7, #2]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051c0:	e003      	b.n	80051ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051c2:	887b      	ldrh	r3, [r7, #2]
 80051c4:	041a      	lsls	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	619a      	str	r2, [r3, #24]
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e267      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d075      	beq.n	80052e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051f6:	4b88      	ldr	r3, [pc, #544]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d00c      	beq.n	800521c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005202:	4b85      	ldr	r3, [pc, #532]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800520a:	2b08      	cmp	r3, #8
 800520c:	d112      	bne.n	8005234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800520e:	4b82      	ldr	r3, [pc, #520]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521a:	d10b      	bne.n	8005234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521c:	4b7e      	ldr	r3, [pc, #504]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d05b      	beq.n	80052e0 <HAL_RCC_OscConfig+0x108>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d157      	bne.n	80052e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e242      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523c:	d106      	bne.n	800524c <HAL_RCC_OscConfig+0x74>
 800523e:	4b76      	ldr	r3, [pc, #472]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a75      	ldr	r2, [pc, #468]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e01d      	b.n	8005288 <HAL_RCC_OscConfig+0xb0>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005254:	d10c      	bne.n	8005270 <HAL_RCC_OscConfig+0x98>
 8005256:	4b70      	ldr	r3, [pc, #448]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a6f      	ldr	r2, [pc, #444]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 800525c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4b6d      	ldr	r3, [pc, #436]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a6c      	ldr	r2, [pc, #432]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e00b      	b.n	8005288 <HAL_RCC_OscConfig+0xb0>
 8005270:	4b69      	ldr	r3, [pc, #420]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a68      	ldr	r2, [pc, #416]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	4b66      	ldr	r3, [pc, #408]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a65      	ldr	r2, [pc, #404]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005290:	f7fe fd14 	bl	8003cbc <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005298:	f7fe fd10 	bl	8003cbc <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	; 0x64
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e207      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052aa:	4b5b      	ldr	r3, [pc, #364]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0xc0>
 80052b6:	e014      	b.n	80052e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fe fd00 	bl	8003cbc <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c0:	f7fe fcfc 	bl	8003cbc <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e1f3      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052d2:	4b51      	ldr	r3, [pc, #324]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0xe8>
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d063      	beq.n	80053b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052ee:	4b4a      	ldr	r3, [pc, #296]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052fa:	4b47      	ldr	r3, [pc, #284]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005302:	2b08      	cmp	r3, #8
 8005304:	d11c      	bne.n	8005340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005306:	4b44      	ldr	r3, [pc, #272]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d116      	bne.n	8005340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005312:	4b41      	ldr	r3, [pc, #260]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_RCC_OscConfig+0x152>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d001      	beq.n	800532a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e1c7      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532a:	4b3b      	ldr	r3, [pc, #236]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4937      	ldr	r1, [pc, #220]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 800533a:	4313      	orrs	r3, r2
 800533c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533e:	e03a      	b.n	80053b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d020      	beq.n	800538a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005348:	4b34      	ldr	r3, [pc, #208]	; (800541c <HAL_RCC_OscConfig+0x244>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fe fcb5 	bl	8003cbc <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005356:	f7fe fcb1 	bl	8003cbc <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e1a8      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005368:	4b2b      	ldr	r3, [pc, #172]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005374:	4b28      	ldr	r3, [pc, #160]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4925      	ldr	r1, [pc, #148]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 8005384:	4313      	orrs	r3, r2
 8005386:	600b      	str	r3, [r1, #0]
 8005388:	e015      	b.n	80053b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800538a:	4b24      	ldr	r3, [pc, #144]	; (800541c <HAL_RCC_OscConfig+0x244>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fe fc94 	bl	8003cbc <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005398:	f7fe fc90 	bl	8003cbc <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e187      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053aa:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d036      	beq.n	8005430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ca:	4b15      	ldr	r3, [pc, #84]	; (8005420 <HAL_RCC_OscConfig+0x248>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d0:	f7fe fc74 	bl	8003cbc <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053d8:	f7fe fc70 	bl	8003cbc <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e167      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <HAL_RCC_OscConfig+0x240>)
 80053ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x200>
 80053f6:	e01b      	b.n	8005430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <HAL_RCC_OscConfig+0x248>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053fe:	f7fe fc5d 	bl	8003cbc <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005404:	e00e      	b.n	8005424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005406:	f7fe fc59 	bl	8003cbc <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d907      	bls.n	8005424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e150      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
 8005418:	40023800 	.word	0x40023800
 800541c:	42470000 	.word	0x42470000
 8005420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005424:	4b88      	ldr	r3, [pc, #544]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1ea      	bne.n	8005406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 8097 	beq.w	800556c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800543e:	2300      	movs	r3, #0
 8005440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005442:	4b81      	ldr	r3, [pc, #516]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10f      	bne.n	800546e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	4b7d      	ldr	r3, [pc, #500]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	4a7c      	ldr	r2, [pc, #496]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545c:	6413      	str	r3, [r2, #64]	; 0x40
 800545e:	4b7a      	ldr	r3, [pc, #488]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800546a:	2301      	movs	r3, #1
 800546c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800546e:	4b77      	ldr	r3, [pc, #476]	; (800564c <HAL_RCC_OscConfig+0x474>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005476:	2b00      	cmp	r3, #0
 8005478:	d118      	bne.n	80054ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800547a:	4b74      	ldr	r3, [pc, #464]	; (800564c <HAL_RCC_OscConfig+0x474>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a73      	ldr	r2, [pc, #460]	; (800564c <HAL_RCC_OscConfig+0x474>)
 8005480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005486:	f7fe fc19 	bl	8003cbc <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548e:	f7fe fc15 	bl	8003cbc <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e10c      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a0:	4b6a      	ldr	r3, [pc, #424]	; (800564c <HAL_RCC_OscConfig+0x474>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d106      	bne.n	80054c2 <HAL_RCC_OscConfig+0x2ea>
 80054b4:	4b64      	ldr	r3, [pc, #400]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	4a63      	ldr	r2, [pc, #396]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	6713      	str	r3, [r2, #112]	; 0x70
 80054c0:	e01c      	b.n	80054fc <HAL_RCC_OscConfig+0x324>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x30c>
 80054ca:	4b5f      	ldr	r3, [pc, #380]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	4a5e      	ldr	r2, [pc, #376]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80054d0:	f043 0304 	orr.w	r3, r3, #4
 80054d4:	6713      	str	r3, [r2, #112]	; 0x70
 80054d6:	4b5c      	ldr	r3, [pc, #368]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	4a5b      	ldr	r2, [pc, #364]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	6713      	str	r3, [r2, #112]	; 0x70
 80054e2:	e00b      	b.n	80054fc <HAL_RCC_OscConfig+0x324>
 80054e4:	4b58      	ldr	r3, [pc, #352]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	4a57      	ldr	r2, [pc, #348]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	6713      	str	r3, [r2, #112]	; 0x70
 80054f0:	4b55      	ldr	r3, [pc, #340]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f4:	4a54      	ldr	r2, [pc, #336]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80054f6:	f023 0304 	bic.w	r3, r3, #4
 80054fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d015      	beq.n	8005530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fe fbda 	bl	8003cbc <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550a:	e00a      	b.n	8005522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800550c:	f7fe fbd6 	bl	8003cbc <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e0cb      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005522:	4b49      	ldr	r3, [pc, #292]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0ee      	beq.n	800550c <HAL_RCC_OscConfig+0x334>
 800552e:	e014      	b.n	800555a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005530:	f7fe fbc4 	bl	8003cbc <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005536:	e00a      	b.n	800554e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005538:	f7fe fbc0 	bl	8003cbc <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	; 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e0b5      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800554e:	4b3e      	ldr	r3, [pc, #248]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1ee      	bne.n	8005538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800555a:	7dfb      	ldrb	r3, [r7, #23]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d105      	bne.n	800556c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005560:	4b39      	ldr	r3, [pc, #228]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	4a38      	ldr	r2, [pc, #224]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800556a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80a1 	beq.w	80056b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005576:	4b34      	ldr	r3, [pc, #208]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 030c 	and.w	r3, r3, #12
 800557e:	2b08      	cmp	r3, #8
 8005580:	d05c      	beq.n	800563c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d141      	bne.n	800560e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558a:	4b31      	ldr	r3, [pc, #196]	; (8005650 <HAL_RCC_OscConfig+0x478>)
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7fe fb94 	bl	8003cbc <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005598:	f7fe fb90 	bl	8003cbc <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e087      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055aa:	4b27      	ldr	r3, [pc, #156]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	019b      	lsls	r3, r3, #6
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	3b01      	subs	r3, #1
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	061b      	lsls	r3, r3, #24
 80055da:	491b      	ldr	r1, [pc, #108]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e0:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <HAL_RCC_OscConfig+0x478>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fe fb69 	bl	8003cbc <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fe fb65 	bl	8003cbc <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e05c      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005600:	4b11      	ldr	r3, [pc, #68]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x416>
 800560c:	e054      	b.n	80056b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	4b10      	ldr	r3, [pc, #64]	; (8005650 <HAL_RCC_OscConfig+0x478>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7fe fb52 	bl	8003cbc <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561c:	f7fe fb4e 	bl	8003cbc <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e045      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <HAL_RCC_OscConfig+0x470>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x444>
 800563a:	e03d      	b.n	80056b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d107      	bne.n	8005654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e038      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
 8005648:	40023800 	.word	0x40023800
 800564c:	40007000 	.word	0x40007000
 8005650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005654:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <HAL_RCC_OscConfig+0x4ec>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d028      	beq.n	80056b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800566c:	429a      	cmp	r2, r3
 800566e:	d121      	bne.n	80056b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d11a      	bne.n	80056b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005684:	4013      	ands	r3, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800568a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800568c:	4293      	cmp	r3, r2
 800568e:	d111      	bne.n	80056b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	3b01      	subs	r3, #1
 800569e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800

080056c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0cc      	b.n	8005876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056dc:	4b68      	ldr	r3, [pc, #416]	; (8005880 <HAL_RCC_ClockConfig+0x1b8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d90c      	bls.n	8005704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ea:	4b65      	ldr	r3, [pc, #404]	; (8005880 <HAL_RCC_ClockConfig+0x1b8>)
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b63      	ldr	r3, [pc, #396]	; (8005880 <HAL_RCC_ClockConfig+0x1b8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d001      	beq.n	8005704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0b8      	b.n	8005876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d020      	beq.n	8005752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800571c:	4b59      	ldr	r3, [pc, #356]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4a58      	ldr	r2, [pc, #352]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005734:	4b53      	ldr	r3, [pc, #332]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	4a52      	ldr	r2, [pc, #328]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800573e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005740:	4b50      	ldr	r3, [pc, #320]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	494d      	ldr	r1, [pc, #308]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	4313      	orrs	r3, r2
 8005750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d044      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d107      	bne.n	8005776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005766:	4b47      	ldr	r3, [pc, #284]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d119      	bne.n	80057a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e07f      	b.n	8005876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d003      	beq.n	8005786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005782:	2b03      	cmp	r3, #3
 8005784:	d107      	bne.n	8005796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005786:	4b3f      	ldr	r3, [pc, #252]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d109      	bne.n	80057a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e06f      	b.n	8005876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005796:	4b3b      	ldr	r3, [pc, #236]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e067      	b.n	8005876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057a6:	4b37      	ldr	r3, [pc, #220]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f023 0203 	bic.w	r2, r3, #3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	4934      	ldr	r1, [pc, #208]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057b8:	f7fe fa80 	bl	8003cbc <HAL_GetTick>
 80057bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057be:	e00a      	b.n	80057d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c0:	f7fe fa7c 	bl	8003cbc <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e04f      	b.n	8005876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d6:	4b2b      	ldr	r3, [pc, #172]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 020c 	and.w	r2, r3, #12
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d1eb      	bne.n	80057c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057e8:	4b25      	ldr	r3, [pc, #148]	; (8005880 <HAL_RCC_ClockConfig+0x1b8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d20c      	bcs.n	8005810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f6:	4b22      	ldr	r3, [pc, #136]	; (8005880 <HAL_RCC_ClockConfig+0x1b8>)
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fe:	4b20      	ldr	r3, [pc, #128]	; (8005880 <HAL_RCC_ClockConfig+0x1b8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d001      	beq.n	8005810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e032      	b.n	8005876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800581c:	4b19      	ldr	r3, [pc, #100]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	4916      	ldr	r1, [pc, #88]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800583a:	4b12      	ldr	r3, [pc, #72]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	490e      	ldr	r1, [pc, #56]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800584e:	f000 f821 	bl	8005894 <HAL_RCC_GetSysClockFreq>
 8005852:	4602      	mov	r2, r0
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	490a      	ldr	r1, [pc, #40]	; (8005888 <HAL_RCC_ClockConfig+0x1c0>)
 8005860:	5ccb      	ldrb	r3, [r1, r3]
 8005862:	fa22 f303 	lsr.w	r3, r2, r3
 8005866:	4a09      	ldr	r2, [pc, #36]	; (800588c <HAL_RCC_ClockConfig+0x1c4>)
 8005868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800586a:	4b09      	ldr	r3, [pc, #36]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe f9e0 	bl	8003c34 <HAL_InitTick>

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40023c00 	.word	0x40023c00
 8005884:	40023800 	.word	0x40023800
 8005888:	0800d44c 	.word	0x0800d44c
 800588c:	20000018 	.word	0x20000018
 8005890:	200002f0 	.word	0x200002f0

08005894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005898:	b094      	sub	sp, #80	; 0x50
 800589a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	647b      	str	r3, [r7, #68]	; 0x44
 80058a0:	2300      	movs	r3, #0
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a4:	2300      	movs	r3, #0
 80058a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ac:	4b79      	ldr	r3, [pc, #484]	; (8005a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 030c 	and.w	r3, r3, #12
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d00d      	beq.n	80058d4 <HAL_RCC_GetSysClockFreq+0x40>
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	f200 80e1 	bhi.w	8005a80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_RCC_GetSysClockFreq+0x34>
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d003      	beq.n	80058ce <HAL_RCC_GetSysClockFreq+0x3a>
 80058c6:	e0db      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058c8:	4b73      	ldr	r3, [pc, #460]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x204>)
 80058ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058cc:	e0db      	b.n	8005a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058ce:	4b73      	ldr	r3, [pc, #460]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x208>)
 80058d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058d2:	e0d8      	b.n	8005a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058d4:	4b6f      	ldr	r3, [pc, #444]	; (8005a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058de:	4b6d      	ldr	r3, [pc, #436]	; (8005a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d063      	beq.n	80059b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ea:	4b6a      	ldr	r3, [pc, #424]	; (8005a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	099b      	lsrs	r3, r3, #6
 80058f0:	2200      	movs	r2, #0
 80058f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80058f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30
 80058fe:	2300      	movs	r3, #0
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
 8005902:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005906:	4622      	mov	r2, r4
 8005908:	462b      	mov	r3, r5
 800590a:	f04f 0000 	mov.w	r0, #0
 800590e:	f04f 0100 	mov.w	r1, #0
 8005912:	0159      	lsls	r1, r3, #5
 8005914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005918:	0150      	lsls	r0, r2, #5
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4621      	mov	r1, r4
 8005920:	1a51      	subs	r1, r2, r1
 8005922:	6139      	str	r1, [r7, #16]
 8005924:	4629      	mov	r1, r5
 8005926:	eb63 0301 	sbc.w	r3, r3, r1
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005938:	4659      	mov	r1, fp
 800593a:	018b      	lsls	r3, r1, #6
 800593c:	4651      	mov	r1, sl
 800593e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005942:	4651      	mov	r1, sl
 8005944:	018a      	lsls	r2, r1, #6
 8005946:	4651      	mov	r1, sl
 8005948:	ebb2 0801 	subs.w	r8, r2, r1
 800594c:	4659      	mov	r1, fp
 800594e:	eb63 0901 	sbc.w	r9, r3, r1
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800595e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005966:	4690      	mov	r8, r2
 8005968:	4699      	mov	r9, r3
 800596a:	4623      	mov	r3, r4
 800596c:	eb18 0303 	adds.w	r3, r8, r3
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	462b      	mov	r3, r5
 8005974:	eb49 0303 	adc.w	r3, r9, r3
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005986:	4629      	mov	r1, r5
 8005988:	024b      	lsls	r3, r1, #9
 800598a:	4621      	mov	r1, r4
 800598c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005990:	4621      	mov	r1, r4
 8005992:	024a      	lsls	r2, r1, #9
 8005994:	4610      	mov	r0, r2
 8005996:	4619      	mov	r1, r3
 8005998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800599a:	2200      	movs	r2, #0
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
 800599e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059a4:	f7fb f938 	bl	8000c18 <__aeabi_uldivmod>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4613      	mov	r3, r2
 80059ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b0:	e058      	b.n	8005a64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059b2:	4b38      	ldr	r3, [pc, #224]	; (8005a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	099b      	lsrs	r3, r3, #6
 80059b8:	2200      	movs	r2, #0
 80059ba:	4618      	mov	r0, r3
 80059bc:	4611      	mov	r1, r2
 80059be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059c2:	623b      	str	r3, [r7, #32]
 80059c4:	2300      	movs	r3, #0
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
 80059c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	f04f 0000 	mov.w	r0, #0
 80059d4:	f04f 0100 	mov.w	r1, #0
 80059d8:	0159      	lsls	r1, r3, #5
 80059da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059de:	0150      	lsls	r0, r2, #5
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4641      	mov	r1, r8
 80059e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80059ea:	4649      	mov	r1, r9
 80059ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a04:	ebb2 040a 	subs.w	r4, r2, sl
 8005a08:	eb63 050b 	sbc.w	r5, r3, fp
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	00eb      	lsls	r3, r5, #3
 8005a16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a1a:	00e2      	lsls	r2, r4, #3
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	461d      	mov	r5, r3
 8005a20:	4643      	mov	r3, r8
 8005a22:	18e3      	adds	r3, r4, r3
 8005a24:	603b      	str	r3, [r7, #0]
 8005a26:	464b      	mov	r3, r9
 8005a28:	eb45 0303 	adc.w	r3, r5, r3
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	028b      	lsls	r3, r1, #10
 8005a3e:	4621      	mov	r1, r4
 8005a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a44:	4621      	mov	r1, r4
 8005a46:	028a      	lsls	r2, r1, #10
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4e:	2200      	movs	r2, #0
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	61fa      	str	r2, [r7, #28]
 8005a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a58:	f7fb f8de 	bl	8000c18 <__aeabi_uldivmod>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4613      	mov	r3, r2
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	0c1b      	lsrs	r3, r3, #16
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	3301      	adds	r3, #1
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a7e:	e002      	b.n	8005a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3750      	adds	r7, #80	; 0x50
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a92:	bf00      	nop
 8005a94:	40023800 	.word	0x40023800
 8005a98:	00f42400 	.word	0x00f42400
 8005a9c:	007a1200 	.word	0x007a1200

08005aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000018 	.word	0x20000018

08005ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005abc:	f7ff fff0 	bl	8005aa0 <HAL_RCC_GetHCLKFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	0a9b      	lsrs	r3, r3, #10
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	4903      	ldr	r1, [pc, #12]	; (8005adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	0800d45c 	.word	0x0800d45c

08005ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ae4:	f7ff ffdc 	bl	8005aa0 <HAL_RCC_GetHCLKFreq>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0b5b      	lsrs	r3, r3, #13
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	4903      	ldr	r1, [pc, #12]	; (8005b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005af6:	5ccb      	ldrb	r3, [r1, r3]
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40023800 	.word	0x40023800
 8005b04:	0800d45c 	.word	0x0800d45c

08005b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e03f      	b.n	8005b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fc ff80 	bl	8002a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	; 0x24
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fc23 	bl	8006398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695a      	ldr	r2, [r3, #20]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b08a      	sub	sp, #40	; 0x28
 8005ba6:	af02      	add	r7, sp, #8
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	603b      	str	r3, [r7, #0]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d17c      	bne.n	8005cbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_UART_Transmit+0x2c>
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e075      	b.n	8005cbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_UART_Transmit+0x3e>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e06e      	b.n	8005cbe <HAL_UART_Transmit+0x11c>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2221      	movs	r2, #33	; 0x21
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bf6:	f7fe f861 	bl	8003cbc <HAL_GetTick>
 8005bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	88fa      	ldrh	r2, [r7, #6]
 8005c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c10:	d108      	bne.n	8005c24 <HAL_UART_Transmit+0x82>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e003      	b.n	8005c2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c34:	e02a      	b.n	8005c8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2180      	movs	r1, #128	; 0x80
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fa11 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e036      	b.n	8005cbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	3302      	adds	r3, #2
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	e007      	b.n	8005c7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1cf      	bne.n	8005c36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2140      	movs	r1, #64	; 0x40
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f9e1 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e006      	b.n	8005cbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e000      	b.n	8005cbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d11d      	bne.n	8005d1c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <HAL_UART_Receive_DMA+0x26>
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e016      	b.n	8005d1e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_UART_Receive_DMA+0x38>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e00f      	b.n	8005d1e <HAL_UART_Receive_DMA+0x58>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fa16 	bl	8006144 <UART_Start_Receive_DMA>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	e000      	b.n	8005d1e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
  }
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b090      	sub	sp, #64	; 0x40
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3c:	2b80      	cmp	r3, #128	; 0x80
 8005d3e:	bf0c      	ite	eq
 8005d40:	2301      	moveq	r3, #1
 8005d42:	2300      	movne	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b21      	cmp	r3, #33	; 0x21
 8005d52:	d128      	bne.n	8005da6 <HAL_UART_DMAStop+0x80>
 8005d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d025      	beq.n	8005da6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3314      	adds	r3, #20
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	623b      	str	r3, [r7, #32]
   return(result);
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e5      	bne.n	8005d5a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fe fda4 	bl	80048e8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa6d 	bl	8006280 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	bf0c      	ite	eq
 8005db4:	2301      	moveq	r3, #1
 8005db6:	2300      	movne	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b22      	cmp	r3, #34	; 0x22
 8005dc6:	d128      	bne.n	8005e1a <HAL_UART_DMAStop+0xf4>
 8005dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d025      	beq.n	8005e1a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3314      	adds	r3, #20
 8005dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de4:	637b      	str	r3, [r7, #52]	; 0x34
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3314      	adds	r3, #20
 8005dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dee:	61fa      	str	r2, [r7, #28]
 8005df0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	69b9      	ldr	r1, [r7, #24]
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e5      	bne.n	8005dce <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe fd6a 	bl	80048e8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fa5b 	bl	80062d0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3740      	adds	r7, #64	; 0x40
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b09c      	sub	sp, #112	; 0x70
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d172      	bne.n	8005f7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e96:	2200      	movs	r2, #0
 8005e98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	330c      	adds	r3, #12
 8005eb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eba:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ebc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ec0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e5      	bne.n	8005e9a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3314      	adds	r3, #20
 8005ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3314      	adds	r3, #20
 8005eec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005eee:	647a      	str	r2, [r7, #68]	; 0x44
 8005ef0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e5      	bne.n	8005ece <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3314      	adds	r3, #20
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	623b      	str	r3, [r7, #32]
   return(result);
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f18:	663b      	str	r3, [r7, #96]	; 0x60
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3314      	adds	r3, #20
 8005f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f22:	633a      	str	r2, [r7, #48]	; 0x30
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e5      	bne.n	8005f02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d119      	bne.n	8005f7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 0310 	bic.w	r3, r3, #16
 8005f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	330c      	adds	r3, #12
 8005f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f66:	61fa      	str	r2, [r7, #28]
 8005f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	69b9      	ldr	r1, [r7, #24]
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	617b      	str	r3, [r7, #20]
   return(result);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e5      	bne.n	8005f46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d106      	bne.n	8005f90 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f86:	4619      	mov	r1, r3
 8005f88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f8a:	f7ff ff69 	bl	8005e60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f8e:	e002      	b.n	8005f96 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005f90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f92:	f7ff ff47 	bl	8005e24 <HAL_UART_RxCpltCallback>
}
 8005f96:	bf00      	nop
 8005f98:	3770      	adds	r7, #112	; 0x70
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d108      	bne.n	8005fc6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff ff4e 	bl	8005e60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fc4:	e002      	b.n	8005fcc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7ff ff36 	bl	8005e38 <HAL_UART_RxHalfCpltCallback>
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2301      	moveq	r3, #1
 8005ff6:	2300      	movne	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b21      	cmp	r3, #33	; 0x21
 8006006:	d108      	bne.n	800601a <UART_DMAError+0x46>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2200      	movs	r2, #0
 8006012:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006014:	68b8      	ldr	r0, [r7, #8]
 8006016:	f000 f933 	bl	8006280 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b22      	cmp	r3, #34	; 0x22
 800603a:	d108      	bne.n	800604e <UART_DMAError+0x7a>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2200      	movs	r2, #0
 8006046:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006048:	68b8      	ldr	r0, [r7, #8]
 800604a:	f000 f941 	bl	80062d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f043 0210 	orr.w	r2, r3, #16
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800605a:	68b8      	ldr	r0, [r7, #8]
 800605c:	f7ff fef6 	bl	8005e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b090      	sub	sp, #64	; 0x40
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	4613      	mov	r3, r2
 8006076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006078:	e050      	b.n	800611c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d04c      	beq.n	800611c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <UART_WaitOnFlagUntilTimeout+0x30>
 8006088:	f7fd fe18 	bl	8003cbc <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006094:	429a      	cmp	r2, r3
 8006096:	d241      	bcs.n	800611c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060b8:	637a      	str	r2, [r7, #52]	; 0x34
 80060ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e5      	bne.n	8006098 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3314      	adds	r3, #20
 80060d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	613b      	str	r3, [r7, #16]
   return(result);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f023 0301 	bic.w	r3, r3, #1
 80060e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ec:	623a      	str	r2, [r7, #32]
 80060ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	69f9      	ldr	r1, [r7, #28]
 80060f2:	6a3a      	ldr	r2, [r7, #32]
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e5      	bne.n	80060cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e00f      	b.n	800613c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4013      	ands	r3, r2
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	429a      	cmp	r2, r3
 8006138:	d09f      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3740      	adds	r7, #64	; 0x40
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b098      	sub	sp, #96	; 0x60
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	88fa      	ldrh	r2, [r7, #6]
 800615c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2222      	movs	r2, #34	; 0x22
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	4a40      	ldr	r2, [pc, #256]	; (8006274 <UART_Start_Receive_DMA+0x130>)
 8006172:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	4a3f      	ldr	r2, [pc, #252]	; (8006278 <UART_Start_Receive_DMA+0x134>)
 800617a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	4a3e      	ldr	r2, [pc, #248]	; (800627c <UART_Start_Receive_DMA+0x138>)
 8006182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	2200      	movs	r2, #0
 800618a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800618c:	f107 0308 	add.w	r3, r7, #8
 8006190:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	f7fe fb48 	bl	8004838 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80061a8:	2300      	movs	r3, #0
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d019      	beq.n	8006202 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	330c      	adds	r3, #12
 80061ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80061f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80061f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80061fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e5      	bne.n	80061ce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3314      	adds	r3, #20
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	657b      	str	r3, [r7, #84]	; 0x54
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006222:	63ba      	str	r2, [r7, #56]	; 0x38
 8006224:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e5      	bne.n	8006202 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3314      	adds	r3, #20
 800623c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	617b      	str	r3, [r7, #20]
   return(result);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800624c:	653b      	str	r3, [r7, #80]	; 0x50
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3314      	adds	r3, #20
 8006254:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006256:	627a      	str	r2, [r7, #36]	; 0x24
 8006258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6a39      	ldr	r1, [r7, #32]
 800625c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	61fb      	str	r3, [r7, #28]
   return(result);
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e5      	bne.n	8006236 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3760      	adds	r7, #96	; 0x60
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	08005e79 	.word	0x08005e79
 8006278:	08005f9f 	.word	0x08005f9f
 800627c:	08005fd5 	.word	0x08005fd5

08006280 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b089      	sub	sp, #36	; 0x24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	60bb      	str	r3, [r7, #8]
   return(result);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800629e:	61fb      	str	r3, [r7, #28]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	61ba      	str	r2, [r7, #24]
 80062aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6979      	ldr	r1, [r7, #20]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	613b      	str	r3, [r7, #16]
   return(result);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e5      	bne.n	8006288 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80062c4:	bf00      	nop
 80062c6:	3724      	adds	r7, #36	; 0x24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b095      	sub	sp, #84	; 0x54
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	330c      	adds	r3, #12
 80062de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	330c      	adds	r3, #12
 80062f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062f8:	643a      	str	r2, [r7, #64]	; 0x40
 80062fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e5      	bne.n	80062d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3314      	adds	r3, #20
 8006312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	61fb      	str	r3, [r7, #28]
   return(result);
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f023 0301 	bic.w	r3, r3, #1
 8006322:	64bb      	str	r3, [r7, #72]	; 0x48
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3314      	adds	r3, #20
 800632a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800632c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e5      	bne.n	800630c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	2b01      	cmp	r3, #1
 8006346:	d119      	bne.n	800637c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	330c      	adds	r3, #12
 800634e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	60bb      	str	r3, [r7, #8]
   return(result);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f023 0310 	bic.w	r3, r3, #16
 800635e:	647b      	str	r3, [r7, #68]	; 0x44
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006368:	61ba      	str	r2, [r7, #24]
 800636a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6979      	ldr	r1, [r7, #20]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	613b      	str	r3, [r7, #16]
   return(result);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e5      	bne.n	8006348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	631a      	str	r2, [r3, #48]	; 0x30
}
 800638a:	bf00      	nop
 800638c:	3754      	adds	r7, #84	; 0x54
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800639c:	b0c0      	sub	sp, #256	; 0x100
 800639e:	af00      	add	r7, sp, #0
 80063a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b4:	68d9      	ldr	r1, [r3, #12]
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	ea40 0301 	orr.w	r3, r0, r1
 80063c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063f0:	f021 010c 	bic.w	r1, r1, #12
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063fe:	430b      	orrs	r3, r1
 8006400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800640e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006412:	6999      	ldr	r1, [r3, #24]
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	ea40 0301 	orr.w	r3, r0, r1
 800641e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b8f      	ldr	r3, [pc, #572]	; (8006664 <UART_SetConfig+0x2cc>)
 8006428:	429a      	cmp	r2, r3
 800642a:	d005      	beq.n	8006438 <UART_SetConfig+0xa0>
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b8d      	ldr	r3, [pc, #564]	; (8006668 <UART_SetConfig+0x2d0>)
 8006434:	429a      	cmp	r2, r3
 8006436:	d104      	bne.n	8006442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006438:	f7ff fb52 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 800643c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006440:	e003      	b.n	800644a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006442:	f7ff fb39 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006446:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006454:	f040 810c 	bne.w	8006670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800645c:	2200      	movs	r2, #0
 800645e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006462:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	1891      	adds	r1, r2, r2
 8006470:	65b9      	str	r1, [r7, #88]	; 0x58
 8006472:	415b      	adcs	r3, r3
 8006474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800647a:	4621      	mov	r1, r4
 800647c:	eb12 0801 	adds.w	r8, r2, r1
 8006480:	4629      	mov	r1, r5
 8006482:	eb43 0901 	adc.w	r9, r3, r1
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800649a:	4690      	mov	r8, r2
 800649c:	4699      	mov	r9, r3
 800649e:	4623      	mov	r3, r4
 80064a0:	eb18 0303 	adds.w	r3, r8, r3
 80064a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064a8:	462b      	mov	r3, r5
 80064aa:	eb49 0303 	adc.w	r3, r9, r3
 80064ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064c6:	460b      	mov	r3, r1
 80064c8:	18db      	adds	r3, r3, r3
 80064ca:	653b      	str	r3, [r7, #80]	; 0x50
 80064cc:	4613      	mov	r3, r2
 80064ce:	eb42 0303 	adc.w	r3, r2, r3
 80064d2:	657b      	str	r3, [r7, #84]	; 0x54
 80064d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80064dc:	f7fa fb9c 	bl	8000c18 <__aeabi_uldivmod>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4b61      	ldr	r3, [pc, #388]	; (800666c <UART_SetConfig+0x2d4>)
 80064e6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	011c      	lsls	r4, r3, #4
 80064ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006500:	4642      	mov	r2, r8
 8006502:	464b      	mov	r3, r9
 8006504:	1891      	adds	r1, r2, r2
 8006506:	64b9      	str	r1, [r7, #72]	; 0x48
 8006508:	415b      	adcs	r3, r3
 800650a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006510:	4641      	mov	r1, r8
 8006512:	eb12 0a01 	adds.w	sl, r2, r1
 8006516:	4649      	mov	r1, r9
 8006518:	eb43 0b01 	adc.w	fp, r3, r1
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800652c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006530:	4692      	mov	sl, r2
 8006532:	469b      	mov	fp, r3
 8006534:	4643      	mov	r3, r8
 8006536:	eb1a 0303 	adds.w	r3, sl, r3
 800653a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800653e:	464b      	mov	r3, r9
 8006540:	eb4b 0303 	adc.w	r3, fp, r3
 8006544:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006554:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800655c:	460b      	mov	r3, r1
 800655e:	18db      	adds	r3, r3, r3
 8006560:	643b      	str	r3, [r7, #64]	; 0x40
 8006562:	4613      	mov	r3, r2
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	647b      	str	r3, [r7, #68]	; 0x44
 800656a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800656e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006572:	f7fa fb51 	bl	8000c18 <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4611      	mov	r1, r2
 800657c:	4b3b      	ldr	r3, [pc, #236]	; (800666c <UART_SetConfig+0x2d4>)
 800657e:	fba3 2301 	umull	r2, r3, r3, r1
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	2264      	movs	r2, #100	; 0x64
 8006586:	fb02 f303 	mul.w	r3, r2, r3
 800658a:	1acb      	subs	r3, r1, r3
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006592:	4b36      	ldr	r3, [pc, #216]	; (800666c <UART_SetConfig+0x2d4>)
 8006594:	fba3 2302 	umull	r2, r3, r3, r2
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065a0:	441c      	add	r4, r3
 80065a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065b4:	4642      	mov	r2, r8
 80065b6:	464b      	mov	r3, r9
 80065b8:	1891      	adds	r1, r2, r2
 80065ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80065bc:	415b      	adcs	r3, r3
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065c4:	4641      	mov	r1, r8
 80065c6:	1851      	adds	r1, r2, r1
 80065c8:	6339      	str	r1, [r7, #48]	; 0x30
 80065ca:	4649      	mov	r1, r9
 80065cc:	414b      	adcs	r3, r1
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80065dc:	4659      	mov	r1, fp
 80065de:	00cb      	lsls	r3, r1, #3
 80065e0:	4651      	mov	r1, sl
 80065e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e6:	4651      	mov	r1, sl
 80065e8:	00ca      	lsls	r2, r1, #3
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	4642      	mov	r2, r8
 80065f2:	189b      	adds	r3, r3, r2
 80065f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f8:	464b      	mov	r3, r9
 80065fa:	460a      	mov	r2, r1
 80065fc:	eb42 0303 	adc.w	r3, r2, r3
 8006600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006610:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006618:	460b      	mov	r3, r1
 800661a:	18db      	adds	r3, r3, r3
 800661c:	62bb      	str	r3, [r7, #40]	; 0x28
 800661e:	4613      	mov	r3, r2
 8006620:	eb42 0303 	adc.w	r3, r2, r3
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800662a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800662e:	f7fa faf3 	bl	8000c18 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <UART_SetConfig+0x2d4>)
 8006638:	fba3 1302 	umull	r1, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	2164      	movs	r1, #100	; 0x64
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	3332      	adds	r3, #50	; 0x32
 800664a:	4a08      	ldr	r2, [pc, #32]	; (800666c <UART_SetConfig+0x2d4>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f003 0207 	and.w	r2, r3, #7
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4422      	add	r2, r4
 800665e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006660:	e105      	b.n	800686e <UART_SetConfig+0x4d6>
 8006662:	bf00      	nop
 8006664:	40011000 	.word	0x40011000
 8006668:	40011400 	.word	0x40011400
 800666c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006674:	2200      	movs	r2, #0
 8006676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800667a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800667e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006682:	4642      	mov	r2, r8
 8006684:	464b      	mov	r3, r9
 8006686:	1891      	adds	r1, r2, r2
 8006688:	6239      	str	r1, [r7, #32]
 800668a:	415b      	adcs	r3, r3
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
 800668e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006692:	4641      	mov	r1, r8
 8006694:	1854      	adds	r4, r2, r1
 8006696:	4649      	mov	r1, r9
 8006698:	eb43 0501 	adc.w	r5, r3, r1
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	00eb      	lsls	r3, r5, #3
 80066a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066aa:	00e2      	lsls	r2, r4, #3
 80066ac:	4614      	mov	r4, r2
 80066ae:	461d      	mov	r5, r3
 80066b0:	4643      	mov	r3, r8
 80066b2:	18e3      	adds	r3, r4, r3
 80066b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066b8:	464b      	mov	r3, r9
 80066ba:	eb45 0303 	adc.w	r3, r5, r3
 80066be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80066de:	4629      	mov	r1, r5
 80066e0:	008b      	lsls	r3, r1, #2
 80066e2:	4621      	mov	r1, r4
 80066e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e8:	4621      	mov	r1, r4
 80066ea:	008a      	lsls	r2, r1, #2
 80066ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066f0:	f7fa fa92 	bl	8000c18 <__aeabi_uldivmod>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4b60      	ldr	r3, [pc, #384]	; (800687c <UART_SetConfig+0x4e4>)
 80066fa:	fba3 2302 	umull	r2, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	011c      	lsls	r4, r3, #4
 8006702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006706:	2200      	movs	r2, #0
 8006708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800670c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	1891      	adds	r1, r2, r2
 800671a:	61b9      	str	r1, [r7, #24]
 800671c:	415b      	adcs	r3, r3
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006724:	4641      	mov	r1, r8
 8006726:	1851      	adds	r1, r2, r1
 8006728:	6139      	str	r1, [r7, #16]
 800672a:	4649      	mov	r1, r9
 800672c:	414b      	adcs	r3, r1
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800673c:	4659      	mov	r1, fp
 800673e:	00cb      	lsls	r3, r1, #3
 8006740:	4651      	mov	r1, sl
 8006742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006746:	4651      	mov	r1, sl
 8006748:	00ca      	lsls	r2, r1, #3
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	4603      	mov	r3, r0
 8006750:	4642      	mov	r2, r8
 8006752:	189b      	adds	r3, r3, r2
 8006754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006758:	464b      	mov	r3, r9
 800675a:	460a      	mov	r2, r1
 800675c:	eb42 0303 	adc.w	r3, r2, r3
 8006760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	67bb      	str	r3, [r7, #120]	; 0x78
 800676e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800677c:	4649      	mov	r1, r9
 800677e:	008b      	lsls	r3, r1, #2
 8006780:	4641      	mov	r1, r8
 8006782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006786:	4641      	mov	r1, r8
 8006788:	008a      	lsls	r2, r1, #2
 800678a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800678e:	f7fa fa43 	bl	8000c18 <__aeabi_uldivmod>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4b39      	ldr	r3, [pc, #228]	; (800687c <UART_SetConfig+0x4e4>)
 8006798:	fba3 1302 	umull	r1, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	2164      	movs	r1, #100	; 0x64
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	3332      	adds	r3, #50	; 0x32
 80067aa:	4a34      	ldr	r2, [pc, #208]	; (800687c <UART_SetConfig+0x4e4>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b6:	441c      	add	r4, r3
 80067b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067bc:	2200      	movs	r2, #0
 80067be:	673b      	str	r3, [r7, #112]	; 0x70
 80067c0:	677a      	str	r2, [r7, #116]	; 0x74
 80067c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067c6:	4642      	mov	r2, r8
 80067c8:	464b      	mov	r3, r9
 80067ca:	1891      	adds	r1, r2, r2
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	415b      	adcs	r3, r3
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067d6:	4641      	mov	r1, r8
 80067d8:	1851      	adds	r1, r2, r1
 80067da:	6039      	str	r1, [r7, #0]
 80067dc:	4649      	mov	r1, r9
 80067de:	414b      	adcs	r3, r1
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067ee:	4659      	mov	r1, fp
 80067f0:	00cb      	lsls	r3, r1, #3
 80067f2:	4651      	mov	r1, sl
 80067f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f8:	4651      	mov	r1, sl
 80067fa:	00ca      	lsls	r2, r1, #3
 80067fc:	4610      	mov	r0, r2
 80067fe:	4619      	mov	r1, r3
 8006800:	4603      	mov	r3, r0
 8006802:	4642      	mov	r2, r8
 8006804:	189b      	adds	r3, r3, r2
 8006806:	66bb      	str	r3, [r7, #104]	; 0x68
 8006808:	464b      	mov	r3, r9
 800680a:	460a      	mov	r2, r1
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	663b      	str	r3, [r7, #96]	; 0x60
 800681c:	667a      	str	r2, [r7, #100]	; 0x64
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	f04f 0300 	mov.w	r3, #0
 8006826:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800682a:	4649      	mov	r1, r9
 800682c:	008b      	lsls	r3, r1, #2
 800682e:	4641      	mov	r1, r8
 8006830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006834:	4641      	mov	r1, r8
 8006836:	008a      	lsls	r2, r1, #2
 8006838:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800683c:	f7fa f9ec 	bl	8000c18 <__aeabi_uldivmod>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4b0d      	ldr	r3, [pc, #52]	; (800687c <UART_SetConfig+0x4e4>)
 8006846:	fba3 1302 	umull	r1, r3, r3, r2
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	2164      	movs	r1, #100	; 0x64
 800684e:	fb01 f303 	mul.w	r3, r1, r3
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	3332      	adds	r3, #50	; 0x32
 8006858:	4a08      	ldr	r2, [pc, #32]	; (800687c <UART_SetConfig+0x4e4>)
 800685a:	fba2 2303 	umull	r2, r3, r2, r3
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	f003 020f 	and.w	r2, r3, #15
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4422      	add	r2, r4
 800686c:	609a      	str	r2, [r3, #8]
}
 800686e:	bf00      	nop
 8006870:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006874:	46bd      	mov	sp, r7
 8006876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687a:	bf00      	nop
 800687c:	51eb851f 	.word	0x51eb851f

08006880 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800688e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006892:	2b84      	cmp	r3, #132	; 0x84
 8006894:	d005      	beq.n	80068a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006896:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	3303      	adds	r3, #3
 80068a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80068a2:	68fb      	ldr	r3, [r7, #12]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80068b4:	f000 fee0 	bl	8007678 <vTaskStartScheduler>
  
  return osOK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	bd80      	pop	{r7, pc}

080068be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068c0:	b089      	sub	sp, #36	; 0x24
 80068c2:	af04      	add	r7, sp, #16
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d020      	beq.n	8006912 <osThreadCreate+0x54>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01c      	beq.n	8006912 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685c      	ldr	r4, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681d      	ldr	r5, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691e      	ldr	r6, [r3, #16]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff ffc8 	bl	8006880 <makeFreeRtosPriority>
 80068f0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068fa:	9202      	str	r2, [sp, #8]
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	9100      	str	r1, [sp, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	4632      	mov	r2, r6
 8006904:	4629      	mov	r1, r5
 8006906:	4620      	mov	r0, r4
 8006908:	f000 fcee 	bl	80072e8 <xTaskCreateStatic>
 800690c:	4603      	mov	r3, r0
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e01c      	b.n	800694c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685c      	ldr	r4, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800691e:	b29e      	uxth	r6, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff ffaa 	bl	8006880 <makeFreeRtosPriority>
 800692c:	4602      	mov	r2, r0
 800692e:	f107 030c 	add.w	r3, r7, #12
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	9200      	str	r2, [sp, #0]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	4632      	mov	r2, r6
 800693a:	4629      	mov	r1, r5
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fd30 	bl	80073a2 <xTaskCreate>
 8006942:	4603      	mov	r3, r0
 8006944:	2b01      	cmp	r3, #1
 8006946:	d001      	beq.n	800694c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006948:	2300      	movs	r3, #0
 800694a:	e000      	b.n	800694e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800694c:	68fb      	ldr	r3, [r7, #12]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006956 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <osDelay+0x16>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	e000      	b.n	800696e <osDelay+0x18>
 800696c:	2301      	movs	r3, #1
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fe4e 	bl	8007610 <vTaskDelay>
  
  return osOK;
 8006974:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f103 0208 	add.w	r2, r3, #8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f103 0208 	add.w	r2, r3, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f103 0208 	add.w	r2, r3, #8
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	601a      	str	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a36:	d103      	bne.n	8006a40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	e00c      	b.n	8006a5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3308      	adds	r3, #8
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e002      	b.n	8006a4e <vListInsert+0x2e>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d2f6      	bcs.n	8006a48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	601a      	str	r2, [r3, #0]
}
 8006a86:	bf00      	nop
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a92:	b480      	push	{r7}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6892      	ldr	r2, [r2, #8]
 8006aa8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6852      	ldr	r2, [r2, #4]
 8006ab2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d103      	bne.n	8006ac6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	1e5a      	subs	r2, r3, #1
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
	...

08006ae8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b12:	f001 fcff 	bl	8008514 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1e:	68f9      	ldr	r1, [r7, #12]
 8006b20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b22:	fb01 f303 	mul.w	r3, r1, r3
 8006b26:	441a      	add	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b42:	3b01      	subs	r3, #1
 8006b44:	68f9      	ldr	r1, [r7, #12]
 8006b46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b48:	fb01 f303 	mul.w	r3, r1, r3
 8006b4c:	441a      	add	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	22ff      	movs	r2, #255	; 0xff
 8006b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	22ff      	movs	r2, #255	; 0xff
 8006b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d114      	bne.n	8006b92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01a      	beq.n	8006ba6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3310      	adds	r3, #16
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 ffc1 	bl	8007afc <xTaskRemoveFromEventList>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d012      	beq.n	8006ba6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b80:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <xQueueGenericReset+0xcc>)
 8006b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	e009      	b.n	8006ba6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3310      	adds	r3, #16
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff fef1 	bl	800697e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3324      	adds	r3, #36	; 0x24
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff feec 	bl	800697e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ba6:	f001 fce5 	bl	8008574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006baa:	2301      	movs	r3, #1
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	e000ed04 	.word	0xe000ed04

08006bb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08a      	sub	sp, #40	; 0x28
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	613b      	str	r3, [r7, #16]
}
 8006bde:	bf00      	nop
 8006be0:	e7fe      	b.n	8006be0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	fb02 f303 	mul.w	r3, r2, r3
 8006bea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	3348      	adds	r3, #72	; 0x48
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f001 fd71 	bl	80086d8 <pvPortMalloc>
 8006bf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d011      	beq.n	8006c22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	3348      	adds	r3, #72	; 0x48
 8006c06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c10:	79fa      	ldrb	r2, [r7, #7]
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	4613      	mov	r3, r2
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 f805 	bl	8006c2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c22:	69bb      	ldr	r3, [r7, #24]
	}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d103      	bne.n	8006c48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	e002      	b.n	8006c4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	69b8      	ldr	r0, [r7, #24]
 8006c5e:	f7ff ff43 	bl	8006ae8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00e      	beq.n	8006c96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2100      	movs	r1, #0
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f81d 	bl	8006cd0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b086      	sub	sp, #24
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	2300      	movs	r3, #0
 8006cae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6939      	ldr	r1, [r7, #16]
 8006cb6:	6978      	ldr	r0, [r7, #20]
 8006cb8:	f7ff ff7e 	bl	8006bb8 <xQueueGenericCreate>
 8006cbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f7ff ffd3 	bl	8006c6a <prvInitialiseMutex>

		return xNewQueue;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
	}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08e      	sub	sp, #56	; 0x38
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <xQueueGenericSend+0x32>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d103      	bne.n	8006d10 <xQueueGenericSend+0x40>
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <xQueueGenericSend+0x44>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <xQueueGenericSend+0x46>
 8006d14:	2300      	movs	r3, #0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <xQueueGenericSend+0x60>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d103      	bne.n	8006d3e <xQueueGenericSend+0x6e>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <xQueueGenericSend+0x72>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <xQueueGenericSend+0x74>
 8006d42:	2300      	movs	r3, #0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <xQueueGenericSend+0x8e>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	623b      	str	r3, [r7, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d5e:	f001 f889 	bl	8007e74 <xTaskGetSchedulerState>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <xQueueGenericSend+0x9e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <xQueueGenericSend+0xa2>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <xQueueGenericSend+0xa4>
 8006d72:	2300      	movs	r3, #0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xQueueGenericSend+0xbe>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	61fb      	str	r3, [r7, #28]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d8e:	f001 fbc1 	bl	8008514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d302      	bcc.n	8006da4 <xQueueGenericSend+0xd4>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d129      	bne.n	8006df8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006daa:	f000 f9b3 	bl	8007114 <prvCopyDataToQueue>
 8006dae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d010      	beq.n	8006dda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	3324      	adds	r3, #36	; 0x24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fe9d 	bl	8007afc <xTaskRemoveFromEventList>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d013      	beq.n	8006df0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dc8:	4b3f      	ldr	r3, [pc, #252]	; (8006ec8 <xQueueGenericSend+0x1f8>)
 8006dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	e00a      	b.n	8006df0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006de0:	4b39      	ldr	r3, [pc, #228]	; (8006ec8 <xQueueGenericSend+0x1f8>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006df0:	f001 fbc0 	bl	8008574 <vPortExitCritical>
				return pdPASS;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e063      	b.n	8006ec0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dfe:	f001 fbb9 	bl	8008574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e05c      	b.n	8006ec0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d106      	bne.n	8006e1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e0c:	f107 0314 	add.w	r3, r7, #20
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fed5 	bl	8007bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e1a:	f001 fbab 	bl	8008574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e1e:	f000 fc8b 	bl	8007738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e22:	f001 fb77 	bl	8008514 <vPortEnterCritical>
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e2c:	b25b      	sxtb	r3, r3
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d103      	bne.n	8006e3c <xQueueGenericSend+0x16c>
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e42:	b25b      	sxtb	r3, r3
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d103      	bne.n	8006e52 <xQueueGenericSend+0x182>
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e52:	f001 fb8f 	bl	8008574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e56:	1d3a      	adds	r2, r7, #4
 8006e58:	f107 0314 	add.w	r3, r7, #20
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fec4 	bl	8007bec <xTaskCheckForTimeOut>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d124      	bne.n	8006eb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e6c:	f000 fa24 	bl	80072b8 <prvIsQueueFull>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d018      	beq.n	8006ea8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	3310      	adds	r3, #16
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fe18 	bl	8007ab4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e86:	f000 f9af 	bl	80071e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e8a:	f000 fc63 	bl	8007754 <xTaskResumeAll>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f47f af7c 	bne.w	8006d8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e96:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <xQueueGenericSend+0x1f8>)
 8006e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	e772      	b.n	8006d8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eaa:	f000 f99d 	bl	80071e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eae:	f000 fc51 	bl	8007754 <xTaskResumeAll>
 8006eb2:	e76c      	b.n	8006d8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eb6:	f000 f997 	bl	80071e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eba:	f000 fc4b 	bl	8007754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3738      	adds	r7, #56	; 0x38
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08e      	sub	sp, #56	; 0x38
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	623b      	str	r3, [r7, #32]
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	61fb      	str	r3, [r7, #28]
}
 8006f18:	bf00      	nop
 8006f1a:	e7fe      	b.n	8006f1a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f1c:	f000 ffaa 	bl	8007e74 <xTaskGetSchedulerState>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d102      	bne.n	8006f2c <xQueueSemaphoreTake+0x60>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <xQueueSemaphoreTake+0x64>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <xQueueSemaphoreTake+0x66>
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	61bb      	str	r3, [r7, #24]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f4c:	f001 fae2 	bl	8008514 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d024      	beq.n	8006fa6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	1e5a      	subs	r2, r3, #1
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f6c:	f001 f92a 	bl	80081c4 <pvTaskIncrementMutexHeldCount>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f74:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00f      	beq.n	8006f9e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	3310      	adds	r3, #16
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fdba 	bl	8007afc <xTaskRemoveFromEventList>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f8e:	4b54      	ldr	r3, [pc, #336]	; (80070e0 <xQueueSemaphoreTake+0x214>)
 8006f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f9e:	f001 fae9 	bl	8008574 <vPortExitCritical>
				return pdPASS;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e097      	b.n	80070d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d111      	bne.n	8006fd0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	617b      	str	r3, [r7, #20]
}
 8006fc4:	bf00      	nop
 8006fc6:	e7fe      	b.n	8006fc6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fc8:	f001 fad4 	bl	8008574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e082      	b.n	80070d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fd6:	f107 030c 	add.w	r3, r7, #12
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fdf0 	bl	8007bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fe4:	f001 fac6 	bl	8008574 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fe8:	f000 fba6 	bl	8007738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fec:	f001 fa92 	bl	8008514 <vPortEnterCritical>
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff6:	b25b      	sxtb	r3, r3
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d103      	bne.n	8007006 <xQueueSemaphoreTake+0x13a>
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800700c:	b25b      	sxtb	r3, r3
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007012:	d103      	bne.n	800701c <xQueueSemaphoreTake+0x150>
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800701c:	f001 faaa 	bl	8008574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007020:	463a      	mov	r2, r7
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	4611      	mov	r1, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fddf 	bl	8007bec <xTaskCheckForTimeOut>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d132      	bne.n	800709a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007036:	f000 f929 	bl	800728c <prvIsQueueEmpty>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d026      	beq.n	800708e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d109      	bne.n	800705c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007048:	f001 fa64 	bl	8008514 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	4618      	mov	r0, r3
 8007052:	f000 ff2d 	bl	8007eb0 <xTaskPriorityInherit>
 8007056:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007058:	f001 fa8c 	bl	8008574 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	3324      	adds	r3, #36	; 0x24
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	4611      	mov	r1, r2
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fd25 	bl	8007ab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800706a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800706c:	f000 f8bc 	bl	80071e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007070:	f000 fb70 	bl	8007754 <xTaskResumeAll>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	f47f af68 	bne.w	8006f4c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800707c:	4b18      	ldr	r3, [pc, #96]	; (80070e0 <xQueueSemaphoreTake+0x214>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	e75e      	b.n	8006f4c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800708e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007090:	f000 f8aa 	bl	80071e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007094:	f000 fb5e 	bl	8007754 <xTaskResumeAll>
 8007098:	e758      	b.n	8006f4c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800709a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800709c:	f000 f8a4 	bl	80071e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070a0:	f000 fb58 	bl	8007754 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a6:	f000 f8f1 	bl	800728c <prvIsQueueEmpty>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f43f af4d 	beq.w	8006f4c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00d      	beq.n	80070d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80070b8:	f001 fa2c 	bl	8008514 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070be:	f000 f811 	bl	80070e4 <prvGetDisinheritPriorityAfterTimeout>
 80070c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 ffec 	bl	80080a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070d0:	f001 fa50 	bl	8008574 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3738      	adds	r7, #56	; 0x38
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d006      	beq.n	8007102 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1c3 0307 	rsb	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e001      	b.n	8007106 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007106:	68fb      	ldr	r3, [r7, #12]
	}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10d      	bne.n	800714e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d14d      	bne.n	80071d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 ff2c 	bl	8007f9c <xTaskPriorityDisinherit>
 8007144:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	e043      	b.n	80071d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d119      	bne.n	8007188 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6858      	ldr	r0, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	461a      	mov	r2, r3
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	f001 feac 	bl	8008ebc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716c:	441a      	add	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	429a      	cmp	r2, r3
 800717c:	d32b      	bcc.n	80071d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	e026      	b.n	80071d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68d8      	ldr	r0, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	461a      	mov	r2, r3
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	f001 fe92 	bl	8008ebc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	425b      	negs	r3, r3
 80071a2:	441a      	add	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d207      	bcs.n	80071c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	425b      	negs	r3, r3
 80071be:	441a      	add	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d105      	bne.n	80071d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071de:	697b      	ldr	r3, [r7, #20]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071f0:	f001 f990 	bl	8008514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071fc:	e011      	b.n	8007222 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	2b00      	cmp	r3, #0
 8007204:	d012      	beq.n	800722c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3324      	adds	r3, #36	; 0x24
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fc76 	bl	8007afc <xTaskRemoveFromEventList>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007216:	f000 fd4b 	bl	8007cb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	3b01      	subs	r3, #1
 800721e:	b2db      	uxtb	r3, r3
 8007220:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007226:	2b00      	cmp	r3, #0
 8007228:	dce9      	bgt.n	80071fe <prvUnlockQueue+0x16>
 800722a:	e000      	b.n	800722e <prvUnlockQueue+0x46>
					break;
 800722c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	22ff      	movs	r2, #255	; 0xff
 8007232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007236:	f001 f99d 	bl	8008574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800723a:	f001 f96b 	bl	8008514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007244:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007246:	e011      	b.n	800726c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d012      	beq.n	8007276 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3310      	adds	r3, #16
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fc51 	bl	8007afc <xTaskRemoveFromEventList>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007260:	f000 fd26 	bl	8007cb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	3b01      	subs	r3, #1
 8007268:	b2db      	uxtb	r3, r3
 800726a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800726c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007270:	2b00      	cmp	r3, #0
 8007272:	dce9      	bgt.n	8007248 <prvUnlockQueue+0x60>
 8007274:	e000      	b.n	8007278 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007276:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	22ff      	movs	r2, #255	; 0xff
 800727c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007280:	f001 f978 	bl	8008574 <vPortExitCritical>
}
 8007284:	bf00      	nop
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007294:	f001 f93e 	bl	8008514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	2b00      	cmp	r3, #0
 800729e:	d102      	bne.n	80072a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	e001      	b.n	80072aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072aa:	f001 f963 	bl	8008574 <vPortExitCritical>

	return xReturn;
 80072ae:	68fb      	ldr	r3, [r7, #12]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072c0:	f001 f928 	bl	8008514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d102      	bne.n	80072d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072d0:	2301      	movs	r3, #1
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	e001      	b.n	80072da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072da:	f001 f94b 	bl	8008574 <vPortExitCritical>

	return xReturn;
 80072de:	68fb      	ldr	r3, [r7, #12]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08e      	sub	sp, #56	; 0x38
 80072ec:	af04      	add	r7, sp, #16
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xTaskCreateStatic+0x2a>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	623b      	str	r3, [r7, #32]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <xTaskCreateStatic+0x46>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	61fb      	str	r3, [r7, #28]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800732e:	2354      	movs	r3, #84	; 0x54
 8007330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b54      	cmp	r3, #84	; 0x54
 8007336:	d00a      	beq.n	800734e <xTaskCreateStatic+0x66>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	61bb      	str	r3, [r7, #24]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800734e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01e      	beq.n	8007394 <xTaskCreateStatic+0xac>
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01b      	beq.n	8007394 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007364:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	2202      	movs	r2, #2
 800736a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800736e:	2300      	movs	r3, #0
 8007370:	9303      	str	r3, [sp, #12]
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	9302      	str	r3, [sp, #8]
 8007376:	f107 0314 	add.w	r3, r7, #20
 800737a:	9301      	str	r3, [sp, #4]
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 f850 	bl	800742c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800738c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800738e:	f000 f8d5 	bl	800753c <prvAddNewTaskToReadyList>
 8007392:	e001      	b.n	8007398 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007398:	697b      	ldr	r3, [r7, #20]
	}
 800739a:	4618      	mov	r0, r3
 800739c:	3728      	adds	r7, #40	; 0x28
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b08c      	sub	sp, #48	; 0x30
 80073a6:	af04      	add	r7, sp, #16
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	603b      	str	r3, [r7, #0]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 f98e 	bl	80086d8 <pvPortMalloc>
 80073bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00e      	beq.n	80073e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073c4:	2054      	movs	r0, #84	; 0x54
 80073c6:	f001 f987 	bl	80086d8 <pvPortMalloc>
 80073ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	631a      	str	r2, [r3, #48]	; 0x30
 80073d8:	e005      	b.n	80073e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073da:	6978      	ldr	r0, [r7, #20]
 80073dc:	f001 fa48 	bl	8008870 <vPortFree>
 80073e0:	e001      	b.n	80073e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d017      	beq.n	800741c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	2300      	movs	r3, #0
 80073f8:	9303      	str	r3, [sp, #12]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	9302      	str	r3, [sp, #8]
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 f80e 	bl	800742c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007410:	69f8      	ldr	r0, [r7, #28]
 8007412:	f000 f893 	bl	800753c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007416:	2301      	movs	r3, #1
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	e002      	b.n	8007422 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800741c:	f04f 33ff 	mov.w	r3, #4294967295
 8007420:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007422:	69bb      	ldr	r3, [r7, #24]
	}
 8007424:	4618      	mov	r0, r3
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007444:	3b01      	subs	r3, #1
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	f023 0307 	bic.w	r3, r3, #7
 8007452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <prvInitialiseNewTask+0x48>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	617b      	str	r3, [r7, #20]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01f      	beq.n	80074ba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
 800747e:	e012      	b.n	80074a6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	7819      	ldrb	r1, [r3, #0]
 8007488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	3334      	adds	r3, #52	; 0x34
 8007490:	460a      	mov	r2, r1
 8007492:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	2b0f      	cmp	r3, #15
 80074aa:	d9e9      	bls.n	8007480 <prvInitialiseNewTask+0x54>
 80074ac:	e000      	b.n	80074b0 <prvInitialiseNewTask+0x84>
			{
				break;
 80074ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074b8:	e003      	b.n	80074c2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d901      	bls.n	80074cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074c8:	2306      	movs	r3, #6
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	2200      	movs	r2, #0
 80074dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	3304      	adds	r3, #4
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fa6b 	bl	80069be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	3318      	adds	r3, #24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fa66 	bl	80069be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	f1c3 0207 	rsb	r2, r3, #7
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007506:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	2200      	movs	r2, #0
 800750c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	68f9      	ldr	r1, [r7, #12]
 800751a:	69b8      	ldr	r0, [r7, #24]
 800751c:	f000 fecc 	bl	80082b8 <pxPortInitialiseStack>
 8007520:	4602      	mov	r2, r0
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007532:	bf00      	nop
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007544:	f000 ffe6 	bl	8008514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007548:	4b2a      	ldr	r3, [pc, #168]	; (80075f4 <prvAddNewTaskToReadyList+0xb8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	4a29      	ldr	r2, [pc, #164]	; (80075f4 <prvAddNewTaskToReadyList+0xb8>)
 8007550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007552:	4b29      	ldr	r3, [pc, #164]	; (80075f8 <prvAddNewTaskToReadyList+0xbc>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800755a:	4a27      	ldr	r2, [pc, #156]	; (80075f8 <prvAddNewTaskToReadyList+0xbc>)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007560:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <prvAddNewTaskToReadyList+0xb8>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d110      	bne.n	800758a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007568:	f000 fbc6 	bl	8007cf8 <prvInitialiseTaskLists>
 800756c:	e00d      	b.n	800758a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800756e:	4b23      	ldr	r3, [pc, #140]	; (80075fc <prvAddNewTaskToReadyList+0xc0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007576:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <prvAddNewTaskToReadyList+0xbc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	429a      	cmp	r2, r3
 8007582:	d802      	bhi.n	800758a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007584:	4a1c      	ldr	r2, [pc, #112]	; (80075f8 <prvAddNewTaskToReadyList+0xbc>)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800758a:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <prvAddNewTaskToReadyList+0xc4>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3301      	adds	r3, #1
 8007590:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <prvAddNewTaskToReadyList+0xc4>)
 8007592:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	2201      	movs	r2, #1
 800759a:	409a      	lsls	r2, r3
 800759c:	4b19      	ldr	r3, [pc, #100]	; (8007604 <prvAddNewTaskToReadyList+0xc8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	4a18      	ldr	r2, [pc, #96]	; (8007604 <prvAddNewTaskToReadyList+0xc8>)
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4a15      	ldr	r2, [pc, #84]	; (8007608 <prvAddNewTaskToReadyList+0xcc>)
 80075b4:	441a      	add	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4619      	mov	r1, r3
 80075bc:	4610      	mov	r0, r2
 80075be:	f7ff fa0b 	bl	80069d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075c2:	f000 ffd7 	bl	8008574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075c6:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <prvAddNewTaskToReadyList+0xc0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075ce:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <prvAddNewTaskToReadyList+0xbc>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d207      	bcs.n	80075ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075dc:	4b0b      	ldr	r3, [pc, #44]	; (800760c <prvAddNewTaskToReadyList+0xd0>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20002260 	.word	0x20002260
 80075f8:	20002160 	.word	0x20002160
 80075fc:	2000226c 	.word	0x2000226c
 8007600:	2000227c 	.word	0x2000227c
 8007604:	20002268 	.word	0x20002268
 8007608:	20002164 	.word	0x20002164
 800760c:	e000ed04 	.word	0xe000ed04

08007610 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d017      	beq.n	8007652 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007622:	4b13      	ldr	r3, [pc, #76]	; (8007670 <vTaskDelay+0x60>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <vTaskDelay+0x30>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	60bb      	str	r3, [r7, #8]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007640:	f000 f87a 	bl	8007738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007644:	2100      	movs	r1, #0
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fdd0 	bl	80081ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800764c:	f000 f882 	bl	8007754 <xTaskResumeAll>
 8007650:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d107      	bne.n	8007668 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007658:	4b06      	ldr	r3, [pc, #24]	; (8007674 <vTaskDelay+0x64>)
 800765a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007668:	bf00      	nop
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20002288 	.word	0x20002288
 8007674:	e000ed04 	.word	0xe000ed04

08007678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	; 0x28
 800767c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007686:	463a      	mov	r2, r7
 8007688:	1d39      	adds	r1, r7, #4
 800768a:	f107 0308 	add.w	r3, r7, #8
 800768e:	4618      	mov	r0, r3
 8007690:	f7fa ff22 	bl	80024d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	9202      	str	r2, [sp, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	2300      	movs	r3, #0
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	2300      	movs	r3, #0
 80076a4:	460a      	mov	r2, r1
 80076a6:	491e      	ldr	r1, [pc, #120]	; (8007720 <vTaskStartScheduler+0xa8>)
 80076a8:	481e      	ldr	r0, [pc, #120]	; (8007724 <vTaskStartScheduler+0xac>)
 80076aa:	f7ff fe1d 	bl	80072e8 <xTaskCreateStatic>
 80076ae:	4603      	mov	r3, r0
 80076b0:	4a1d      	ldr	r2, [pc, #116]	; (8007728 <vTaskStartScheduler+0xb0>)
 80076b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076b4:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <vTaskStartScheduler+0xb0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076bc:	2301      	movs	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	e001      	b.n	80076c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d116      	bne.n	80076fa <vTaskStartScheduler+0x82>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	613b      	str	r3, [r7, #16]
}
 80076de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076e0:	4b12      	ldr	r3, [pc, #72]	; (800772c <vTaskStartScheduler+0xb4>)
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295
 80076e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076e8:	4b11      	ldr	r3, [pc, #68]	; (8007730 <vTaskStartScheduler+0xb8>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076ee:	4b11      	ldr	r3, [pc, #68]	; (8007734 <vTaskStartScheduler+0xbc>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076f4:	f000 fe6c 	bl	80083d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076f8:	e00e      	b.n	8007718 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007700:	d10a      	bne.n	8007718 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	60fb      	str	r3, [r7, #12]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <vTaskStartScheduler+0x9e>
}
 8007718:	bf00      	nop
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	0800d444 	.word	0x0800d444
 8007724:	08007cc9 	.word	0x08007cc9
 8007728:	20002284 	.word	0x20002284
 800772c:	20002280 	.word	0x20002280
 8007730:	2000226c 	.word	0x2000226c
 8007734:	20002264 	.word	0x20002264

08007738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007738:	b480      	push	{r7}
 800773a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800773c:	4b04      	ldr	r3, [pc, #16]	; (8007750 <vTaskSuspendAll+0x18>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	4a03      	ldr	r2, [pc, #12]	; (8007750 <vTaskSuspendAll+0x18>)
 8007744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007746:	bf00      	nop
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	20002288 	.word	0x20002288

08007754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007762:	4b41      	ldr	r3, [pc, #260]	; (8007868 <xTaskResumeAll+0x114>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <xTaskResumeAll+0x2c>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	603b      	str	r3, [r7, #0]
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007780:	f000 fec8 	bl	8008514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007784:	4b38      	ldr	r3, [pc, #224]	; (8007868 <xTaskResumeAll+0x114>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3b01      	subs	r3, #1
 800778a:	4a37      	ldr	r2, [pc, #220]	; (8007868 <xTaskResumeAll+0x114>)
 800778c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800778e:	4b36      	ldr	r3, [pc, #216]	; (8007868 <xTaskResumeAll+0x114>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d161      	bne.n	800785a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007796:	4b35      	ldr	r3, [pc, #212]	; (800786c <xTaskResumeAll+0x118>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d05d      	beq.n	800785a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800779e:	e02e      	b.n	80077fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a0:	4b33      	ldr	r3, [pc, #204]	; (8007870 <xTaskResumeAll+0x11c>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3318      	adds	r3, #24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff f970 	bl	8006a92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3304      	adds	r3, #4
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff f96b 	bl	8006a92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	2201      	movs	r2, #1
 80077c2:	409a      	lsls	r2, r3
 80077c4:	4b2b      	ldr	r3, [pc, #172]	; (8007874 <xTaskResumeAll+0x120>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <xTaskResumeAll+0x120>)
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4a27      	ldr	r2, [pc, #156]	; (8007878 <xTaskResumeAll+0x124>)
 80077dc:	441a      	add	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3304      	adds	r3, #4
 80077e2:	4619      	mov	r1, r3
 80077e4:	4610      	mov	r0, r2
 80077e6:	f7ff f8f7 	bl	80069d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	4b23      	ldr	r3, [pc, #140]	; (800787c <xTaskResumeAll+0x128>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d302      	bcc.n	80077fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80077f8:	4b21      	ldr	r3, [pc, #132]	; (8007880 <xTaskResumeAll+0x12c>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077fe:	4b1c      	ldr	r3, [pc, #112]	; (8007870 <xTaskResumeAll+0x11c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1cc      	bne.n	80077a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800780c:	f000 fb12 	bl	8007e34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007810:	4b1c      	ldr	r3, [pc, #112]	; (8007884 <xTaskResumeAll+0x130>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800781c:	f000 f836 	bl	800788c <xTaskIncrementTick>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007826:	4b16      	ldr	r3, [pc, #88]	; (8007880 <xTaskResumeAll+0x12c>)
 8007828:	2201      	movs	r2, #1
 800782a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3b01      	subs	r3, #1
 8007830:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f1      	bne.n	800781c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007838:	4b12      	ldr	r3, [pc, #72]	; (8007884 <xTaskResumeAll+0x130>)
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800783e:	4b10      	ldr	r3, [pc, #64]	; (8007880 <xTaskResumeAll+0x12c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d009      	beq.n	800785a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007846:	2301      	movs	r3, #1
 8007848:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <xTaskResumeAll+0x134>)
 800784c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800785a:	f000 fe8b 	bl	8008574 <vPortExitCritical>

	return xAlreadyYielded;
 800785e:	68bb      	ldr	r3, [r7, #8]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20002288 	.word	0x20002288
 800786c:	20002260 	.word	0x20002260
 8007870:	20002220 	.word	0x20002220
 8007874:	20002268 	.word	0x20002268
 8007878:	20002164 	.word	0x20002164
 800787c:	20002160 	.word	0x20002160
 8007880:	20002274 	.word	0x20002274
 8007884:	20002270 	.word	0x20002270
 8007888:	e000ed04 	.word	0xe000ed04

0800788c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007896:	4b4e      	ldr	r3, [pc, #312]	; (80079d0 <xTaskIncrementTick+0x144>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f040 808e 	bne.w	80079bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078a0:	4b4c      	ldr	r3, [pc, #304]	; (80079d4 <xTaskIncrementTick+0x148>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3301      	adds	r3, #1
 80078a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078a8:	4a4a      	ldr	r2, [pc, #296]	; (80079d4 <xTaskIncrementTick+0x148>)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d120      	bne.n	80078f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078b4:	4b48      	ldr	r3, [pc, #288]	; (80079d8 <xTaskIncrementTick+0x14c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	603b      	str	r3, [r7, #0]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <xTaskIncrementTick+0x46>
 80078d4:	4b40      	ldr	r3, [pc, #256]	; (80079d8 <xTaskIncrementTick+0x14c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	4b40      	ldr	r3, [pc, #256]	; (80079dc <xTaskIncrementTick+0x150>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a3e      	ldr	r2, [pc, #248]	; (80079d8 <xTaskIncrementTick+0x14c>)
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	4a3e      	ldr	r2, [pc, #248]	; (80079dc <xTaskIncrementTick+0x150>)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	4b3d      	ldr	r3, [pc, #244]	; (80079e0 <xTaskIncrementTick+0x154>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3301      	adds	r3, #1
 80078ee:	4a3c      	ldr	r2, [pc, #240]	; (80079e0 <xTaskIncrementTick+0x154>)
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	f000 fa9f 	bl	8007e34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078f6:	4b3b      	ldr	r3, [pc, #236]	; (80079e4 <xTaskIncrementTick+0x158>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d348      	bcc.n	8007992 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007900:	4b35      	ldr	r3, [pc, #212]	; (80079d8 <xTaskIncrementTick+0x14c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800790a:	4b36      	ldr	r3, [pc, #216]	; (80079e4 <xTaskIncrementTick+0x158>)
 800790c:	f04f 32ff 	mov.w	r2, #4294967295
 8007910:	601a      	str	r2, [r3, #0]
					break;
 8007912:	e03e      	b.n	8007992 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007914:	4b30      	ldr	r3, [pc, #192]	; (80079d8 <xTaskIncrementTick+0x14c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d203      	bcs.n	8007934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800792c:	4a2d      	ldr	r2, [pc, #180]	; (80079e4 <xTaskIncrementTick+0x158>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007932:	e02e      	b.n	8007992 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3304      	adds	r3, #4
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff f8aa 	bl	8006a92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	2b00      	cmp	r3, #0
 8007944:	d004      	beq.n	8007950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	3318      	adds	r3, #24
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff f8a1 	bl	8006a92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	2201      	movs	r2, #1
 8007956:	409a      	lsls	r2, r3
 8007958:	4b23      	ldr	r3, [pc, #140]	; (80079e8 <xTaskIncrementTick+0x15c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4313      	orrs	r3, r2
 800795e:	4a22      	ldr	r2, [pc, #136]	; (80079e8 <xTaskIncrementTick+0x15c>)
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4a1f      	ldr	r2, [pc, #124]	; (80079ec <xTaskIncrementTick+0x160>)
 8007970:	441a      	add	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3304      	adds	r3, #4
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f7ff f82d 	bl	80069d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007982:	4b1b      	ldr	r3, [pc, #108]	; (80079f0 <xTaskIncrementTick+0x164>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	429a      	cmp	r2, r3
 800798a:	d3b9      	bcc.n	8007900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800798c:	2301      	movs	r3, #1
 800798e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007990:	e7b6      	b.n	8007900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007992:	4b17      	ldr	r3, [pc, #92]	; (80079f0 <xTaskIncrementTick+0x164>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007998:	4914      	ldr	r1, [pc, #80]	; (80079ec <xTaskIncrementTick+0x160>)
 800799a:	4613      	mov	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	440b      	add	r3, r1
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d901      	bls.n	80079ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80079aa:	2301      	movs	r3, #1
 80079ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079ae:	4b11      	ldr	r3, [pc, #68]	; (80079f4 <xTaskIncrementTick+0x168>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80079b6:	2301      	movs	r3, #1
 80079b8:	617b      	str	r3, [r7, #20]
 80079ba:	e004      	b.n	80079c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079bc:	4b0e      	ldr	r3, [pc, #56]	; (80079f8 <xTaskIncrementTick+0x16c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3301      	adds	r3, #1
 80079c2:	4a0d      	ldr	r2, [pc, #52]	; (80079f8 <xTaskIncrementTick+0x16c>)
 80079c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079c6:	697b      	ldr	r3, [r7, #20]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20002288 	.word	0x20002288
 80079d4:	20002264 	.word	0x20002264
 80079d8:	20002218 	.word	0x20002218
 80079dc:	2000221c 	.word	0x2000221c
 80079e0:	20002278 	.word	0x20002278
 80079e4:	20002280 	.word	0x20002280
 80079e8:	20002268 	.word	0x20002268
 80079ec:	20002164 	.word	0x20002164
 80079f0:	20002160 	.word	0x20002160
 80079f4:	20002274 	.word	0x20002274
 80079f8:	20002270 	.word	0x20002270

080079fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a02:	4b27      	ldr	r3, [pc, #156]	; (8007aa0 <vTaskSwitchContext+0xa4>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a0a:	4b26      	ldr	r3, [pc, #152]	; (8007aa4 <vTaskSwitchContext+0xa8>)
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a10:	e03f      	b.n	8007a92 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007a12:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <vTaskSwitchContext+0xa8>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a18:	4b23      	ldr	r3, [pc, #140]	; (8007aa8 <vTaskSwitchContext+0xac>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	fab3 f383 	clz	r3, r3
 8007a24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a26:	7afb      	ldrb	r3, [r7, #11]
 8007a28:	f1c3 031f 	rsb	r3, r3, #31
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	491f      	ldr	r1, [pc, #124]	; (8007aac <vTaskSwitchContext+0xb0>)
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10a      	bne.n	8007a58 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	607b      	str	r3, [r7, #4]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <vTaskSwitchContext+0x5a>
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4a12      	ldr	r2, [pc, #72]	; (8007aac <vTaskSwitchContext+0xb0>)
 8007a64:	4413      	add	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	605a      	str	r2, [r3, #4]
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	3308      	adds	r3, #8
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d104      	bne.n	8007a88 <vTaskSwitchContext+0x8c>
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	605a      	str	r2, [r3, #4]
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	4a08      	ldr	r2, [pc, #32]	; (8007ab0 <vTaskSwitchContext+0xb4>)
 8007a90:	6013      	str	r3, [r2, #0]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20002288 	.word	0x20002288
 8007aa4:	20002274 	.word	0x20002274
 8007aa8:	20002268 	.word	0x20002268
 8007aac:	20002164 	.word	0x20002164
 8007ab0:	20002160 	.word	0x20002160

08007ab4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10a      	bne.n	8007ada <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	60fb      	str	r3, [r7, #12]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ada:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <vTaskPlaceOnEventList+0x44>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3318      	adds	r3, #24
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fe ff9c 	bl	8006a20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ae8:	2101      	movs	r1, #1
 8007aea:	6838      	ldr	r0, [r7, #0]
 8007aec:	f000 fb7e 	bl	80081ec <prvAddCurrentTaskToDelayedList>
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20002160 	.word	0x20002160

08007afc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60fb      	str	r3, [r7, #12]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	3318      	adds	r3, #24
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fe ffb0 	bl	8006a92 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b32:	4b1d      	ldr	r3, [pc, #116]	; (8007ba8 <xTaskRemoveFromEventList+0xac>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d11c      	bne.n	8007b74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe ffa7 	bl	8006a92 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	2201      	movs	r2, #1
 8007b4a:	409a      	lsls	r2, r3
 8007b4c:	4b17      	ldr	r3, [pc, #92]	; (8007bac <xTaskRemoveFromEventList+0xb0>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	4a16      	ldr	r2, [pc, #88]	; (8007bac <xTaskRemoveFromEventList+0xb0>)
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4a13      	ldr	r2, [pc, #76]	; (8007bb0 <xTaskRemoveFromEventList+0xb4>)
 8007b64:	441a      	add	r2, r3
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f7fe ff33 	bl	80069d8 <vListInsertEnd>
 8007b72:	e005      	b.n	8007b80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	3318      	adds	r3, #24
 8007b78:	4619      	mov	r1, r3
 8007b7a:	480e      	ldr	r0, [pc, #56]	; (8007bb4 <xTaskRemoveFromEventList+0xb8>)
 8007b7c:	f7fe ff2c 	bl	80069d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <xTaskRemoveFromEventList+0xbc>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d905      	bls.n	8007b9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b92:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <xTaskRemoveFromEventList+0xc0>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	e001      	b.n	8007b9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b9e:	697b      	ldr	r3, [r7, #20]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20002288 	.word	0x20002288
 8007bac:	20002268 	.word	0x20002268
 8007bb0:	20002164 	.word	0x20002164
 8007bb4:	20002220 	.word	0x20002220
 8007bb8:	20002160 	.word	0x20002160
 8007bbc:	20002274 	.word	0x20002274

08007bc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bc8:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <vTaskInternalSetTimeOutState+0x24>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bd0:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <vTaskInternalSetTimeOutState+0x28>)
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	605a      	str	r2, [r3, #4]
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	20002278 	.word	0x20002278
 8007be8:	20002264 	.word	0x20002264

08007bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	613b      	str	r3, [r7, #16]
}
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	60fb      	str	r3, [r7, #12]
}
 8007c2a:	bf00      	nop
 8007c2c:	e7fe      	b.n	8007c2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c2e:	f000 fc71 	bl	8008514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c32:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <xTaskCheckForTimeOut+0xbc>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d102      	bne.n	8007c52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	e023      	b.n	8007c9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4b15      	ldr	r3, [pc, #84]	; (8007cac <xTaskCheckForTimeOut+0xc0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d007      	beq.n	8007c6e <xTaskCheckForTimeOut+0x82>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d302      	bcc.n	8007c6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	61fb      	str	r3, [r7, #28]
 8007c6c:	e015      	b.n	8007c9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d20b      	bcs.n	8007c90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff ff9b 	bl	8007bc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61fb      	str	r3, [r7, #28]
 8007c8e:	e004      	b.n	8007c9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c96:	2301      	movs	r3, #1
 8007c98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c9a:	f000 fc6b 	bl	8008574 <vPortExitCritical>

	return xReturn;
 8007c9e:	69fb      	ldr	r3, [r7, #28]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3720      	adds	r7, #32
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20002264 	.word	0x20002264
 8007cac:	20002278 	.word	0x20002278

08007cb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cb4:	4b03      	ldr	r3, [pc, #12]	; (8007cc4 <vTaskMissedYield+0x14>)
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]
}
 8007cba:	bf00      	nop
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	20002274 	.word	0x20002274

08007cc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cd0:	f000 f852 	bl	8007d78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cd4:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <prvIdleTask+0x28>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d9f9      	bls.n	8007cd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <prvIdleTask+0x2c>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007cec:	e7f0      	b.n	8007cd0 <prvIdleTask+0x8>
 8007cee:	bf00      	nop
 8007cf0:	20002164 	.word	0x20002164
 8007cf4:	e000ed04 	.word	0xe000ed04

08007cf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cfe:	2300      	movs	r3, #0
 8007d00:	607b      	str	r3, [r7, #4]
 8007d02:	e00c      	b.n	8007d1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4a12      	ldr	r2, [pc, #72]	; (8007d58 <prvInitialiseTaskLists+0x60>)
 8007d10:	4413      	add	r3, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fe33 	bl	800697e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b06      	cmp	r3, #6
 8007d22:	d9ef      	bls.n	8007d04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d24:	480d      	ldr	r0, [pc, #52]	; (8007d5c <prvInitialiseTaskLists+0x64>)
 8007d26:	f7fe fe2a 	bl	800697e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d2a:	480d      	ldr	r0, [pc, #52]	; (8007d60 <prvInitialiseTaskLists+0x68>)
 8007d2c:	f7fe fe27 	bl	800697e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d30:	480c      	ldr	r0, [pc, #48]	; (8007d64 <prvInitialiseTaskLists+0x6c>)
 8007d32:	f7fe fe24 	bl	800697e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d36:	480c      	ldr	r0, [pc, #48]	; (8007d68 <prvInitialiseTaskLists+0x70>)
 8007d38:	f7fe fe21 	bl	800697e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d3c:	480b      	ldr	r0, [pc, #44]	; (8007d6c <prvInitialiseTaskLists+0x74>)
 8007d3e:	f7fe fe1e 	bl	800697e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d42:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <prvInitialiseTaskLists+0x78>)
 8007d44:	4a05      	ldr	r2, [pc, #20]	; (8007d5c <prvInitialiseTaskLists+0x64>)
 8007d46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d48:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <prvInitialiseTaskLists+0x7c>)
 8007d4a:	4a05      	ldr	r2, [pc, #20]	; (8007d60 <prvInitialiseTaskLists+0x68>)
 8007d4c:	601a      	str	r2, [r3, #0]
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20002164 	.word	0x20002164
 8007d5c:	200021f0 	.word	0x200021f0
 8007d60:	20002204 	.word	0x20002204
 8007d64:	20002220 	.word	0x20002220
 8007d68:	20002234 	.word	0x20002234
 8007d6c:	2000224c 	.word	0x2000224c
 8007d70:	20002218 	.word	0x20002218
 8007d74:	2000221c 	.word	0x2000221c

08007d78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d7e:	e019      	b.n	8007db4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d80:	f000 fbc8 	bl	8008514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d84:	4b10      	ldr	r3, [pc, #64]	; (8007dc8 <prvCheckTasksWaitingTermination+0x50>)
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe fe7e 	bl	8006a92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d96:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <prvCheckTasksWaitingTermination+0x54>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	4a0b      	ldr	r2, [pc, #44]	; (8007dcc <prvCheckTasksWaitingTermination+0x54>)
 8007d9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007da0:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <prvCheckTasksWaitingTermination+0x58>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	4a0a      	ldr	r2, [pc, #40]	; (8007dd0 <prvCheckTasksWaitingTermination+0x58>)
 8007da8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007daa:	f000 fbe3 	bl	8008574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f810 	bl	8007dd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007db4:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <prvCheckTasksWaitingTermination+0x58>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e1      	bne.n	8007d80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20002234 	.word	0x20002234
 8007dcc:	20002260 	.word	0x20002260
 8007dd0:	20002248 	.word	0x20002248

08007dd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d108      	bne.n	8007df8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fd40 	bl	8008870 <vPortFree>
				vPortFree( pxTCB );
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fd3d 	bl	8008870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007df6:	e018      	b.n	8007e2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d103      	bne.n	8007e0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fd34 	bl	8008870 <vPortFree>
	}
 8007e08:	e00f      	b.n	8007e2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d00a      	beq.n	8007e2a <prvDeleteTCB+0x56>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	60fb      	str	r3, [r7, #12]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <prvDeleteTCB+0x54>
	}
 8007e2a:	bf00      	nop
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e3a:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <prvResetNextTaskUnblockTime+0x38>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d104      	bne.n	8007e4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e44:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <prvResetNextTaskUnblockTime+0x3c>)
 8007e46:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e4c:	e008      	b.n	8007e60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e4e:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <prvResetNextTaskUnblockTime+0x38>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	4a04      	ldr	r2, [pc, #16]	; (8007e70 <prvResetNextTaskUnblockTime+0x3c>)
 8007e5e:	6013      	str	r3, [r2, #0]
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	20002218 	.word	0x20002218
 8007e70:	20002280 	.word	0x20002280

08007e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <xTaskGetSchedulerState+0x34>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d102      	bne.n	8007e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e82:	2301      	movs	r3, #1
 8007e84:	607b      	str	r3, [r7, #4]
 8007e86:	e008      	b.n	8007e9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e88:	4b08      	ldr	r3, [pc, #32]	; (8007eac <xTaskGetSchedulerState+0x38>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d102      	bne.n	8007e96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e90:	2302      	movs	r3, #2
 8007e92:	607b      	str	r3, [r7, #4]
 8007e94:	e001      	b.n	8007e9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e96:	2300      	movs	r3, #0
 8007e98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e9a:	687b      	ldr	r3, [r7, #4]
	}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	2000226c 	.word	0x2000226c
 8007eac:	20002288 	.word	0x20002288

08007eb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d05e      	beq.n	8007f84 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eca:	4b31      	ldr	r3, [pc, #196]	; (8007f90 <xTaskPriorityInherit+0xe0>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d24e      	bcs.n	8007f72 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	db06      	blt.n	8007eea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007edc:	4b2c      	ldr	r3, [pc, #176]	; (8007f90 <xTaskPriorityInherit+0xe0>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee2:	f1c3 0207 	rsb	r2, r3, #7
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	6959      	ldr	r1, [r3, #20]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4a26      	ldr	r2, [pc, #152]	; (8007f94 <xTaskPriorityInherit+0xe4>)
 8007efc:	4413      	add	r3, r2
 8007efe:	4299      	cmp	r1, r3
 8007f00:	d12f      	bne.n	8007f62 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	3304      	adds	r3, #4
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fdc3 	bl	8006a92 <uxListRemove>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	2201      	movs	r2, #1
 8007f18:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1c:	43da      	mvns	r2, r3
 8007f1e:	4b1e      	ldr	r3, [pc, #120]	; (8007f98 <xTaskPriorityInherit+0xe8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4013      	ands	r3, r2
 8007f24:	4a1c      	ldr	r2, [pc, #112]	; (8007f98 <xTaskPriorityInherit+0xe8>)
 8007f26:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f28:	4b19      	ldr	r3, [pc, #100]	; (8007f90 <xTaskPriorityInherit+0xe0>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	2201      	movs	r2, #1
 8007f38:	409a      	lsls	r2, r3
 8007f3a:	4b17      	ldr	r3, [pc, #92]	; (8007f98 <xTaskPriorityInherit+0xe8>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	4a15      	ldr	r2, [pc, #84]	; (8007f98 <xTaskPriorityInherit+0xe8>)
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4a10      	ldr	r2, [pc, #64]	; (8007f94 <xTaskPriorityInherit+0xe4>)
 8007f52:	441a      	add	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f7fe fd3c 	bl	80069d8 <vListInsertEnd>
 8007f60:	e004      	b.n	8007f6c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f62:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <xTaskPriorityInherit+0xe0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e008      	b.n	8007f84 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f76:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <xTaskPriorityInherit+0xe0>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d201      	bcs.n	8007f84 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f84:	68fb      	ldr	r3, [r7, #12]
	}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20002160 	.word	0x20002160
 8007f94:	20002164 	.word	0x20002164
 8007f98:	20002268 	.word	0x20002268

08007f9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d06e      	beq.n	8008090 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fb2:	4b3a      	ldr	r3, [pc, #232]	; (800809c <xTaskPriorityDisinherit+0x100>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d00a      	beq.n	8007fd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	60fb      	str	r3, [r7, #12]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	60bb      	str	r3, [r7, #8]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff4:	1e5a      	subs	r2, r3, #1
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008002:	429a      	cmp	r2, r3
 8008004:	d044      	beq.n	8008090 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800800a:	2b00      	cmp	r3, #0
 800800c:	d140      	bne.n	8008090 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3304      	adds	r3, #4
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fd3d 	bl	8006a92 <uxListRemove>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d115      	bne.n	800804a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008022:	491f      	ldr	r1, [pc, #124]	; (80080a0 <xTaskPriorityDisinherit+0x104>)
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	440b      	add	r3, r1
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <xTaskPriorityDisinherit+0xae>
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	2201      	movs	r2, #1
 800803a:	fa02 f303 	lsl.w	r3, r2, r3
 800803e:	43da      	mvns	r2, r3
 8008040:	4b18      	ldr	r3, [pc, #96]	; (80080a4 <xTaskPriorityDisinherit+0x108>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4013      	ands	r3, r2
 8008046:	4a17      	ldr	r2, [pc, #92]	; (80080a4 <xTaskPriorityDisinherit+0x108>)
 8008048:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	f1c3 0207 	rsb	r2, r3, #7
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	2201      	movs	r2, #1
 8008064:	409a      	lsls	r2, r3
 8008066:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <xTaskPriorityDisinherit+0x108>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4313      	orrs	r3, r2
 800806c:	4a0d      	ldr	r2, [pc, #52]	; (80080a4 <xTaskPriorityDisinherit+0x108>)
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4a08      	ldr	r2, [pc, #32]	; (80080a0 <xTaskPriorityDisinherit+0x104>)
 800807e:	441a      	add	r2, r3
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	3304      	adds	r3, #4
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f7fe fca6 	bl	80069d8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800808c:	2301      	movs	r3, #1
 800808e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008090:	697b      	ldr	r3, [r7, #20]
	}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20002160 	.word	0x20002160
 80080a0:	20002164 	.word	0x20002164
 80080a4:	20002268 	.word	0x20002268

080080a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080b6:	2301      	movs	r3, #1
 80080b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d077      	beq.n	80081b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	60fb      	str	r3, [r7, #12]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d902      	bls.n	80080ee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	61fb      	str	r3, [r7, #28]
 80080ec:	e002      	b.n	80080f4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	69fa      	ldr	r2, [r7, #28]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d058      	beq.n	80081b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	429a      	cmp	r2, r3
 8008106:	d153      	bne.n	80081b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008108:	4b2b      	ldr	r3, [pc, #172]	; (80081b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	429a      	cmp	r2, r3
 8008110:	d10a      	bne.n	8008128 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	60bb      	str	r3, [r7, #8]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	db04      	blt.n	8008146 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f1c3 0207 	rsb	r2, r3, #7
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	6959      	ldr	r1, [r3, #20]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4a19      	ldr	r2, [pc, #100]	; (80081bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008156:	4413      	add	r3, r2
 8008158:	4299      	cmp	r1, r3
 800815a:	d129      	bne.n	80081b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	3304      	adds	r3, #4
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe fc96 	bl	8006a92 <uxListRemove>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	2201      	movs	r2, #1
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	43da      	mvns	r2, r3
 8008178:	4b11      	ldr	r3, [pc, #68]	; (80081c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4013      	ands	r3, r2
 800817e:	4a10      	ldr	r2, [pc, #64]	; (80081c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008180:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008186:	2201      	movs	r2, #1
 8008188:	409a      	lsls	r2, r3
 800818a:	4b0d      	ldr	r3, [pc, #52]	; (80081c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4313      	orrs	r3, r2
 8008190:	4a0b      	ldr	r2, [pc, #44]	; (80081c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4a06      	ldr	r2, [pc, #24]	; (80081bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80081a2:	441a      	add	r2, r3
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f7fe fc14 	bl	80069d8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081b0:	bf00      	nop
 80081b2:	3720      	adds	r7, #32
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20002160 	.word	0x20002160
 80081bc:	20002164 	.word	0x20002164
 80081c0:	20002268 	.word	0x20002268

080081c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081c8:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081d6:	3201      	adds	r2, #1
 80081d8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80081da:	4b03      	ldr	r3, [pc, #12]	; (80081e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80081dc:	681b      	ldr	r3, [r3, #0]
	}
 80081de:	4618      	mov	r0, r3
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	20002160 	.word	0x20002160

080081ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081f6:	4b29      	ldr	r3, [pc, #164]	; (800829c <prvAddCurrentTaskToDelayedList+0xb0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081fc:	4b28      	ldr	r3, [pc, #160]	; (80082a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3304      	adds	r3, #4
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe fc45 	bl	8006a92 <uxListRemove>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10b      	bne.n	8008226 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800820e:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	2201      	movs	r2, #1
 8008216:	fa02 f303 	lsl.w	r3, r2, r3
 800821a:	43da      	mvns	r2, r3
 800821c:	4b21      	ldr	r3, [pc, #132]	; (80082a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4013      	ands	r3, r2
 8008222:	4a20      	ldr	r2, [pc, #128]	; (80082a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008224:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d10a      	bne.n	8008244 <prvAddCurrentTaskToDelayedList+0x58>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d007      	beq.n	8008244 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008234:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3304      	adds	r3, #4
 800823a:	4619      	mov	r1, r3
 800823c:	481a      	ldr	r0, [pc, #104]	; (80082a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800823e:	f7fe fbcb 	bl	80069d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008242:	e026      	b.n	8008292 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800824c:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	429a      	cmp	r2, r3
 800825a:	d209      	bcs.n	8008270 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800825c:	4b13      	ldr	r3, [pc, #76]	; (80082ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	4b0f      	ldr	r3, [pc, #60]	; (80082a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3304      	adds	r3, #4
 8008266:	4619      	mov	r1, r3
 8008268:	4610      	mov	r0, r2
 800826a:	f7fe fbd9 	bl	8006a20 <vListInsert>
}
 800826e:	e010      	b.n	8008292 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008270:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	4b0a      	ldr	r3, [pc, #40]	; (80082a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3304      	adds	r3, #4
 800827a:	4619      	mov	r1, r3
 800827c:	4610      	mov	r0, r2
 800827e:	f7fe fbcf 	bl	8006a20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008282:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	429a      	cmp	r2, r3
 800828a:	d202      	bcs.n	8008292 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800828c:	4a09      	ldr	r2, [pc, #36]	; (80082b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	6013      	str	r3, [r2, #0]
}
 8008292:	bf00      	nop
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20002264 	.word	0x20002264
 80082a0:	20002160 	.word	0x20002160
 80082a4:	20002268 	.word	0x20002268
 80082a8:	2000224c 	.word	0x2000224c
 80082ac:	2000221c 	.word	0x2000221c
 80082b0:	20002218 	.word	0x20002218
 80082b4:	20002280 	.word	0x20002280

080082b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3b04      	subs	r3, #4
 80082c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3b04      	subs	r3, #4
 80082d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f023 0201 	bic.w	r2, r3, #1
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3b04      	subs	r3, #4
 80082e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082e8:	4a0c      	ldr	r2, [pc, #48]	; (800831c <pxPortInitialiseStack+0x64>)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3b14      	subs	r3, #20
 80082f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3b04      	subs	r3, #4
 80082fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f06f 0202 	mvn.w	r2, #2
 8008306:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3b20      	subs	r3, #32
 800830c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800830e:	68fb      	ldr	r3, [r7, #12]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	08008321 	.word	0x08008321

08008320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800832a:	4b12      	ldr	r3, [pc, #72]	; (8008374 <prvTaskExitError+0x54>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d00a      	beq.n	800834a <prvTaskExitError+0x2a>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	60fb      	str	r3, [r7, #12]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <prvTaskExitError+0x28>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	60bb      	str	r3, [r7, #8]
}
 800835c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800835e:	bf00      	nop
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0fc      	beq.n	8008360 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	200002f8 	.word	0x200002f8
	...

08008380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008380:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <pxCurrentTCBConst2>)
 8008382:	6819      	ldr	r1, [r3, #0]
 8008384:	6808      	ldr	r0, [r1, #0]
 8008386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838a:	f380 8809 	msr	PSP, r0
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f04f 0000 	mov.w	r0, #0
 8008396:	f380 8811 	msr	BASEPRI, r0
 800839a:	4770      	bx	lr
 800839c:	f3af 8000 	nop.w

080083a0 <pxCurrentTCBConst2>:
 80083a0:	20002160 	.word	0x20002160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop

080083a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083a8:	4808      	ldr	r0, [pc, #32]	; (80083cc <prvPortStartFirstTask+0x24>)
 80083aa:	6800      	ldr	r0, [r0, #0]
 80083ac:	6800      	ldr	r0, [r0, #0]
 80083ae:	f380 8808 	msr	MSP, r0
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	f380 8814 	msr	CONTROL, r0
 80083ba:	b662      	cpsie	i
 80083bc:	b661      	cpsie	f
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	df00      	svc	0
 80083c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083ca:	bf00      	nop
 80083cc:	e000ed08 	.word	0xe000ed08

080083d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083d6:	4b46      	ldr	r3, [pc, #280]	; (80084f0 <xPortStartScheduler+0x120>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a46      	ldr	r2, [pc, #280]	; (80084f4 <xPortStartScheduler+0x124>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d10a      	bne.n	80083f6 <xPortStartScheduler+0x26>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	613b      	str	r3, [r7, #16]
}
 80083f2:	bf00      	nop
 80083f4:	e7fe      	b.n	80083f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083f6:	4b3e      	ldr	r3, [pc, #248]	; (80084f0 <xPortStartScheduler+0x120>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a3f      	ldr	r2, [pc, #252]	; (80084f8 <xPortStartScheduler+0x128>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d10a      	bne.n	8008416 <xPortStartScheduler+0x46>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008416:	4b39      	ldr	r3, [pc, #228]	; (80084fc <xPortStartScheduler+0x12c>)
 8008418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	b2db      	uxtb	r3, r3
 8008420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	22ff      	movs	r2, #255	; 0xff
 8008426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008438:	b2da      	uxtb	r2, r3
 800843a:	4b31      	ldr	r3, [pc, #196]	; (8008500 <xPortStartScheduler+0x130>)
 800843c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800843e:	4b31      	ldr	r3, [pc, #196]	; (8008504 <xPortStartScheduler+0x134>)
 8008440:	2207      	movs	r2, #7
 8008442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008444:	e009      	b.n	800845a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008446:	4b2f      	ldr	r3, [pc, #188]	; (8008504 <xPortStartScheduler+0x134>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3b01      	subs	r3, #1
 800844c:	4a2d      	ldr	r2, [pc, #180]	; (8008504 <xPortStartScheduler+0x134>)
 800844e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	b2db      	uxtb	r3, r3
 8008458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008462:	2b80      	cmp	r3, #128	; 0x80
 8008464:	d0ef      	beq.n	8008446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008466:	4b27      	ldr	r3, [pc, #156]	; (8008504 <xPortStartScheduler+0x134>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f1c3 0307 	rsb	r3, r3, #7
 800846e:	2b04      	cmp	r3, #4
 8008470:	d00a      	beq.n	8008488 <xPortStartScheduler+0xb8>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	60bb      	str	r3, [r7, #8]
}
 8008484:	bf00      	nop
 8008486:	e7fe      	b.n	8008486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008488:	4b1e      	ldr	r3, [pc, #120]	; (8008504 <xPortStartScheduler+0x134>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	021b      	lsls	r3, r3, #8
 800848e:	4a1d      	ldr	r2, [pc, #116]	; (8008504 <xPortStartScheduler+0x134>)
 8008490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008492:	4b1c      	ldr	r3, [pc, #112]	; (8008504 <xPortStartScheduler+0x134>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800849a:	4a1a      	ldr	r2, [pc, #104]	; (8008504 <xPortStartScheduler+0x134>)
 800849c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084a6:	4b18      	ldr	r3, [pc, #96]	; (8008508 <xPortStartScheduler+0x138>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a17      	ldr	r2, [pc, #92]	; (8008508 <xPortStartScheduler+0x138>)
 80084ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084b2:	4b15      	ldr	r3, [pc, #84]	; (8008508 <xPortStartScheduler+0x138>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a14      	ldr	r2, [pc, #80]	; (8008508 <xPortStartScheduler+0x138>)
 80084b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084be:	f000 f8dd 	bl	800867c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084c2:	4b12      	ldr	r3, [pc, #72]	; (800850c <xPortStartScheduler+0x13c>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084c8:	f000 f8fc 	bl	80086c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084cc:	4b10      	ldr	r3, [pc, #64]	; (8008510 <xPortStartScheduler+0x140>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a0f      	ldr	r2, [pc, #60]	; (8008510 <xPortStartScheduler+0x140>)
 80084d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084d8:	f7ff ff66 	bl	80083a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084dc:	f7ff fa8e 	bl	80079fc <vTaskSwitchContext>
	prvTaskExitError();
 80084e0:	f7ff ff1e 	bl	8008320 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	e000ed00 	.word	0xe000ed00
 80084f4:	410fc271 	.word	0x410fc271
 80084f8:	410fc270 	.word	0x410fc270
 80084fc:	e000e400 	.word	0xe000e400
 8008500:	2000228c 	.word	0x2000228c
 8008504:	20002290 	.word	0x20002290
 8008508:	e000ed20 	.word	0xe000ed20
 800850c:	200002f8 	.word	0x200002f8
 8008510:	e000ef34 	.word	0xe000ef34

08008514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	607b      	str	r3, [r7, #4]
}
 800852c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800852e:	4b0f      	ldr	r3, [pc, #60]	; (800856c <vPortEnterCritical+0x58>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	4a0d      	ldr	r2, [pc, #52]	; (800856c <vPortEnterCritical+0x58>)
 8008536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008538:	4b0c      	ldr	r3, [pc, #48]	; (800856c <vPortEnterCritical+0x58>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d10f      	bne.n	8008560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008540:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <vPortEnterCritical+0x5c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <vPortEnterCritical+0x4c>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	603b      	str	r3, [r7, #0]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <vPortEnterCritical+0x4a>
	}
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	200002f8 	.word	0x200002f8
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800857a:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <vPortExitCritical+0x50>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <vPortExitCritical+0x24>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	607b      	str	r3, [r7, #4]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <vPortExitCritical+0x50>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3b01      	subs	r3, #1
 800859e:	4a09      	ldr	r2, [pc, #36]	; (80085c4 <vPortExitCritical+0x50>)
 80085a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085a2:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <vPortExitCritical+0x50>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d105      	bne.n	80085b6 <vPortExitCritical+0x42>
 80085aa:	2300      	movs	r3, #0
 80085ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	200002f8 	.word	0x200002f8
	...

080085d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085d0:	f3ef 8009 	mrs	r0, PSP
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	4b15      	ldr	r3, [pc, #84]	; (8008630 <pxCurrentTCBConst>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	f01e 0f10 	tst.w	lr, #16
 80085e0:	bf08      	it	eq
 80085e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ea:	6010      	str	r0, [r2, #0]
 80085ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085f4:	f380 8811 	msr	BASEPRI, r0
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f7ff f9fc 	bl	80079fc <vTaskSwitchContext>
 8008604:	f04f 0000 	mov.w	r0, #0
 8008608:	f380 8811 	msr	BASEPRI, r0
 800860c:	bc09      	pop	{r0, r3}
 800860e:	6819      	ldr	r1, [r3, #0]
 8008610:	6808      	ldr	r0, [r1, #0]
 8008612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008616:	f01e 0f10 	tst.w	lr, #16
 800861a:	bf08      	it	eq
 800861c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008620:	f380 8809 	msr	PSP, r0
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	f3af 8000 	nop.w

08008630 <pxCurrentTCBConst>:
 8008630:	20002160 	.word	0x20002160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop

08008638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	607b      	str	r3, [r7, #4]
}
 8008650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008652:	f7ff f91b 	bl	800788c <xTaskIncrementTick>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800865c:	4b06      	ldr	r3, [pc, #24]	; (8008678 <xPortSysTickHandler+0x40>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	f383 8811 	msr	BASEPRI, r3
}
 800866e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008680:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <vPortSetupTimerInterrupt+0x34>)
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008686:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <vPortSetupTimerInterrupt+0x38>)
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <vPortSetupTimerInterrupt+0x3c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <vPortSetupTimerInterrupt+0x40>)
 8008692:	fba2 2303 	umull	r2, r3, r2, r3
 8008696:	099b      	lsrs	r3, r3, #6
 8008698:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <vPortSetupTimerInterrupt+0x44>)
 800869a:	3b01      	subs	r3, #1
 800869c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800869e:	4b04      	ldr	r3, [pc, #16]	; (80086b0 <vPortSetupTimerInterrupt+0x34>)
 80086a0:	2207      	movs	r2, #7
 80086a2:	601a      	str	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	e000e010 	.word	0xe000e010
 80086b4:	e000e018 	.word	0xe000e018
 80086b8:	20000018 	.word	0x20000018
 80086bc:	10624dd3 	.word	0x10624dd3
 80086c0:	e000e014 	.word	0xe000e014

080086c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086d4 <vPortEnableVFP+0x10>
 80086c8:	6801      	ldr	r1, [r0, #0]
 80086ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ce:	6001      	str	r1, [r0, #0]
 80086d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086d2:	bf00      	nop
 80086d4:	e000ed88 	.word	0xe000ed88

080086d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	; 0x28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086e4:	f7ff f828 	bl	8007738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086e8:	4b5b      	ldr	r3, [pc, #364]	; (8008858 <pvPortMalloc+0x180>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086f0:	f000 f920 	bl	8008934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086f4:	4b59      	ldr	r3, [pc, #356]	; (800885c <pvPortMalloc+0x184>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f040 8093 	bne.w	8008828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01d      	beq.n	8008744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008708:	2208      	movs	r2, #8
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b00      	cmp	r3, #0
 8008718:	d014      	beq.n	8008744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f023 0307 	bic.w	r3, r3, #7
 8008720:	3308      	adds	r3, #8
 8008722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <pvPortMalloc+0x6c>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	617b      	str	r3, [r7, #20]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d06e      	beq.n	8008828 <pvPortMalloc+0x150>
 800874a:	4b45      	ldr	r3, [pc, #276]	; (8008860 <pvPortMalloc+0x188>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	429a      	cmp	r2, r3
 8008752:	d869      	bhi.n	8008828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008754:	4b43      	ldr	r3, [pc, #268]	; (8008864 <pvPortMalloc+0x18c>)
 8008756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008758:	4b42      	ldr	r3, [pc, #264]	; (8008864 <pvPortMalloc+0x18c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800875e:	e004      	b.n	800876a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	429a      	cmp	r2, r3
 8008772:	d903      	bls.n	800877c <pvPortMalloc+0xa4>
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1f1      	bne.n	8008760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800877c:	4b36      	ldr	r3, [pc, #216]	; (8008858 <pvPortMalloc+0x180>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008782:	429a      	cmp	r2, r3
 8008784:	d050      	beq.n	8008828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2208      	movs	r2, #8
 800878c:	4413      	add	r3, r2
 800878e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	1ad2      	subs	r2, r2, r3
 80087a0:	2308      	movs	r3, #8
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d91f      	bls.n	80087e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4413      	add	r3, r2
 80087ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00a      	beq.n	80087d0 <pvPortMalloc+0xf8>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	613b      	str	r3, [r7, #16]
}
 80087cc:	bf00      	nop
 80087ce:	e7fe      	b.n	80087ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	1ad2      	subs	r2, r2, r3
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087e2:	69b8      	ldr	r0, [r7, #24]
 80087e4:	f000 f908 	bl	80089f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087e8:	4b1d      	ldr	r3, [pc, #116]	; (8008860 <pvPortMalloc+0x188>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	4a1b      	ldr	r2, [pc, #108]	; (8008860 <pvPortMalloc+0x188>)
 80087f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087f6:	4b1a      	ldr	r3, [pc, #104]	; (8008860 <pvPortMalloc+0x188>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <pvPortMalloc+0x190>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d203      	bcs.n	800880a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008802:	4b17      	ldr	r3, [pc, #92]	; (8008860 <pvPortMalloc+0x188>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a18      	ldr	r2, [pc, #96]	; (8008868 <pvPortMalloc+0x190>)
 8008808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	4b13      	ldr	r3, [pc, #76]	; (800885c <pvPortMalloc+0x184>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	431a      	orrs	r2, r3
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <pvPortMalloc+0x194>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3301      	adds	r3, #1
 8008824:	4a11      	ldr	r2, [pc, #68]	; (800886c <pvPortMalloc+0x194>)
 8008826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008828:	f7fe ff94 	bl	8007754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <pvPortMalloc+0x174>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	60fb      	str	r3, [r7, #12]
}
 8008848:	bf00      	nop
 800884a:	e7fe      	b.n	800884a <pvPortMalloc+0x172>
	return pvReturn;
 800884c:	69fb      	ldr	r3, [r7, #28]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3728      	adds	r7, #40	; 0x28
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20005e9c 	.word	0x20005e9c
 800885c:	20005eb0 	.word	0x20005eb0
 8008860:	20005ea0 	.word	0x20005ea0
 8008864:	20005e94 	.word	0x20005e94
 8008868:	20005ea4 	.word	0x20005ea4
 800886c:	20005ea8 	.word	0x20005ea8

08008870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d04d      	beq.n	800891e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008882:	2308      	movs	r3, #8
 8008884:	425b      	negs	r3, r3
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4413      	add	r3, r2
 800888a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	4b24      	ldr	r3, [pc, #144]	; (8008928 <vPortFree+0xb8>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4013      	ands	r3, r2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10a      	bne.n	80088b4 <vPortFree+0x44>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	60fb      	str	r3, [r7, #12]
}
 80088b0:	bf00      	nop
 80088b2:	e7fe      	b.n	80088b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <vPortFree+0x62>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	60bb      	str	r3, [r7, #8]
}
 80088ce:	bf00      	nop
 80088d0:	e7fe      	b.n	80088d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	4b14      	ldr	r3, [pc, #80]	; (8008928 <vPortFree+0xb8>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4013      	ands	r3, r2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d01e      	beq.n	800891e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d11a      	bne.n	800891e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <vPortFree+0xb8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	43db      	mvns	r3, r3
 80088f2:	401a      	ands	r2, r3
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088f8:	f7fe ff1e 	bl	8007738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	4b0a      	ldr	r3, [pc, #40]	; (800892c <vPortFree+0xbc>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4413      	add	r3, r2
 8008906:	4a09      	ldr	r2, [pc, #36]	; (800892c <vPortFree+0xbc>)
 8008908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800890a:	6938      	ldr	r0, [r7, #16]
 800890c:	f000 f874 	bl	80089f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008910:	4b07      	ldr	r3, [pc, #28]	; (8008930 <vPortFree+0xc0>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	4a06      	ldr	r2, [pc, #24]	; (8008930 <vPortFree+0xc0>)
 8008918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800891a:	f7fe ff1b 	bl	8007754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800891e:	bf00      	nop
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20005eb0 	.word	0x20005eb0
 800892c:	20005ea0 	.word	0x20005ea0
 8008930:	20005eac 	.word	0x20005eac

08008934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800893a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800893e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008940:	4b27      	ldr	r3, [pc, #156]	; (80089e0 <prvHeapInit+0xac>)
 8008942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00c      	beq.n	8008968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3307      	adds	r3, #7
 8008952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0307 	bic.w	r3, r3, #7
 800895a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <prvHeapInit+0xac>)
 8008964:	4413      	add	r3, r2
 8008966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <prvHeapInit+0xb0>)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008972:	4b1c      	ldr	r3, [pc, #112]	; (80089e4 <prvHeapInit+0xb0>)
 8008974:	2200      	movs	r2, #0
 8008976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	4413      	add	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008980:	2208      	movs	r2, #8
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	1a9b      	subs	r3, r3, r2
 8008986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f023 0307 	bic.w	r3, r3, #7
 800898e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4a15      	ldr	r2, [pc, #84]	; (80089e8 <prvHeapInit+0xb4>)
 8008994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <prvHeapInit+0xb4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2200      	movs	r2, #0
 800899c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800899e:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <prvHeapInit+0xb4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089b4:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <prvHeapInit+0xb4>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4a0a      	ldr	r2, [pc, #40]	; (80089ec <prvHeapInit+0xb8>)
 80089c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	4a09      	ldr	r2, [pc, #36]	; (80089f0 <prvHeapInit+0xbc>)
 80089ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089cc:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <prvHeapInit+0xc0>)
 80089ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089d2:	601a      	str	r2, [r3, #0]
}
 80089d4:	bf00      	nop
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	20002294 	.word	0x20002294
 80089e4:	20005e94 	.word	0x20005e94
 80089e8:	20005e9c 	.word	0x20005e9c
 80089ec:	20005ea4 	.word	0x20005ea4
 80089f0:	20005ea0 	.word	0x20005ea0
 80089f4:	20005eb0 	.word	0x20005eb0

080089f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a00:	4b28      	ldr	r3, [pc, #160]	; (8008aa4 <prvInsertBlockIntoFreeList+0xac>)
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e002      	b.n	8008a0c <prvInsertBlockIntoFreeList+0x14>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d8f7      	bhi.n	8008a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	4413      	add	r3, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d108      	bne.n	8008a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	441a      	add	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	441a      	add	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d118      	bne.n	8008a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	4b15      	ldr	r3, [pc, #84]	; (8008aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d00d      	beq.n	8008a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	441a      	add	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	e008      	b.n	8008a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a76:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e003      	b.n	8008a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d002      	beq.n	8008a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a96:	bf00      	nop
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	20005e94 	.word	0x20005e94
 8008aa8:	20005e9c 	.word	0x20005e9c

08008aac <__errno>:
 8008aac:	4b01      	ldr	r3, [pc, #4]	; (8008ab4 <__errno+0x8>)
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	200002fc 	.word	0x200002fc

08008ab8 <__sflush_r>:
 8008ab8:	898a      	ldrh	r2, [r1, #12]
 8008aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abe:	4605      	mov	r5, r0
 8008ac0:	0710      	lsls	r0, r2, #28
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	d458      	bmi.n	8008b78 <__sflush_r+0xc0>
 8008ac6:	684b      	ldr	r3, [r1, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dc05      	bgt.n	8008ad8 <__sflush_r+0x20>
 8008acc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	dc02      	bgt.n	8008ad8 <__sflush_r+0x20>
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ada:	2e00      	cmp	r6, #0
 8008adc:	d0f9      	beq.n	8008ad2 <__sflush_r+0x1a>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ae4:	682f      	ldr	r7, [r5, #0]
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	d032      	beq.n	8008b50 <__sflush_r+0x98>
 8008aea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	075a      	lsls	r2, r3, #29
 8008af0:	d505      	bpl.n	8008afe <__sflush_r+0x46>
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	1ac0      	subs	r0, r0, r3
 8008af6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008af8:	b10b      	cbz	r3, 8008afe <__sflush_r+0x46>
 8008afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008afc:	1ac0      	subs	r0, r0, r3
 8008afe:	2300      	movs	r3, #0
 8008b00:	4602      	mov	r2, r0
 8008b02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b04:	6a21      	ldr	r1, [r4, #32]
 8008b06:	4628      	mov	r0, r5
 8008b08:	47b0      	blx	r6
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	d106      	bne.n	8008b1e <__sflush_r+0x66>
 8008b10:	6829      	ldr	r1, [r5, #0]
 8008b12:	291d      	cmp	r1, #29
 8008b14:	d82c      	bhi.n	8008b70 <__sflush_r+0xb8>
 8008b16:	4a2a      	ldr	r2, [pc, #168]	; (8008bc0 <__sflush_r+0x108>)
 8008b18:	40ca      	lsrs	r2, r1
 8008b1a:	07d6      	lsls	r6, r2, #31
 8008b1c:	d528      	bpl.n	8008b70 <__sflush_r+0xb8>
 8008b1e:	2200      	movs	r2, #0
 8008b20:	6062      	str	r2, [r4, #4]
 8008b22:	04d9      	lsls	r1, r3, #19
 8008b24:	6922      	ldr	r2, [r4, #16]
 8008b26:	6022      	str	r2, [r4, #0]
 8008b28:	d504      	bpl.n	8008b34 <__sflush_r+0x7c>
 8008b2a:	1c42      	adds	r2, r0, #1
 8008b2c:	d101      	bne.n	8008b32 <__sflush_r+0x7a>
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	b903      	cbnz	r3, 8008b34 <__sflush_r+0x7c>
 8008b32:	6560      	str	r0, [r4, #84]	; 0x54
 8008b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b36:	602f      	str	r7, [r5, #0]
 8008b38:	2900      	cmp	r1, #0
 8008b3a:	d0ca      	beq.n	8008ad2 <__sflush_r+0x1a>
 8008b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b40:	4299      	cmp	r1, r3
 8008b42:	d002      	beq.n	8008b4a <__sflush_r+0x92>
 8008b44:	4628      	mov	r0, r5
 8008b46:	f000 f9cf 	bl	8008ee8 <_free_r>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8008b4e:	e7c1      	b.n	8008ad4 <__sflush_r+0x1c>
 8008b50:	6a21      	ldr	r1, [r4, #32]
 8008b52:	2301      	movs	r3, #1
 8008b54:	4628      	mov	r0, r5
 8008b56:	47b0      	blx	r6
 8008b58:	1c41      	adds	r1, r0, #1
 8008b5a:	d1c7      	bne.n	8008aec <__sflush_r+0x34>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0c4      	beq.n	8008aec <__sflush_r+0x34>
 8008b62:	2b1d      	cmp	r3, #29
 8008b64:	d001      	beq.n	8008b6a <__sflush_r+0xb2>
 8008b66:	2b16      	cmp	r3, #22
 8008b68:	d101      	bne.n	8008b6e <__sflush_r+0xb6>
 8008b6a:	602f      	str	r7, [r5, #0]
 8008b6c:	e7b1      	b.n	8008ad2 <__sflush_r+0x1a>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b74:	81a3      	strh	r3, [r4, #12]
 8008b76:	e7ad      	b.n	8008ad4 <__sflush_r+0x1c>
 8008b78:	690f      	ldr	r7, [r1, #16]
 8008b7a:	2f00      	cmp	r7, #0
 8008b7c:	d0a9      	beq.n	8008ad2 <__sflush_r+0x1a>
 8008b7e:	0793      	lsls	r3, r2, #30
 8008b80:	680e      	ldr	r6, [r1, #0]
 8008b82:	bf08      	it	eq
 8008b84:	694b      	ldreq	r3, [r1, #20]
 8008b86:	600f      	str	r7, [r1, #0]
 8008b88:	bf18      	it	ne
 8008b8a:	2300      	movne	r3, #0
 8008b8c:	eba6 0807 	sub.w	r8, r6, r7
 8008b90:	608b      	str	r3, [r1, #8]
 8008b92:	f1b8 0f00 	cmp.w	r8, #0
 8008b96:	dd9c      	ble.n	8008ad2 <__sflush_r+0x1a>
 8008b98:	6a21      	ldr	r1, [r4, #32]
 8008b9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b9c:	4643      	mov	r3, r8
 8008b9e:	463a      	mov	r2, r7
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b0      	blx	r6
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	dc06      	bgt.n	8008bb6 <__sflush_r+0xfe>
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bae:	81a3      	strh	r3, [r4, #12]
 8008bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb4:	e78e      	b.n	8008ad4 <__sflush_r+0x1c>
 8008bb6:	4407      	add	r7, r0
 8008bb8:	eba8 0800 	sub.w	r8, r8, r0
 8008bbc:	e7e9      	b.n	8008b92 <__sflush_r+0xda>
 8008bbe:	bf00      	nop
 8008bc0:	20400001 	.word	0x20400001

08008bc4 <_fflush_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	690b      	ldr	r3, [r1, #16]
 8008bc8:	4605      	mov	r5, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	b913      	cbnz	r3, 8008bd4 <_fflush_r+0x10>
 8008bce:	2500      	movs	r5, #0
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	b118      	cbz	r0, 8008bde <_fflush_r+0x1a>
 8008bd6:	6983      	ldr	r3, [r0, #24]
 8008bd8:	b90b      	cbnz	r3, 8008bde <_fflush_r+0x1a>
 8008bda:	f000 f899 	bl	8008d10 <__sinit>
 8008bde:	4b14      	ldr	r3, [pc, #80]	; (8008c30 <_fflush_r+0x6c>)
 8008be0:	429c      	cmp	r4, r3
 8008be2:	d11b      	bne.n	8008c1c <_fflush_r+0x58>
 8008be4:	686c      	ldr	r4, [r5, #4]
 8008be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0ef      	beq.n	8008bce <_fflush_r+0xa>
 8008bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bf0:	07d0      	lsls	r0, r2, #31
 8008bf2:	d404      	bmi.n	8008bfe <_fflush_r+0x3a>
 8008bf4:	0599      	lsls	r1, r3, #22
 8008bf6:	d402      	bmi.n	8008bfe <_fflush_r+0x3a>
 8008bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bfa:	f000 f94c 	bl	8008e96 <__retarget_lock_acquire_recursive>
 8008bfe:	4628      	mov	r0, r5
 8008c00:	4621      	mov	r1, r4
 8008c02:	f7ff ff59 	bl	8008ab8 <__sflush_r>
 8008c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c08:	07da      	lsls	r2, r3, #31
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	d4e0      	bmi.n	8008bd0 <_fflush_r+0xc>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	059b      	lsls	r3, r3, #22
 8008c12:	d4dd      	bmi.n	8008bd0 <_fflush_r+0xc>
 8008c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c16:	f000 f93f 	bl	8008e98 <__retarget_lock_release_recursive>
 8008c1a:	e7d9      	b.n	8008bd0 <_fflush_r+0xc>
 8008c1c:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <_fflush_r+0x70>)
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	d101      	bne.n	8008c26 <_fflush_r+0x62>
 8008c22:	68ac      	ldr	r4, [r5, #8]
 8008c24:	e7df      	b.n	8008be6 <_fflush_r+0x22>
 8008c26:	4b04      	ldr	r3, [pc, #16]	; (8008c38 <_fflush_r+0x74>)
 8008c28:	429c      	cmp	r4, r3
 8008c2a:	bf08      	it	eq
 8008c2c:	68ec      	ldreq	r4, [r5, #12]
 8008c2e:	e7da      	b.n	8008be6 <_fflush_r+0x22>
 8008c30:	0800d590 	.word	0x0800d590
 8008c34:	0800d5b0 	.word	0x0800d5b0
 8008c38:	0800d570 	.word	0x0800d570

08008c3c <fflush>:
 8008c3c:	4601      	mov	r1, r0
 8008c3e:	b920      	cbnz	r0, 8008c4a <fflush+0xe>
 8008c40:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <fflush+0x18>)
 8008c42:	4905      	ldr	r1, [pc, #20]	; (8008c58 <fflush+0x1c>)
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	f000 b8e1 	b.w	8008e0c <_fwalk_reent>
 8008c4a:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <fflush+0x20>)
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	f7ff bfb9 	b.w	8008bc4 <_fflush_r>
 8008c52:	bf00      	nop
 8008c54:	0800d5d0 	.word	0x0800d5d0
 8008c58:	08008bc5 	.word	0x08008bc5
 8008c5c:	200002fc 	.word	0x200002fc

08008c60 <std>:
 8008c60:	2300      	movs	r3, #0
 8008c62:	b510      	push	{r4, lr}
 8008c64:	4604      	mov	r4, r0
 8008c66:	e9c0 3300 	strd	r3, r3, [r0]
 8008c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c6e:	6083      	str	r3, [r0, #8]
 8008c70:	8181      	strh	r1, [r0, #12]
 8008c72:	6643      	str	r3, [r0, #100]	; 0x64
 8008c74:	81c2      	strh	r2, [r0, #14]
 8008c76:	6183      	str	r3, [r0, #24]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	2208      	movs	r2, #8
 8008c7c:	305c      	adds	r0, #92	; 0x5c
 8008c7e:	f000 f92b 	bl	8008ed8 <memset>
 8008c82:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <std+0x38>)
 8008c84:	6263      	str	r3, [r4, #36]	; 0x24
 8008c86:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <std+0x3c>)
 8008c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c8a:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <std+0x40>)
 8008c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c8e:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <std+0x44>)
 8008c90:	6224      	str	r4, [r4, #32]
 8008c92:	6323      	str	r3, [r4, #48]	; 0x30
 8008c94:	bd10      	pop	{r4, pc}
 8008c96:	bf00      	nop
 8008c98:	08009b09 	.word	0x08009b09
 8008c9c:	08009b2b 	.word	0x08009b2b
 8008ca0:	08009b63 	.word	0x08009b63
 8008ca4:	08009b87 	.word	0x08009b87

08008ca8 <_cleanup_r>:
 8008ca8:	4901      	ldr	r1, [pc, #4]	; (8008cb0 <_cleanup_r+0x8>)
 8008caa:	f000 b8af 	b.w	8008e0c <_fwalk_reent>
 8008cae:	bf00      	nop
 8008cb0:	08008bc5 	.word	0x08008bc5

08008cb4 <__sfmoreglue>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	2268      	movs	r2, #104	; 0x68
 8008cb8:	1e4d      	subs	r5, r1, #1
 8008cba:	4355      	muls	r5, r2
 8008cbc:	460e      	mov	r6, r1
 8008cbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cc2:	f000 f97d 	bl	8008fc0 <_malloc_r>
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	b140      	cbz	r0, 8008cdc <__sfmoreglue+0x28>
 8008cca:	2100      	movs	r1, #0
 8008ccc:	e9c0 1600 	strd	r1, r6, [r0]
 8008cd0:	300c      	adds	r0, #12
 8008cd2:	60a0      	str	r0, [r4, #8]
 8008cd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cd8:	f000 f8fe 	bl	8008ed8 <memset>
 8008cdc:	4620      	mov	r0, r4
 8008cde:	bd70      	pop	{r4, r5, r6, pc}

08008ce0 <__sfp_lock_acquire>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__sfp_lock_acquire+0x8>)
 8008ce2:	f000 b8d8 	b.w	8008e96 <__retarget_lock_acquire_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	20005eb5 	.word	0x20005eb5

08008cec <__sfp_lock_release>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__sfp_lock_release+0x8>)
 8008cee:	f000 b8d3 	b.w	8008e98 <__retarget_lock_release_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	20005eb5 	.word	0x20005eb5

08008cf8 <__sinit_lock_acquire>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__sinit_lock_acquire+0x8>)
 8008cfa:	f000 b8cc 	b.w	8008e96 <__retarget_lock_acquire_recursive>
 8008cfe:	bf00      	nop
 8008d00:	20005eb6 	.word	0x20005eb6

08008d04 <__sinit_lock_release>:
 8008d04:	4801      	ldr	r0, [pc, #4]	; (8008d0c <__sinit_lock_release+0x8>)
 8008d06:	f000 b8c7 	b.w	8008e98 <__retarget_lock_release_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	20005eb6 	.word	0x20005eb6

08008d10 <__sinit>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	4604      	mov	r4, r0
 8008d14:	f7ff fff0 	bl	8008cf8 <__sinit_lock_acquire>
 8008d18:	69a3      	ldr	r3, [r4, #24]
 8008d1a:	b11b      	cbz	r3, 8008d24 <__sinit+0x14>
 8008d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d20:	f7ff bff0 	b.w	8008d04 <__sinit_lock_release>
 8008d24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d28:	6523      	str	r3, [r4, #80]	; 0x50
 8008d2a:	4b13      	ldr	r3, [pc, #76]	; (8008d78 <__sinit+0x68>)
 8008d2c:	4a13      	ldr	r2, [pc, #76]	; (8008d7c <__sinit+0x6c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d32:	42a3      	cmp	r3, r4
 8008d34:	bf04      	itt	eq
 8008d36:	2301      	moveq	r3, #1
 8008d38:	61a3      	streq	r3, [r4, #24]
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 f820 	bl	8008d80 <__sfp>
 8008d40:	6060      	str	r0, [r4, #4]
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 f81c 	bl	8008d80 <__sfp>
 8008d48:	60a0      	str	r0, [r4, #8]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 f818 	bl	8008d80 <__sfp>
 8008d50:	2200      	movs	r2, #0
 8008d52:	60e0      	str	r0, [r4, #12]
 8008d54:	2104      	movs	r1, #4
 8008d56:	6860      	ldr	r0, [r4, #4]
 8008d58:	f7ff ff82 	bl	8008c60 <std>
 8008d5c:	68a0      	ldr	r0, [r4, #8]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	2109      	movs	r1, #9
 8008d62:	f7ff ff7d 	bl	8008c60 <std>
 8008d66:	68e0      	ldr	r0, [r4, #12]
 8008d68:	2202      	movs	r2, #2
 8008d6a:	2112      	movs	r1, #18
 8008d6c:	f7ff ff78 	bl	8008c60 <std>
 8008d70:	2301      	movs	r3, #1
 8008d72:	61a3      	str	r3, [r4, #24]
 8008d74:	e7d2      	b.n	8008d1c <__sinit+0xc>
 8008d76:	bf00      	nop
 8008d78:	0800d5d0 	.word	0x0800d5d0
 8008d7c:	08008ca9 	.word	0x08008ca9

08008d80 <__sfp>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	4607      	mov	r7, r0
 8008d84:	f7ff ffac 	bl	8008ce0 <__sfp_lock_acquire>
 8008d88:	4b1e      	ldr	r3, [pc, #120]	; (8008e04 <__sfp+0x84>)
 8008d8a:	681e      	ldr	r6, [r3, #0]
 8008d8c:	69b3      	ldr	r3, [r6, #24]
 8008d8e:	b913      	cbnz	r3, 8008d96 <__sfp+0x16>
 8008d90:	4630      	mov	r0, r6
 8008d92:	f7ff ffbd 	bl	8008d10 <__sinit>
 8008d96:	3648      	adds	r6, #72	; 0x48
 8008d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	d503      	bpl.n	8008da8 <__sfp+0x28>
 8008da0:	6833      	ldr	r3, [r6, #0]
 8008da2:	b30b      	cbz	r3, 8008de8 <__sfp+0x68>
 8008da4:	6836      	ldr	r6, [r6, #0]
 8008da6:	e7f7      	b.n	8008d98 <__sfp+0x18>
 8008da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dac:	b9d5      	cbnz	r5, 8008de4 <__sfp+0x64>
 8008dae:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <__sfp+0x88>)
 8008db0:	60e3      	str	r3, [r4, #12]
 8008db2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008db6:	6665      	str	r5, [r4, #100]	; 0x64
 8008db8:	f000 f86c 	bl	8008e94 <__retarget_lock_init_recursive>
 8008dbc:	f7ff ff96 	bl	8008cec <__sfp_lock_release>
 8008dc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008dc8:	6025      	str	r5, [r4, #0]
 8008dca:	61a5      	str	r5, [r4, #24]
 8008dcc:	2208      	movs	r2, #8
 8008dce:	4629      	mov	r1, r5
 8008dd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dd4:	f000 f880 	bl	8008ed8 <memset>
 8008dd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008de0:	4620      	mov	r0, r4
 8008de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de4:	3468      	adds	r4, #104	; 0x68
 8008de6:	e7d9      	b.n	8008d9c <__sfp+0x1c>
 8008de8:	2104      	movs	r1, #4
 8008dea:	4638      	mov	r0, r7
 8008dec:	f7ff ff62 	bl	8008cb4 <__sfmoreglue>
 8008df0:	4604      	mov	r4, r0
 8008df2:	6030      	str	r0, [r6, #0]
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d1d5      	bne.n	8008da4 <__sfp+0x24>
 8008df8:	f7ff ff78 	bl	8008cec <__sfp_lock_release>
 8008dfc:	230c      	movs	r3, #12
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	e7ee      	b.n	8008de0 <__sfp+0x60>
 8008e02:	bf00      	nop
 8008e04:	0800d5d0 	.word	0x0800d5d0
 8008e08:	ffff0001 	.word	0xffff0001

08008e0c <_fwalk_reent>:
 8008e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e10:	4606      	mov	r6, r0
 8008e12:	4688      	mov	r8, r1
 8008e14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e18:	2700      	movs	r7, #0
 8008e1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e1e:	f1b9 0901 	subs.w	r9, r9, #1
 8008e22:	d505      	bpl.n	8008e30 <_fwalk_reent+0x24>
 8008e24:	6824      	ldr	r4, [r4, #0]
 8008e26:	2c00      	cmp	r4, #0
 8008e28:	d1f7      	bne.n	8008e1a <_fwalk_reent+0xe>
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e30:	89ab      	ldrh	r3, [r5, #12]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d907      	bls.n	8008e46 <_fwalk_reent+0x3a>
 8008e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	d003      	beq.n	8008e46 <_fwalk_reent+0x3a>
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4630      	mov	r0, r6
 8008e42:	47c0      	blx	r8
 8008e44:	4307      	orrs	r7, r0
 8008e46:	3568      	adds	r5, #104	; 0x68
 8008e48:	e7e9      	b.n	8008e1e <_fwalk_reent+0x12>
	...

08008e4c <__libc_init_array>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	4d0d      	ldr	r5, [pc, #52]	; (8008e84 <__libc_init_array+0x38>)
 8008e50:	4c0d      	ldr	r4, [pc, #52]	; (8008e88 <__libc_init_array+0x3c>)
 8008e52:	1b64      	subs	r4, r4, r5
 8008e54:	10a4      	asrs	r4, r4, #2
 8008e56:	2600      	movs	r6, #0
 8008e58:	42a6      	cmp	r6, r4
 8008e5a:	d109      	bne.n	8008e70 <__libc_init_array+0x24>
 8008e5c:	4d0b      	ldr	r5, [pc, #44]	; (8008e8c <__libc_init_array+0x40>)
 8008e5e:	4c0c      	ldr	r4, [pc, #48]	; (8008e90 <__libc_init_array+0x44>)
 8008e60:	f004 fa14 	bl	800d28c <_init>
 8008e64:	1b64      	subs	r4, r4, r5
 8008e66:	10a4      	asrs	r4, r4, #2
 8008e68:	2600      	movs	r6, #0
 8008e6a:	42a6      	cmp	r6, r4
 8008e6c:	d105      	bne.n	8008e7a <__libc_init_array+0x2e>
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e74:	4798      	blx	r3
 8008e76:	3601      	adds	r6, #1
 8008e78:	e7ee      	b.n	8008e58 <__libc_init_array+0xc>
 8008e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7e:	4798      	blx	r3
 8008e80:	3601      	adds	r6, #1
 8008e82:	e7f2      	b.n	8008e6a <__libc_init_array+0x1e>
 8008e84:	0800d914 	.word	0x0800d914
 8008e88:	0800d914 	.word	0x0800d914
 8008e8c:	0800d914 	.word	0x0800d914
 8008e90:	0800d918 	.word	0x0800d918

08008e94 <__retarget_lock_init_recursive>:
 8008e94:	4770      	bx	lr

08008e96 <__retarget_lock_acquire_recursive>:
 8008e96:	4770      	bx	lr

08008e98 <__retarget_lock_release_recursive>:
 8008e98:	4770      	bx	lr
	...

08008e9c <malloc>:
 8008e9c:	4b02      	ldr	r3, [pc, #8]	; (8008ea8 <malloc+0xc>)
 8008e9e:	4601      	mov	r1, r0
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	f000 b88d 	b.w	8008fc0 <_malloc_r>
 8008ea6:	bf00      	nop
 8008ea8:	200002fc 	.word	0x200002fc

08008eac <free>:
 8008eac:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <free+0xc>)
 8008eae:	4601      	mov	r1, r0
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	f000 b819 	b.w	8008ee8 <_free_r>
 8008eb6:	bf00      	nop
 8008eb8:	200002fc 	.word	0x200002fc

08008ebc <memcpy>:
 8008ebc:	440a      	add	r2, r1
 8008ebe:	4291      	cmp	r1, r2
 8008ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ec4:	d100      	bne.n	8008ec8 <memcpy+0xc>
 8008ec6:	4770      	bx	lr
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed2:	4291      	cmp	r1, r2
 8008ed4:	d1f9      	bne.n	8008eca <memcpy+0xe>
 8008ed6:	bd10      	pop	{r4, pc}

08008ed8 <memset>:
 8008ed8:	4402      	add	r2, r0
 8008eda:	4603      	mov	r3, r0
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d100      	bne.n	8008ee2 <memset+0xa>
 8008ee0:	4770      	bx	lr
 8008ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee6:	e7f9      	b.n	8008edc <memset+0x4>

08008ee8 <_free_r>:
 8008ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eea:	2900      	cmp	r1, #0
 8008eec:	d044      	beq.n	8008f78 <_free_r+0x90>
 8008eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef2:	9001      	str	r0, [sp, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8008efa:	bfb8      	it	lt
 8008efc:	18e4      	addlt	r4, r4, r3
 8008efe:	f002 ffef 	bl	800bee0 <__malloc_lock>
 8008f02:	4a1e      	ldr	r2, [pc, #120]	; (8008f7c <_free_r+0x94>)
 8008f04:	9801      	ldr	r0, [sp, #4]
 8008f06:	6813      	ldr	r3, [r2, #0]
 8008f08:	b933      	cbnz	r3, 8008f18 <_free_r+0x30>
 8008f0a:	6063      	str	r3, [r4, #4]
 8008f0c:	6014      	str	r4, [r2, #0]
 8008f0e:	b003      	add	sp, #12
 8008f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f14:	f002 bfea 	b.w	800beec <__malloc_unlock>
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	d908      	bls.n	8008f2e <_free_r+0x46>
 8008f1c:	6825      	ldr	r5, [r4, #0]
 8008f1e:	1961      	adds	r1, r4, r5
 8008f20:	428b      	cmp	r3, r1
 8008f22:	bf01      	itttt	eq
 8008f24:	6819      	ldreq	r1, [r3, #0]
 8008f26:	685b      	ldreq	r3, [r3, #4]
 8008f28:	1949      	addeq	r1, r1, r5
 8008f2a:	6021      	streq	r1, [r4, #0]
 8008f2c:	e7ed      	b.n	8008f0a <_free_r+0x22>
 8008f2e:	461a      	mov	r2, r3
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	b10b      	cbz	r3, 8008f38 <_free_r+0x50>
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	d9fa      	bls.n	8008f2e <_free_r+0x46>
 8008f38:	6811      	ldr	r1, [r2, #0]
 8008f3a:	1855      	adds	r5, r2, r1
 8008f3c:	42a5      	cmp	r5, r4
 8008f3e:	d10b      	bne.n	8008f58 <_free_r+0x70>
 8008f40:	6824      	ldr	r4, [r4, #0]
 8008f42:	4421      	add	r1, r4
 8008f44:	1854      	adds	r4, r2, r1
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	6011      	str	r1, [r2, #0]
 8008f4a:	d1e0      	bne.n	8008f0e <_free_r+0x26>
 8008f4c:	681c      	ldr	r4, [r3, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	6053      	str	r3, [r2, #4]
 8008f52:	4421      	add	r1, r4
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	e7da      	b.n	8008f0e <_free_r+0x26>
 8008f58:	d902      	bls.n	8008f60 <_free_r+0x78>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	e7d6      	b.n	8008f0e <_free_r+0x26>
 8008f60:	6825      	ldr	r5, [r4, #0]
 8008f62:	1961      	adds	r1, r4, r5
 8008f64:	428b      	cmp	r3, r1
 8008f66:	bf04      	itt	eq
 8008f68:	6819      	ldreq	r1, [r3, #0]
 8008f6a:	685b      	ldreq	r3, [r3, #4]
 8008f6c:	6063      	str	r3, [r4, #4]
 8008f6e:	bf04      	itt	eq
 8008f70:	1949      	addeq	r1, r1, r5
 8008f72:	6021      	streq	r1, [r4, #0]
 8008f74:	6054      	str	r4, [r2, #4]
 8008f76:	e7ca      	b.n	8008f0e <_free_r+0x26>
 8008f78:	b003      	add	sp, #12
 8008f7a:	bd30      	pop	{r4, r5, pc}
 8008f7c:	20005eb8 	.word	0x20005eb8

08008f80 <sbrk_aligned>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	4e0e      	ldr	r6, [pc, #56]	; (8008fbc <sbrk_aligned+0x3c>)
 8008f84:	460c      	mov	r4, r1
 8008f86:	6831      	ldr	r1, [r6, #0]
 8008f88:	4605      	mov	r5, r0
 8008f8a:	b911      	cbnz	r1, 8008f92 <sbrk_aligned+0x12>
 8008f8c:	f000 fd8c 	bl	8009aa8 <_sbrk_r>
 8008f90:	6030      	str	r0, [r6, #0]
 8008f92:	4621      	mov	r1, r4
 8008f94:	4628      	mov	r0, r5
 8008f96:	f000 fd87 	bl	8009aa8 <_sbrk_r>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	d00a      	beq.n	8008fb4 <sbrk_aligned+0x34>
 8008f9e:	1cc4      	adds	r4, r0, #3
 8008fa0:	f024 0403 	bic.w	r4, r4, #3
 8008fa4:	42a0      	cmp	r0, r4
 8008fa6:	d007      	beq.n	8008fb8 <sbrk_aligned+0x38>
 8008fa8:	1a21      	subs	r1, r4, r0
 8008faa:	4628      	mov	r0, r5
 8008fac:	f000 fd7c 	bl	8009aa8 <_sbrk_r>
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d101      	bne.n	8008fb8 <sbrk_aligned+0x38>
 8008fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8008fb8:	4620      	mov	r0, r4
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	20005ebc 	.word	0x20005ebc

08008fc0 <_malloc_r>:
 8008fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc4:	1ccd      	adds	r5, r1, #3
 8008fc6:	f025 0503 	bic.w	r5, r5, #3
 8008fca:	3508      	adds	r5, #8
 8008fcc:	2d0c      	cmp	r5, #12
 8008fce:	bf38      	it	cc
 8008fd0:	250c      	movcc	r5, #12
 8008fd2:	2d00      	cmp	r5, #0
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	db01      	blt.n	8008fdc <_malloc_r+0x1c>
 8008fd8:	42a9      	cmp	r1, r5
 8008fda:	d905      	bls.n	8008fe8 <_malloc_r+0x28>
 8008fdc:	230c      	movs	r3, #12
 8008fde:	603b      	str	r3, [r7, #0]
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe8:	4e2e      	ldr	r6, [pc, #184]	; (80090a4 <_malloc_r+0xe4>)
 8008fea:	f002 ff79 	bl	800bee0 <__malloc_lock>
 8008fee:	6833      	ldr	r3, [r6, #0]
 8008ff0:	461c      	mov	r4, r3
 8008ff2:	bb34      	cbnz	r4, 8009042 <_malloc_r+0x82>
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	f7ff ffc2 	bl	8008f80 <sbrk_aligned>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	4604      	mov	r4, r0
 8009000:	d14d      	bne.n	800909e <_malloc_r+0xde>
 8009002:	6834      	ldr	r4, [r6, #0]
 8009004:	4626      	mov	r6, r4
 8009006:	2e00      	cmp	r6, #0
 8009008:	d140      	bne.n	800908c <_malloc_r+0xcc>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	4631      	mov	r1, r6
 800900e:	4638      	mov	r0, r7
 8009010:	eb04 0803 	add.w	r8, r4, r3
 8009014:	f000 fd48 	bl	8009aa8 <_sbrk_r>
 8009018:	4580      	cmp	r8, r0
 800901a:	d13a      	bne.n	8009092 <_malloc_r+0xd2>
 800901c:	6821      	ldr	r1, [r4, #0]
 800901e:	3503      	adds	r5, #3
 8009020:	1a6d      	subs	r5, r5, r1
 8009022:	f025 0503 	bic.w	r5, r5, #3
 8009026:	3508      	adds	r5, #8
 8009028:	2d0c      	cmp	r5, #12
 800902a:	bf38      	it	cc
 800902c:	250c      	movcc	r5, #12
 800902e:	4629      	mov	r1, r5
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff ffa5 	bl	8008f80 <sbrk_aligned>
 8009036:	3001      	adds	r0, #1
 8009038:	d02b      	beq.n	8009092 <_malloc_r+0xd2>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	442b      	add	r3, r5
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	e00e      	b.n	8009060 <_malloc_r+0xa0>
 8009042:	6822      	ldr	r2, [r4, #0]
 8009044:	1b52      	subs	r2, r2, r5
 8009046:	d41e      	bmi.n	8009086 <_malloc_r+0xc6>
 8009048:	2a0b      	cmp	r2, #11
 800904a:	d916      	bls.n	800907a <_malloc_r+0xba>
 800904c:	1961      	adds	r1, r4, r5
 800904e:	42a3      	cmp	r3, r4
 8009050:	6025      	str	r5, [r4, #0]
 8009052:	bf18      	it	ne
 8009054:	6059      	strne	r1, [r3, #4]
 8009056:	6863      	ldr	r3, [r4, #4]
 8009058:	bf08      	it	eq
 800905a:	6031      	streq	r1, [r6, #0]
 800905c:	5162      	str	r2, [r4, r5]
 800905e:	604b      	str	r3, [r1, #4]
 8009060:	4638      	mov	r0, r7
 8009062:	f104 060b 	add.w	r6, r4, #11
 8009066:	f002 ff41 	bl	800beec <__malloc_unlock>
 800906a:	f026 0607 	bic.w	r6, r6, #7
 800906e:	1d23      	adds	r3, r4, #4
 8009070:	1af2      	subs	r2, r6, r3
 8009072:	d0b6      	beq.n	8008fe2 <_malloc_r+0x22>
 8009074:	1b9b      	subs	r3, r3, r6
 8009076:	50a3      	str	r3, [r4, r2]
 8009078:	e7b3      	b.n	8008fe2 <_malloc_r+0x22>
 800907a:	6862      	ldr	r2, [r4, #4]
 800907c:	42a3      	cmp	r3, r4
 800907e:	bf0c      	ite	eq
 8009080:	6032      	streq	r2, [r6, #0]
 8009082:	605a      	strne	r2, [r3, #4]
 8009084:	e7ec      	b.n	8009060 <_malloc_r+0xa0>
 8009086:	4623      	mov	r3, r4
 8009088:	6864      	ldr	r4, [r4, #4]
 800908a:	e7b2      	b.n	8008ff2 <_malloc_r+0x32>
 800908c:	4634      	mov	r4, r6
 800908e:	6876      	ldr	r6, [r6, #4]
 8009090:	e7b9      	b.n	8009006 <_malloc_r+0x46>
 8009092:	230c      	movs	r3, #12
 8009094:	603b      	str	r3, [r7, #0]
 8009096:	4638      	mov	r0, r7
 8009098:	f002 ff28 	bl	800beec <__malloc_unlock>
 800909c:	e7a1      	b.n	8008fe2 <_malloc_r+0x22>
 800909e:	6025      	str	r5, [r4, #0]
 80090a0:	e7de      	b.n	8009060 <_malloc_r+0xa0>
 80090a2:	bf00      	nop
 80090a4:	20005eb8 	.word	0x20005eb8

080090a8 <__cvt>:
 80090a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090ac:	ec55 4b10 	vmov	r4, r5, d0
 80090b0:	2d00      	cmp	r5, #0
 80090b2:	460e      	mov	r6, r1
 80090b4:	4619      	mov	r1, r3
 80090b6:	462b      	mov	r3, r5
 80090b8:	bfbb      	ittet	lt
 80090ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090be:	461d      	movlt	r5, r3
 80090c0:	2300      	movge	r3, #0
 80090c2:	232d      	movlt	r3, #45	; 0x2d
 80090c4:	700b      	strb	r3, [r1, #0]
 80090c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090cc:	4691      	mov	r9, r2
 80090ce:	f023 0820 	bic.w	r8, r3, #32
 80090d2:	bfbc      	itt	lt
 80090d4:	4622      	movlt	r2, r4
 80090d6:	4614      	movlt	r4, r2
 80090d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090dc:	d005      	beq.n	80090ea <__cvt+0x42>
 80090de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090e2:	d100      	bne.n	80090e6 <__cvt+0x3e>
 80090e4:	3601      	adds	r6, #1
 80090e6:	2102      	movs	r1, #2
 80090e8:	e000      	b.n	80090ec <__cvt+0x44>
 80090ea:	2103      	movs	r1, #3
 80090ec:	ab03      	add	r3, sp, #12
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	ab02      	add	r3, sp, #8
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	ec45 4b10 	vmov	d0, r4, r5
 80090f8:	4653      	mov	r3, sl
 80090fa:	4632      	mov	r2, r6
 80090fc:	f001 fd04 	bl	800ab08 <_dtoa_r>
 8009100:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009104:	4607      	mov	r7, r0
 8009106:	d102      	bne.n	800910e <__cvt+0x66>
 8009108:	f019 0f01 	tst.w	r9, #1
 800910c:	d022      	beq.n	8009154 <__cvt+0xac>
 800910e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009112:	eb07 0906 	add.w	r9, r7, r6
 8009116:	d110      	bne.n	800913a <__cvt+0x92>
 8009118:	783b      	ldrb	r3, [r7, #0]
 800911a:	2b30      	cmp	r3, #48	; 0x30
 800911c:	d10a      	bne.n	8009134 <__cvt+0x8c>
 800911e:	2200      	movs	r2, #0
 8009120:	2300      	movs	r3, #0
 8009122:	4620      	mov	r0, r4
 8009124:	4629      	mov	r1, r5
 8009126:	f7f7 fce7 	bl	8000af8 <__aeabi_dcmpeq>
 800912a:	b918      	cbnz	r0, 8009134 <__cvt+0x8c>
 800912c:	f1c6 0601 	rsb	r6, r6, #1
 8009130:	f8ca 6000 	str.w	r6, [sl]
 8009134:	f8da 3000 	ldr.w	r3, [sl]
 8009138:	4499      	add	r9, r3
 800913a:	2200      	movs	r2, #0
 800913c:	2300      	movs	r3, #0
 800913e:	4620      	mov	r0, r4
 8009140:	4629      	mov	r1, r5
 8009142:	f7f7 fcd9 	bl	8000af8 <__aeabi_dcmpeq>
 8009146:	b108      	cbz	r0, 800914c <__cvt+0xa4>
 8009148:	f8cd 900c 	str.w	r9, [sp, #12]
 800914c:	2230      	movs	r2, #48	; 0x30
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	454b      	cmp	r3, r9
 8009152:	d307      	bcc.n	8009164 <__cvt+0xbc>
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009158:	1bdb      	subs	r3, r3, r7
 800915a:	4638      	mov	r0, r7
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	b004      	add	sp, #16
 8009160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009164:	1c59      	adds	r1, r3, #1
 8009166:	9103      	str	r1, [sp, #12]
 8009168:	701a      	strb	r2, [r3, #0]
 800916a:	e7f0      	b.n	800914e <__cvt+0xa6>

0800916c <__exponent>:
 800916c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800916e:	4603      	mov	r3, r0
 8009170:	2900      	cmp	r1, #0
 8009172:	bfb8      	it	lt
 8009174:	4249      	neglt	r1, r1
 8009176:	f803 2b02 	strb.w	r2, [r3], #2
 800917a:	bfb4      	ite	lt
 800917c:	222d      	movlt	r2, #45	; 0x2d
 800917e:	222b      	movge	r2, #43	; 0x2b
 8009180:	2909      	cmp	r1, #9
 8009182:	7042      	strb	r2, [r0, #1]
 8009184:	dd2a      	ble.n	80091dc <__exponent+0x70>
 8009186:	f10d 0407 	add.w	r4, sp, #7
 800918a:	46a4      	mov	ip, r4
 800918c:	270a      	movs	r7, #10
 800918e:	46a6      	mov	lr, r4
 8009190:	460a      	mov	r2, r1
 8009192:	fb91 f6f7 	sdiv	r6, r1, r7
 8009196:	fb07 1516 	mls	r5, r7, r6, r1
 800919a:	3530      	adds	r5, #48	; 0x30
 800919c:	2a63      	cmp	r2, #99	; 0x63
 800919e:	f104 34ff 	add.w	r4, r4, #4294967295
 80091a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80091a6:	4631      	mov	r1, r6
 80091a8:	dcf1      	bgt.n	800918e <__exponent+0x22>
 80091aa:	3130      	adds	r1, #48	; 0x30
 80091ac:	f1ae 0502 	sub.w	r5, lr, #2
 80091b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80091b4:	1c44      	adds	r4, r0, #1
 80091b6:	4629      	mov	r1, r5
 80091b8:	4561      	cmp	r1, ip
 80091ba:	d30a      	bcc.n	80091d2 <__exponent+0x66>
 80091bc:	f10d 0209 	add.w	r2, sp, #9
 80091c0:	eba2 020e 	sub.w	r2, r2, lr
 80091c4:	4565      	cmp	r5, ip
 80091c6:	bf88      	it	hi
 80091c8:	2200      	movhi	r2, #0
 80091ca:	4413      	add	r3, r2
 80091cc:	1a18      	subs	r0, r3, r0
 80091ce:	b003      	add	sp, #12
 80091d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80091da:	e7ed      	b.n	80091b8 <__exponent+0x4c>
 80091dc:	2330      	movs	r3, #48	; 0x30
 80091de:	3130      	adds	r1, #48	; 0x30
 80091e0:	7083      	strb	r3, [r0, #2]
 80091e2:	70c1      	strb	r1, [r0, #3]
 80091e4:	1d03      	adds	r3, r0, #4
 80091e6:	e7f1      	b.n	80091cc <__exponent+0x60>

080091e8 <_printf_float>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	ed2d 8b02 	vpush	{d8}
 80091f0:	b08d      	sub	sp, #52	; 0x34
 80091f2:	460c      	mov	r4, r1
 80091f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80091f8:	4616      	mov	r6, r2
 80091fa:	461f      	mov	r7, r3
 80091fc:	4605      	mov	r5, r0
 80091fe:	f002 fde1 	bl	800bdc4 <_localeconv_r>
 8009202:	f8d0 a000 	ldr.w	sl, [r0]
 8009206:	4650      	mov	r0, sl
 8009208:	f7f6 fff4 	bl	80001f4 <strlen>
 800920c:	2300      	movs	r3, #0
 800920e:	930a      	str	r3, [sp, #40]	; 0x28
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	9305      	str	r3, [sp, #20]
 8009214:	f8d8 3000 	ldr.w	r3, [r8]
 8009218:	f894 b018 	ldrb.w	fp, [r4, #24]
 800921c:	3307      	adds	r3, #7
 800921e:	f023 0307 	bic.w	r3, r3, #7
 8009222:	f103 0208 	add.w	r2, r3, #8
 8009226:	f8c8 2000 	str.w	r2, [r8]
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009232:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009236:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800923a:	9307      	str	r3, [sp, #28]
 800923c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009240:	ee08 0a10 	vmov	s16, r0
 8009244:	4b9f      	ldr	r3, [pc, #636]	; (80094c4 <_printf_float+0x2dc>)
 8009246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800924a:	f04f 32ff 	mov.w	r2, #4294967295
 800924e:	f7f7 fc85 	bl	8000b5c <__aeabi_dcmpun>
 8009252:	bb88      	cbnz	r0, 80092b8 <_printf_float+0xd0>
 8009254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009258:	4b9a      	ldr	r3, [pc, #616]	; (80094c4 <_printf_float+0x2dc>)
 800925a:	f04f 32ff 	mov.w	r2, #4294967295
 800925e:	f7f7 fc5f 	bl	8000b20 <__aeabi_dcmple>
 8009262:	bb48      	cbnz	r0, 80092b8 <_printf_float+0xd0>
 8009264:	2200      	movs	r2, #0
 8009266:	2300      	movs	r3, #0
 8009268:	4640      	mov	r0, r8
 800926a:	4649      	mov	r1, r9
 800926c:	f7f7 fc4e 	bl	8000b0c <__aeabi_dcmplt>
 8009270:	b110      	cbz	r0, 8009278 <_printf_float+0x90>
 8009272:	232d      	movs	r3, #45	; 0x2d
 8009274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009278:	4b93      	ldr	r3, [pc, #588]	; (80094c8 <_printf_float+0x2e0>)
 800927a:	4894      	ldr	r0, [pc, #592]	; (80094cc <_printf_float+0x2e4>)
 800927c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009280:	bf94      	ite	ls
 8009282:	4698      	movls	r8, r3
 8009284:	4680      	movhi	r8, r0
 8009286:	2303      	movs	r3, #3
 8009288:	6123      	str	r3, [r4, #16]
 800928a:	9b05      	ldr	r3, [sp, #20]
 800928c:	f023 0204 	bic.w	r2, r3, #4
 8009290:	6022      	str	r2, [r4, #0]
 8009292:	f04f 0900 	mov.w	r9, #0
 8009296:	9700      	str	r7, [sp, #0]
 8009298:	4633      	mov	r3, r6
 800929a:	aa0b      	add	r2, sp, #44	; 0x2c
 800929c:	4621      	mov	r1, r4
 800929e:	4628      	mov	r0, r5
 80092a0:	f000 f9d8 	bl	8009654 <_printf_common>
 80092a4:	3001      	adds	r0, #1
 80092a6:	f040 8090 	bne.w	80093ca <_printf_float+0x1e2>
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295
 80092ae:	b00d      	add	sp, #52	; 0x34
 80092b0:	ecbd 8b02 	vpop	{d8}
 80092b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b8:	4642      	mov	r2, r8
 80092ba:	464b      	mov	r3, r9
 80092bc:	4640      	mov	r0, r8
 80092be:	4649      	mov	r1, r9
 80092c0:	f7f7 fc4c 	bl	8000b5c <__aeabi_dcmpun>
 80092c4:	b140      	cbz	r0, 80092d8 <_printf_float+0xf0>
 80092c6:	464b      	mov	r3, r9
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	bfbc      	itt	lt
 80092cc:	232d      	movlt	r3, #45	; 0x2d
 80092ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092d2:	487f      	ldr	r0, [pc, #508]	; (80094d0 <_printf_float+0x2e8>)
 80092d4:	4b7f      	ldr	r3, [pc, #508]	; (80094d4 <_printf_float+0x2ec>)
 80092d6:	e7d1      	b.n	800927c <_printf_float+0x94>
 80092d8:	6863      	ldr	r3, [r4, #4]
 80092da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80092de:	9206      	str	r2, [sp, #24]
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	d13f      	bne.n	8009364 <_printf_float+0x17c>
 80092e4:	2306      	movs	r3, #6
 80092e6:	6063      	str	r3, [r4, #4]
 80092e8:	9b05      	ldr	r3, [sp, #20]
 80092ea:	6861      	ldr	r1, [r4, #4]
 80092ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80092f0:	2300      	movs	r3, #0
 80092f2:	9303      	str	r3, [sp, #12]
 80092f4:	ab0a      	add	r3, sp, #40	; 0x28
 80092f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80092fa:	ab09      	add	r3, sp, #36	; 0x24
 80092fc:	ec49 8b10 	vmov	d0, r8, r9
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	6022      	str	r2, [r4, #0]
 8009304:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009308:	4628      	mov	r0, r5
 800930a:	f7ff fecd 	bl	80090a8 <__cvt>
 800930e:	9b06      	ldr	r3, [sp, #24]
 8009310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009312:	2b47      	cmp	r3, #71	; 0x47
 8009314:	4680      	mov	r8, r0
 8009316:	d108      	bne.n	800932a <_printf_float+0x142>
 8009318:	1cc8      	adds	r0, r1, #3
 800931a:	db02      	blt.n	8009322 <_printf_float+0x13a>
 800931c:	6863      	ldr	r3, [r4, #4]
 800931e:	4299      	cmp	r1, r3
 8009320:	dd41      	ble.n	80093a6 <_printf_float+0x1be>
 8009322:	f1ab 0b02 	sub.w	fp, fp, #2
 8009326:	fa5f fb8b 	uxtb.w	fp, fp
 800932a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800932e:	d820      	bhi.n	8009372 <_printf_float+0x18a>
 8009330:	3901      	subs	r1, #1
 8009332:	465a      	mov	r2, fp
 8009334:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009338:	9109      	str	r1, [sp, #36]	; 0x24
 800933a:	f7ff ff17 	bl	800916c <__exponent>
 800933e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009340:	1813      	adds	r3, r2, r0
 8009342:	2a01      	cmp	r2, #1
 8009344:	4681      	mov	r9, r0
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	dc02      	bgt.n	8009350 <_printf_float+0x168>
 800934a:	6822      	ldr	r2, [r4, #0]
 800934c:	07d2      	lsls	r2, r2, #31
 800934e:	d501      	bpl.n	8009354 <_printf_float+0x16c>
 8009350:	3301      	adds	r3, #1
 8009352:	6123      	str	r3, [r4, #16]
 8009354:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009358:	2b00      	cmp	r3, #0
 800935a:	d09c      	beq.n	8009296 <_printf_float+0xae>
 800935c:	232d      	movs	r3, #45	; 0x2d
 800935e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009362:	e798      	b.n	8009296 <_printf_float+0xae>
 8009364:	9a06      	ldr	r2, [sp, #24]
 8009366:	2a47      	cmp	r2, #71	; 0x47
 8009368:	d1be      	bne.n	80092e8 <_printf_float+0x100>
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1bc      	bne.n	80092e8 <_printf_float+0x100>
 800936e:	2301      	movs	r3, #1
 8009370:	e7b9      	b.n	80092e6 <_printf_float+0xfe>
 8009372:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009376:	d118      	bne.n	80093aa <_printf_float+0x1c2>
 8009378:	2900      	cmp	r1, #0
 800937a:	6863      	ldr	r3, [r4, #4]
 800937c:	dd0b      	ble.n	8009396 <_printf_float+0x1ae>
 800937e:	6121      	str	r1, [r4, #16]
 8009380:	b913      	cbnz	r3, 8009388 <_printf_float+0x1a0>
 8009382:	6822      	ldr	r2, [r4, #0]
 8009384:	07d0      	lsls	r0, r2, #31
 8009386:	d502      	bpl.n	800938e <_printf_float+0x1a6>
 8009388:	3301      	adds	r3, #1
 800938a:	440b      	add	r3, r1
 800938c:	6123      	str	r3, [r4, #16]
 800938e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009390:	f04f 0900 	mov.w	r9, #0
 8009394:	e7de      	b.n	8009354 <_printf_float+0x16c>
 8009396:	b913      	cbnz	r3, 800939e <_printf_float+0x1b6>
 8009398:	6822      	ldr	r2, [r4, #0]
 800939a:	07d2      	lsls	r2, r2, #31
 800939c:	d501      	bpl.n	80093a2 <_printf_float+0x1ba>
 800939e:	3302      	adds	r3, #2
 80093a0:	e7f4      	b.n	800938c <_printf_float+0x1a4>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e7f2      	b.n	800938c <_printf_float+0x1a4>
 80093a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80093aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ac:	4299      	cmp	r1, r3
 80093ae:	db05      	blt.n	80093bc <_printf_float+0x1d4>
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	6121      	str	r1, [r4, #16]
 80093b4:	07d8      	lsls	r0, r3, #31
 80093b6:	d5ea      	bpl.n	800938e <_printf_float+0x1a6>
 80093b8:	1c4b      	adds	r3, r1, #1
 80093ba:	e7e7      	b.n	800938c <_printf_float+0x1a4>
 80093bc:	2900      	cmp	r1, #0
 80093be:	bfd4      	ite	le
 80093c0:	f1c1 0202 	rsble	r2, r1, #2
 80093c4:	2201      	movgt	r2, #1
 80093c6:	4413      	add	r3, r2
 80093c8:	e7e0      	b.n	800938c <_printf_float+0x1a4>
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	055a      	lsls	r2, r3, #21
 80093ce:	d407      	bmi.n	80093e0 <_printf_float+0x1f8>
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	4642      	mov	r2, r8
 80093d4:	4631      	mov	r1, r6
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b8      	blx	r7
 80093da:	3001      	adds	r0, #1
 80093dc:	d12c      	bne.n	8009438 <_printf_float+0x250>
 80093de:	e764      	b.n	80092aa <_printf_float+0xc2>
 80093e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093e4:	f240 80e0 	bls.w	80095a8 <_printf_float+0x3c0>
 80093e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093ec:	2200      	movs	r2, #0
 80093ee:	2300      	movs	r3, #0
 80093f0:	f7f7 fb82 	bl	8000af8 <__aeabi_dcmpeq>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d034      	beq.n	8009462 <_printf_float+0x27a>
 80093f8:	4a37      	ldr	r2, [pc, #220]	; (80094d8 <_printf_float+0x2f0>)
 80093fa:	2301      	movs	r3, #1
 80093fc:	4631      	mov	r1, r6
 80093fe:	4628      	mov	r0, r5
 8009400:	47b8      	blx	r7
 8009402:	3001      	adds	r0, #1
 8009404:	f43f af51 	beq.w	80092aa <_printf_float+0xc2>
 8009408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800940c:	429a      	cmp	r2, r3
 800940e:	db02      	blt.n	8009416 <_printf_float+0x22e>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	07d8      	lsls	r0, r3, #31
 8009414:	d510      	bpl.n	8009438 <_printf_float+0x250>
 8009416:	ee18 3a10 	vmov	r3, s16
 800941a:	4652      	mov	r2, sl
 800941c:	4631      	mov	r1, r6
 800941e:	4628      	mov	r0, r5
 8009420:	47b8      	blx	r7
 8009422:	3001      	adds	r0, #1
 8009424:	f43f af41 	beq.w	80092aa <_printf_float+0xc2>
 8009428:	f04f 0800 	mov.w	r8, #0
 800942c:	f104 091a 	add.w	r9, r4, #26
 8009430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009432:	3b01      	subs	r3, #1
 8009434:	4543      	cmp	r3, r8
 8009436:	dc09      	bgt.n	800944c <_printf_float+0x264>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	079b      	lsls	r3, r3, #30
 800943c:	f100 8105 	bmi.w	800964a <_printf_float+0x462>
 8009440:	68e0      	ldr	r0, [r4, #12]
 8009442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009444:	4298      	cmp	r0, r3
 8009446:	bfb8      	it	lt
 8009448:	4618      	movlt	r0, r3
 800944a:	e730      	b.n	80092ae <_printf_float+0xc6>
 800944c:	2301      	movs	r3, #1
 800944e:	464a      	mov	r2, r9
 8009450:	4631      	mov	r1, r6
 8009452:	4628      	mov	r0, r5
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	f43f af27 	beq.w	80092aa <_printf_float+0xc2>
 800945c:	f108 0801 	add.w	r8, r8, #1
 8009460:	e7e6      	b.n	8009430 <_printf_float+0x248>
 8009462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009464:	2b00      	cmp	r3, #0
 8009466:	dc39      	bgt.n	80094dc <_printf_float+0x2f4>
 8009468:	4a1b      	ldr	r2, [pc, #108]	; (80094d8 <_printf_float+0x2f0>)
 800946a:	2301      	movs	r3, #1
 800946c:	4631      	mov	r1, r6
 800946e:	4628      	mov	r0, r5
 8009470:	47b8      	blx	r7
 8009472:	3001      	adds	r0, #1
 8009474:	f43f af19 	beq.w	80092aa <_printf_float+0xc2>
 8009478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800947c:	4313      	orrs	r3, r2
 800947e:	d102      	bne.n	8009486 <_printf_float+0x29e>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	07d9      	lsls	r1, r3, #31
 8009484:	d5d8      	bpl.n	8009438 <_printf_float+0x250>
 8009486:	ee18 3a10 	vmov	r3, s16
 800948a:	4652      	mov	r2, sl
 800948c:	4631      	mov	r1, r6
 800948e:	4628      	mov	r0, r5
 8009490:	47b8      	blx	r7
 8009492:	3001      	adds	r0, #1
 8009494:	f43f af09 	beq.w	80092aa <_printf_float+0xc2>
 8009498:	f04f 0900 	mov.w	r9, #0
 800949c:	f104 0a1a 	add.w	sl, r4, #26
 80094a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a2:	425b      	negs	r3, r3
 80094a4:	454b      	cmp	r3, r9
 80094a6:	dc01      	bgt.n	80094ac <_printf_float+0x2c4>
 80094a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094aa:	e792      	b.n	80093d2 <_printf_float+0x1ea>
 80094ac:	2301      	movs	r3, #1
 80094ae:	4652      	mov	r2, sl
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	f43f aef7 	beq.w	80092aa <_printf_float+0xc2>
 80094bc:	f109 0901 	add.w	r9, r9, #1
 80094c0:	e7ee      	b.n	80094a0 <_printf_float+0x2b8>
 80094c2:	bf00      	nop
 80094c4:	7fefffff 	.word	0x7fefffff
 80094c8:	0800d5d4 	.word	0x0800d5d4
 80094cc:	0800d5d8 	.word	0x0800d5d8
 80094d0:	0800d5e0 	.word	0x0800d5e0
 80094d4:	0800d5dc 	.word	0x0800d5dc
 80094d8:	0800d5e4 	.word	0x0800d5e4
 80094dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094e0:	429a      	cmp	r2, r3
 80094e2:	bfa8      	it	ge
 80094e4:	461a      	movge	r2, r3
 80094e6:	2a00      	cmp	r2, #0
 80094e8:	4691      	mov	r9, r2
 80094ea:	dc37      	bgt.n	800955c <_printf_float+0x374>
 80094ec:	f04f 0b00 	mov.w	fp, #0
 80094f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094f4:	f104 021a 	add.w	r2, r4, #26
 80094f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094fa:	9305      	str	r3, [sp, #20]
 80094fc:	eba3 0309 	sub.w	r3, r3, r9
 8009500:	455b      	cmp	r3, fp
 8009502:	dc33      	bgt.n	800956c <_printf_float+0x384>
 8009504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009508:	429a      	cmp	r2, r3
 800950a:	db3b      	blt.n	8009584 <_printf_float+0x39c>
 800950c:	6823      	ldr	r3, [r4, #0]
 800950e:	07da      	lsls	r2, r3, #31
 8009510:	d438      	bmi.n	8009584 <_printf_float+0x39c>
 8009512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009514:	9a05      	ldr	r2, [sp, #20]
 8009516:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009518:	1a9a      	subs	r2, r3, r2
 800951a:	eba3 0901 	sub.w	r9, r3, r1
 800951e:	4591      	cmp	r9, r2
 8009520:	bfa8      	it	ge
 8009522:	4691      	movge	r9, r2
 8009524:	f1b9 0f00 	cmp.w	r9, #0
 8009528:	dc35      	bgt.n	8009596 <_printf_float+0x3ae>
 800952a:	f04f 0800 	mov.w	r8, #0
 800952e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009532:	f104 0a1a 	add.w	sl, r4, #26
 8009536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	eba3 0309 	sub.w	r3, r3, r9
 8009540:	4543      	cmp	r3, r8
 8009542:	f77f af79 	ble.w	8009438 <_printf_float+0x250>
 8009546:	2301      	movs	r3, #1
 8009548:	4652      	mov	r2, sl
 800954a:	4631      	mov	r1, r6
 800954c:	4628      	mov	r0, r5
 800954e:	47b8      	blx	r7
 8009550:	3001      	adds	r0, #1
 8009552:	f43f aeaa 	beq.w	80092aa <_printf_float+0xc2>
 8009556:	f108 0801 	add.w	r8, r8, #1
 800955a:	e7ec      	b.n	8009536 <_printf_float+0x34e>
 800955c:	4613      	mov	r3, r2
 800955e:	4631      	mov	r1, r6
 8009560:	4642      	mov	r2, r8
 8009562:	4628      	mov	r0, r5
 8009564:	47b8      	blx	r7
 8009566:	3001      	adds	r0, #1
 8009568:	d1c0      	bne.n	80094ec <_printf_float+0x304>
 800956a:	e69e      	b.n	80092aa <_printf_float+0xc2>
 800956c:	2301      	movs	r3, #1
 800956e:	4631      	mov	r1, r6
 8009570:	4628      	mov	r0, r5
 8009572:	9205      	str	r2, [sp, #20]
 8009574:	47b8      	blx	r7
 8009576:	3001      	adds	r0, #1
 8009578:	f43f ae97 	beq.w	80092aa <_printf_float+0xc2>
 800957c:	9a05      	ldr	r2, [sp, #20]
 800957e:	f10b 0b01 	add.w	fp, fp, #1
 8009582:	e7b9      	b.n	80094f8 <_printf_float+0x310>
 8009584:	ee18 3a10 	vmov	r3, s16
 8009588:	4652      	mov	r2, sl
 800958a:	4631      	mov	r1, r6
 800958c:	4628      	mov	r0, r5
 800958e:	47b8      	blx	r7
 8009590:	3001      	adds	r0, #1
 8009592:	d1be      	bne.n	8009512 <_printf_float+0x32a>
 8009594:	e689      	b.n	80092aa <_printf_float+0xc2>
 8009596:	9a05      	ldr	r2, [sp, #20]
 8009598:	464b      	mov	r3, r9
 800959a:	4442      	add	r2, r8
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	d1c1      	bne.n	800952a <_printf_float+0x342>
 80095a6:	e680      	b.n	80092aa <_printf_float+0xc2>
 80095a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095aa:	2a01      	cmp	r2, #1
 80095ac:	dc01      	bgt.n	80095b2 <_printf_float+0x3ca>
 80095ae:	07db      	lsls	r3, r3, #31
 80095b0:	d538      	bpl.n	8009624 <_printf_float+0x43c>
 80095b2:	2301      	movs	r3, #1
 80095b4:	4642      	mov	r2, r8
 80095b6:	4631      	mov	r1, r6
 80095b8:	4628      	mov	r0, r5
 80095ba:	47b8      	blx	r7
 80095bc:	3001      	adds	r0, #1
 80095be:	f43f ae74 	beq.w	80092aa <_printf_float+0xc2>
 80095c2:	ee18 3a10 	vmov	r3, s16
 80095c6:	4652      	mov	r2, sl
 80095c8:	4631      	mov	r1, r6
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b8      	blx	r7
 80095ce:	3001      	adds	r0, #1
 80095d0:	f43f ae6b 	beq.w	80092aa <_printf_float+0xc2>
 80095d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095d8:	2200      	movs	r2, #0
 80095da:	2300      	movs	r3, #0
 80095dc:	f7f7 fa8c 	bl	8000af8 <__aeabi_dcmpeq>
 80095e0:	b9d8      	cbnz	r0, 800961a <_printf_float+0x432>
 80095e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e4:	f108 0201 	add.w	r2, r8, #1
 80095e8:	3b01      	subs	r3, #1
 80095ea:	4631      	mov	r1, r6
 80095ec:	4628      	mov	r0, r5
 80095ee:	47b8      	blx	r7
 80095f0:	3001      	adds	r0, #1
 80095f2:	d10e      	bne.n	8009612 <_printf_float+0x42a>
 80095f4:	e659      	b.n	80092aa <_printf_float+0xc2>
 80095f6:	2301      	movs	r3, #1
 80095f8:	4652      	mov	r2, sl
 80095fa:	4631      	mov	r1, r6
 80095fc:	4628      	mov	r0, r5
 80095fe:	47b8      	blx	r7
 8009600:	3001      	adds	r0, #1
 8009602:	f43f ae52 	beq.w	80092aa <_printf_float+0xc2>
 8009606:	f108 0801 	add.w	r8, r8, #1
 800960a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800960c:	3b01      	subs	r3, #1
 800960e:	4543      	cmp	r3, r8
 8009610:	dcf1      	bgt.n	80095f6 <_printf_float+0x40e>
 8009612:	464b      	mov	r3, r9
 8009614:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009618:	e6dc      	b.n	80093d4 <_printf_float+0x1ec>
 800961a:	f04f 0800 	mov.w	r8, #0
 800961e:	f104 0a1a 	add.w	sl, r4, #26
 8009622:	e7f2      	b.n	800960a <_printf_float+0x422>
 8009624:	2301      	movs	r3, #1
 8009626:	4642      	mov	r2, r8
 8009628:	e7df      	b.n	80095ea <_printf_float+0x402>
 800962a:	2301      	movs	r3, #1
 800962c:	464a      	mov	r2, r9
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	f43f ae38 	beq.w	80092aa <_printf_float+0xc2>
 800963a:	f108 0801 	add.w	r8, r8, #1
 800963e:	68e3      	ldr	r3, [r4, #12]
 8009640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009642:	1a5b      	subs	r3, r3, r1
 8009644:	4543      	cmp	r3, r8
 8009646:	dcf0      	bgt.n	800962a <_printf_float+0x442>
 8009648:	e6fa      	b.n	8009440 <_printf_float+0x258>
 800964a:	f04f 0800 	mov.w	r8, #0
 800964e:	f104 0919 	add.w	r9, r4, #25
 8009652:	e7f4      	b.n	800963e <_printf_float+0x456>

08009654 <_printf_common>:
 8009654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009658:	4616      	mov	r6, r2
 800965a:	4699      	mov	r9, r3
 800965c:	688a      	ldr	r2, [r1, #8]
 800965e:	690b      	ldr	r3, [r1, #16]
 8009660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009664:	4293      	cmp	r3, r2
 8009666:	bfb8      	it	lt
 8009668:	4613      	movlt	r3, r2
 800966a:	6033      	str	r3, [r6, #0]
 800966c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009670:	4607      	mov	r7, r0
 8009672:	460c      	mov	r4, r1
 8009674:	b10a      	cbz	r2, 800967a <_printf_common+0x26>
 8009676:	3301      	adds	r3, #1
 8009678:	6033      	str	r3, [r6, #0]
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	0699      	lsls	r1, r3, #26
 800967e:	bf42      	ittt	mi
 8009680:	6833      	ldrmi	r3, [r6, #0]
 8009682:	3302      	addmi	r3, #2
 8009684:	6033      	strmi	r3, [r6, #0]
 8009686:	6825      	ldr	r5, [r4, #0]
 8009688:	f015 0506 	ands.w	r5, r5, #6
 800968c:	d106      	bne.n	800969c <_printf_common+0x48>
 800968e:	f104 0a19 	add.w	sl, r4, #25
 8009692:	68e3      	ldr	r3, [r4, #12]
 8009694:	6832      	ldr	r2, [r6, #0]
 8009696:	1a9b      	subs	r3, r3, r2
 8009698:	42ab      	cmp	r3, r5
 800969a:	dc26      	bgt.n	80096ea <_printf_common+0x96>
 800969c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096a0:	1e13      	subs	r3, r2, #0
 80096a2:	6822      	ldr	r2, [r4, #0]
 80096a4:	bf18      	it	ne
 80096a6:	2301      	movne	r3, #1
 80096a8:	0692      	lsls	r2, r2, #26
 80096aa:	d42b      	bmi.n	8009704 <_printf_common+0xb0>
 80096ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096b0:	4649      	mov	r1, r9
 80096b2:	4638      	mov	r0, r7
 80096b4:	47c0      	blx	r8
 80096b6:	3001      	adds	r0, #1
 80096b8:	d01e      	beq.n	80096f8 <_printf_common+0xa4>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	68e5      	ldr	r5, [r4, #12]
 80096be:	6832      	ldr	r2, [r6, #0]
 80096c0:	f003 0306 	and.w	r3, r3, #6
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	bf08      	it	eq
 80096c8:	1aad      	subeq	r5, r5, r2
 80096ca:	68a3      	ldr	r3, [r4, #8]
 80096cc:	6922      	ldr	r2, [r4, #16]
 80096ce:	bf0c      	ite	eq
 80096d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096d4:	2500      	movne	r5, #0
 80096d6:	4293      	cmp	r3, r2
 80096d8:	bfc4      	itt	gt
 80096da:	1a9b      	subgt	r3, r3, r2
 80096dc:	18ed      	addgt	r5, r5, r3
 80096de:	2600      	movs	r6, #0
 80096e0:	341a      	adds	r4, #26
 80096e2:	42b5      	cmp	r5, r6
 80096e4:	d11a      	bne.n	800971c <_printf_common+0xc8>
 80096e6:	2000      	movs	r0, #0
 80096e8:	e008      	b.n	80096fc <_printf_common+0xa8>
 80096ea:	2301      	movs	r3, #1
 80096ec:	4652      	mov	r2, sl
 80096ee:	4649      	mov	r1, r9
 80096f0:	4638      	mov	r0, r7
 80096f2:	47c0      	blx	r8
 80096f4:	3001      	adds	r0, #1
 80096f6:	d103      	bne.n	8009700 <_printf_common+0xac>
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009700:	3501      	adds	r5, #1
 8009702:	e7c6      	b.n	8009692 <_printf_common+0x3e>
 8009704:	18e1      	adds	r1, r4, r3
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	2030      	movs	r0, #48	; 0x30
 800970a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800970e:	4422      	add	r2, r4
 8009710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009718:	3302      	adds	r3, #2
 800971a:	e7c7      	b.n	80096ac <_printf_common+0x58>
 800971c:	2301      	movs	r3, #1
 800971e:	4622      	mov	r2, r4
 8009720:	4649      	mov	r1, r9
 8009722:	4638      	mov	r0, r7
 8009724:	47c0      	blx	r8
 8009726:	3001      	adds	r0, #1
 8009728:	d0e6      	beq.n	80096f8 <_printf_common+0xa4>
 800972a:	3601      	adds	r6, #1
 800972c:	e7d9      	b.n	80096e2 <_printf_common+0x8e>
	...

08009730 <_printf_i>:
 8009730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009734:	7e0f      	ldrb	r7, [r1, #24]
 8009736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009738:	2f78      	cmp	r7, #120	; 0x78
 800973a:	4691      	mov	r9, r2
 800973c:	4680      	mov	r8, r0
 800973e:	460c      	mov	r4, r1
 8009740:	469a      	mov	sl, r3
 8009742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009746:	d807      	bhi.n	8009758 <_printf_i+0x28>
 8009748:	2f62      	cmp	r7, #98	; 0x62
 800974a:	d80a      	bhi.n	8009762 <_printf_i+0x32>
 800974c:	2f00      	cmp	r7, #0
 800974e:	f000 80d8 	beq.w	8009902 <_printf_i+0x1d2>
 8009752:	2f58      	cmp	r7, #88	; 0x58
 8009754:	f000 80a3 	beq.w	800989e <_printf_i+0x16e>
 8009758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800975c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009760:	e03a      	b.n	80097d8 <_printf_i+0xa8>
 8009762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009766:	2b15      	cmp	r3, #21
 8009768:	d8f6      	bhi.n	8009758 <_printf_i+0x28>
 800976a:	a101      	add	r1, pc, #4	; (adr r1, 8009770 <_printf_i+0x40>)
 800976c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009770:	080097c9 	.word	0x080097c9
 8009774:	080097dd 	.word	0x080097dd
 8009778:	08009759 	.word	0x08009759
 800977c:	08009759 	.word	0x08009759
 8009780:	08009759 	.word	0x08009759
 8009784:	08009759 	.word	0x08009759
 8009788:	080097dd 	.word	0x080097dd
 800978c:	08009759 	.word	0x08009759
 8009790:	08009759 	.word	0x08009759
 8009794:	08009759 	.word	0x08009759
 8009798:	08009759 	.word	0x08009759
 800979c:	080098e9 	.word	0x080098e9
 80097a0:	0800980d 	.word	0x0800980d
 80097a4:	080098cb 	.word	0x080098cb
 80097a8:	08009759 	.word	0x08009759
 80097ac:	08009759 	.word	0x08009759
 80097b0:	0800990b 	.word	0x0800990b
 80097b4:	08009759 	.word	0x08009759
 80097b8:	0800980d 	.word	0x0800980d
 80097bc:	08009759 	.word	0x08009759
 80097c0:	08009759 	.word	0x08009759
 80097c4:	080098d3 	.word	0x080098d3
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	1d1a      	adds	r2, r3, #4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	602a      	str	r2, [r5, #0]
 80097d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097d8:	2301      	movs	r3, #1
 80097da:	e0a3      	b.n	8009924 <_printf_i+0x1f4>
 80097dc:	6820      	ldr	r0, [r4, #0]
 80097de:	6829      	ldr	r1, [r5, #0]
 80097e0:	0606      	lsls	r6, r0, #24
 80097e2:	f101 0304 	add.w	r3, r1, #4
 80097e6:	d50a      	bpl.n	80097fe <_printf_i+0xce>
 80097e8:	680e      	ldr	r6, [r1, #0]
 80097ea:	602b      	str	r3, [r5, #0]
 80097ec:	2e00      	cmp	r6, #0
 80097ee:	da03      	bge.n	80097f8 <_printf_i+0xc8>
 80097f0:	232d      	movs	r3, #45	; 0x2d
 80097f2:	4276      	negs	r6, r6
 80097f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097f8:	485e      	ldr	r0, [pc, #376]	; (8009974 <_printf_i+0x244>)
 80097fa:	230a      	movs	r3, #10
 80097fc:	e019      	b.n	8009832 <_printf_i+0x102>
 80097fe:	680e      	ldr	r6, [r1, #0]
 8009800:	602b      	str	r3, [r5, #0]
 8009802:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009806:	bf18      	it	ne
 8009808:	b236      	sxthne	r6, r6
 800980a:	e7ef      	b.n	80097ec <_printf_i+0xbc>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	6820      	ldr	r0, [r4, #0]
 8009810:	1d19      	adds	r1, r3, #4
 8009812:	6029      	str	r1, [r5, #0]
 8009814:	0601      	lsls	r1, r0, #24
 8009816:	d501      	bpl.n	800981c <_printf_i+0xec>
 8009818:	681e      	ldr	r6, [r3, #0]
 800981a:	e002      	b.n	8009822 <_printf_i+0xf2>
 800981c:	0646      	lsls	r6, r0, #25
 800981e:	d5fb      	bpl.n	8009818 <_printf_i+0xe8>
 8009820:	881e      	ldrh	r6, [r3, #0]
 8009822:	4854      	ldr	r0, [pc, #336]	; (8009974 <_printf_i+0x244>)
 8009824:	2f6f      	cmp	r7, #111	; 0x6f
 8009826:	bf0c      	ite	eq
 8009828:	2308      	moveq	r3, #8
 800982a:	230a      	movne	r3, #10
 800982c:	2100      	movs	r1, #0
 800982e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009832:	6865      	ldr	r5, [r4, #4]
 8009834:	60a5      	str	r5, [r4, #8]
 8009836:	2d00      	cmp	r5, #0
 8009838:	bfa2      	ittt	ge
 800983a:	6821      	ldrge	r1, [r4, #0]
 800983c:	f021 0104 	bicge.w	r1, r1, #4
 8009840:	6021      	strge	r1, [r4, #0]
 8009842:	b90e      	cbnz	r6, 8009848 <_printf_i+0x118>
 8009844:	2d00      	cmp	r5, #0
 8009846:	d04d      	beq.n	80098e4 <_printf_i+0x1b4>
 8009848:	4615      	mov	r5, r2
 800984a:	fbb6 f1f3 	udiv	r1, r6, r3
 800984e:	fb03 6711 	mls	r7, r3, r1, r6
 8009852:	5dc7      	ldrb	r7, [r0, r7]
 8009854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009858:	4637      	mov	r7, r6
 800985a:	42bb      	cmp	r3, r7
 800985c:	460e      	mov	r6, r1
 800985e:	d9f4      	bls.n	800984a <_printf_i+0x11a>
 8009860:	2b08      	cmp	r3, #8
 8009862:	d10b      	bne.n	800987c <_printf_i+0x14c>
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	07de      	lsls	r6, r3, #31
 8009868:	d508      	bpl.n	800987c <_printf_i+0x14c>
 800986a:	6923      	ldr	r3, [r4, #16]
 800986c:	6861      	ldr	r1, [r4, #4]
 800986e:	4299      	cmp	r1, r3
 8009870:	bfde      	ittt	le
 8009872:	2330      	movle	r3, #48	; 0x30
 8009874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800987c:	1b52      	subs	r2, r2, r5
 800987e:	6122      	str	r2, [r4, #16]
 8009880:	f8cd a000 	str.w	sl, [sp]
 8009884:	464b      	mov	r3, r9
 8009886:	aa03      	add	r2, sp, #12
 8009888:	4621      	mov	r1, r4
 800988a:	4640      	mov	r0, r8
 800988c:	f7ff fee2 	bl	8009654 <_printf_common>
 8009890:	3001      	adds	r0, #1
 8009892:	d14c      	bne.n	800992e <_printf_i+0x1fe>
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	b004      	add	sp, #16
 800989a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989e:	4835      	ldr	r0, [pc, #212]	; (8009974 <_printf_i+0x244>)
 80098a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098a4:	6829      	ldr	r1, [r5, #0]
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80098ac:	6029      	str	r1, [r5, #0]
 80098ae:	061d      	lsls	r5, r3, #24
 80098b0:	d514      	bpl.n	80098dc <_printf_i+0x1ac>
 80098b2:	07df      	lsls	r7, r3, #31
 80098b4:	bf44      	itt	mi
 80098b6:	f043 0320 	orrmi.w	r3, r3, #32
 80098ba:	6023      	strmi	r3, [r4, #0]
 80098bc:	b91e      	cbnz	r6, 80098c6 <_printf_i+0x196>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	f023 0320 	bic.w	r3, r3, #32
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	2310      	movs	r3, #16
 80098c8:	e7b0      	b.n	800982c <_printf_i+0xfc>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	f043 0320 	orr.w	r3, r3, #32
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	2378      	movs	r3, #120	; 0x78
 80098d4:	4828      	ldr	r0, [pc, #160]	; (8009978 <_printf_i+0x248>)
 80098d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098da:	e7e3      	b.n	80098a4 <_printf_i+0x174>
 80098dc:	0659      	lsls	r1, r3, #25
 80098de:	bf48      	it	mi
 80098e0:	b2b6      	uxthmi	r6, r6
 80098e2:	e7e6      	b.n	80098b2 <_printf_i+0x182>
 80098e4:	4615      	mov	r5, r2
 80098e6:	e7bb      	b.n	8009860 <_printf_i+0x130>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	6826      	ldr	r6, [r4, #0]
 80098ec:	6961      	ldr	r1, [r4, #20]
 80098ee:	1d18      	adds	r0, r3, #4
 80098f0:	6028      	str	r0, [r5, #0]
 80098f2:	0635      	lsls	r5, r6, #24
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	d501      	bpl.n	80098fc <_printf_i+0x1cc>
 80098f8:	6019      	str	r1, [r3, #0]
 80098fa:	e002      	b.n	8009902 <_printf_i+0x1d2>
 80098fc:	0670      	lsls	r0, r6, #25
 80098fe:	d5fb      	bpl.n	80098f8 <_printf_i+0x1c8>
 8009900:	8019      	strh	r1, [r3, #0]
 8009902:	2300      	movs	r3, #0
 8009904:	6123      	str	r3, [r4, #16]
 8009906:	4615      	mov	r5, r2
 8009908:	e7ba      	b.n	8009880 <_printf_i+0x150>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	1d1a      	adds	r2, r3, #4
 800990e:	602a      	str	r2, [r5, #0]
 8009910:	681d      	ldr	r5, [r3, #0]
 8009912:	6862      	ldr	r2, [r4, #4]
 8009914:	2100      	movs	r1, #0
 8009916:	4628      	mov	r0, r5
 8009918:	f7f6 fc7a 	bl	8000210 <memchr>
 800991c:	b108      	cbz	r0, 8009922 <_printf_i+0x1f2>
 800991e:	1b40      	subs	r0, r0, r5
 8009920:	6060      	str	r0, [r4, #4]
 8009922:	6863      	ldr	r3, [r4, #4]
 8009924:	6123      	str	r3, [r4, #16]
 8009926:	2300      	movs	r3, #0
 8009928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800992c:	e7a8      	b.n	8009880 <_printf_i+0x150>
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	462a      	mov	r2, r5
 8009932:	4649      	mov	r1, r9
 8009934:	4640      	mov	r0, r8
 8009936:	47d0      	blx	sl
 8009938:	3001      	adds	r0, #1
 800993a:	d0ab      	beq.n	8009894 <_printf_i+0x164>
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	079b      	lsls	r3, r3, #30
 8009940:	d413      	bmi.n	800996a <_printf_i+0x23a>
 8009942:	68e0      	ldr	r0, [r4, #12]
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	4298      	cmp	r0, r3
 8009948:	bfb8      	it	lt
 800994a:	4618      	movlt	r0, r3
 800994c:	e7a4      	b.n	8009898 <_printf_i+0x168>
 800994e:	2301      	movs	r3, #1
 8009950:	4632      	mov	r2, r6
 8009952:	4649      	mov	r1, r9
 8009954:	4640      	mov	r0, r8
 8009956:	47d0      	blx	sl
 8009958:	3001      	adds	r0, #1
 800995a:	d09b      	beq.n	8009894 <_printf_i+0x164>
 800995c:	3501      	adds	r5, #1
 800995e:	68e3      	ldr	r3, [r4, #12]
 8009960:	9903      	ldr	r1, [sp, #12]
 8009962:	1a5b      	subs	r3, r3, r1
 8009964:	42ab      	cmp	r3, r5
 8009966:	dcf2      	bgt.n	800994e <_printf_i+0x21e>
 8009968:	e7eb      	b.n	8009942 <_printf_i+0x212>
 800996a:	2500      	movs	r5, #0
 800996c:	f104 0619 	add.w	r6, r4, #25
 8009970:	e7f5      	b.n	800995e <_printf_i+0x22e>
 8009972:	bf00      	nop
 8009974:	0800d5e6 	.word	0x0800d5e6
 8009978:	0800d5f7 	.word	0x0800d5f7

0800997c <iprintf>:
 800997c:	b40f      	push	{r0, r1, r2, r3}
 800997e:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <iprintf+0x2c>)
 8009980:	b513      	push	{r0, r1, r4, lr}
 8009982:	681c      	ldr	r4, [r3, #0]
 8009984:	b124      	cbz	r4, 8009990 <iprintf+0x14>
 8009986:	69a3      	ldr	r3, [r4, #24]
 8009988:	b913      	cbnz	r3, 8009990 <iprintf+0x14>
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff f9c0 	bl	8008d10 <__sinit>
 8009990:	ab05      	add	r3, sp, #20
 8009992:	9a04      	ldr	r2, [sp, #16]
 8009994:	68a1      	ldr	r1, [r4, #8]
 8009996:	9301      	str	r3, [sp, #4]
 8009998:	4620      	mov	r0, r4
 800999a:	f003 f939 	bl	800cc10 <_vfiprintf_r>
 800999e:	b002      	add	sp, #8
 80099a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a4:	b004      	add	sp, #16
 80099a6:	4770      	bx	lr
 80099a8:	200002fc 	.word	0x200002fc

080099ac <_puts_r>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	460e      	mov	r6, r1
 80099b0:	4605      	mov	r5, r0
 80099b2:	b118      	cbz	r0, 80099bc <_puts_r+0x10>
 80099b4:	6983      	ldr	r3, [r0, #24]
 80099b6:	b90b      	cbnz	r3, 80099bc <_puts_r+0x10>
 80099b8:	f7ff f9aa 	bl	8008d10 <__sinit>
 80099bc:	69ab      	ldr	r3, [r5, #24]
 80099be:	68ac      	ldr	r4, [r5, #8]
 80099c0:	b913      	cbnz	r3, 80099c8 <_puts_r+0x1c>
 80099c2:	4628      	mov	r0, r5
 80099c4:	f7ff f9a4 	bl	8008d10 <__sinit>
 80099c8:	4b2c      	ldr	r3, [pc, #176]	; (8009a7c <_puts_r+0xd0>)
 80099ca:	429c      	cmp	r4, r3
 80099cc:	d120      	bne.n	8009a10 <_puts_r+0x64>
 80099ce:	686c      	ldr	r4, [r5, #4]
 80099d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099d2:	07db      	lsls	r3, r3, #31
 80099d4:	d405      	bmi.n	80099e2 <_puts_r+0x36>
 80099d6:	89a3      	ldrh	r3, [r4, #12]
 80099d8:	0598      	lsls	r0, r3, #22
 80099da:	d402      	bmi.n	80099e2 <_puts_r+0x36>
 80099dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099de:	f7ff fa5a 	bl	8008e96 <__retarget_lock_acquire_recursive>
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	0719      	lsls	r1, r3, #28
 80099e6:	d51d      	bpl.n	8009a24 <_puts_r+0x78>
 80099e8:	6923      	ldr	r3, [r4, #16]
 80099ea:	b1db      	cbz	r3, 8009a24 <_puts_r+0x78>
 80099ec:	3e01      	subs	r6, #1
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099f4:	3b01      	subs	r3, #1
 80099f6:	60a3      	str	r3, [r4, #8]
 80099f8:	bb39      	cbnz	r1, 8009a4a <_puts_r+0x9e>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	da38      	bge.n	8009a70 <_puts_r+0xc4>
 80099fe:	4622      	mov	r2, r4
 8009a00:	210a      	movs	r1, #10
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 ff12 	bl	800a82c <__swbuf_r>
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d011      	beq.n	8009a30 <_puts_r+0x84>
 8009a0c:	250a      	movs	r5, #10
 8009a0e:	e011      	b.n	8009a34 <_puts_r+0x88>
 8009a10:	4b1b      	ldr	r3, [pc, #108]	; (8009a80 <_puts_r+0xd4>)
 8009a12:	429c      	cmp	r4, r3
 8009a14:	d101      	bne.n	8009a1a <_puts_r+0x6e>
 8009a16:	68ac      	ldr	r4, [r5, #8]
 8009a18:	e7da      	b.n	80099d0 <_puts_r+0x24>
 8009a1a:	4b1a      	ldr	r3, [pc, #104]	; (8009a84 <_puts_r+0xd8>)
 8009a1c:	429c      	cmp	r4, r3
 8009a1e:	bf08      	it	eq
 8009a20:	68ec      	ldreq	r4, [r5, #12]
 8009a22:	e7d5      	b.n	80099d0 <_puts_r+0x24>
 8009a24:	4621      	mov	r1, r4
 8009a26:	4628      	mov	r0, r5
 8009a28:	f000 ff64 	bl	800a8f4 <__swsetup_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d0dd      	beq.n	80099ec <_puts_r+0x40>
 8009a30:	f04f 35ff 	mov.w	r5, #4294967295
 8009a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a36:	07da      	lsls	r2, r3, #31
 8009a38:	d405      	bmi.n	8009a46 <_puts_r+0x9a>
 8009a3a:	89a3      	ldrh	r3, [r4, #12]
 8009a3c:	059b      	lsls	r3, r3, #22
 8009a3e:	d402      	bmi.n	8009a46 <_puts_r+0x9a>
 8009a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a42:	f7ff fa29 	bl	8008e98 <__retarget_lock_release_recursive>
 8009a46:	4628      	mov	r0, r5
 8009a48:	bd70      	pop	{r4, r5, r6, pc}
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	da04      	bge.n	8009a58 <_puts_r+0xac>
 8009a4e:	69a2      	ldr	r2, [r4, #24]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	dc06      	bgt.n	8009a62 <_puts_r+0xb6>
 8009a54:	290a      	cmp	r1, #10
 8009a56:	d004      	beq.n	8009a62 <_puts_r+0xb6>
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	6022      	str	r2, [r4, #0]
 8009a5e:	7019      	strb	r1, [r3, #0]
 8009a60:	e7c5      	b.n	80099ee <_puts_r+0x42>
 8009a62:	4622      	mov	r2, r4
 8009a64:	4628      	mov	r0, r5
 8009a66:	f000 fee1 	bl	800a82c <__swbuf_r>
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	d1bf      	bne.n	80099ee <_puts_r+0x42>
 8009a6e:	e7df      	b.n	8009a30 <_puts_r+0x84>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	250a      	movs	r5, #10
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	6022      	str	r2, [r4, #0]
 8009a78:	701d      	strb	r5, [r3, #0]
 8009a7a:	e7db      	b.n	8009a34 <_puts_r+0x88>
 8009a7c:	0800d590 	.word	0x0800d590
 8009a80:	0800d5b0 	.word	0x0800d5b0
 8009a84:	0800d570 	.word	0x0800d570

08009a88 <puts>:
 8009a88:	4b02      	ldr	r3, [pc, #8]	; (8009a94 <puts+0xc>)
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	f7ff bf8d 	b.w	80099ac <_puts_r>
 8009a92:	bf00      	nop
 8009a94:	200002fc 	.word	0x200002fc

08009a98 <realloc>:
 8009a98:	4b02      	ldr	r3, [pc, #8]	; (8009aa4 <realloc+0xc>)
 8009a9a:	460a      	mov	r2, r1
 8009a9c:	4601      	mov	r1, r0
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	f002 bf01 	b.w	800c8a6 <_realloc_r>
 8009aa4:	200002fc 	.word	0x200002fc

08009aa8 <_sbrk_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d06      	ldr	r5, [pc, #24]	; (8009ac4 <_sbrk_r+0x1c>)
 8009aac:	2300      	movs	r3, #0
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	602b      	str	r3, [r5, #0]
 8009ab4:	f7f9 f94a 	bl	8002d4c <_sbrk>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_sbrk_r+0x1a>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_sbrk_r+0x1a>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	20005ec0 	.word	0x20005ec0

08009ac8 <siprintf>:
 8009ac8:	b40e      	push	{r1, r2, r3}
 8009aca:	b500      	push	{lr}
 8009acc:	b09c      	sub	sp, #112	; 0x70
 8009ace:	ab1d      	add	r3, sp, #116	; 0x74
 8009ad0:	9002      	str	r0, [sp, #8]
 8009ad2:	9006      	str	r0, [sp, #24]
 8009ad4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ad8:	4809      	ldr	r0, [pc, #36]	; (8009b00 <siprintf+0x38>)
 8009ada:	9107      	str	r1, [sp, #28]
 8009adc:	9104      	str	r1, [sp, #16]
 8009ade:	4909      	ldr	r1, [pc, #36]	; (8009b04 <siprintf+0x3c>)
 8009ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ae4:	9105      	str	r1, [sp, #20]
 8009ae6:	6800      	ldr	r0, [r0, #0]
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	a902      	add	r1, sp, #8
 8009aec:	f002 ff66 	bl	800c9bc <_svfiprintf_r>
 8009af0:	9b02      	ldr	r3, [sp, #8]
 8009af2:	2200      	movs	r2, #0
 8009af4:	701a      	strb	r2, [r3, #0]
 8009af6:	b01c      	add	sp, #112	; 0x70
 8009af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009afc:	b003      	add	sp, #12
 8009afe:	4770      	bx	lr
 8009b00:	200002fc 	.word	0x200002fc
 8009b04:	ffff0208 	.word	0xffff0208

08009b08 <__sread>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b10:	f003 f9ae 	bl	800ce70 <_read_r>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	bfab      	itete	ge
 8009b18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b1c:	181b      	addge	r3, r3, r0
 8009b1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b22:	bfac      	ite	ge
 8009b24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b26:	81a3      	strhlt	r3, [r4, #12]
 8009b28:	bd10      	pop	{r4, pc}

08009b2a <__swrite>:
 8009b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2e:	461f      	mov	r7, r3
 8009b30:	898b      	ldrh	r3, [r1, #12]
 8009b32:	05db      	lsls	r3, r3, #23
 8009b34:	4605      	mov	r5, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	4616      	mov	r6, r2
 8009b3a:	d505      	bpl.n	8009b48 <__swrite+0x1e>
 8009b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b40:	2302      	movs	r3, #2
 8009b42:	2200      	movs	r2, #0
 8009b44:	f002 f942 	bl	800bdcc <_lseek_r>
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b52:	81a3      	strh	r3, [r4, #12]
 8009b54:	4632      	mov	r2, r6
 8009b56:	463b      	mov	r3, r7
 8009b58:	4628      	mov	r0, r5
 8009b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b5e:	f000 beb7 	b.w	800a8d0 <_write_r>

08009b62 <__sseek>:
 8009b62:	b510      	push	{r4, lr}
 8009b64:	460c      	mov	r4, r1
 8009b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6a:	f002 f92f 	bl	800bdcc <_lseek_r>
 8009b6e:	1c43      	adds	r3, r0, #1
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	bf15      	itete	ne
 8009b74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b7e:	81a3      	strheq	r3, [r4, #12]
 8009b80:	bf18      	it	ne
 8009b82:	81a3      	strhne	r3, [r4, #12]
 8009b84:	bd10      	pop	{r4, pc}

08009b86 <__sclose>:
 8009b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8a:	f000 bf21 	b.w	800a9d0 <_close_r>

08009b8e <strchr>:
 8009b8e:	b2c9      	uxtb	r1, r1
 8009b90:	4603      	mov	r3, r0
 8009b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b96:	b11a      	cbz	r2, 8009ba0 <strchr+0x12>
 8009b98:	428a      	cmp	r2, r1
 8009b9a:	d1f9      	bne.n	8009b90 <strchr+0x2>
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	4770      	bx	lr
 8009ba0:	2900      	cmp	r1, #0
 8009ba2:	bf18      	it	ne
 8009ba4:	2300      	movne	r3, #0
 8009ba6:	e7f9      	b.n	8009b9c <strchr+0xe>

08009ba8 <strncmp>:
 8009ba8:	b510      	push	{r4, lr}
 8009baa:	b17a      	cbz	r2, 8009bcc <strncmp+0x24>
 8009bac:	4603      	mov	r3, r0
 8009bae:	3901      	subs	r1, #1
 8009bb0:	1884      	adds	r4, r0, r2
 8009bb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009bb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009bba:	4290      	cmp	r0, r2
 8009bbc:	d101      	bne.n	8009bc2 <strncmp+0x1a>
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	d101      	bne.n	8009bc6 <strncmp+0x1e>
 8009bc2:	1a80      	subs	r0, r0, r2
 8009bc4:	bd10      	pop	{r4, pc}
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d1f3      	bne.n	8009bb2 <strncmp+0xa>
 8009bca:	e7fa      	b.n	8009bc2 <strncmp+0x1a>
 8009bcc:	4610      	mov	r0, r2
 8009bce:	e7f9      	b.n	8009bc4 <strncmp+0x1c>

08009bd0 <sulp>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	460d      	mov	r5, r1
 8009bd6:	ec45 4b10 	vmov	d0, r4, r5
 8009bda:	4616      	mov	r6, r2
 8009bdc:	f002 fcfe 	bl	800c5dc <__ulp>
 8009be0:	ec51 0b10 	vmov	r0, r1, d0
 8009be4:	b17e      	cbz	r6, 8009c06 <sulp+0x36>
 8009be6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009bea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dd09      	ble.n	8009c06 <sulp+0x36>
 8009bf2:	051b      	lsls	r3, r3, #20
 8009bf4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009bf8:	2400      	movs	r4, #0
 8009bfa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009bfe:	4622      	mov	r2, r4
 8009c00:	462b      	mov	r3, r5
 8009c02:	f7f6 fd11 	bl	8000628 <__aeabi_dmul>
 8009c06:	bd70      	pop	{r4, r5, r6, pc}

08009c08 <_strtod_l>:
 8009c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0c:	ed2d 8b02 	vpush	{d8}
 8009c10:	b09d      	sub	sp, #116	; 0x74
 8009c12:	461f      	mov	r7, r3
 8009c14:	2300      	movs	r3, #0
 8009c16:	9318      	str	r3, [sp, #96]	; 0x60
 8009c18:	4ba2      	ldr	r3, [pc, #648]	; (8009ea4 <_strtod_l+0x29c>)
 8009c1a:	9213      	str	r2, [sp, #76]	; 0x4c
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	9305      	str	r3, [sp, #20]
 8009c20:	4604      	mov	r4, r0
 8009c22:	4618      	mov	r0, r3
 8009c24:	4688      	mov	r8, r1
 8009c26:	f7f6 fae5 	bl	80001f4 <strlen>
 8009c2a:	f04f 0a00 	mov.w	sl, #0
 8009c2e:	4605      	mov	r5, r0
 8009c30:	f04f 0b00 	mov.w	fp, #0
 8009c34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c3a:	781a      	ldrb	r2, [r3, #0]
 8009c3c:	2a2b      	cmp	r2, #43	; 0x2b
 8009c3e:	d04e      	beq.n	8009cde <_strtod_l+0xd6>
 8009c40:	d83b      	bhi.n	8009cba <_strtod_l+0xb2>
 8009c42:	2a0d      	cmp	r2, #13
 8009c44:	d834      	bhi.n	8009cb0 <_strtod_l+0xa8>
 8009c46:	2a08      	cmp	r2, #8
 8009c48:	d834      	bhi.n	8009cb4 <_strtod_l+0xac>
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	d03e      	beq.n	8009ccc <_strtod_l+0xc4>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	930a      	str	r3, [sp, #40]	; 0x28
 8009c52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009c54:	7833      	ldrb	r3, [r6, #0]
 8009c56:	2b30      	cmp	r3, #48	; 0x30
 8009c58:	f040 80b0 	bne.w	8009dbc <_strtod_l+0x1b4>
 8009c5c:	7873      	ldrb	r3, [r6, #1]
 8009c5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c62:	2b58      	cmp	r3, #88	; 0x58
 8009c64:	d168      	bne.n	8009d38 <_strtod_l+0x130>
 8009c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	ab18      	add	r3, sp, #96	; 0x60
 8009c6c:	9702      	str	r7, [sp, #8]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	4a8d      	ldr	r2, [pc, #564]	; (8009ea8 <_strtod_l+0x2a0>)
 8009c72:	ab19      	add	r3, sp, #100	; 0x64
 8009c74:	a917      	add	r1, sp, #92	; 0x5c
 8009c76:	4620      	mov	r0, r4
 8009c78:	f001 fd9c 	bl	800b7b4 <__gethex>
 8009c7c:	f010 0707 	ands.w	r7, r0, #7
 8009c80:	4605      	mov	r5, r0
 8009c82:	d005      	beq.n	8009c90 <_strtod_l+0x88>
 8009c84:	2f06      	cmp	r7, #6
 8009c86:	d12c      	bne.n	8009ce2 <_strtod_l+0xda>
 8009c88:	3601      	adds	r6, #1
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	9617      	str	r6, [sp, #92]	; 0x5c
 8009c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f040 8590 	bne.w	800a7b8 <_strtod_l+0xbb0>
 8009c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c9a:	b1eb      	cbz	r3, 8009cd8 <_strtod_l+0xd0>
 8009c9c:	4652      	mov	r2, sl
 8009c9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ca2:	ec43 2b10 	vmov	d0, r2, r3
 8009ca6:	b01d      	add	sp, #116	; 0x74
 8009ca8:	ecbd 8b02 	vpop	{d8}
 8009cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb0:	2a20      	cmp	r2, #32
 8009cb2:	d1cc      	bne.n	8009c4e <_strtod_l+0x46>
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8009cb8:	e7be      	b.n	8009c38 <_strtod_l+0x30>
 8009cba:	2a2d      	cmp	r2, #45	; 0x2d
 8009cbc:	d1c7      	bne.n	8009c4e <_strtod_l+0x46>
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	920a      	str	r2, [sp, #40]	; 0x28
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009cc6:	785b      	ldrb	r3, [r3, #1]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1c2      	bne.n	8009c52 <_strtod_l+0x4a>
 8009ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f040 856e 	bne.w	800a7b4 <_strtod_l+0xbac>
 8009cd8:	4652      	mov	r2, sl
 8009cda:	465b      	mov	r3, fp
 8009cdc:	e7e1      	b.n	8009ca2 <_strtod_l+0x9a>
 8009cde:	2200      	movs	r2, #0
 8009ce0:	e7ee      	b.n	8009cc0 <_strtod_l+0xb8>
 8009ce2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ce4:	b13a      	cbz	r2, 8009cf6 <_strtod_l+0xee>
 8009ce6:	2135      	movs	r1, #53	; 0x35
 8009ce8:	a81a      	add	r0, sp, #104	; 0x68
 8009cea:	f002 fd82 	bl	800c7f2 <__copybits>
 8009cee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f002 f941 	bl	800bf78 <_Bfree>
 8009cf6:	3f01      	subs	r7, #1
 8009cf8:	2f04      	cmp	r7, #4
 8009cfa:	d806      	bhi.n	8009d0a <_strtod_l+0x102>
 8009cfc:	e8df f007 	tbb	[pc, r7]
 8009d00:	1714030a 	.word	0x1714030a
 8009d04:	0a          	.byte	0x0a
 8009d05:	00          	.byte	0x00
 8009d06:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009d0a:	0728      	lsls	r0, r5, #28
 8009d0c:	d5c0      	bpl.n	8009c90 <_strtod_l+0x88>
 8009d0e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009d12:	e7bd      	b.n	8009c90 <_strtod_l+0x88>
 8009d14:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009d18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009d1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009d22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009d26:	e7f0      	b.n	8009d0a <_strtod_l+0x102>
 8009d28:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009eac <_strtod_l+0x2a4>
 8009d2c:	e7ed      	b.n	8009d0a <_strtod_l+0x102>
 8009d2e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009d32:	f04f 3aff 	mov.w	sl, #4294967295
 8009d36:	e7e8      	b.n	8009d0a <_strtod_l+0x102>
 8009d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	2b30      	cmp	r3, #48	; 0x30
 8009d42:	d0f9      	beq.n	8009d38 <_strtod_l+0x130>
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0a3      	beq.n	8009c90 <_strtod_l+0x88>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f04f 0900 	mov.w	r9, #0
 8009d4e:	9304      	str	r3, [sp, #16]
 8009d50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d52:	9308      	str	r3, [sp, #32]
 8009d54:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d58:	464f      	mov	r7, r9
 8009d5a:	220a      	movs	r2, #10
 8009d5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009d5e:	7806      	ldrb	r6, [r0, #0]
 8009d60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009d64:	b2d9      	uxtb	r1, r3
 8009d66:	2909      	cmp	r1, #9
 8009d68:	d92a      	bls.n	8009dc0 <_strtod_l+0x1b8>
 8009d6a:	9905      	ldr	r1, [sp, #20]
 8009d6c:	462a      	mov	r2, r5
 8009d6e:	f7ff ff1b 	bl	8009ba8 <strncmp>
 8009d72:	b398      	cbz	r0, 8009ddc <_strtod_l+0x1d4>
 8009d74:	2000      	movs	r0, #0
 8009d76:	4632      	mov	r2, r6
 8009d78:	463d      	mov	r5, r7
 8009d7a:	9005      	str	r0, [sp, #20]
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2a65      	cmp	r2, #101	; 0x65
 8009d80:	d001      	beq.n	8009d86 <_strtod_l+0x17e>
 8009d82:	2a45      	cmp	r2, #69	; 0x45
 8009d84:	d118      	bne.n	8009db8 <_strtod_l+0x1b0>
 8009d86:	b91d      	cbnz	r5, 8009d90 <_strtod_l+0x188>
 8009d88:	9a04      	ldr	r2, [sp, #16]
 8009d8a:	4302      	orrs	r2, r0
 8009d8c:	d09e      	beq.n	8009ccc <_strtod_l+0xc4>
 8009d8e:	2500      	movs	r5, #0
 8009d90:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009d94:	f108 0201 	add.w	r2, r8, #1
 8009d98:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d9a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009d9e:	2a2b      	cmp	r2, #43	; 0x2b
 8009da0:	d075      	beq.n	8009e8e <_strtod_l+0x286>
 8009da2:	2a2d      	cmp	r2, #45	; 0x2d
 8009da4:	d07b      	beq.n	8009e9e <_strtod_l+0x296>
 8009da6:	f04f 0c00 	mov.w	ip, #0
 8009daa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009dae:	2909      	cmp	r1, #9
 8009db0:	f240 8082 	bls.w	8009eb8 <_strtod_l+0x2b0>
 8009db4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009db8:	2600      	movs	r6, #0
 8009dba:	e09d      	b.n	8009ef8 <_strtod_l+0x2f0>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	e7c4      	b.n	8009d4a <_strtod_l+0x142>
 8009dc0:	2f08      	cmp	r7, #8
 8009dc2:	bfd8      	it	le
 8009dc4:	9907      	ldrle	r1, [sp, #28]
 8009dc6:	f100 0001 	add.w	r0, r0, #1
 8009dca:	bfda      	itte	le
 8009dcc:	fb02 3301 	mlale	r3, r2, r1, r3
 8009dd0:	9307      	strle	r3, [sp, #28]
 8009dd2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009dd6:	3701      	adds	r7, #1
 8009dd8:	9017      	str	r0, [sp, #92]	; 0x5c
 8009dda:	e7bf      	b.n	8009d5c <_strtod_l+0x154>
 8009ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dde:	195a      	adds	r2, r3, r5
 8009de0:	9217      	str	r2, [sp, #92]	; 0x5c
 8009de2:	5d5a      	ldrb	r2, [r3, r5]
 8009de4:	2f00      	cmp	r7, #0
 8009de6:	d037      	beq.n	8009e58 <_strtod_l+0x250>
 8009de8:	9005      	str	r0, [sp, #20]
 8009dea:	463d      	mov	r5, r7
 8009dec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009df0:	2b09      	cmp	r3, #9
 8009df2:	d912      	bls.n	8009e1a <_strtod_l+0x212>
 8009df4:	2301      	movs	r3, #1
 8009df6:	e7c2      	b.n	8009d7e <_strtod_l+0x176>
 8009df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	9217      	str	r2, [sp, #92]	; 0x5c
 8009dfe:	785a      	ldrb	r2, [r3, #1]
 8009e00:	3001      	adds	r0, #1
 8009e02:	2a30      	cmp	r2, #48	; 0x30
 8009e04:	d0f8      	beq.n	8009df8 <_strtod_l+0x1f0>
 8009e06:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009e0a:	2b08      	cmp	r3, #8
 8009e0c:	f200 84d9 	bhi.w	800a7c2 <_strtod_l+0xbba>
 8009e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e12:	9005      	str	r0, [sp, #20]
 8009e14:	2000      	movs	r0, #0
 8009e16:	9308      	str	r3, [sp, #32]
 8009e18:	4605      	mov	r5, r0
 8009e1a:	3a30      	subs	r2, #48	; 0x30
 8009e1c:	f100 0301 	add.w	r3, r0, #1
 8009e20:	d014      	beq.n	8009e4c <_strtod_l+0x244>
 8009e22:	9905      	ldr	r1, [sp, #20]
 8009e24:	4419      	add	r1, r3
 8009e26:	9105      	str	r1, [sp, #20]
 8009e28:	462b      	mov	r3, r5
 8009e2a:	eb00 0e05 	add.w	lr, r0, r5
 8009e2e:	210a      	movs	r1, #10
 8009e30:	4573      	cmp	r3, lr
 8009e32:	d113      	bne.n	8009e5c <_strtod_l+0x254>
 8009e34:	182b      	adds	r3, r5, r0
 8009e36:	2b08      	cmp	r3, #8
 8009e38:	f105 0501 	add.w	r5, r5, #1
 8009e3c:	4405      	add	r5, r0
 8009e3e:	dc1c      	bgt.n	8009e7a <_strtod_l+0x272>
 8009e40:	9907      	ldr	r1, [sp, #28]
 8009e42:	230a      	movs	r3, #10
 8009e44:	fb03 2301 	mla	r3, r3, r1, r2
 8009e48:	9307      	str	r3, [sp, #28]
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e4e:	1c51      	adds	r1, r2, #1
 8009e50:	9117      	str	r1, [sp, #92]	; 0x5c
 8009e52:	7852      	ldrb	r2, [r2, #1]
 8009e54:	4618      	mov	r0, r3
 8009e56:	e7c9      	b.n	8009dec <_strtod_l+0x1e4>
 8009e58:	4638      	mov	r0, r7
 8009e5a:	e7d2      	b.n	8009e02 <_strtod_l+0x1fa>
 8009e5c:	2b08      	cmp	r3, #8
 8009e5e:	dc04      	bgt.n	8009e6a <_strtod_l+0x262>
 8009e60:	9e07      	ldr	r6, [sp, #28]
 8009e62:	434e      	muls	r6, r1
 8009e64:	9607      	str	r6, [sp, #28]
 8009e66:	3301      	adds	r3, #1
 8009e68:	e7e2      	b.n	8009e30 <_strtod_l+0x228>
 8009e6a:	f103 0c01 	add.w	ip, r3, #1
 8009e6e:	f1bc 0f10 	cmp.w	ip, #16
 8009e72:	bfd8      	it	le
 8009e74:	fb01 f909 	mulle.w	r9, r1, r9
 8009e78:	e7f5      	b.n	8009e66 <_strtod_l+0x25e>
 8009e7a:	2d10      	cmp	r5, #16
 8009e7c:	bfdc      	itt	le
 8009e7e:	230a      	movle	r3, #10
 8009e80:	fb03 2909 	mlale	r9, r3, r9, r2
 8009e84:	e7e1      	b.n	8009e4a <_strtod_l+0x242>
 8009e86:	2300      	movs	r3, #0
 8009e88:	9305      	str	r3, [sp, #20]
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e77c      	b.n	8009d88 <_strtod_l+0x180>
 8009e8e:	f04f 0c00 	mov.w	ip, #0
 8009e92:	f108 0202 	add.w	r2, r8, #2
 8009e96:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e98:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009e9c:	e785      	b.n	8009daa <_strtod_l+0x1a2>
 8009e9e:	f04f 0c01 	mov.w	ip, #1
 8009ea2:	e7f6      	b.n	8009e92 <_strtod_l+0x28a>
 8009ea4:	0800d750 	.word	0x0800d750
 8009ea8:	0800d608 	.word	0x0800d608
 8009eac:	7ff00000 	.word	0x7ff00000
 8009eb0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009eb2:	1c51      	adds	r1, r2, #1
 8009eb4:	9117      	str	r1, [sp, #92]	; 0x5c
 8009eb6:	7852      	ldrb	r2, [r2, #1]
 8009eb8:	2a30      	cmp	r2, #48	; 0x30
 8009eba:	d0f9      	beq.n	8009eb0 <_strtod_l+0x2a8>
 8009ebc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009ec0:	2908      	cmp	r1, #8
 8009ec2:	f63f af79 	bhi.w	8009db8 <_strtod_l+0x1b0>
 8009ec6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009eca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ecc:	9206      	str	r2, [sp, #24]
 8009ece:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ed0:	1c51      	adds	r1, r2, #1
 8009ed2:	9117      	str	r1, [sp, #92]	; 0x5c
 8009ed4:	7852      	ldrb	r2, [r2, #1]
 8009ed6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009eda:	2e09      	cmp	r6, #9
 8009edc:	d937      	bls.n	8009f4e <_strtod_l+0x346>
 8009ede:	9e06      	ldr	r6, [sp, #24]
 8009ee0:	1b89      	subs	r1, r1, r6
 8009ee2:	2908      	cmp	r1, #8
 8009ee4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009ee8:	dc02      	bgt.n	8009ef0 <_strtod_l+0x2e8>
 8009eea:	4576      	cmp	r6, lr
 8009eec:	bfa8      	it	ge
 8009eee:	4676      	movge	r6, lr
 8009ef0:	f1bc 0f00 	cmp.w	ip, #0
 8009ef4:	d000      	beq.n	8009ef8 <_strtod_l+0x2f0>
 8009ef6:	4276      	negs	r6, r6
 8009ef8:	2d00      	cmp	r5, #0
 8009efa:	d14d      	bne.n	8009f98 <_strtod_l+0x390>
 8009efc:	9904      	ldr	r1, [sp, #16]
 8009efe:	4301      	orrs	r1, r0
 8009f00:	f47f aec6 	bne.w	8009c90 <_strtod_l+0x88>
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f47f aee1 	bne.w	8009ccc <_strtod_l+0xc4>
 8009f0a:	2a69      	cmp	r2, #105	; 0x69
 8009f0c:	d027      	beq.n	8009f5e <_strtod_l+0x356>
 8009f0e:	dc24      	bgt.n	8009f5a <_strtod_l+0x352>
 8009f10:	2a49      	cmp	r2, #73	; 0x49
 8009f12:	d024      	beq.n	8009f5e <_strtod_l+0x356>
 8009f14:	2a4e      	cmp	r2, #78	; 0x4e
 8009f16:	f47f aed9 	bne.w	8009ccc <_strtod_l+0xc4>
 8009f1a:	499f      	ldr	r1, [pc, #636]	; (800a198 <_strtod_l+0x590>)
 8009f1c:	a817      	add	r0, sp, #92	; 0x5c
 8009f1e:	f001 fea1 	bl	800bc64 <__match>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	f43f aed2 	beq.w	8009ccc <_strtod_l+0xc4>
 8009f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b28      	cmp	r3, #40	; 0x28
 8009f2e:	d12d      	bne.n	8009f8c <_strtod_l+0x384>
 8009f30:	499a      	ldr	r1, [pc, #616]	; (800a19c <_strtod_l+0x594>)
 8009f32:	aa1a      	add	r2, sp, #104	; 0x68
 8009f34:	a817      	add	r0, sp, #92	; 0x5c
 8009f36:	f001 fea9 	bl	800bc8c <__hexnan>
 8009f3a:	2805      	cmp	r0, #5
 8009f3c:	d126      	bne.n	8009f8c <_strtod_l+0x384>
 8009f3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009f44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009f48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009f4c:	e6a0      	b.n	8009c90 <_strtod_l+0x88>
 8009f4e:	210a      	movs	r1, #10
 8009f50:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009f54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009f58:	e7b9      	b.n	8009ece <_strtod_l+0x2c6>
 8009f5a:	2a6e      	cmp	r2, #110	; 0x6e
 8009f5c:	e7db      	b.n	8009f16 <_strtod_l+0x30e>
 8009f5e:	4990      	ldr	r1, [pc, #576]	; (800a1a0 <_strtod_l+0x598>)
 8009f60:	a817      	add	r0, sp, #92	; 0x5c
 8009f62:	f001 fe7f 	bl	800bc64 <__match>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	f43f aeb0 	beq.w	8009ccc <_strtod_l+0xc4>
 8009f6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f6e:	498d      	ldr	r1, [pc, #564]	; (800a1a4 <_strtod_l+0x59c>)
 8009f70:	3b01      	subs	r3, #1
 8009f72:	a817      	add	r0, sp, #92	; 0x5c
 8009f74:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f76:	f001 fe75 	bl	800bc64 <__match>
 8009f7a:	b910      	cbnz	r0, 8009f82 <_strtod_l+0x37a>
 8009f7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f7e:	3301      	adds	r3, #1
 8009f80:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f82:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a1b4 <_strtod_l+0x5ac>
 8009f86:	f04f 0a00 	mov.w	sl, #0
 8009f8a:	e681      	b.n	8009c90 <_strtod_l+0x88>
 8009f8c:	4886      	ldr	r0, [pc, #536]	; (800a1a8 <_strtod_l+0x5a0>)
 8009f8e:	f002 ff83 	bl	800ce98 <nan>
 8009f92:	ec5b ab10 	vmov	sl, fp, d0
 8009f96:	e67b      	b.n	8009c90 <_strtod_l+0x88>
 8009f98:	9b05      	ldr	r3, [sp, #20]
 8009f9a:	9807      	ldr	r0, [sp, #28]
 8009f9c:	1af3      	subs	r3, r6, r3
 8009f9e:	2f00      	cmp	r7, #0
 8009fa0:	bf08      	it	eq
 8009fa2:	462f      	moveq	r7, r5
 8009fa4:	2d10      	cmp	r5, #16
 8009fa6:	9306      	str	r3, [sp, #24]
 8009fa8:	46a8      	mov	r8, r5
 8009faa:	bfa8      	it	ge
 8009fac:	f04f 0810 	movge.w	r8, #16
 8009fb0:	f7f6 fac0 	bl	8000534 <__aeabi_ui2d>
 8009fb4:	2d09      	cmp	r5, #9
 8009fb6:	4682      	mov	sl, r0
 8009fb8:	468b      	mov	fp, r1
 8009fba:	dd13      	ble.n	8009fe4 <_strtod_l+0x3dc>
 8009fbc:	4b7b      	ldr	r3, [pc, #492]	; (800a1ac <_strtod_l+0x5a4>)
 8009fbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009fc2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009fc6:	f7f6 fb2f 	bl	8000628 <__aeabi_dmul>
 8009fca:	4682      	mov	sl, r0
 8009fcc:	4648      	mov	r0, r9
 8009fce:	468b      	mov	fp, r1
 8009fd0:	f7f6 fab0 	bl	8000534 <__aeabi_ui2d>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4650      	mov	r0, sl
 8009fda:	4659      	mov	r1, fp
 8009fdc:	f7f6 f96e 	bl	80002bc <__adddf3>
 8009fe0:	4682      	mov	sl, r0
 8009fe2:	468b      	mov	fp, r1
 8009fe4:	2d0f      	cmp	r5, #15
 8009fe6:	dc38      	bgt.n	800a05a <_strtod_l+0x452>
 8009fe8:	9b06      	ldr	r3, [sp, #24]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f43f ae50 	beq.w	8009c90 <_strtod_l+0x88>
 8009ff0:	dd24      	ble.n	800a03c <_strtod_l+0x434>
 8009ff2:	2b16      	cmp	r3, #22
 8009ff4:	dc0b      	bgt.n	800a00e <_strtod_l+0x406>
 8009ff6:	496d      	ldr	r1, [pc, #436]	; (800a1ac <_strtod_l+0x5a4>)
 8009ff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a000:	4652      	mov	r2, sl
 800a002:	465b      	mov	r3, fp
 800a004:	f7f6 fb10 	bl	8000628 <__aeabi_dmul>
 800a008:	4682      	mov	sl, r0
 800a00a:	468b      	mov	fp, r1
 800a00c:	e640      	b.n	8009c90 <_strtod_l+0x88>
 800a00e:	9a06      	ldr	r2, [sp, #24]
 800a010:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a014:	4293      	cmp	r3, r2
 800a016:	db20      	blt.n	800a05a <_strtod_l+0x452>
 800a018:	4c64      	ldr	r4, [pc, #400]	; (800a1ac <_strtod_l+0x5a4>)
 800a01a:	f1c5 050f 	rsb	r5, r5, #15
 800a01e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a022:	4652      	mov	r2, sl
 800a024:	465b      	mov	r3, fp
 800a026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a02a:	f7f6 fafd 	bl	8000628 <__aeabi_dmul>
 800a02e:	9b06      	ldr	r3, [sp, #24]
 800a030:	1b5d      	subs	r5, r3, r5
 800a032:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a036:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a03a:	e7e3      	b.n	800a004 <_strtod_l+0x3fc>
 800a03c:	9b06      	ldr	r3, [sp, #24]
 800a03e:	3316      	adds	r3, #22
 800a040:	db0b      	blt.n	800a05a <_strtod_l+0x452>
 800a042:	9b05      	ldr	r3, [sp, #20]
 800a044:	1b9e      	subs	r6, r3, r6
 800a046:	4b59      	ldr	r3, [pc, #356]	; (800a1ac <_strtod_l+0x5a4>)
 800a048:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a04c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a050:	4650      	mov	r0, sl
 800a052:	4659      	mov	r1, fp
 800a054:	f7f6 fc12 	bl	800087c <__aeabi_ddiv>
 800a058:	e7d6      	b.n	800a008 <_strtod_l+0x400>
 800a05a:	9b06      	ldr	r3, [sp, #24]
 800a05c:	eba5 0808 	sub.w	r8, r5, r8
 800a060:	4498      	add	r8, r3
 800a062:	f1b8 0f00 	cmp.w	r8, #0
 800a066:	dd74      	ble.n	800a152 <_strtod_l+0x54a>
 800a068:	f018 030f 	ands.w	r3, r8, #15
 800a06c:	d00a      	beq.n	800a084 <_strtod_l+0x47c>
 800a06e:	494f      	ldr	r1, [pc, #316]	; (800a1ac <_strtod_l+0x5a4>)
 800a070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a074:	4652      	mov	r2, sl
 800a076:	465b      	mov	r3, fp
 800a078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a07c:	f7f6 fad4 	bl	8000628 <__aeabi_dmul>
 800a080:	4682      	mov	sl, r0
 800a082:	468b      	mov	fp, r1
 800a084:	f038 080f 	bics.w	r8, r8, #15
 800a088:	d04f      	beq.n	800a12a <_strtod_l+0x522>
 800a08a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a08e:	dd22      	ble.n	800a0d6 <_strtod_l+0x4ce>
 800a090:	2500      	movs	r5, #0
 800a092:	462e      	mov	r6, r5
 800a094:	9507      	str	r5, [sp, #28]
 800a096:	9505      	str	r5, [sp, #20]
 800a098:	2322      	movs	r3, #34	; 0x22
 800a09a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a1b4 <_strtod_l+0x5ac>
 800a09e:	6023      	str	r3, [r4, #0]
 800a0a0:	f04f 0a00 	mov.w	sl, #0
 800a0a4:	9b07      	ldr	r3, [sp, #28]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f43f adf2 	beq.w	8009c90 <_strtod_l+0x88>
 800a0ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f001 ff62 	bl	800bf78 <_Bfree>
 800a0b4:	9905      	ldr	r1, [sp, #20]
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f001 ff5e 	bl	800bf78 <_Bfree>
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f001 ff5a 	bl	800bf78 <_Bfree>
 800a0c4:	9907      	ldr	r1, [sp, #28]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f001 ff56 	bl	800bf78 <_Bfree>
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f001 ff52 	bl	800bf78 <_Bfree>
 800a0d4:	e5dc      	b.n	8009c90 <_strtod_l+0x88>
 800a0d6:	4b36      	ldr	r3, [pc, #216]	; (800a1b0 <_strtod_l+0x5a8>)
 800a0d8:	9304      	str	r3, [sp, #16]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a0e0:	4650      	mov	r0, sl
 800a0e2:	4659      	mov	r1, fp
 800a0e4:	4699      	mov	r9, r3
 800a0e6:	f1b8 0f01 	cmp.w	r8, #1
 800a0ea:	dc21      	bgt.n	800a130 <_strtod_l+0x528>
 800a0ec:	b10b      	cbz	r3, 800a0f2 <_strtod_l+0x4ea>
 800a0ee:	4682      	mov	sl, r0
 800a0f0:	468b      	mov	fp, r1
 800a0f2:	4b2f      	ldr	r3, [pc, #188]	; (800a1b0 <_strtod_l+0x5a8>)
 800a0f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a0f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a0fc:	4652      	mov	r2, sl
 800a0fe:	465b      	mov	r3, fp
 800a100:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a104:	f7f6 fa90 	bl	8000628 <__aeabi_dmul>
 800a108:	4b2a      	ldr	r3, [pc, #168]	; (800a1b4 <_strtod_l+0x5ac>)
 800a10a:	460a      	mov	r2, r1
 800a10c:	400b      	ands	r3, r1
 800a10e:	492a      	ldr	r1, [pc, #168]	; (800a1b8 <_strtod_l+0x5b0>)
 800a110:	428b      	cmp	r3, r1
 800a112:	4682      	mov	sl, r0
 800a114:	d8bc      	bhi.n	800a090 <_strtod_l+0x488>
 800a116:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a11a:	428b      	cmp	r3, r1
 800a11c:	bf86      	itte	hi
 800a11e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a1bc <_strtod_l+0x5b4>
 800a122:	f04f 3aff 	movhi.w	sl, #4294967295
 800a126:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a12a:	2300      	movs	r3, #0
 800a12c:	9304      	str	r3, [sp, #16]
 800a12e:	e084      	b.n	800a23a <_strtod_l+0x632>
 800a130:	f018 0f01 	tst.w	r8, #1
 800a134:	d005      	beq.n	800a142 <_strtod_l+0x53a>
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	f7f6 fa74 	bl	8000628 <__aeabi_dmul>
 800a140:	2301      	movs	r3, #1
 800a142:	9a04      	ldr	r2, [sp, #16]
 800a144:	3208      	adds	r2, #8
 800a146:	f109 0901 	add.w	r9, r9, #1
 800a14a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a14e:	9204      	str	r2, [sp, #16]
 800a150:	e7c9      	b.n	800a0e6 <_strtod_l+0x4de>
 800a152:	d0ea      	beq.n	800a12a <_strtod_l+0x522>
 800a154:	f1c8 0800 	rsb	r8, r8, #0
 800a158:	f018 020f 	ands.w	r2, r8, #15
 800a15c:	d00a      	beq.n	800a174 <_strtod_l+0x56c>
 800a15e:	4b13      	ldr	r3, [pc, #76]	; (800a1ac <_strtod_l+0x5a4>)
 800a160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a164:	4650      	mov	r0, sl
 800a166:	4659      	mov	r1, fp
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f7f6 fb86 	bl	800087c <__aeabi_ddiv>
 800a170:	4682      	mov	sl, r0
 800a172:	468b      	mov	fp, r1
 800a174:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a178:	d0d7      	beq.n	800a12a <_strtod_l+0x522>
 800a17a:	f1b8 0f1f 	cmp.w	r8, #31
 800a17e:	dd1f      	ble.n	800a1c0 <_strtod_l+0x5b8>
 800a180:	2500      	movs	r5, #0
 800a182:	462e      	mov	r6, r5
 800a184:	9507      	str	r5, [sp, #28]
 800a186:	9505      	str	r5, [sp, #20]
 800a188:	2322      	movs	r3, #34	; 0x22
 800a18a:	f04f 0a00 	mov.w	sl, #0
 800a18e:	f04f 0b00 	mov.w	fp, #0
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	e786      	b.n	800a0a4 <_strtod_l+0x49c>
 800a196:	bf00      	nop
 800a198:	0800d5e1 	.word	0x0800d5e1
 800a19c:	0800d61c 	.word	0x0800d61c
 800a1a0:	0800d5d9 	.word	0x0800d5d9
 800a1a4:	0800d65b 	.word	0x0800d65b
 800a1a8:	0800d908 	.word	0x0800d908
 800a1ac:	0800d7e8 	.word	0x0800d7e8
 800a1b0:	0800d7c0 	.word	0x0800d7c0
 800a1b4:	7ff00000 	.word	0x7ff00000
 800a1b8:	7ca00000 	.word	0x7ca00000
 800a1bc:	7fefffff 	.word	0x7fefffff
 800a1c0:	f018 0310 	ands.w	r3, r8, #16
 800a1c4:	bf18      	it	ne
 800a1c6:	236a      	movne	r3, #106	; 0x6a
 800a1c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a578 <_strtod_l+0x970>
 800a1cc:	9304      	str	r3, [sp, #16]
 800a1ce:	4650      	mov	r0, sl
 800a1d0:	4659      	mov	r1, fp
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f018 0f01 	tst.w	r8, #1
 800a1d8:	d004      	beq.n	800a1e4 <_strtod_l+0x5dc>
 800a1da:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a1de:	f7f6 fa23 	bl	8000628 <__aeabi_dmul>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a1e8:	f109 0908 	add.w	r9, r9, #8
 800a1ec:	d1f2      	bne.n	800a1d4 <_strtod_l+0x5cc>
 800a1ee:	b10b      	cbz	r3, 800a1f4 <_strtod_l+0x5ec>
 800a1f0:	4682      	mov	sl, r0
 800a1f2:	468b      	mov	fp, r1
 800a1f4:	9b04      	ldr	r3, [sp, #16]
 800a1f6:	b1c3      	cbz	r3, 800a22a <_strtod_l+0x622>
 800a1f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a1fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a200:	2b00      	cmp	r3, #0
 800a202:	4659      	mov	r1, fp
 800a204:	dd11      	ble.n	800a22a <_strtod_l+0x622>
 800a206:	2b1f      	cmp	r3, #31
 800a208:	f340 8124 	ble.w	800a454 <_strtod_l+0x84c>
 800a20c:	2b34      	cmp	r3, #52	; 0x34
 800a20e:	bfde      	ittt	le
 800a210:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a214:	f04f 33ff 	movle.w	r3, #4294967295
 800a218:	fa03 f202 	lslle.w	r2, r3, r2
 800a21c:	f04f 0a00 	mov.w	sl, #0
 800a220:	bfcc      	ite	gt
 800a222:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a226:	ea02 0b01 	andle.w	fp, r2, r1
 800a22a:	2200      	movs	r2, #0
 800a22c:	2300      	movs	r3, #0
 800a22e:	4650      	mov	r0, sl
 800a230:	4659      	mov	r1, fp
 800a232:	f7f6 fc61 	bl	8000af8 <__aeabi_dcmpeq>
 800a236:	2800      	cmp	r0, #0
 800a238:	d1a2      	bne.n	800a180 <_strtod_l+0x578>
 800a23a:	9b07      	ldr	r3, [sp, #28]
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	9908      	ldr	r1, [sp, #32]
 800a240:	462b      	mov	r3, r5
 800a242:	463a      	mov	r2, r7
 800a244:	4620      	mov	r0, r4
 800a246:	f001 feff 	bl	800c048 <__s2b>
 800a24a:	9007      	str	r0, [sp, #28]
 800a24c:	2800      	cmp	r0, #0
 800a24e:	f43f af1f 	beq.w	800a090 <_strtod_l+0x488>
 800a252:	9b05      	ldr	r3, [sp, #20]
 800a254:	1b9e      	subs	r6, r3, r6
 800a256:	9b06      	ldr	r3, [sp, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bfb4      	ite	lt
 800a25c:	4633      	movlt	r3, r6
 800a25e:	2300      	movge	r3, #0
 800a260:	930c      	str	r3, [sp, #48]	; 0x30
 800a262:	9b06      	ldr	r3, [sp, #24]
 800a264:	2500      	movs	r5, #0
 800a266:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a26a:	9312      	str	r3, [sp, #72]	; 0x48
 800a26c:	462e      	mov	r6, r5
 800a26e:	9b07      	ldr	r3, [sp, #28]
 800a270:	4620      	mov	r0, r4
 800a272:	6859      	ldr	r1, [r3, #4]
 800a274:	f001 fe40 	bl	800bef8 <_Balloc>
 800a278:	9005      	str	r0, [sp, #20]
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f43f af0c 	beq.w	800a098 <_strtod_l+0x490>
 800a280:	9b07      	ldr	r3, [sp, #28]
 800a282:	691a      	ldr	r2, [r3, #16]
 800a284:	3202      	adds	r2, #2
 800a286:	f103 010c 	add.w	r1, r3, #12
 800a28a:	0092      	lsls	r2, r2, #2
 800a28c:	300c      	adds	r0, #12
 800a28e:	f7fe fe15 	bl	8008ebc <memcpy>
 800a292:	ec4b ab10 	vmov	d0, sl, fp
 800a296:	aa1a      	add	r2, sp, #104	; 0x68
 800a298:	a919      	add	r1, sp, #100	; 0x64
 800a29a:	4620      	mov	r0, r4
 800a29c:	f002 fa1a 	bl	800c6d4 <__d2b>
 800a2a0:	ec4b ab18 	vmov	d8, sl, fp
 800a2a4:	9018      	str	r0, [sp, #96]	; 0x60
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f43f aef6 	beq.w	800a098 <_strtod_l+0x490>
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f001 ff64 	bl	800c17c <__i2b>
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	f43f aeee 	beq.w	800a098 <_strtod_l+0x490>
 800a2bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2be:	9904      	ldr	r1, [sp, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	bfab      	itete	ge
 800a2c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a2c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a2c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a2ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a2ce:	bfac      	ite	ge
 800a2d0:	eb03 0902 	addge.w	r9, r3, r2
 800a2d4:	1ad7      	sublt	r7, r2, r3
 800a2d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a2d8:	eba3 0801 	sub.w	r8, r3, r1
 800a2dc:	4490      	add	r8, r2
 800a2de:	4ba1      	ldr	r3, [pc, #644]	; (800a564 <_strtod_l+0x95c>)
 800a2e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2e4:	4598      	cmp	r8, r3
 800a2e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a2ea:	f280 80c7 	bge.w	800a47c <_strtod_l+0x874>
 800a2ee:	eba3 0308 	sub.w	r3, r3, r8
 800a2f2:	2b1f      	cmp	r3, #31
 800a2f4:	eba2 0203 	sub.w	r2, r2, r3
 800a2f8:	f04f 0101 	mov.w	r1, #1
 800a2fc:	f300 80b1 	bgt.w	800a462 <_strtod_l+0x85a>
 800a300:	fa01 f303 	lsl.w	r3, r1, r3
 800a304:	930d      	str	r3, [sp, #52]	; 0x34
 800a306:	2300      	movs	r3, #0
 800a308:	9308      	str	r3, [sp, #32]
 800a30a:	eb09 0802 	add.w	r8, r9, r2
 800a30e:	9b04      	ldr	r3, [sp, #16]
 800a310:	45c1      	cmp	r9, r8
 800a312:	4417      	add	r7, r2
 800a314:	441f      	add	r7, r3
 800a316:	464b      	mov	r3, r9
 800a318:	bfa8      	it	ge
 800a31a:	4643      	movge	r3, r8
 800a31c:	42bb      	cmp	r3, r7
 800a31e:	bfa8      	it	ge
 800a320:	463b      	movge	r3, r7
 800a322:	2b00      	cmp	r3, #0
 800a324:	bfc2      	ittt	gt
 800a326:	eba8 0803 	subgt.w	r8, r8, r3
 800a32a:	1aff      	subgt	r7, r7, r3
 800a32c:	eba9 0903 	subgt.w	r9, r9, r3
 800a330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a332:	2b00      	cmp	r3, #0
 800a334:	dd17      	ble.n	800a366 <_strtod_l+0x75e>
 800a336:	4631      	mov	r1, r6
 800a338:	461a      	mov	r2, r3
 800a33a:	4620      	mov	r0, r4
 800a33c:	f001 ffde 	bl	800c2fc <__pow5mult>
 800a340:	4606      	mov	r6, r0
 800a342:	2800      	cmp	r0, #0
 800a344:	f43f aea8 	beq.w	800a098 <_strtod_l+0x490>
 800a348:	4601      	mov	r1, r0
 800a34a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a34c:	4620      	mov	r0, r4
 800a34e:	f001 ff2b 	bl	800c1a8 <__multiply>
 800a352:	900b      	str	r0, [sp, #44]	; 0x2c
 800a354:	2800      	cmp	r0, #0
 800a356:	f43f ae9f 	beq.w	800a098 <_strtod_l+0x490>
 800a35a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a35c:	4620      	mov	r0, r4
 800a35e:	f001 fe0b 	bl	800bf78 <_Bfree>
 800a362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a364:	9318      	str	r3, [sp, #96]	; 0x60
 800a366:	f1b8 0f00 	cmp.w	r8, #0
 800a36a:	f300 808c 	bgt.w	800a486 <_strtod_l+0x87e>
 800a36e:	9b06      	ldr	r3, [sp, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	dd08      	ble.n	800a386 <_strtod_l+0x77e>
 800a374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a376:	9905      	ldr	r1, [sp, #20]
 800a378:	4620      	mov	r0, r4
 800a37a:	f001 ffbf 	bl	800c2fc <__pow5mult>
 800a37e:	9005      	str	r0, [sp, #20]
 800a380:	2800      	cmp	r0, #0
 800a382:	f43f ae89 	beq.w	800a098 <_strtod_l+0x490>
 800a386:	2f00      	cmp	r7, #0
 800a388:	dd08      	ble.n	800a39c <_strtod_l+0x794>
 800a38a:	9905      	ldr	r1, [sp, #20]
 800a38c:	463a      	mov	r2, r7
 800a38e:	4620      	mov	r0, r4
 800a390:	f002 f80e 	bl	800c3b0 <__lshift>
 800a394:	9005      	str	r0, [sp, #20]
 800a396:	2800      	cmp	r0, #0
 800a398:	f43f ae7e 	beq.w	800a098 <_strtod_l+0x490>
 800a39c:	f1b9 0f00 	cmp.w	r9, #0
 800a3a0:	dd08      	ble.n	800a3b4 <_strtod_l+0x7ac>
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	464a      	mov	r2, r9
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f002 f802 	bl	800c3b0 <__lshift>
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f43f ae72 	beq.w	800a098 <_strtod_l+0x490>
 800a3b4:	9a05      	ldr	r2, [sp, #20]
 800a3b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f002 f885 	bl	800c4c8 <__mdiff>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	f43f ae69 	beq.w	800a098 <_strtod_l+0x490>
 800a3c6:	68c3      	ldr	r3, [r0, #12]
 800a3c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60c3      	str	r3, [r0, #12]
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	f002 f85e 	bl	800c490 <__mcmp>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	da60      	bge.n	800a49a <_strtod_l+0x892>
 800a3d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3da:	ea53 030a 	orrs.w	r3, r3, sl
 800a3de:	f040 8082 	bne.w	800a4e6 <_strtod_l+0x8de>
 800a3e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d17d      	bne.n	800a4e6 <_strtod_l+0x8de>
 800a3ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3ee:	0d1b      	lsrs	r3, r3, #20
 800a3f0:	051b      	lsls	r3, r3, #20
 800a3f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a3f6:	d976      	bls.n	800a4e6 <_strtod_l+0x8de>
 800a3f8:	696b      	ldr	r3, [r5, #20]
 800a3fa:	b913      	cbnz	r3, 800a402 <_strtod_l+0x7fa>
 800a3fc:	692b      	ldr	r3, [r5, #16]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	dd71      	ble.n	800a4e6 <_strtod_l+0x8de>
 800a402:	4629      	mov	r1, r5
 800a404:	2201      	movs	r2, #1
 800a406:	4620      	mov	r0, r4
 800a408:	f001 ffd2 	bl	800c3b0 <__lshift>
 800a40c:	4631      	mov	r1, r6
 800a40e:	4605      	mov	r5, r0
 800a410:	f002 f83e 	bl	800c490 <__mcmp>
 800a414:	2800      	cmp	r0, #0
 800a416:	dd66      	ble.n	800a4e6 <_strtod_l+0x8de>
 800a418:	9904      	ldr	r1, [sp, #16]
 800a41a:	4a53      	ldr	r2, [pc, #332]	; (800a568 <_strtod_l+0x960>)
 800a41c:	465b      	mov	r3, fp
 800a41e:	2900      	cmp	r1, #0
 800a420:	f000 8081 	beq.w	800a526 <_strtod_l+0x91e>
 800a424:	ea02 010b 	and.w	r1, r2, fp
 800a428:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a42c:	dc7b      	bgt.n	800a526 <_strtod_l+0x91e>
 800a42e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a432:	f77f aea9 	ble.w	800a188 <_strtod_l+0x580>
 800a436:	4b4d      	ldr	r3, [pc, #308]	; (800a56c <_strtod_l+0x964>)
 800a438:	4650      	mov	r0, sl
 800a43a:	4659      	mov	r1, fp
 800a43c:	2200      	movs	r2, #0
 800a43e:	f7f6 f8f3 	bl	8000628 <__aeabi_dmul>
 800a442:	460b      	mov	r3, r1
 800a444:	4303      	orrs	r3, r0
 800a446:	bf08      	it	eq
 800a448:	2322      	moveq	r3, #34	; 0x22
 800a44a:	4682      	mov	sl, r0
 800a44c:	468b      	mov	fp, r1
 800a44e:	bf08      	it	eq
 800a450:	6023      	streq	r3, [r4, #0]
 800a452:	e62b      	b.n	800a0ac <_strtod_l+0x4a4>
 800a454:	f04f 32ff 	mov.w	r2, #4294967295
 800a458:	fa02 f303 	lsl.w	r3, r2, r3
 800a45c:	ea03 0a0a 	and.w	sl, r3, sl
 800a460:	e6e3      	b.n	800a22a <_strtod_l+0x622>
 800a462:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a466:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a46a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a46e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a472:	fa01 f308 	lsl.w	r3, r1, r8
 800a476:	9308      	str	r3, [sp, #32]
 800a478:	910d      	str	r1, [sp, #52]	; 0x34
 800a47a:	e746      	b.n	800a30a <_strtod_l+0x702>
 800a47c:	2300      	movs	r3, #0
 800a47e:	9308      	str	r3, [sp, #32]
 800a480:	2301      	movs	r3, #1
 800a482:	930d      	str	r3, [sp, #52]	; 0x34
 800a484:	e741      	b.n	800a30a <_strtod_l+0x702>
 800a486:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a488:	4642      	mov	r2, r8
 800a48a:	4620      	mov	r0, r4
 800a48c:	f001 ff90 	bl	800c3b0 <__lshift>
 800a490:	9018      	str	r0, [sp, #96]	; 0x60
 800a492:	2800      	cmp	r0, #0
 800a494:	f47f af6b 	bne.w	800a36e <_strtod_l+0x766>
 800a498:	e5fe      	b.n	800a098 <_strtod_l+0x490>
 800a49a:	465f      	mov	r7, fp
 800a49c:	d16e      	bne.n	800a57c <_strtod_l+0x974>
 800a49e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4a4:	b342      	cbz	r2, 800a4f8 <_strtod_l+0x8f0>
 800a4a6:	4a32      	ldr	r2, [pc, #200]	; (800a570 <_strtod_l+0x968>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d128      	bne.n	800a4fe <_strtod_l+0x8f6>
 800a4ac:	9b04      	ldr	r3, [sp, #16]
 800a4ae:	4651      	mov	r1, sl
 800a4b0:	b1eb      	cbz	r3, 800a4ee <_strtod_l+0x8e6>
 800a4b2:	4b2d      	ldr	r3, [pc, #180]	; (800a568 <_strtod_l+0x960>)
 800a4b4:	403b      	ands	r3, r7
 800a4b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a4be:	d819      	bhi.n	800a4f4 <_strtod_l+0x8ec>
 800a4c0:	0d1b      	lsrs	r3, r3, #20
 800a4c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ca:	4299      	cmp	r1, r3
 800a4cc:	d117      	bne.n	800a4fe <_strtod_l+0x8f6>
 800a4ce:	4b29      	ldr	r3, [pc, #164]	; (800a574 <_strtod_l+0x96c>)
 800a4d0:	429f      	cmp	r7, r3
 800a4d2:	d102      	bne.n	800a4da <_strtod_l+0x8d2>
 800a4d4:	3101      	adds	r1, #1
 800a4d6:	f43f addf 	beq.w	800a098 <_strtod_l+0x490>
 800a4da:	4b23      	ldr	r3, [pc, #140]	; (800a568 <_strtod_l+0x960>)
 800a4dc:	403b      	ands	r3, r7
 800a4de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a4e2:	f04f 0a00 	mov.w	sl, #0
 800a4e6:	9b04      	ldr	r3, [sp, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1a4      	bne.n	800a436 <_strtod_l+0x82e>
 800a4ec:	e5de      	b.n	800a0ac <_strtod_l+0x4a4>
 800a4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f2:	e7ea      	b.n	800a4ca <_strtod_l+0x8c2>
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	e7e8      	b.n	800a4ca <_strtod_l+0x8c2>
 800a4f8:	ea53 030a 	orrs.w	r3, r3, sl
 800a4fc:	d08c      	beq.n	800a418 <_strtod_l+0x810>
 800a4fe:	9b08      	ldr	r3, [sp, #32]
 800a500:	b1db      	cbz	r3, 800a53a <_strtod_l+0x932>
 800a502:	423b      	tst	r3, r7
 800a504:	d0ef      	beq.n	800a4e6 <_strtod_l+0x8de>
 800a506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a508:	9a04      	ldr	r2, [sp, #16]
 800a50a:	4650      	mov	r0, sl
 800a50c:	4659      	mov	r1, fp
 800a50e:	b1c3      	cbz	r3, 800a542 <_strtod_l+0x93a>
 800a510:	f7ff fb5e 	bl	8009bd0 <sulp>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	ec51 0b18 	vmov	r0, r1, d8
 800a51c:	f7f5 fece 	bl	80002bc <__adddf3>
 800a520:	4682      	mov	sl, r0
 800a522:	468b      	mov	fp, r1
 800a524:	e7df      	b.n	800a4e6 <_strtod_l+0x8de>
 800a526:	4013      	ands	r3, r2
 800a528:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a52c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a530:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a534:	f04f 3aff 	mov.w	sl, #4294967295
 800a538:	e7d5      	b.n	800a4e6 <_strtod_l+0x8de>
 800a53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a53c:	ea13 0f0a 	tst.w	r3, sl
 800a540:	e7e0      	b.n	800a504 <_strtod_l+0x8fc>
 800a542:	f7ff fb45 	bl	8009bd0 <sulp>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	ec51 0b18 	vmov	r0, r1, d8
 800a54e:	f7f5 feb3 	bl	80002b8 <__aeabi_dsub>
 800a552:	2200      	movs	r2, #0
 800a554:	2300      	movs	r3, #0
 800a556:	4682      	mov	sl, r0
 800a558:	468b      	mov	fp, r1
 800a55a:	f7f6 facd 	bl	8000af8 <__aeabi_dcmpeq>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d0c1      	beq.n	800a4e6 <_strtod_l+0x8de>
 800a562:	e611      	b.n	800a188 <_strtod_l+0x580>
 800a564:	fffffc02 	.word	0xfffffc02
 800a568:	7ff00000 	.word	0x7ff00000
 800a56c:	39500000 	.word	0x39500000
 800a570:	000fffff 	.word	0x000fffff
 800a574:	7fefffff 	.word	0x7fefffff
 800a578:	0800d630 	.word	0x0800d630
 800a57c:	4631      	mov	r1, r6
 800a57e:	4628      	mov	r0, r5
 800a580:	f002 f904 	bl	800c78c <__ratio>
 800a584:	ec59 8b10 	vmov	r8, r9, d0
 800a588:	ee10 0a10 	vmov	r0, s0
 800a58c:	2200      	movs	r2, #0
 800a58e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a592:	4649      	mov	r1, r9
 800a594:	f7f6 fac4 	bl	8000b20 <__aeabi_dcmple>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d07a      	beq.n	800a692 <_strtod_l+0xa8a>
 800a59c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d04a      	beq.n	800a638 <_strtod_l+0xa30>
 800a5a2:	4b95      	ldr	r3, [pc, #596]	; (800a7f8 <_strtod_l+0xbf0>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a5aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a7f8 <_strtod_l+0xbf0>
 800a5ae:	f04f 0800 	mov.w	r8, #0
 800a5b2:	4b92      	ldr	r3, [pc, #584]	; (800a7fc <_strtod_l+0xbf4>)
 800a5b4:	403b      	ands	r3, r7
 800a5b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a5b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5ba:	4b91      	ldr	r3, [pc, #580]	; (800a800 <_strtod_l+0xbf8>)
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	f040 80b0 	bne.w	800a722 <_strtod_l+0xb1a>
 800a5c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a5ca:	ec4b ab10 	vmov	d0, sl, fp
 800a5ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a5d2:	f002 f803 	bl	800c5dc <__ulp>
 800a5d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5da:	ec53 2b10 	vmov	r2, r3, d0
 800a5de:	f7f6 f823 	bl	8000628 <__aeabi_dmul>
 800a5e2:	4652      	mov	r2, sl
 800a5e4:	465b      	mov	r3, fp
 800a5e6:	f7f5 fe69 	bl	80002bc <__adddf3>
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4983      	ldr	r1, [pc, #524]	; (800a7fc <_strtod_l+0xbf4>)
 800a5ee:	4a85      	ldr	r2, [pc, #532]	; (800a804 <_strtod_l+0xbfc>)
 800a5f0:	4019      	ands	r1, r3
 800a5f2:	4291      	cmp	r1, r2
 800a5f4:	4682      	mov	sl, r0
 800a5f6:	d960      	bls.n	800a6ba <_strtod_l+0xab2>
 800a5f8:	ee18 3a90 	vmov	r3, s17
 800a5fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a600:	4293      	cmp	r3, r2
 800a602:	d104      	bne.n	800a60e <_strtod_l+0xa06>
 800a604:	ee18 3a10 	vmov	r3, s16
 800a608:	3301      	adds	r3, #1
 800a60a:	f43f ad45 	beq.w	800a098 <_strtod_l+0x490>
 800a60e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a810 <_strtod_l+0xc08>
 800a612:	f04f 3aff 	mov.w	sl, #4294967295
 800a616:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a618:	4620      	mov	r0, r4
 800a61a:	f001 fcad 	bl	800bf78 <_Bfree>
 800a61e:	9905      	ldr	r1, [sp, #20]
 800a620:	4620      	mov	r0, r4
 800a622:	f001 fca9 	bl	800bf78 <_Bfree>
 800a626:	4631      	mov	r1, r6
 800a628:	4620      	mov	r0, r4
 800a62a:	f001 fca5 	bl	800bf78 <_Bfree>
 800a62e:	4629      	mov	r1, r5
 800a630:	4620      	mov	r0, r4
 800a632:	f001 fca1 	bl	800bf78 <_Bfree>
 800a636:	e61a      	b.n	800a26e <_strtod_l+0x666>
 800a638:	f1ba 0f00 	cmp.w	sl, #0
 800a63c:	d11b      	bne.n	800a676 <_strtod_l+0xa6e>
 800a63e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a642:	b9f3      	cbnz	r3, 800a682 <_strtod_l+0xa7a>
 800a644:	4b6c      	ldr	r3, [pc, #432]	; (800a7f8 <_strtod_l+0xbf0>)
 800a646:	2200      	movs	r2, #0
 800a648:	4640      	mov	r0, r8
 800a64a:	4649      	mov	r1, r9
 800a64c:	f7f6 fa5e 	bl	8000b0c <__aeabi_dcmplt>
 800a650:	b9d0      	cbnz	r0, 800a688 <_strtod_l+0xa80>
 800a652:	4640      	mov	r0, r8
 800a654:	4649      	mov	r1, r9
 800a656:	4b6c      	ldr	r3, [pc, #432]	; (800a808 <_strtod_l+0xc00>)
 800a658:	2200      	movs	r2, #0
 800a65a:	f7f5 ffe5 	bl	8000628 <__aeabi_dmul>
 800a65e:	4680      	mov	r8, r0
 800a660:	4689      	mov	r9, r1
 800a662:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a666:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a66a:	9315      	str	r3, [sp, #84]	; 0x54
 800a66c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a670:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a674:	e79d      	b.n	800a5b2 <_strtod_l+0x9aa>
 800a676:	f1ba 0f01 	cmp.w	sl, #1
 800a67a:	d102      	bne.n	800a682 <_strtod_l+0xa7a>
 800a67c:	2f00      	cmp	r7, #0
 800a67e:	f43f ad83 	beq.w	800a188 <_strtod_l+0x580>
 800a682:	4b62      	ldr	r3, [pc, #392]	; (800a80c <_strtod_l+0xc04>)
 800a684:	2200      	movs	r2, #0
 800a686:	e78e      	b.n	800a5a6 <_strtod_l+0x99e>
 800a688:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a808 <_strtod_l+0xc00>
 800a68c:	f04f 0800 	mov.w	r8, #0
 800a690:	e7e7      	b.n	800a662 <_strtod_l+0xa5a>
 800a692:	4b5d      	ldr	r3, [pc, #372]	; (800a808 <_strtod_l+0xc00>)
 800a694:	4640      	mov	r0, r8
 800a696:	4649      	mov	r1, r9
 800a698:	2200      	movs	r2, #0
 800a69a:	f7f5 ffc5 	bl	8000628 <__aeabi_dmul>
 800a69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6a0:	4680      	mov	r8, r0
 800a6a2:	4689      	mov	r9, r1
 800a6a4:	b933      	cbnz	r3, 800a6b4 <_strtod_l+0xaac>
 800a6a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6aa:	900e      	str	r0, [sp, #56]	; 0x38
 800a6ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a6b2:	e7dd      	b.n	800a670 <_strtod_l+0xa68>
 800a6b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a6b8:	e7f9      	b.n	800a6ae <_strtod_l+0xaa6>
 800a6ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a6be:	9b04      	ldr	r3, [sp, #16]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1a8      	bne.n	800a616 <_strtod_l+0xa0e>
 800a6c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a6c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6ca:	0d1b      	lsrs	r3, r3, #20
 800a6cc:	051b      	lsls	r3, r3, #20
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d1a1      	bne.n	800a616 <_strtod_l+0xa0e>
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	f7f6 fab7 	bl	8000c48 <__aeabi_d2lz>
 800a6da:	f7f5 ff77 	bl	80005cc <__aeabi_l2d>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	f7f5 fde7 	bl	80002b8 <__aeabi_dsub>
 800a6ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6f0:	ea43 030a 	orr.w	r3, r3, sl
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	4680      	mov	r8, r0
 800a6f8:	4689      	mov	r9, r1
 800a6fa:	d055      	beq.n	800a7a8 <_strtod_l+0xba0>
 800a6fc:	a336      	add	r3, pc, #216	; (adr r3, 800a7d8 <_strtod_l+0xbd0>)
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	f7f6 fa03 	bl	8000b0c <__aeabi_dcmplt>
 800a706:	2800      	cmp	r0, #0
 800a708:	f47f acd0 	bne.w	800a0ac <_strtod_l+0x4a4>
 800a70c:	a334      	add	r3, pc, #208	; (adr r3, 800a7e0 <_strtod_l+0xbd8>)
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	4640      	mov	r0, r8
 800a714:	4649      	mov	r1, r9
 800a716:	f7f6 fa17 	bl	8000b48 <__aeabi_dcmpgt>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f43f af7b 	beq.w	800a616 <_strtod_l+0xa0e>
 800a720:	e4c4      	b.n	800a0ac <_strtod_l+0x4a4>
 800a722:	9b04      	ldr	r3, [sp, #16]
 800a724:	b333      	cbz	r3, 800a774 <_strtod_l+0xb6c>
 800a726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a728:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a72c:	d822      	bhi.n	800a774 <_strtod_l+0xb6c>
 800a72e:	a32e      	add	r3, pc, #184	; (adr r3, 800a7e8 <_strtod_l+0xbe0>)
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	f7f6 f9f2 	bl	8000b20 <__aeabi_dcmple>
 800a73c:	b1a0      	cbz	r0, 800a768 <_strtod_l+0xb60>
 800a73e:	4649      	mov	r1, r9
 800a740:	4640      	mov	r0, r8
 800a742:	f7f6 fa49 	bl	8000bd8 <__aeabi_d2uiz>
 800a746:	2801      	cmp	r0, #1
 800a748:	bf38      	it	cc
 800a74a:	2001      	movcc	r0, #1
 800a74c:	f7f5 fef2 	bl	8000534 <__aeabi_ui2d>
 800a750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a752:	4680      	mov	r8, r0
 800a754:	4689      	mov	r9, r1
 800a756:	bb23      	cbnz	r3, 800a7a2 <_strtod_l+0xb9a>
 800a758:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a75c:	9010      	str	r0, [sp, #64]	; 0x40
 800a75e:	9311      	str	r3, [sp, #68]	; 0x44
 800a760:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a764:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a76c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a770:	1a9b      	subs	r3, r3, r2
 800a772:	9309      	str	r3, [sp, #36]	; 0x24
 800a774:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a778:	eeb0 0a48 	vmov.f32	s0, s16
 800a77c:	eef0 0a68 	vmov.f32	s1, s17
 800a780:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a784:	f001 ff2a 	bl	800c5dc <__ulp>
 800a788:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a78c:	ec53 2b10 	vmov	r2, r3, d0
 800a790:	f7f5 ff4a 	bl	8000628 <__aeabi_dmul>
 800a794:	ec53 2b18 	vmov	r2, r3, d8
 800a798:	f7f5 fd90 	bl	80002bc <__adddf3>
 800a79c:	4682      	mov	sl, r0
 800a79e:	468b      	mov	fp, r1
 800a7a0:	e78d      	b.n	800a6be <_strtod_l+0xab6>
 800a7a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a7a6:	e7db      	b.n	800a760 <_strtod_l+0xb58>
 800a7a8:	a311      	add	r3, pc, #68	; (adr r3, 800a7f0 <_strtod_l+0xbe8>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	f7f6 f9ad 	bl	8000b0c <__aeabi_dcmplt>
 800a7b2:	e7b2      	b.n	800a71a <_strtod_l+0xb12>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	f7ff ba6b 	b.w	8009c98 <_strtod_l+0x90>
 800a7c2:	2a65      	cmp	r2, #101	; 0x65
 800a7c4:	f43f ab5f 	beq.w	8009e86 <_strtod_l+0x27e>
 800a7c8:	2a45      	cmp	r2, #69	; 0x45
 800a7ca:	f43f ab5c 	beq.w	8009e86 <_strtod_l+0x27e>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	f7ff bb94 	b.w	8009efc <_strtod_l+0x2f4>
 800a7d4:	f3af 8000 	nop.w
 800a7d8:	94a03595 	.word	0x94a03595
 800a7dc:	3fdfffff 	.word	0x3fdfffff
 800a7e0:	35afe535 	.word	0x35afe535
 800a7e4:	3fe00000 	.word	0x3fe00000
 800a7e8:	ffc00000 	.word	0xffc00000
 800a7ec:	41dfffff 	.word	0x41dfffff
 800a7f0:	94a03595 	.word	0x94a03595
 800a7f4:	3fcfffff 	.word	0x3fcfffff
 800a7f8:	3ff00000 	.word	0x3ff00000
 800a7fc:	7ff00000 	.word	0x7ff00000
 800a800:	7fe00000 	.word	0x7fe00000
 800a804:	7c9fffff 	.word	0x7c9fffff
 800a808:	3fe00000 	.word	0x3fe00000
 800a80c:	bff00000 	.word	0xbff00000
 800a810:	7fefffff 	.word	0x7fefffff

0800a814 <strtod>:
 800a814:	460a      	mov	r2, r1
 800a816:	4601      	mov	r1, r0
 800a818:	4802      	ldr	r0, [pc, #8]	; (800a824 <strtod+0x10>)
 800a81a:	4b03      	ldr	r3, [pc, #12]	; (800a828 <strtod+0x14>)
 800a81c:	6800      	ldr	r0, [r0, #0]
 800a81e:	f7ff b9f3 	b.w	8009c08 <_strtod_l>
 800a822:	bf00      	nop
 800a824:	200002fc 	.word	0x200002fc
 800a828:	20000364 	.word	0x20000364

0800a82c <__swbuf_r>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	460e      	mov	r6, r1
 800a830:	4614      	mov	r4, r2
 800a832:	4605      	mov	r5, r0
 800a834:	b118      	cbz	r0, 800a83e <__swbuf_r+0x12>
 800a836:	6983      	ldr	r3, [r0, #24]
 800a838:	b90b      	cbnz	r3, 800a83e <__swbuf_r+0x12>
 800a83a:	f7fe fa69 	bl	8008d10 <__sinit>
 800a83e:	4b21      	ldr	r3, [pc, #132]	; (800a8c4 <__swbuf_r+0x98>)
 800a840:	429c      	cmp	r4, r3
 800a842:	d12b      	bne.n	800a89c <__swbuf_r+0x70>
 800a844:	686c      	ldr	r4, [r5, #4]
 800a846:	69a3      	ldr	r3, [r4, #24]
 800a848:	60a3      	str	r3, [r4, #8]
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	071a      	lsls	r2, r3, #28
 800a84e:	d52f      	bpl.n	800a8b0 <__swbuf_r+0x84>
 800a850:	6923      	ldr	r3, [r4, #16]
 800a852:	b36b      	cbz	r3, 800a8b0 <__swbuf_r+0x84>
 800a854:	6923      	ldr	r3, [r4, #16]
 800a856:	6820      	ldr	r0, [r4, #0]
 800a858:	1ac0      	subs	r0, r0, r3
 800a85a:	6963      	ldr	r3, [r4, #20]
 800a85c:	b2f6      	uxtb	r6, r6
 800a85e:	4283      	cmp	r3, r0
 800a860:	4637      	mov	r7, r6
 800a862:	dc04      	bgt.n	800a86e <__swbuf_r+0x42>
 800a864:	4621      	mov	r1, r4
 800a866:	4628      	mov	r0, r5
 800a868:	f7fe f9ac 	bl	8008bc4 <_fflush_r>
 800a86c:	bb30      	cbnz	r0, 800a8bc <__swbuf_r+0x90>
 800a86e:	68a3      	ldr	r3, [r4, #8]
 800a870:	3b01      	subs	r3, #1
 800a872:	60a3      	str	r3, [r4, #8]
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	6022      	str	r2, [r4, #0]
 800a87a:	701e      	strb	r6, [r3, #0]
 800a87c:	6963      	ldr	r3, [r4, #20]
 800a87e:	3001      	adds	r0, #1
 800a880:	4283      	cmp	r3, r0
 800a882:	d004      	beq.n	800a88e <__swbuf_r+0x62>
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	07db      	lsls	r3, r3, #31
 800a888:	d506      	bpl.n	800a898 <__swbuf_r+0x6c>
 800a88a:	2e0a      	cmp	r6, #10
 800a88c:	d104      	bne.n	800a898 <__swbuf_r+0x6c>
 800a88e:	4621      	mov	r1, r4
 800a890:	4628      	mov	r0, r5
 800a892:	f7fe f997 	bl	8008bc4 <_fflush_r>
 800a896:	b988      	cbnz	r0, 800a8bc <__swbuf_r+0x90>
 800a898:	4638      	mov	r0, r7
 800a89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a89c:	4b0a      	ldr	r3, [pc, #40]	; (800a8c8 <__swbuf_r+0x9c>)
 800a89e:	429c      	cmp	r4, r3
 800a8a0:	d101      	bne.n	800a8a6 <__swbuf_r+0x7a>
 800a8a2:	68ac      	ldr	r4, [r5, #8]
 800a8a4:	e7cf      	b.n	800a846 <__swbuf_r+0x1a>
 800a8a6:	4b09      	ldr	r3, [pc, #36]	; (800a8cc <__swbuf_r+0xa0>)
 800a8a8:	429c      	cmp	r4, r3
 800a8aa:	bf08      	it	eq
 800a8ac:	68ec      	ldreq	r4, [r5, #12]
 800a8ae:	e7ca      	b.n	800a846 <__swbuf_r+0x1a>
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f000 f81e 	bl	800a8f4 <__swsetup_r>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d0cb      	beq.n	800a854 <__swbuf_r+0x28>
 800a8bc:	f04f 37ff 	mov.w	r7, #4294967295
 800a8c0:	e7ea      	b.n	800a898 <__swbuf_r+0x6c>
 800a8c2:	bf00      	nop
 800a8c4:	0800d590 	.word	0x0800d590
 800a8c8:	0800d5b0 	.word	0x0800d5b0
 800a8cc:	0800d570 	.word	0x0800d570

0800a8d0 <_write_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d07      	ldr	r5, [pc, #28]	; (800a8f0 <_write_r+0x20>)
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	4608      	mov	r0, r1
 800a8d8:	4611      	mov	r1, r2
 800a8da:	2200      	movs	r2, #0
 800a8dc:	602a      	str	r2, [r5, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f7f9 f832 	bl	8003948 <_write>
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	d102      	bne.n	800a8ee <_write_r+0x1e>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	b103      	cbz	r3, 800a8ee <_write_r+0x1e>
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	20005ec0 	.word	0x20005ec0

0800a8f4 <__swsetup_r>:
 800a8f4:	4b32      	ldr	r3, [pc, #200]	; (800a9c0 <__swsetup_r+0xcc>)
 800a8f6:	b570      	push	{r4, r5, r6, lr}
 800a8f8:	681d      	ldr	r5, [r3, #0]
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	b125      	cbz	r5, 800a90a <__swsetup_r+0x16>
 800a900:	69ab      	ldr	r3, [r5, #24]
 800a902:	b913      	cbnz	r3, 800a90a <__swsetup_r+0x16>
 800a904:	4628      	mov	r0, r5
 800a906:	f7fe fa03 	bl	8008d10 <__sinit>
 800a90a:	4b2e      	ldr	r3, [pc, #184]	; (800a9c4 <__swsetup_r+0xd0>)
 800a90c:	429c      	cmp	r4, r3
 800a90e:	d10f      	bne.n	800a930 <__swsetup_r+0x3c>
 800a910:	686c      	ldr	r4, [r5, #4]
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a918:	0719      	lsls	r1, r3, #28
 800a91a:	d42c      	bmi.n	800a976 <__swsetup_r+0x82>
 800a91c:	06dd      	lsls	r5, r3, #27
 800a91e:	d411      	bmi.n	800a944 <__swsetup_r+0x50>
 800a920:	2309      	movs	r3, #9
 800a922:	6033      	str	r3, [r6, #0]
 800a924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a928:	81a3      	strh	r3, [r4, #12]
 800a92a:	f04f 30ff 	mov.w	r0, #4294967295
 800a92e:	e03e      	b.n	800a9ae <__swsetup_r+0xba>
 800a930:	4b25      	ldr	r3, [pc, #148]	; (800a9c8 <__swsetup_r+0xd4>)
 800a932:	429c      	cmp	r4, r3
 800a934:	d101      	bne.n	800a93a <__swsetup_r+0x46>
 800a936:	68ac      	ldr	r4, [r5, #8]
 800a938:	e7eb      	b.n	800a912 <__swsetup_r+0x1e>
 800a93a:	4b24      	ldr	r3, [pc, #144]	; (800a9cc <__swsetup_r+0xd8>)
 800a93c:	429c      	cmp	r4, r3
 800a93e:	bf08      	it	eq
 800a940:	68ec      	ldreq	r4, [r5, #12]
 800a942:	e7e6      	b.n	800a912 <__swsetup_r+0x1e>
 800a944:	0758      	lsls	r0, r3, #29
 800a946:	d512      	bpl.n	800a96e <__swsetup_r+0x7a>
 800a948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a94a:	b141      	cbz	r1, 800a95e <__swsetup_r+0x6a>
 800a94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a950:	4299      	cmp	r1, r3
 800a952:	d002      	beq.n	800a95a <__swsetup_r+0x66>
 800a954:	4630      	mov	r0, r6
 800a956:	f7fe fac7 	bl	8008ee8 <_free_r>
 800a95a:	2300      	movs	r3, #0
 800a95c:	6363      	str	r3, [r4, #52]	; 0x34
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	2300      	movs	r3, #0
 800a968:	6063      	str	r3, [r4, #4]
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	f043 0308 	orr.w	r3, r3, #8
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	6923      	ldr	r3, [r4, #16]
 800a978:	b94b      	cbnz	r3, 800a98e <__swsetup_r+0x9a>
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a984:	d003      	beq.n	800a98e <__swsetup_r+0x9a>
 800a986:	4621      	mov	r1, r4
 800a988:	4630      	mov	r0, r6
 800a98a:	f001 fa57 	bl	800be3c <__smakebuf_r>
 800a98e:	89a0      	ldrh	r0, [r4, #12]
 800a990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a994:	f010 0301 	ands.w	r3, r0, #1
 800a998:	d00a      	beq.n	800a9b0 <__swsetup_r+0xbc>
 800a99a:	2300      	movs	r3, #0
 800a99c:	60a3      	str	r3, [r4, #8]
 800a99e:	6963      	ldr	r3, [r4, #20]
 800a9a0:	425b      	negs	r3, r3
 800a9a2:	61a3      	str	r3, [r4, #24]
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	b943      	cbnz	r3, 800a9ba <__swsetup_r+0xc6>
 800a9a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9ac:	d1ba      	bne.n	800a924 <__swsetup_r+0x30>
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	0781      	lsls	r1, r0, #30
 800a9b2:	bf58      	it	pl
 800a9b4:	6963      	ldrpl	r3, [r4, #20]
 800a9b6:	60a3      	str	r3, [r4, #8]
 800a9b8:	e7f4      	b.n	800a9a4 <__swsetup_r+0xb0>
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e7f7      	b.n	800a9ae <__swsetup_r+0xba>
 800a9be:	bf00      	nop
 800a9c0:	200002fc 	.word	0x200002fc
 800a9c4:	0800d590 	.word	0x0800d590
 800a9c8:	0800d5b0 	.word	0x0800d5b0
 800a9cc:	0800d570 	.word	0x0800d570

0800a9d0 <_close_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4d06      	ldr	r5, [pc, #24]	; (800a9ec <_close_r+0x1c>)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	4608      	mov	r0, r1
 800a9da:	602b      	str	r3, [r5, #0]
 800a9dc:	f7f8 f981 	bl	8002ce2 <_close>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	d102      	bne.n	800a9ea <_close_r+0x1a>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	b103      	cbz	r3, 800a9ea <_close_r+0x1a>
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	20005ec0 	.word	0x20005ec0

0800a9f0 <quorem>:
 800a9f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	6903      	ldr	r3, [r0, #16]
 800a9f6:	690c      	ldr	r4, [r1, #16]
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	f2c0 8081 	blt.w	800ab02 <quorem+0x112>
 800aa00:	3c01      	subs	r4, #1
 800aa02:	f101 0814 	add.w	r8, r1, #20
 800aa06:	f100 0514 	add.w	r5, r0, #20
 800aa0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa0e:	9301      	str	r3, [sp, #4]
 800aa10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa24:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa28:	d331      	bcc.n	800aa8e <quorem+0x9e>
 800aa2a:	f04f 0e00 	mov.w	lr, #0
 800aa2e:	4640      	mov	r0, r8
 800aa30:	46ac      	mov	ip, r5
 800aa32:	46f2      	mov	sl, lr
 800aa34:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa38:	b293      	uxth	r3, r2
 800aa3a:	fb06 e303 	mla	r3, r6, r3, lr
 800aa3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	ebaa 0303 	sub.w	r3, sl, r3
 800aa48:	f8dc a000 	ldr.w	sl, [ip]
 800aa4c:	0c12      	lsrs	r2, r2, #16
 800aa4e:	fa13 f38a 	uxtah	r3, r3, sl
 800aa52:	fb06 e202 	mla	r2, r6, r2, lr
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	9b00      	ldr	r3, [sp, #0]
 800aa5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa5e:	b292      	uxth	r2, r2
 800aa60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aa64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa68:	f8bd 3000 	ldrh.w	r3, [sp]
 800aa6c:	4581      	cmp	r9, r0
 800aa6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa72:	f84c 3b04 	str.w	r3, [ip], #4
 800aa76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aa7a:	d2db      	bcs.n	800aa34 <quorem+0x44>
 800aa7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800aa80:	b92b      	cbnz	r3, 800aa8e <quorem+0x9e>
 800aa82:	9b01      	ldr	r3, [sp, #4]
 800aa84:	3b04      	subs	r3, #4
 800aa86:	429d      	cmp	r5, r3
 800aa88:	461a      	mov	r2, r3
 800aa8a:	d32e      	bcc.n	800aaea <quorem+0xfa>
 800aa8c:	613c      	str	r4, [r7, #16]
 800aa8e:	4638      	mov	r0, r7
 800aa90:	f001 fcfe 	bl	800c490 <__mcmp>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	db24      	blt.n	800aae2 <quorem+0xf2>
 800aa98:	3601      	adds	r6, #1
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f04f 0c00 	mov.w	ip, #0
 800aaa0:	f858 2b04 	ldr.w	r2, [r8], #4
 800aaa4:	f8d0 e000 	ldr.w	lr, [r0]
 800aaa8:	b293      	uxth	r3, r2
 800aaaa:	ebac 0303 	sub.w	r3, ip, r3
 800aaae:	0c12      	lsrs	r2, r2, #16
 800aab0:	fa13 f38e 	uxtah	r3, r3, lr
 800aab4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aac2:	45c1      	cmp	r9, r8
 800aac4:	f840 3b04 	str.w	r3, [r0], #4
 800aac8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aacc:	d2e8      	bcs.n	800aaa0 <quorem+0xb0>
 800aace:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aad6:	b922      	cbnz	r2, 800aae2 <quorem+0xf2>
 800aad8:	3b04      	subs	r3, #4
 800aada:	429d      	cmp	r5, r3
 800aadc:	461a      	mov	r2, r3
 800aade:	d30a      	bcc.n	800aaf6 <quorem+0x106>
 800aae0:	613c      	str	r4, [r7, #16]
 800aae2:	4630      	mov	r0, r6
 800aae4:	b003      	add	sp, #12
 800aae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaea:	6812      	ldr	r2, [r2, #0]
 800aaec:	3b04      	subs	r3, #4
 800aaee:	2a00      	cmp	r2, #0
 800aaf0:	d1cc      	bne.n	800aa8c <quorem+0x9c>
 800aaf2:	3c01      	subs	r4, #1
 800aaf4:	e7c7      	b.n	800aa86 <quorem+0x96>
 800aaf6:	6812      	ldr	r2, [r2, #0]
 800aaf8:	3b04      	subs	r3, #4
 800aafa:	2a00      	cmp	r2, #0
 800aafc:	d1f0      	bne.n	800aae0 <quorem+0xf0>
 800aafe:	3c01      	subs	r4, #1
 800ab00:	e7eb      	b.n	800aada <quorem+0xea>
 800ab02:	2000      	movs	r0, #0
 800ab04:	e7ee      	b.n	800aae4 <quorem+0xf4>
	...

0800ab08 <_dtoa_r>:
 800ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0c:	ed2d 8b04 	vpush	{d8-d9}
 800ab10:	ec57 6b10 	vmov	r6, r7, d0
 800ab14:	b093      	sub	sp, #76	; 0x4c
 800ab16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ab1c:	9106      	str	r1, [sp, #24]
 800ab1e:	ee10 aa10 	vmov	sl, s0
 800ab22:	4604      	mov	r4, r0
 800ab24:	9209      	str	r2, [sp, #36]	; 0x24
 800ab26:	930c      	str	r3, [sp, #48]	; 0x30
 800ab28:	46bb      	mov	fp, r7
 800ab2a:	b975      	cbnz	r5, 800ab4a <_dtoa_r+0x42>
 800ab2c:	2010      	movs	r0, #16
 800ab2e:	f7fe f9b5 	bl	8008e9c <malloc>
 800ab32:	4602      	mov	r2, r0
 800ab34:	6260      	str	r0, [r4, #36]	; 0x24
 800ab36:	b920      	cbnz	r0, 800ab42 <_dtoa_r+0x3a>
 800ab38:	4ba7      	ldr	r3, [pc, #668]	; (800add8 <_dtoa_r+0x2d0>)
 800ab3a:	21ea      	movs	r1, #234	; 0xea
 800ab3c:	48a7      	ldr	r0, [pc, #668]	; (800addc <_dtoa_r+0x2d4>)
 800ab3e:	f002 f9c7 	bl	800ced0 <__assert_func>
 800ab42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab46:	6005      	str	r5, [r0, #0]
 800ab48:	60c5      	str	r5, [r0, #12]
 800ab4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab4c:	6819      	ldr	r1, [r3, #0]
 800ab4e:	b151      	cbz	r1, 800ab66 <_dtoa_r+0x5e>
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	604a      	str	r2, [r1, #4]
 800ab54:	2301      	movs	r3, #1
 800ab56:	4093      	lsls	r3, r2
 800ab58:	608b      	str	r3, [r1, #8]
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f001 fa0c 	bl	800bf78 <_Bfree>
 800ab60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	1e3b      	subs	r3, r7, #0
 800ab68:	bfaa      	itet	ge
 800ab6a:	2300      	movge	r3, #0
 800ab6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ab70:	f8c8 3000 	strge.w	r3, [r8]
 800ab74:	4b9a      	ldr	r3, [pc, #616]	; (800ade0 <_dtoa_r+0x2d8>)
 800ab76:	bfbc      	itt	lt
 800ab78:	2201      	movlt	r2, #1
 800ab7a:	f8c8 2000 	strlt.w	r2, [r8]
 800ab7e:	ea33 030b 	bics.w	r3, r3, fp
 800ab82:	d11b      	bne.n	800abbc <_dtoa_r+0xb4>
 800ab84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab86:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab90:	4333      	orrs	r3, r6
 800ab92:	f000 8592 	beq.w	800b6ba <_dtoa_r+0xbb2>
 800ab96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab98:	b963      	cbnz	r3, 800abb4 <_dtoa_r+0xac>
 800ab9a:	4b92      	ldr	r3, [pc, #584]	; (800ade4 <_dtoa_r+0x2dc>)
 800ab9c:	e022      	b.n	800abe4 <_dtoa_r+0xdc>
 800ab9e:	4b92      	ldr	r3, [pc, #584]	; (800ade8 <_dtoa_r+0x2e0>)
 800aba0:	9301      	str	r3, [sp, #4]
 800aba2:	3308      	adds	r3, #8
 800aba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	9801      	ldr	r0, [sp, #4]
 800abaa:	b013      	add	sp, #76	; 0x4c
 800abac:	ecbd 8b04 	vpop	{d8-d9}
 800abb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb4:	4b8b      	ldr	r3, [pc, #556]	; (800ade4 <_dtoa_r+0x2dc>)
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	3303      	adds	r3, #3
 800abba:	e7f3      	b.n	800aba4 <_dtoa_r+0x9c>
 800abbc:	2200      	movs	r2, #0
 800abbe:	2300      	movs	r3, #0
 800abc0:	4650      	mov	r0, sl
 800abc2:	4659      	mov	r1, fp
 800abc4:	f7f5 ff98 	bl	8000af8 <__aeabi_dcmpeq>
 800abc8:	ec4b ab19 	vmov	d9, sl, fp
 800abcc:	4680      	mov	r8, r0
 800abce:	b158      	cbz	r0, 800abe8 <_dtoa_r+0xe0>
 800abd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abd2:	2301      	movs	r3, #1
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 856b 	beq.w	800b6b4 <_dtoa_r+0xbac>
 800abde:	4883      	ldr	r0, [pc, #524]	; (800adec <_dtoa_r+0x2e4>)
 800abe0:	6018      	str	r0, [r3, #0]
 800abe2:	1e43      	subs	r3, r0, #1
 800abe4:	9301      	str	r3, [sp, #4]
 800abe6:	e7df      	b.n	800aba8 <_dtoa_r+0xa0>
 800abe8:	ec4b ab10 	vmov	d0, sl, fp
 800abec:	aa10      	add	r2, sp, #64	; 0x40
 800abee:	a911      	add	r1, sp, #68	; 0x44
 800abf0:	4620      	mov	r0, r4
 800abf2:	f001 fd6f 	bl	800c6d4 <__d2b>
 800abf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800abfa:	ee08 0a10 	vmov	s16, r0
 800abfe:	2d00      	cmp	r5, #0
 800ac00:	f000 8084 	beq.w	800ad0c <_dtoa_r+0x204>
 800ac04:	ee19 3a90 	vmov	r3, s19
 800ac08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ac10:	4656      	mov	r6, sl
 800ac12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ac16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ac1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ac1e:	4b74      	ldr	r3, [pc, #464]	; (800adf0 <_dtoa_r+0x2e8>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	4630      	mov	r0, r6
 800ac24:	4639      	mov	r1, r7
 800ac26:	f7f5 fb47 	bl	80002b8 <__aeabi_dsub>
 800ac2a:	a365      	add	r3, pc, #404	; (adr r3, 800adc0 <_dtoa_r+0x2b8>)
 800ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac30:	f7f5 fcfa 	bl	8000628 <__aeabi_dmul>
 800ac34:	a364      	add	r3, pc, #400	; (adr r3, 800adc8 <_dtoa_r+0x2c0>)
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f7f5 fb3f 	bl	80002bc <__adddf3>
 800ac3e:	4606      	mov	r6, r0
 800ac40:	4628      	mov	r0, r5
 800ac42:	460f      	mov	r7, r1
 800ac44:	f7f5 fc86 	bl	8000554 <__aeabi_i2d>
 800ac48:	a361      	add	r3, pc, #388	; (adr r3, 800add0 <_dtoa_r+0x2c8>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f7f5 fceb 	bl	8000628 <__aeabi_dmul>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	4630      	mov	r0, r6
 800ac58:	4639      	mov	r1, r7
 800ac5a:	f7f5 fb2f 	bl	80002bc <__adddf3>
 800ac5e:	4606      	mov	r6, r0
 800ac60:	460f      	mov	r7, r1
 800ac62:	f7f5 ff91 	bl	8000b88 <__aeabi_d2iz>
 800ac66:	2200      	movs	r2, #0
 800ac68:	9000      	str	r0, [sp, #0]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4639      	mov	r1, r7
 800ac70:	f7f5 ff4c 	bl	8000b0c <__aeabi_dcmplt>
 800ac74:	b150      	cbz	r0, 800ac8c <_dtoa_r+0x184>
 800ac76:	9800      	ldr	r0, [sp, #0]
 800ac78:	f7f5 fc6c 	bl	8000554 <__aeabi_i2d>
 800ac7c:	4632      	mov	r2, r6
 800ac7e:	463b      	mov	r3, r7
 800ac80:	f7f5 ff3a 	bl	8000af8 <__aeabi_dcmpeq>
 800ac84:	b910      	cbnz	r0, 800ac8c <_dtoa_r+0x184>
 800ac86:	9b00      	ldr	r3, [sp, #0]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	9b00      	ldr	r3, [sp, #0]
 800ac8e:	2b16      	cmp	r3, #22
 800ac90:	d85a      	bhi.n	800ad48 <_dtoa_r+0x240>
 800ac92:	9a00      	ldr	r2, [sp, #0]
 800ac94:	4b57      	ldr	r3, [pc, #348]	; (800adf4 <_dtoa_r+0x2ec>)
 800ac96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	ec51 0b19 	vmov	r0, r1, d9
 800aca2:	f7f5 ff33 	bl	8000b0c <__aeabi_dcmplt>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d050      	beq.n	800ad4c <_dtoa_r+0x244>
 800acaa:	9b00      	ldr	r3, [sp, #0]
 800acac:	3b01      	subs	r3, #1
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	2300      	movs	r3, #0
 800acb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800acb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acb6:	1b5d      	subs	r5, r3, r5
 800acb8:	1e6b      	subs	r3, r5, #1
 800acba:	9305      	str	r3, [sp, #20]
 800acbc:	bf45      	ittet	mi
 800acbe:	f1c5 0301 	rsbmi	r3, r5, #1
 800acc2:	9304      	strmi	r3, [sp, #16]
 800acc4:	2300      	movpl	r3, #0
 800acc6:	2300      	movmi	r3, #0
 800acc8:	bf4c      	ite	mi
 800acca:	9305      	strmi	r3, [sp, #20]
 800accc:	9304      	strpl	r3, [sp, #16]
 800acce:	9b00      	ldr	r3, [sp, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	db3d      	blt.n	800ad50 <_dtoa_r+0x248>
 800acd4:	9b05      	ldr	r3, [sp, #20]
 800acd6:	9a00      	ldr	r2, [sp, #0]
 800acd8:	920a      	str	r2, [sp, #40]	; 0x28
 800acda:	4413      	add	r3, r2
 800acdc:	9305      	str	r3, [sp, #20]
 800acde:	2300      	movs	r3, #0
 800ace0:	9307      	str	r3, [sp, #28]
 800ace2:	9b06      	ldr	r3, [sp, #24]
 800ace4:	2b09      	cmp	r3, #9
 800ace6:	f200 8089 	bhi.w	800adfc <_dtoa_r+0x2f4>
 800acea:	2b05      	cmp	r3, #5
 800acec:	bfc4      	itt	gt
 800acee:	3b04      	subgt	r3, #4
 800acf0:	9306      	strgt	r3, [sp, #24]
 800acf2:	9b06      	ldr	r3, [sp, #24]
 800acf4:	f1a3 0302 	sub.w	r3, r3, #2
 800acf8:	bfcc      	ite	gt
 800acfa:	2500      	movgt	r5, #0
 800acfc:	2501      	movle	r5, #1
 800acfe:	2b03      	cmp	r3, #3
 800ad00:	f200 8087 	bhi.w	800ae12 <_dtoa_r+0x30a>
 800ad04:	e8df f003 	tbb	[pc, r3]
 800ad08:	59383a2d 	.word	0x59383a2d
 800ad0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ad10:	441d      	add	r5, r3
 800ad12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ad16:	2b20      	cmp	r3, #32
 800ad18:	bfc1      	itttt	gt
 800ad1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ad22:	fa0b f303 	lslgt.w	r3, fp, r3
 800ad26:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ad2a:	bfda      	itte	le
 800ad2c:	f1c3 0320 	rsble	r3, r3, #32
 800ad30:	fa06 f003 	lslle.w	r0, r6, r3
 800ad34:	4318      	orrgt	r0, r3
 800ad36:	f7f5 fbfd 	bl	8000534 <__aeabi_ui2d>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ad42:	3d01      	subs	r5, #1
 800ad44:	930e      	str	r3, [sp, #56]	; 0x38
 800ad46:	e76a      	b.n	800ac1e <_dtoa_r+0x116>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e7b2      	b.n	800acb2 <_dtoa_r+0x1aa>
 800ad4c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ad4e:	e7b1      	b.n	800acb4 <_dtoa_r+0x1ac>
 800ad50:	9b04      	ldr	r3, [sp, #16]
 800ad52:	9a00      	ldr	r2, [sp, #0]
 800ad54:	1a9b      	subs	r3, r3, r2
 800ad56:	9304      	str	r3, [sp, #16]
 800ad58:	4253      	negs	r3, r2
 800ad5a:	9307      	str	r3, [sp, #28]
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad60:	e7bf      	b.n	800ace2 <_dtoa_r+0x1da>
 800ad62:	2300      	movs	r3, #0
 800ad64:	9308      	str	r3, [sp, #32]
 800ad66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dc55      	bgt.n	800ae18 <_dtoa_r+0x310>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad72:	461a      	mov	r2, r3
 800ad74:	9209      	str	r2, [sp, #36]	; 0x24
 800ad76:	e00c      	b.n	800ad92 <_dtoa_r+0x28a>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e7f3      	b.n	800ad64 <_dtoa_r+0x25c>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad80:	9308      	str	r3, [sp, #32]
 800ad82:	9b00      	ldr	r3, [sp, #0]
 800ad84:	4413      	add	r3, r2
 800ad86:	9302      	str	r3, [sp, #8]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	9303      	str	r3, [sp, #12]
 800ad8e:	bfb8      	it	lt
 800ad90:	2301      	movlt	r3, #1
 800ad92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ad94:	2200      	movs	r2, #0
 800ad96:	6042      	str	r2, [r0, #4]
 800ad98:	2204      	movs	r2, #4
 800ad9a:	f102 0614 	add.w	r6, r2, #20
 800ad9e:	429e      	cmp	r6, r3
 800ada0:	6841      	ldr	r1, [r0, #4]
 800ada2:	d93d      	bls.n	800ae20 <_dtoa_r+0x318>
 800ada4:	4620      	mov	r0, r4
 800ada6:	f001 f8a7 	bl	800bef8 <_Balloc>
 800adaa:	9001      	str	r0, [sp, #4]
 800adac:	2800      	cmp	r0, #0
 800adae:	d13b      	bne.n	800ae28 <_dtoa_r+0x320>
 800adb0:	4b11      	ldr	r3, [pc, #68]	; (800adf8 <_dtoa_r+0x2f0>)
 800adb2:	4602      	mov	r2, r0
 800adb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800adb8:	e6c0      	b.n	800ab3c <_dtoa_r+0x34>
 800adba:	2301      	movs	r3, #1
 800adbc:	e7df      	b.n	800ad7e <_dtoa_r+0x276>
 800adbe:	bf00      	nop
 800adc0:	636f4361 	.word	0x636f4361
 800adc4:	3fd287a7 	.word	0x3fd287a7
 800adc8:	8b60c8b3 	.word	0x8b60c8b3
 800adcc:	3fc68a28 	.word	0x3fc68a28
 800add0:	509f79fb 	.word	0x509f79fb
 800add4:	3fd34413 	.word	0x3fd34413
 800add8:	0800d665 	.word	0x0800d665
 800addc:	0800d67c 	.word	0x0800d67c
 800ade0:	7ff00000 	.word	0x7ff00000
 800ade4:	0800d661 	.word	0x0800d661
 800ade8:	0800d658 	.word	0x0800d658
 800adec:	0800d5e5 	.word	0x0800d5e5
 800adf0:	3ff80000 	.word	0x3ff80000
 800adf4:	0800d7e8 	.word	0x0800d7e8
 800adf8:	0800d6d7 	.word	0x0800d6d7
 800adfc:	2501      	movs	r5, #1
 800adfe:	2300      	movs	r3, #0
 800ae00:	9306      	str	r3, [sp, #24]
 800ae02:	9508      	str	r5, [sp, #32]
 800ae04:	f04f 33ff 	mov.w	r3, #4294967295
 800ae08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2312      	movs	r3, #18
 800ae10:	e7b0      	b.n	800ad74 <_dtoa_r+0x26c>
 800ae12:	2301      	movs	r3, #1
 800ae14:	9308      	str	r3, [sp, #32]
 800ae16:	e7f5      	b.n	800ae04 <_dtoa_r+0x2fc>
 800ae18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae1e:	e7b8      	b.n	800ad92 <_dtoa_r+0x28a>
 800ae20:	3101      	adds	r1, #1
 800ae22:	6041      	str	r1, [r0, #4]
 800ae24:	0052      	lsls	r2, r2, #1
 800ae26:	e7b8      	b.n	800ad9a <_dtoa_r+0x292>
 800ae28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae2a:	9a01      	ldr	r2, [sp, #4]
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	9b03      	ldr	r3, [sp, #12]
 800ae30:	2b0e      	cmp	r3, #14
 800ae32:	f200 809d 	bhi.w	800af70 <_dtoa_r+0x468>
 800ae36:	2d00      	cmp	r5, #0
 800ae38:	f000 809a 	beq.w	800af70 <_dtoa_r+0x468>
 800ae3c:	9b00      	ldr	r3, [sp, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	dd32      	ble.n	800aea8 <_dtoa_r+0x3a0>
 800ae42:	4ab7      	ldr	r2, [pc, #732]	; (800b120 <_dtoa_r+0x618>)
 800ae44:	f003 030f 	and.w	r3, r3, #15
 800ae48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae50:	9b00      	ldr	r3, [sp, #0]
 800ae52:	05d8      	lsls	r0, r3, #23
 800ae54:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ae58:	d516      	bpl.n	800ae88 <_dtoa_r+0x380>
 800ae5a:	4bb2      	ldr	r3, [pc, #712]	; (800b124 <_dtoa_r+0x61c>)
 800ae5c:	ec51 0b19 	vmov	r0, r1, d9
 800ae60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae64:	f7f5 fd0a 	bl	800087c <__aeabi_ddiv>
 800ae68:	f007 070f 	and.w	r7, r7, #15
 800ae6c:	4682      	mov	sl, r0
 800ae6e:	468b      	mov	fp, r1
 800ae70:	2503      	movs	r5, #3
 800ae72:	4eac      	ldr	r6, [pc, #688]	; (800b124 <_dtoa_r+0x61c>)
 800ae74:	b957      	cbnz	r7, 800ae8c <_dtoa_r+0x384>
 800ae76:	4642      	mov	r2, r8
 800ae78:	464b      	mov	r3, r9
 800ae7a:	4650      	mov	r0, sl
 800ae7c:	4659      	mov	r1, fp
 800ae7e:	f7f5 fcfd 	bl	800087c <__aeabi_ddiv>
 800ae82:	4682      	mov	sl, r0
 800ae84:	468b      	mov	fp, r1
 800ae86:	e028      	b.n	800aeda <_dtoa_r+0x3d2>
 800ae88:	2502      	movs	r5, #2
 800ae8a:	e7f2      	b.n	800ae72 <_dtoa_r+0x36a>
 800ae8c:	07f9      	lsls	r1, r7, #31
 800ae8e:	d508      	bpl.n	800aea2 <_dtoa_r+0x39a>
 800ae90:	4640      	mov	r0, r8
 800ae92:	4649      	mov	r1, r9
 800ae94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae98:	f7f5 fbc6 	bl	8000628 <__aeabi_dmul>
 800ae9c:	3501      	adds	r5, #1
 800ae9e:	4680      	mov	r8, r0
 800aea0:	4689      	mov	r9, r1
 800aea2:	107f      	asrs	r7, r7, #1
 800aea4:	3608      	adds	r6, #8
 800aea6:	e7e5      	b.n	800ae74 <_dtoa_r+0x36c>
 800aea8:	f000 809b 	beq.w	800afe2 <_dtoa_r+0x4da>
 800aeac:	9b00      	ldr	r3, [sp, #0]
 800aeae:	4f9d      	ldr	r7, [pc, #628]	; (800b124 <_dtoa_r+0x61c>)
 800aeb0:	425e      	negs	r6, r3
 800aeb2:	4b9b      	ldr	r3, [pc, #620]	; (800b120 <_dtoa_r+0x618>)
 800aeb4:	f006 020f 	and.w	r2, r6, #15
 800aeb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	ec51 0b19 	vmov	r0, r1, d9
 800aec4:	f7f5 fbb0 	bl	8000628 <__aeabi_dmul>
 800aec8:	1136      	asrs	r6, r6, #4
 800aeca:	4682      	mov	sl, r0
 800aecc:	468b      	mov	fp, r1
 800aece:	2300      	movs	r3, #0
 800aed0:	2502      	movs	r5, #2
 800aed2:	2e00      	cmp	r6, #0
 800aed4:	d17a      	bne.n	800afcc <_dtoa_r+0x4c4>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1d3      	bne.n	800ae82 <_dtoa_r+0x37a>
 800aeda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 8082 	beq.w	800afe6 <_dtoa_r+0x4de>
 800aee2:	4b91      	ldr	r3, [pc, #580]	; (800b128 <_dtoa_r+0x620>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	4650      	mov	r0, sl
 800aee8:	4659      	mov	r1, fp
 800aeea:	f7f5 fe0f 	bl	8000b0c <__aeabi_dcmplt>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d079      	beq.n	800afe6 <_dtoa_r+0x4de>
 800aef2:	9b03      	ldr	r3, [sp, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d076      	beq.n	800afe6 <_dtoa_r+0x4de>
 800aef8:	9b02      	ldr	r3, [sp, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	dd36      	ble.n	800af6c <_dtoa_r+0x464>
 800aefe:	9b00      	ldr	r3, [sp, #0]
 800af00:	4650      	mov	r0, sl
 800af02:	4659      	mov	r1, fp
 800af04:	1e5f      	subs	r7, r3, #1
 800af06:	2200      	movs	r2, #0
 800af08:	4b88      	ldr	r3, [pc, #544]	; (800b12c <_dtoa_r+0x624>)
 800af0a:	f7f5 fb8d 	bl	8000628 <__aeabi_dmul>
 800af0e:	9e02      	ldr	r6, [sp, #8]
 800af10:	4682      	mov	sl, r0
 800af12:	468b      	mov	fp, r1
 800af14:	3501      	adds	r5, #1
 800af16:	4628      	mov	r0, r5
 800af18:	f7f5 fb1c 	bl	8000554 <__aeabi_i2d>
 800af1c:	4652      	mov	r2, sl
 800af1e:	465b      	mov	r3, fp
 800af20:	f7f5 fb82 	bl	8000628 <__aeabi_dmul>
 800af24:	4b82      	ldr	r3, [pc, #520]	; (800b130 <_dtoa_r+0x628>)
 800af26:	2200      	movs	r2, #0
 800af28:	f7f5 f9c8 	bl	80002bc <__adddf3>
 800af2c:	46d0      	mov	r8, sl
 800af2e:	46d9      	mov	r9, fp
 800af30:	4682      	mov	sl, r0
 800af32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800af36:	2e00      	cmp	r6, #0
 800af38:	d158      	bne.n	800afec <_dtoa_r+0x4e4>
 800af3a:	4b7e      	ldr	r3, [pc, #504]	; (800b134 <_dtoa_r+0x62c>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	4640      	mov	r0, r8
 800af40:	4649      	mov	r1, r9
 800af42:	f7f5 f9b9 	bl	80002b8 <__aeabi_dsub>
 800af46:	4652      	mov	r2, sl
 800af48:	465b      	mov	r3, fp
 800af4a:	4680      	mov	r8, r0
 800af4c:	4689      	mov	r9, r1
 800af4e:	f7f5 fdfb 	bl	8000b48 <__aeabi_dcmpgt>
 800af52:	2800      	cmp	r0, #0
 800af54:	f040 8295 	bne.w	800b482 <_dtoa_r+0x97a>
 800af58:	4652      	mov	r2, sl
 800af5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af5e:	4640      	mov	r0, r8
 800af60:	4649      	mov	r1, r9
 800af62:	f7f5 fdd3 	bl	8000b0c <__aeabi_dcmplt>
 800af66:	2800      	cmp	r0, #0
 800af68:	f040 8289 	bne.w	800b47e <_dtoa_r+0x976>
 800af6c:	ec5b ab19 	vmov	sl, fp, d9
 800af70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af72:	2b00      	cmp	r3, #0
 800af74:	f2c0 8148 	blt.w	800b208 <_dtoa_r+0x700>
 800af78:	9a00      	ldr	r2, [sp, #0]
 800af7a:	2a0e      	cmp	r2, #14
 800af7c:	f300 8144 	bgt.w	800b208 <_dtoa_r+0x700>
 800af80:	4b67      	ldr	r3, [pc, #412]	; (800b120 <_dtoa_r+0x618>)
 800af82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af86:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f280 80d5 	bge.w	800b13c <_dtoa_r+0x634>
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f300 80d1 	bgt.w	800b13c <_dtoa_r+0x634>
 800af9a:	f040 826f 	bne.w	800b47c <_dtoa_r+0x974>
 800af9e:	4b65      	ldr	r3, [pc, #404]	; (800b134 <_dtoa_r+0x62c>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	4640      	mov	r0, r8
 800afa4:	4649      	mov	r1, r9
 800afa6:	f7f5 fb3f 	bl	8000628 <__aeabi_dmul>
 800afaa:	4652      	mov	r2, sl
 800afac:	465b      	mov	r3, fp
 800afae:	f7f5 fdc1 	bl	8000b34 <__aeabi_dcmpge>
 800afb2:	9e03      	ldr	r6, [sp, #12]
 800afb4:	4637      	mov	r7, r6
 800afb6:	2800      	cmp	r0, #0
 800afb8:	f040 8245 	bne.w	800b446 <_dtoa_r+0x93e>
 800afbc:	9d01      	ldr	r5, [sp, #4]
 800afbe:	2331      	movs	r3, #49	; 0x31
 800afc0:	f805 3b01 	strb.w	r3, [r5], #1
 800afc4:	9b00      	ldr	r3, [sp, #0]
 800afc6:	3301      	adds	r3, #1
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	e240      	b.n	800b44e <_dtoa_r+0x946>
 800afcc:	07f2      	lsls	r2, r6, #31
 800afce:	d505      	bpl.n	800afdc <_dtoa_r+0x4d4>
 800afd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afd4:	f7f5 fb28 	bl	8000628 <__aeabi_dmul>
 800afd8:	3501      	adds	r5, #1
 800afda:	2301      	movs	r3, #1
 800afdc:	1076      	asrs	r6, r6, #1
 800afde:	3708      	adds	r7, #8
 800afe0:	e777      	b.n	800aed2 <_dtoa_r+0x3ca>
 800afe2:	2502      	movs	r5, #2
 800afe4:	e779      	b.n	800aeda <_dtoa_r+0x3d2>
 800afe6:	9f00      	ldr	r7, [sp, #0]
 800afe8:	9e03      	ldr	r6, [sp, #12]
 800afea:	e794      	b.n	800af16 <_dtoa_r+0x40e>
 800afec:	9901      	ldr	r1, [sp, #4]
 800afee:	4b4c      	ldr	r3, [pc, #304]	; (800b120 <_dtoa_r+0x618>)
 800aff0:	4431      	add	r1, r6
 800aff2:	910d      	str	r1, [sp, #52]	; 0x34
 800aff4:	9908      	ldr	r1, [sp, #32]
 800aff6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800affa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800affe:	2900      	cmp	r1, #0
 800b000:	d043      	beq.n	800b08a <_dtoa_r+0x582>
 800b002:	494d      	ldr	r1, [pc, #308]	; (800b138 <_dtoa_r+0x630>)
 800b004:	2000      	movs	r0, #0
 800b006:	f7f5 fc39 	bl	800087c <__aeabi_ddiv>
 800b00a:	4652      	mov	r2, sl
 800b00c:	465b      	mov	r3, fp
 800b00e:	f7f5 f953 	bl	80002b8 <__aeabi_dsub>
 800b012:	9d01      	ldr	r5, [sp, #4]
 800b014:	4682      	mov	sl, r0
 800b016:	468b      	mov	fp, r1
 800b018:	4649      	mov	r1, r9
 800b01a:	4640      	mov	r0, r8
 800b01c:	f7f5 fdb4 	bl	8000b88 <__aeabi_d2iz>
 800b020:	4606      	mov	r6, r0
 800b022:	f7f5 fa97 	bl	8000554 <__aeabi_i2d>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4640      	mov	r0, r8
 800b02c:	4649      	mov	r1, r9
 800b02e:	f7f5 f943 	bl	80002b8 <__aeabi_dsub>
 800b032:	3630      	adds	r6, #48	; 0x30
 800b034:	f805 6b01 	strb.w	r6, [r5], #1
 800b038:	4652      	mov	r2, sl
 800b03a:	465b      	mov	r3, fp
 800b03c:	4680      	mov	r8, r0
 800b03e:	4689      	mov	r9, r1
 800b040:	f7f5 fd64 	bl	8000b0c <__aeabi_dcmplt>
 800b044:	2800      	cmp	r0, #0
 800b046:	d163      	bne.n	800b110 <_dtoa_r+0x608>
 800b048:	4642      	mov	r2, r8
 800b04a:	464b      	mov	r3, r9
 800b04c:	4936      	ldr	r1, [pc, #216]	; (800b128 <_dtoa_r+0x620>)
 800b04e:	2000      	movs	r0, #0
 800b050:	f7f5 f932 	bl	80002b8 <__aeabi_dsub>
 800b054:	4652      	mov	r2, sl
 800b056:	465b      	mov	r3, fp
 800b058:	f7f5 fd58 	bl	8000b0c <__aeabi_dcmplt>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	f040 80b5 	bne.w	800b1cc <_dtoa_r+0x6c4>
 800b062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b064:	429d      	cmp	r5, r3
 800b066:	d081      	beq.n	800af6c <_dtoa_r+0x464>
 800b068:	4b30      	ldr	r3, [pc, #192]	; (800b12c <_dtoa_r+0x624>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	4650      	mov	r0, sl
 800b06e:	4659      	mov	r1, fp
 800b070:	f7f5 fada 	bl	8000628 <__aeabi_dmul>
 800b074:	4b2d      	ldr	r3, [pc, #180]	; (800b12c <_dtoa_r+0x624>)
 800b076:	4682      	mov	sl, r0
 800b078:	468b      	mov	fp, r1
 800b07a:	4640      	mov	r0, r8
 800b07c:	4649      	mov	r1, r9
 800b07e:	2200      	movs	r2, #0
 800b080:	f7f5 fad2 	bl	8000628 <__aeabi_dmul>
 800b084:	4680      	mov	r8, r0
 800b086:	4689      	mov	r9, r1
 800b088:	e7c6      	b.n	800b018 <_dtoa_r+0x510>
 800b08a:	4650      	mov	r0, sl
 800b08c:	4659      	mov	r1, fp
 800b08e:	f7f5 facb 	bl	8000628 <__aeabi_dmul>
 800b092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b094:	9d01      	ldr	r5, [sp, #4]
 800b096:	930f      	str	r3, [sp, #60]	; 0x3c
 800b098:	4682      	mov	sl, r0
 800b09a:	468b      	mov	fp, r1
 800b09c:	4649      	mov	r1, r9
 800b09e:	4640      	mov	r0, r8
 800b0a0:	f7f5 fd72 	bl	8000b88 <__aeabi_d2iz>
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	f7f5 fa55 	bl	8000554 <__aeabi_i2d>
 800b0aa:	3630      	adds	r6, #48	; 0x30
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	f7f5 f900 	bl	80002b8 <__aeabi_dsub>
 800b0b8:	f805 6b01 	strb.w	r6, [r5], #1
 800b0bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0be:	429d      	cmp	r5, r3
 800b0c0:	4680      	mov	r8, r0
 800b0c2:	4689      	mov	r9, r1
 800b0c4:	f04f 0200 	mov.w	r2, #0
 800b0c8:	d124      	bne.n	800b114 <_dtoa_r+0x60c>
 800b0ca:	4b1b      	ldr	r3, [pc, #108]	; (800b138 <_dtoa_r+0x630>)
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	4659      	mov	r1, fp
 800b0d0:	f7f5 f8f4 	bl	80002bc <__adddf3>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4640      	mov	r0, r8
 800b0da:	4649      	mov	r1, r9
 800b0dc:	f7f5 fd34 	bl	8000b48 <__aeabi_dcmpgt>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d173      	bne.n	800b1cc <_dtoa_r+0x6c4>
 800b0e4:	4652      	mov	r2, sl
 800b0e6:	465b      	mov	r3, fp
 800b0e8:	4913      	ldr	r1, [pc, #76]	; (800b138 <_dtoa_r+0x630>)
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	f7f5 f8e4 	bl	80002b8 <__aeabi_dsub>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4640      	mov	r0, r8
 800b0f6:	4649      	mov	r1, r9
 800b0f8:	f7f5 fd08 	bl	8000b0c <__aeabi_dcmplt>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	f43f af35 	beq.w	800af6c <_dtoa_r+0x464>
 800b102:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b104:	1e6b      	subs	r3, r5, #1
 800b106:	930f      	str	r3, [sp, #60]	; 0x3c
 800b108:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b10c:	2b30      	cmp	r3, #48	; 0x30
 800b10e:	d0f8      	beq.n	800b102 <_dtoa_r+0x5fa>
 800b110:	9700      	str	r7, [sp, #0]
 800b112:	e049      	b.n	800b1a8 <_dtoa_r+0x6a0>
 800b114:	4b05      	ldr	r3, [pc, #20]	; (800b12c <_dtoa_r+0x624>)
 800b116:	f7f5 fa87 	bl	8000628 <__aeabi_dmul>
 800b11a:	4680      	mov	r8, r0
 800b11c:	4689      	mov	r9, r1
 800b11e:	e7bd      	b.n	800b09c <_dtoa_r+0x594>
 800b120:	0800d7e8 	.word	0x0800d7e8
 800b124:	0800d7c0 	.word	0x0800d7c0
 800b128:	3ff00000 	.word	0x3ff00000
 800b12c:	40240000 	.word	0x40240000
 800b130:	401c0000 	.word	0x401c0000
 800b134:	40140000 	.word	0x40140000
 800b138:	3fe00000 	.word	0x3fe00000
 800b13c:	9d01      	ldr	r5, [sp, #4]
 800b13e:	4656      	mov	r6, sl
 800b140:	465f      	mov	r7, fp
 800b142:	4642      	mov	r2, r8
 800b144:	464b      	mov	r3, r9
 800b146:	4630      	mov	r0, r6
 800b148:	4639      	mov	r1, r7
 800b14a:	f7f5 fb97 	bl	800087c <__aeabi_ddiv>
 800b14e:	f7f5 fd1b 	bl	8000b88 <__aeabi_d2iz>
 800b152:	4682      	mov	sl, r0
 800b154:	f7f5 f9fe 	bl	8000554 <__aeabi_i2d>
 800b158:	4642      	mov	r2, r8
 800b15a:	464b      	mov	r3, r9
 800b15c:	f7f5 fa64 	bl	8000628 <__aeabi_dmul>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	4630      	mov	r0, r6
 800b166:	4639      	mov	r1, r7
 800b168:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b16c:	f7f5 f8a4 	bl	80002b8 <__aeabi_dsub>
 800b170:	f805 6b01 	strb.w	r6, [r5], #1
 800b174:	9e01      	ldr	r6, [sp, #4]
 800b176:	9f03      	ldr	r7, [sp, #12]
 800b178:	1bae      	subs	r6, r5, r6
 800b17a:	42b7      	cmp	r7, r6
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	d135      	bne.n	800b1ee <_dtoa_r+0x6e6>
 800b182:	f7f5 f89b 	bl	80002bc <__adddf3>
 800b186:	4642      	mov	r2, r8
 800b188:	464b      	mov	r3, r9
 800b18a:	4606      	mov	r6, r0
 800b18c:	460f      	mov	r7, r1
 800b18e:	f7f5 fcdb 	bl	8000b48 <__aeabi_dcmpgt>
 800b192:	b9d0      	cbnz	r0, 800b1ca <_dtoa_r+0x6c2>
 800b194:	4642      	mov	r2, r8
 800b196:	464b      	mov	r3, r9
 800b198:	4630      	mov	r0, r6
 800b19a:	4639      	mov	r1, r7
 800b19c:	f7f5 fcac 	bl	8000af8 <__aeabi_dcmpeq>
 800b1a0:	b110      	cbz	r0, 800b1a8 <_dtoa_r+0x6a0>
 800b1a2:	f01a 0f01 	tst.w	sl, #1
 800b1a6:	d110      	bne.n	800b1ca <_dtoa_r+0x6c2>
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	ee18 1a10 	vmov	r1, s16
 800b1ae:	f000 fee3 	bl	800bf78 <_Bfree>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	9800      	ldr	r0, [sp, #0]
 800b1b6:	702b      	strb	r3, [r5, #0]
 800b1b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	6018      	str	r0, [r3, #0]
 800b1be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f43f acf1 	beq.w	800aba8 <_dtoa_r+0xa0>
 800b1c6:	601d      	str	r5, [r3, #0]
 800b1c8:	e4ee      	b.n	800aba8 <_dtoa_r+0xa0>
 800b1ca:	9f00      	ldr	r7, [sp, #0]
 800b1cc:	462b      	mov	r3, r5
 800b1ce:	461d      	mov	r5, r3
 800b1d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1d4:	2a39      	cmp	r2, #57	; 0x39
 800b1d6:	d106      	bne.n	800b1e6 <_dtoa_r+0x6de>
 800b1d8:	9a01      	ldr	r2, [sp, #4]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d1f7      	bne.n	800b1ce <_dtoa_r+0x6c6>
 800b1de:	9901      	ldr	r1, [sp, #4]
 800b1e0:	2230      	movs	r2, #48	; 0x30
 800b1e2:	3701      	adds	r7, #1
 800b1e4:	700a      	strb	r2, [r1, #0]
 800b1e6:	781a      	ldrb	r2, [r3, #0]
 800b1e8:	3201      	adds	r2, #1
 800b1ea:	701a      	strb	r2, [r3, #0]
 800b1ec:	e790      	b.n	800b110 <_dtoa_r+0x608>
 800b1ee:	4ba6      	ldr	r3, [pc, #664]	; (800b488 <_dtoa_r+0x980>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f7f5 fa19 	bl	8000628 <__aeabi_dmul>
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	460f      	mov	r7, r1
 800b1fe:	f7f5 fc7b 	bl	8000af8 <__aeabi_dcmpeq>
 800b202:	2800      	cmp	r0, #0
 800b204:	d09d      	beq.n	800b142 <_dtoa_r+0x63a>
 800b206:	e7cf      	b.n	800b1a8 <_dtoa_r+0x6a0>
 800b208:	9a08      	ldr	r2, [sp, #32]
 800b20a:	2a00      	cmp	r2, #0
 800b20c:	f000 80d7 	beq.w	800b3be <_dtoa_r+0x8b6>
 800b210:	9a06      	ldr	r2, [sp, #24]
 800b212:	2a01      	cmp	r2, #1
 800b214:	f300 80ba 	bgt.w	800b38c <_dtoa_r+0x884>
 800b218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b21a:	2a00      	cmp	r2, #0
 800b21c:	f000 80b2 	beq.w	800b384 <_dtoa_r+0x87c>
 800b220:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b224:	9e07      	ldr	r6, [sp, #28]
 800b226:	9d04      	ldr	r5, [sp, #16]
 800b228:	9a04      	ldr	r2, [sp, #16]
 800b22a:	441a      	add	r2, r3
 800b22c:	9204      	str	r2, [sp, #16]
 800b22e:	9a05      	ldr	r2, [sp, #20]
 800b230:	2101      	movs	r1, #1
 800b232:	441a      	add	r2, r3
 800b234:	4620      	mov	r0, r4
 800b236:	9205      	str	r2, [sp, #20]
 800b238:	f000 ffa0 	bl	800c17c <__i2b>
 800b23c:	4607      	mov	r7, r0
 800b23e:	2d00      	cmp	r5, #0
 800b240:	dd0c      	ble.n	800b25c <_dtoa_r+0x754>
 800b242:	9b05      	ldr	r3, [sp, #20]
 800b244:	2b00      	cmp	r3, #0
 800b246:	dd09      	ble.n	800b25c <_dtoa_r+0x754>
 800b248:	42ab      	cmp	r3, r5
 800b24a:	9a04      	ldr	r2, [sp, #16]
 800b24c:	bfa8      	it	ge
 800b24e:	462b      	movge	r3, r5
 800b250:	1ad2      	subs	r2, r2, r3
 800b252:	9204      	str	r2, [sp, #16]
 800b254:	9a05      	ldr	r2, [sp, #20]
 800b256:	1aed      	subs	r5, r5, r3
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	9305      	str	r3, [sp, #20]
 800b25c:	9b07      	ldr	r3, [sp, #28]
 800b25e:	b31b      	cbz	r3, 800b2a8 <_dtoa_r+0x7a0>
 800b260:	9b08      	ldr	r3, [sp, #32]
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80af 	beq.w	800b3c6 <_dtoa_r+0x8be>
 800b268:	2e00      	cmp	r6, #0
 800b26a:	dd13      	ble.n	800b294 <_dtoa_r+0x78c>
 800b26c:	4639      	mov	r1, r7
 800b26e:	4632      	mov	r2, r6
 800b270:	4620      	mov	r0, r4
 800b272:	f001 f843 	bl	800c2fc <__pow5mult>
 800b276:	ee18 2a10 	vmov	r2, s16
 800b27a:	4601      	mov	r1, r0
 800b27c:	4607      	mov	r7, r0
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 ff92 	bl	800c1a8 <__multiply>
 800b284:	ee18 1a10 	vmov	r1, s16
 800b288:	4680      	mov	r8, r0
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 fe74 	bl	800bf78 <_Bfree>
 800b290:	ee08 8a10 	vmov	s16, r8
 800b294:	9b07      	ldr	r3, [sp, #28]
 800b296:	1b9a      	subs	r2, r3, r6
 800b298:	d006      	beq.n	800b2a8 <_dtoa_r+0x7a0>
 800b29a:	ee18 1a10 	vmov	r1, s16
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f001 f82c 	bl	800c2fc <__pow5mult>
 800b2a4:	ee08 0a10 	vmov	s16, r0
 800b2a8:	2101      	movs	r1, #1
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f000 ff66 	bl	800c17c <__i2b>
 800b2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	f340 8088 	ble.w	800b3ca <_dtoa_r+0x8c2>
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	4601      	mov	r1, r0
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f001 f81c 	bl	800c2fc <__pow5mult>
 800b2c4:	9b06      	ldr	r3, [sp, #24]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	f340 8081 	ble.w	800b3d0 <_dtoa_r+0x8c8>
 800b2ce:	f04f 0800 	mov.w	r8, #0
 800b2d2:	6933      	ldr	r3, [r6, #16]
 800b2d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b2d8:	6918      	ldr	r0, [r3, #16]
 800b2da:	f000 feff 	bl	800c0dc <__hi0bits>
 800b2de:	f1c0 0020 	rsb	r0, r0, #32
 800b2e2:	9b05      	ldr	r3, [sp, #20]
 800b2e4:	4418      	add	r0, r3
 800b2e6:	f010 001f 	ands.w	r0, r0, #31
 800b2ea:	f000 8092 	beq.w	800b412 <_dtoa_r+0x90a>
 800b2ee:	f1c0 0320 	rsb	r3, r0, #32
 800b2f2:	2b04      	cmp	r3, #4
 800b2f4:	f340 808a 	ble.w	800b40c <_dtoa_r+0x904>
 800b2f8:	f1c0 001c 	rsb	r0, r0, #28
 800b2fc:	9b04      	ldr	r3, [sp, #16]
 800b2fe:	4403      	add	r3, r0
 800b300:	9304      	str	r3, [sp, #16]
 800b302:	9b05      	ldr	r3, [sp, #20]
 800b304:	4403      	add	r3, r0
 800b306:	4405      	add	r5, r0
 800b308:	9305      	str	r3, [sp, #20]
 800b30a:	9b04      	ldr	r3, [sp, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dd07      	ble.n	800b320 <_dtoa_r+0x818>
 800b310:	ee18 1a10 	vmov	r1, s16
 800b314:	461a      	mov	r2, r3
 800b316:	4620      	mov	r0, r4
 800b318:	f001 f84a 	bl	800c3b0 <__lshift>
 800b31c:	ee08 0a10 	vmov	s16, r0
 800b320:	9b05      	ldr	r3, [sp, #20]
 800b322:	2b00      	cmp	r3, #0
 800b324:	dd05      	ble.n	800b332 <_dtoa_r+0x82a>
 800b326:	4631      	mov	r1, r6
 800b328:	461a      	mov	r2, r3
 800b32a:	4620      	mov	r0, r4
 800b32c:	f001 f840 	bl	800c3b0 <__lshift>
 800b330:	4606      	mov	r6, r0
 800b332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d06e      	beq.n	800b416 <_dtoa_r+0x90e>
 800b338:	ee18 0a10 	vmov	r0, s16
 800b33c:	4631      	mov	r1, r6
 800b33e:	f001 f8a7 	bl	800c490 <__mcmp>
 800b342:	2800      	cmp	r0, #0
 800b344:	da67      	bge.n	800b416 <_dtoa_r+0x90e>
 800b346:	9b00      	ldr	r3, [sp, #0]
 800b348:	3b01      	subs	r3, #1
 800b34a:	ee18 1a10 	vmov	r1, s16
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	220a      	movs	r2, #10
 800b352:	2300      	movs	r3, #0
 800b354:	4620      	mov	r0, r4
 800b356:	f000 fe31 	bl	800bfbc <__multadd>
 800b35a:	9b08      	ldr	r3, [sp, #32]
 800b35c:	ee08 0a10 	vmov	s16, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	f000 81b1 	beq.w	800b6c8 <_dtoa_r+0xbc0>
 800b366:	2300      	movs	r3, #0
 800b368:	4639      	mov	r1, r7
 800b36a:	220a      	movs	r2, #10
 800b36c:	4620      	mov	r0, r4
 800b36e:	f000 fe25 	bl	800bfbc <__multadd>
 800b372:	9b02      	ldr	r3, [sp, #8]
 800b374:	2b00      	cmp	r3, #0
 800b376:	4607      	mov	r7, r0
 800b378:	f300 808e 	bgt.w	800b498 <_dtoa_r+0x990>
 800b37c:	9b06      	ldr	r3, [sp, #24]
 800b37e:	2b02      	cmp	r3, #2
 800b380:	dc51      	bgt.n	800b426 <_dtoa_r+0x91e>
 800b382:	e089      	b.n	800b498 <_dtoa_r+0x990>
 800b384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b38a:	e74b      	b.n	800b224 <_dtoa_r+0x71c>
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	1e5e      	subs	r6, r3, #1
 800b390:	9b07      	ldr	r3, [sp, #28]
 800b392:	42b3      	cmp	r3, r6
 800b394:	bfbf      	itttt	lt
 800b396:	9b07      	ldrlt	r3, [sp, #28]
 800b398:	9607      	strlt	r6, [sp, #28]
 800b39a:	1af2      	sublt	r2, r6, r3
 800b39c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b39e:	bfb6      	itet	lt
 800b3a0:	189b      	addlt	r3, r3, r2
 800b3a2:	1b9e      	subge	r6, r3, r6
 800b3a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b3a6:	9b03      	ldr	r3, [sp, #12]
 800b3a8:	bfb8      	it	lt
 800b3aa:	2600      	movlt	r6, #0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	bfb7      	itett	lt
 800b3b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b3b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b3b8:	1a9d      	sublt	r5, r3, r2
 800b3ba:	2300      	movlt	r3, #0
 800b3bc:	e734      	b.n	800b228 <_dtoa_r+0x720>
 800b3be:	9e07      	ldr	r6, [sp, #28]
 800b3c0:	9d04      	ldr	r5, [sp, #16]
 800b3c2:	9f08      	ldr	r7, [sp, #32]
 800b3c4:	e73b      	b.n	800b23e <_dtoa_r+0x736>
 800b3c6:	9a07      	ldr	r2, [sp, #28]
 800b3c8:	e767      	b.n	800b29a <_dtoa_r+0x792>
 800b3ca:	9b06      	ldr	r3, [sp, #24]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	dc18      	bgt.n	800b402 <_dtoa_r+0x8fa>
 800b3d0:	f1ba 0f00 	cmp.w	sl, #0
 800b3d4:	d115      	bne.n	800b402 <_dtoa_r+0x8fa>
 800b3d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3da:	b993      	cbnz	r3, 800b402 <_dtoa_r+0x8fa>
 800b3dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3e0:	0d1b      	lsrs	r3, r3, #20
 800b3e2:	051b      	lsls	r3, r3, #20
 800b3e4:	b183      	cbz	r3, 800b408 <_dtoa_r+0x900>
 800b3e6:	9b04      	ldr	r3, [sp, #16]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	9304      	str	r3, [sp, #16]
 800b3ec:	9b05      	ldr	r3, [sp, #20]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	9305      	str	r3, [sp, #20]
 800b3f2:	f04f 0801 	mov.w	r8, #1
 800b3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f47f af6a 	bne.w	800b2d2 <_dtoa_r+0x7ca>
 800b3fe:	2001      	movs	r0, #1
 800b400:	e76f      	b.n	800b2e2 <_dtoa_r+0x7da>
 800b402:	f04f 0800 	mov.w	r8, #0
 800b406:	e7f6      	b.n	800b3f6 <_dtoa_r+0x8ee>
 800b408:	4698      	mov	r8, r3
 800b40a:	e7f4      	b.n	800b3f6 <_dtoa_r+0x8ee>
 800b40c:	f43f af7d 	beq.w	800b30a <_dtoa_r+0x802>
 800b410:	4618      	mov	r0, r3
 800b412:	301c      	adds	r0, #28
 800b414:	e772      	b.n	800b2fc <_dtoa_r+0x7f4>
 800b416:	9b03      	ldr	r3, [sp, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	dc37      	bgt.n	800b48c <_dtoa_r+0x984>
 800b41c:	9b06      	ldr	r3, [sp, #24]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	dd34      	ble.n	800b48c <_dtoa_r+0x984>
 800b422:	9b03      	ldr	r3, [sp, #12]
 800b424:	9302      	str	r3, [sp, #8]
 800b426:	9b02      	ldr	r3, [sp, #8]
 800b428:	b96b      	cbnz	r3, 800b446 <_dtoa_r+0x93e>
 800b42a:	4631      	mov	r1, r6
 800b42c:	2205      	movs	r2, #5
 800b42e:	4620      	mov	r0, r4
 800b430:	f000 fdc4 	bl	800bfbc <__multadd>
 800b434:	4601      	mov	r1, r0
 800b436:	4606      	mov	r6, r0
 800b438:	ee18 0a10 	vmov	r0, s16
 800b43c:	f001 f828 	bl	800c490 <__mcmp>
 800b440:	2800      	cmp	r0, #0
 800b442:	f73f adbb 	bgt.w	800afbc <_dtoa_r+0x4b4>
 800b446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b448:	9d01      	ldr	r5, [sp, #4]
 800b44a:	43db      	mvns	r3, r3
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	f04f 0800 	mov.w	r8, #0
 800b452:	4631      	mov	r1, r6
 800b454:	4620      	mov	r0, r4
 800b456:	f000 fd8f 	bl	800bf78 <_Bfree>
 800b45a:	2f00      	cmp	r7, #0
 800b45c:	f43f aea4 	beq.w	800b1a8 <_dtoa_r+0x6a0>
 800b460:	f1b8 0f00 	cmp.w	r8, #0
 800b464:	d005      	beq.n	800b472 <_dtoa_r+0x96a>
 800b466:	45b8      	cmp	r8, r7
 800b468:	d003      	beq.n	800b472 <_dtoa_r+0x96a>
 800b46a:	4641      	mov	r1, r8
 800b46c:	4620      	mov	r0, r4
 800b46e:	f000 fd83 	bl	800bf78 <_Bfree>
 800b472:	4639      	mov	r1, r7
 800b474:	4620      	mov	r0, r4
 800b476:	f000 fd7f 	bl	800bf78 <_Bfree>
 800b47a:	e695      	b.n	800b1a8 <_dtoa_r+0x6a0>
 800b47c:	2600      	movs	r6, #0
 800b47e:	4637      	mov	r7, r6
 800b480:	e7e1      	b.n	800b446 <_dtoa_r+0x93e>
 800b482:	9700      	str	r7, [sp, #0]
 800b484:	4637      	mov	r7, r6
 800b486:	e599      	b.n	800afbc <_dtoa_r+0x4b4>
 800b488:	40240000 	.word	0x40240000
 800b48c:	9b08      	ldr	r3, [sp, #32]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 80ca 	beq.w	800b628 <_dtoa_r+0xb20>
 800b494:	9b03      	ldr	r3, [sp, #12]
 800b496:	9302      	str	r3, [sp, #8]
 800b498:	2d00      	cmp	r5, #0
 800b49a:	dd05      	ble.n	800b4a8 <_dtoa_r+0x9a0>
 800b49c:	4639      	mov	r1, r7
 800b49e:	462a      	mov	r2, r5
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 ff85 	bl	800c3b0 <__lshift>
 800b4a6:	4607      	mov	r7, r0
 800b4a8:	f1b8 0f00 	cmp.w	r8, #0
 800b4ac:	d05b      	beq.n	800b566 <_dtoa_r+0xa5e>
 800b4ae:	6879      	ldr	r1, [r7, #4]
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f000 fd21 	bl	800bef8 <_Balloc>
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	b928      	cbnz	r0, 800b4c6 <_dtoa_r+0x9be>
 800b4ba:	4b87      	ldr	r3, [pc, #540]	; (800b6d8 <_dtoa_r+0xbd0>)
 800b4bc:	4602      	mov	r2, r0
 800b4be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b4c2:	f7ff bb3b 	b.w	800ab3c <_dtoa_r+0x34>
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	3202      	adds	r2, #2
 800b4ca:	0092      	lsls	r2, r2, #2
 800b4cc:	f107 010c 	add.w	r1, r7, #12
 800b4d0:	300c      	adds	r0, #12
 800b4d2:	f7fd fcf3 	bl	8008ebc <memcpy>
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	4629      	mov	r1, r5
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 ff68 	bl	800c3b0 <__lshift>
 800b4e0:	9b01      	ldr	r3, [sp, #4]
 800b4e2:	f103 0901 	add.w	r9, r3, #1
 800b4e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	9305      	str	r3, [sp, #20]
 800b4ee:	f00a 0301 	and.w	r3, sl, #1
 800b4f2:	46b8      	mov	r8, r7
 800b4f4:	9304      	str	r3, [sp, #16]
 800b4f6:	4607      	mov	r7, r0
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	ee18 0a10 	vmov	r0, s16
 800b4fe:	f7ff fa77 	bl	800a9f0 <quorem>
 800b502:	4641      	mov	r1, r8
 800b504:	9002      	str	r0, [sp, #8]
 800b506:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b50a:	ee18 0a10 	vmov	r0, s16
 800b50e:	f000 ffbf 	bl	800c490 <__mcmp>
 800b512:	463a      	mov	r2, r7
 800b514:	9003      	str	r0, [sp, #12]
 800b516:	4631      	mov	r1, r6
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 ffd5 	bl	800c4c8 <__mdiff>
 800b51e:	68c2      	ldr	r2, [r0, #12]
 800b520:	f109 3bff 	add.w	fp, r9, #4294967295
 800b524:	4605      	mov	r5, r0
 800b526:	bb02      	cbnz	r2, 800b56a <_dtoa_r+0xa62>
 800b528:	4601      	mov	r1, r0
 800b52a:	ee18 0a10 	vmov	r0, s16
 800b52e:	f000 ffaf 	bl	800c490 <__mcmp>
 800b532:	4602      	mov	r2, r0
 800b534:	4629      	mov	r1, r5
 800b536:	4620      	mov	r0, r4
 800b538:	9207      	str	r2, [sp, #28]
 800b53a:	f000 fd1d 	bl	800bf78 <_Bfree>
 800b53e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b542:	ea43 0102 	orr.w	r1, r3, r2
 800b546:	9b04      	ldr	r3, [sp, #16]
 800b548:	430b      	orrs	r3, r1
 800b54a:	464d      	mov	r5, r9
 800b54c:	d10f      	bne.n	800b56e <_dtoa_r+0xa66>
 800b54e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b552:	d02a      	beq.n	800b5aa <_dtoa_r+0xaa2>
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	dd02      	ble.n	800b560 <_dtoa_r+0xa58>
 800b55a:	9b02      	ldr	r3, [sp, #8]
 800b55c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b560:	f88b a000 	strb.w	sl, [fp]
 800b564:	e775      	b.n	800b452 <_dtoa_r+0x94a>
 800b566:	4638      	mov	r0, r7
 800b568:	e7ba      	b.n	800b4e0 <_dtoa_r+0x9d8>
 800b56a:	2201      	movs	r2, #1
 800b56c:	e7e2      	b.n	800b534 <_dtoa_r+0xa2c>
 800b56e:	9b03      	ldr	r3, [sp, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	db04      	blt.n	800b57e <_dtoa_r+0xa76>
 800b574:	9906      	ldr	r1, [sp, #24]
 800b576:	430b      	orrs	r3, r1
 800b578:	9904      	ldr	r1, [sp, #16]
 800b57a:	430b      	orrs	r3, r1
 800b57c:	d122      	bne.n	800b5c4 <_dtoa_r+0xabc>
 800b57e:	2a00      	cmp	r2, #0
 800b580:	ddee      	ble.n	800b560 <_dtoa_r+0xa58>
 800b582:	ee18 1a10 	vmov	r1, s16
 800b586:	2201      	movs	r2, #1
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 ff11 	bl	800c3b0 <__lshift>
 800b58e:	4631      	mov	r1, r6
 800b590:	ee08 0a10 	vmov	s16, r0
 800b594:	f000 ff7c 	bl	800c490 <__mcmp>
 800b598:	2800      	cmp	r0, #0
 800b59a:	dc03      	bgt.n	800b5a4 <_dtoa_r+0xa9c>
 800b59c:	d1e0      	bne.n	800b560 <_dtoa_r+0xa58>
 800b59e:	f01a 0f01 	tst.w	sl, #1
 800b5a2:	d0dd      	beq.n	800b560 <_dtoa_r+0xa58>
 800b5a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b5a8:	d1d7      	bne.n	800b55a <_dtoa_r+0xa52>
 800b5aa:	2339      	movs	r3, #57	; 0x39
 800b5ac:	f88b 3000 	strb.w	r3, [fp]
 800b5b0:	462b      	mov	r3, r5
 800b5b2:	461d      	mov	r5, r3
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b5ba:	2a39      	cmp	r2, #57	; 0x39
 800b5bc:	d071      	beq.n	800b6a2 <_dtoa_r+0xb9a>
 800b5be:	3201      	adds	r2, #1
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	e746      	b.n	800b452 <_dtoa_r+0x94a>
 800b5c4:	2a00      	cmp	r2, #0
 800b5c6:	dd07      	ble.n	800b5d8 <_dtoa_r+0xad0>
 800b5c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b5cc:	d0ed      	beq.n	800b5aa <_dtoa_r+0xaa2>
 800b5ce:	f10a 0301 	add.w	r3, sl, #1
 800b5d2:	f88b 3000 	strb.w	r3, [fp]
 800b5d6:	e73c      	b.n	800b452 <_dtoa_r+0x94a>
 800b5d8:	9b05      	ldr	r3, [sp, #20]
 800b5da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b5de:	4599      	cmp	r9, r3
 800b5e0:	d047      	beq.n	800b672 <_dtoa_r+0xb6a>
 800b5e2:	ee18 1a10 	vmov	r1, s16
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	220a      	movs	r2, #10
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 fce6 	bl	800bfbc <__multadd>
 800b5f0:	45b8      	cmp	r8, r7
 800b5f2:	ee08 0a10 	vmov	s16, r0
 800b5f6:	f04f 0300 	mov.w	r3, #0
 800b5fa:	f04f 020a 	mov.w	r2, #10
 800b5fe:	4641      	mov	r1, r8
 800b600:	4620      	mov	r0, r4
 800b602:	d106      	bne.n	800b612 <_dtoa_r+0xb0a>
 800b604:	f000 fcda 	bl	800bfbc <__multadd>
 800b608:	4680      	mov	r8, r0
 800b60a:	4607      	mov	r7, r0
 800b60c:	f109 0901 	add.w	r9, r9, #1
 800b610:	e772      	b.n	800b4f8 <_dtoa_r+0x9f0>
 800b612:	f000 fcd3 	bl	800bfbc <__multadd>
 800b616:	4639      	mov	r1, r7
 800b618:	4680      	mov	r8, r0
 800b61a:	2300      	movs	r3, #0
 800b61c:	220a      	movs	r2, #10
 800b61e:	4620      	mov	r0, r4
 800b620:	f000 fccc 	bl	800bfbc <__multadd>
 800b624:	4607      	mov	r7, r0
 800b626:	e7f1      	b.n	800b60c <_dtoa_r+0xb04>
 800b628:	9b03      	ldr	r3, [sp, #12]
 800b62a:	9302      	str	r3, [sp, #8]
 800b62c:	9d01      	ldr	r5, [sp, #4]
 800b62e:	ee18 0a10 	vmov	r0, s16
 800b632:	4631      	mov	r1, r6
 800b634:	f7ff f9dc 	bl	800a9f0 <quorem>
 800b638:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b63c:	9b01      	ldr	r3, [sp, #4]
 800b63e:	f805 ab01 	strb.w	sl, [r5], #1
 800b642:	1aea      	subs	r2, r5, r3
 800b644:	9b02      	ldr	r3, [sp, #8]
 800b646:	4293      	cmp	r3, r2
 800b648:	dd09      	ble.n	800b65e <_dtoa_r+0xb56>
 800b64a:	ee18 1a10 	vmov	r1, s16
 800b64e:	2300      	movs	r3, #0
 800b650:	220a      	movs	r2, #10
 800b652:	4620      	mov	r0, r4
 800b654:	f000 fcb2 	bl	800bfbc <__multadd>
 800b658:	ee08 0a10 	vmov	s16, r0
 800b65c:	e7e7      	b.n	800b62e <_dtoa_r+0xb26>
 800b65e:	9b02      	ldr	r3, [sp, #8]
 800b660:	2b00      	cmp	r3, #0
 800b662:	bfc8      	it	gt
 800b664:	461d      	movgt	r5, r3
 800b666:	9b01      	ldr	r3, [sp, #4]
 800b668:	bfd8      	it	le
 800b66a:	2501      	movle	r5, #1
 800b66c:	441d      	add	r5, r3
 800b66e:	f04f 0800 	mov.w	r8, #0
 800b672:	ee18 1a10 	vmov	r1, s16
 800b676:	2201      	movs	r2, #1
 800b678:	4620      	mov	r0, r4
 800b67a:	f000 fe99 	bl	800c3b0 <__lshift>
 800b67e:	4631      	mov	r1, r6
 800b680:	ee08 0a10 	vmov	s16, r0
 800b684:	f000 ff04 	bl	800c490 <__mcmp>
 800b688:	2800      	cmp	r0, #0
 800b68a:	dc91      	bgt.n	800b5b0 <_dtoa_r+0xaa8>
 800b68c:	d102      	bne.n	800b694 <_dtoa_r+0xb8c>
 800b68e:	f01a 0f01 	tst.w	sl, #1
 800b692:	d18d      	bne.n	800b5b0 <_dtoa_r+0xaa8>
 800b694:	462b      	mov	r3, r5
 800b696:	461d      	mov	r5, r3
 800b698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b69c:	2a30      	cmp	r2, #48	; 0x30
 800b69e:	d0fa      	beq.n	800b696 <_dtoa_r+0xb8e>
 800b6a0:	e6d7      	b.n	800b452 <_dtoa_r+0x94a>
 800b6a2:	9a01      	ldr	r2, [sp, #4]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d184      	bne.n	800b5b2 <_dtoa_r+0xaaa>
 800b6a8:	9b00      	ldr	r3, [sp, #0]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	2331      	movs	r3, #49	; 0x31
 800b6b0:	7013      	strb	r3, [r2, #0]
 800b6b2:	e6ce      	b.n	800b452 <_dtoa_r+0x94a>
 800b6b4:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <_dtoa_r+0xbd4>)
 800b6b6:	f7ff ba95 	b.w	800abe4 <_dtoa_r+0xdc>
 800b6ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f47f aa6e 	bne.w	800ab9e <_dtoa_r+0x96>
 800b6c2:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <_dtoa_r+0xbd8>)
 800b6c4:	f7ff ba8e 	b.w	800abe4 <_dtoa_r+0xdc>
 800b6c8:	9b02      	ldr	r3, [sp, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	dcae      	bgt.n	800b62c <_dtoa_r+0xb24>
 800b6ce:	9b06      	ldr	r3, [sp, #24]
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	f73f aea8 	bgt.w	800b426 <_dtoa_r+0x91e>
 800b6d6:	e7a9      	b.n	800b62c <_dtoa_r+0xb24>
 800b6d8:	0800d6d7 	.word	0x0800d6d7
 800b6dc:	0800d5e4 	.word	0x0800d5e4
 800b6e0:	0800d658 	.word	0x0800d658

0800b6e4 <rshift>:
 800b6e4:	6903      	ldr	r3, [r0, #16]
 800b6e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b6ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b6f2:	f100 0414 	add.w	r4, r0, #20
 800b6f6:	dd45      	ble.n	800b784 <rshift+0xa0>
 800b6f8:	f011 011f 	ands.w	r1, r1, #31
 800b6fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b700:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b704:	d10c      	bne.n	800b720 <rshift+0x3c>
 800b706:	f100 0710 	add.w	r7, r0, #16
 800b70a:	4629      	mov	r1, r5
 800b70c:	42b1      	cmp	r1, r6
 800b70e:	d334      	bcc.n	800b77a <rshift+0x96>
 800b710:	1a9b      	subs	r3, r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	1eea      	subs	r2, r5, #3
 800b716:	4296      	cmp	r6, r2
 800b718:	bf38      	it	cc
 800b71a:	2300      	movcc	r3, #0
 800b71c:	4423      	add	r3, r4
 800b71e:	e015      	b.n	800b74c <rshift+0x68>
 800b720:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b724:	f1c1 0820 	rsb	r8, r1, #32
 800b728:	40cf      	lsrs	r7, r1
 800b72a:	f105 0e04 	add.w	lr, r5, #4
 800b72e:	46a1      	mov	r9, r4
 800b730:	4576      	cmp	r6, lr
 800b732:	46f4      	mov	ip, lr
 800b734:	d815      	bhi.n	800b762 <rshift+0x7e>
 800b736:	1a9a      	subs	r2, r3, r2
 800b738:	0092      	lsls	r2, r2, #2
 800b73a:	3a04      	subs	r2, #4
 800b73c:	3501      	adds	r5, #1
 800b73e:	42ae      	cmp	r6, r5
 800b740:	bf38      	it	cc
 800b742:	2200      	movcc	r2, #0
 800b744:	18a3      	adds	r3, r4, r2
 800b746:	50a7      	str	r7, [r4, r2]
 800b748:	b107      	cbz	r7, 800b74c <rshift+0x68>
 800b74a:	3304      	adds	r3, #4
 800b74c:	1b1a      	subs	r2, r3, r4
 800b74e:	42a3      	cmp	r3, r4
 800b750:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b754:	bf08      	it	eq
 800b756:	2300      	moveq	r3, #0
 800b758:	6102      	str	r2, [r0, #16]
 800b75a:	bf08      	it	eq
 800b75c:	6143      	streq	r3, [r0, #20]
 800b75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b762:	f8dc c000 	ldr.w	ip, [ip]
 800b766:	fa0c fc08 	lsl.w	ip, ip, r8
 800b76a:	ea4c 0707 	orr.w	r7, ip, r7
 800b76e:	f849 7b04 	str.w	r7, [r9], #4
 800b772:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b776:	40cf      	lsrs	r7, r1
 800b778:	e7da      	b.n	800b730 <rshift+0x4c>
 800b77a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b77e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b782:	e7c3      	b.n	800b70c <rshift+0x28>
 800b784:	4623      	mov	r3, r4
 800b786:	e7e1      	b.n	800b74c <rshift+0x68>

0800b788 <__hexdig_fun>:
 800b788:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b78c:	2b09      	cmp	r3, #9
 800b78e:	d802      	bhi.n	800b796 <__hexdig_fun+0xe>
 800b790:	3820      	subs	r0, #32
 800b792:	b2c0      	uxtb	r0, r0
 800b794:	4770      	bx	lr
 800b796:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b79a:	2b05      	cmp	r3, #5
 800b79c:	d801      	bhi.n	800b7a2 <__hexdig_fun+0x1a>
 800b79e:	3847      	subs	r0, #71	; 0x47
 800b7a0:	e7f7      	b.n	800b792 <__hexdig_fun+0xa>
 800b7a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b7a6:	2b05      	cmp	r3, #5
 800b7a8:	d801      	bhi.n	800b7ae <__hexdig_fun+0x26>
 800b7aa:	3827      	subs	r0, #39	; 0x27
 800b7ac:	e7f1      	b.n	800b792 <__hexdig_fun+0xa>
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	4770      	bx	lr
	...

0800b7b4 <__gethex>:
 800b7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b8:	ed2d 8b02 	vpush	{d8}
 800b7bc:	b089      	sub	sp, #36	; 0x24
 800b7be:	ee08 0a10 	vmov	s16, r0
 800b7c2:	9304      	str	r3, [sp, #16]
 800b7c4:	4bb4      	ldr	r3, [pc, #720]	; (800ba98 <__gethex+0x2e4>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	468b      	mov	fp, r1
 800b7ce:	4690      	mov	r8, r2
 800b7d0:	f7f4 fd10 	bl	80001f4 <strlen>
 800b7d4:	9b01      	ldr	r3, [sp, #4]
 800b7d6:	f8db 2000 	ldr.w	r2, [fp]
 800b7da:	4403      	add	r3, r0
 800b7dc:	4682      	mov	sl, r0
 800b7de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b7e2:	9305      	str	r3, [sp, #20]
 800b7e4:	1c93      	adds	r3, r2, #2
 800b7e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b7ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b7ee:	32fe      	adds	r2, #254	; 0xfe
 800b7f0:	18d1      	adds	r1, r2, r3
 800b7f2:	461f      	mov	r7, r3
 800b7f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b7f8:	9100      	str	r1, [sp, #0]
 800b7fa:	2830      	cmp	r0, #48	; 0x30
 800b7fc:	d0f8      	beq.n	800b7f0 <__gethex+0x3c>
 800b7fe:	f7ff ffc3 	bl	800b788 <__hexdig_fun>
 800b802:	4604      	mov	r4, r0
 800b804:	2800      	cmp	r0, #0
 800b806:	d13a      	bne.n	800b87e <__gethex+0xca>
 800b808:	9901      	ldr	r1, [sp, #4]
 800b80a:	4652      	mov	r2, sl
 800b80c:	4638      	mov	r0, r7
 800b80e:	f7fe f9cb 	bl	8009ba8 <strncmp>
 800b812:	4605      	mov	r5, r0
 800b814:	2800      	cmp	r0, #0
 800b816:	d168      	bne.n	800b8ea <__gethex+0x136>
 800b818:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b81c:	eb07 060a 	add.w	r6, r7, sl
 800b820:	f7ff ffb2 	bl	800b788 <__hexdig_fun>
 800b824:	2800      	cmp	r0, #0
 800b826:	d062      	beq.n	800b8ee <__gethex+0x13a>
 800b828:	4633      	mov	r3, r6
 800b82a:	7818      	ldrb	r0, [r3, #0]
 800b82c:	2830      	cmp	r0, #48	; 0x30
 800b82e:	461f      	mov	r7, r3
 800b830:	f103 0301 	add.w	r3, r3, #1
 800b834:	d0f9      	beq.n	800b82a <__gethex+0x76>
 800b836:	f7ff ffa7 	bl	800b788 <__hexdig_fun>
 800b83a:	2301      	movs	r3, #1
 800b83c:	fab0 f480 	clz	r4, r0
 800b840:	0964      	lsrs	r4, r4, #5
 800b842:	4635      	mov	r5, r6
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	463a      	mov	r2, r7
 800b848:	4616      	mov	r6, r2
 800b84a:	3201      	adds	r2, #1
 800b84c:	7830      	ldrb	r0, [r6, #0]
 800b84e:	f7ff ff9b 	bl	800b788 <__hexdig_fun>
 800b852:	2800      	cmp	r0, #0
 800b854:	d1f8      	bne.n	800b848 <__gethex+0x94>
 800b856:	9901      	ldr	r1, [sp, #4]
 800b858:	4652      	mov	r2, sl
 800b85a:	4630      	mov	r0, r6
 800b85c:	f7fe f9a4 	bl	8009ba8 <strncmp>
 800b860:	b980      	cbnz	r0, 800b884 <__gethex+0xd0>
 800b862:	b94d      	cbnz	r5, 800b878 <__gethex+0xc4>
 800b864:	eb06 050a 	add.w	r5, r6, sl
 800b868:	462a      	mov	r2, r5
 800b86a:	4616      	mov	r6, r2
 800b86c:	3201      	adds	r2, #1
 800b86e:	7830      	ldrb	r0, [r6, #0]
 800b870:	f7ff ff8a 	bl	800b788 <__hexdig_fun>
 800b874:	2800      	cmp	r0, #0
 800b876:	d1f8      	bne.n	800b86a <__gethex+0xb6>
 800b878:	1bad      	subs	r5, r5, r6
 800b87a:	00ad      	lsls	r5, r5, #2
 800b87c:	e004      	b.n	800b888 <__gethex+0xd4>
 800b87e:	2400      	movs	r4, #0
 800b880:	4625      	mov	r5, r4
 800b882:	e7e0      	b.n	800b846 <__gethex+0x92>
 800b884:	2d00      	cmp	r5, #0
 800b886:	d1f7      	bne.n	800b878 <__gethex+0xc4>
 800b888:	7833      	ldrb	r3, [r6, #0]
 800b88a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b88e:	2b50      	cmp	r3, #80	; 0x50
 800b890:	d13b      	bne.n	800b90a <__gethex+0x156>
 800b892:	7873      	ldrb	r3, [r6, #1]
 800b894:	2b2b      	cmp	r3, #43	; 0x2b
 800b896:	d02c      	beq.n	800b8f2 <__gethex+0x13e>
 800b898:	2b2d      	cmp	r3, #45	; 0x2d
 800b89a:	d02e      	beq.n	800b8fa <__gethex+0x146>
 800b89c:	1c71      	adds	r1, r6, #1
 800b89e:	f04f 0900 	mov.w	r9, #0
 800b8a2:	7808      	ldrb	r0, [r1, #0]
 800b8a4:	f7ff ff70 	bl	800b788 <__hexdig_fun>
 800b8a8:	1e43      	subs	r3, r0, #1
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b18      	cmp	r3, #24
 800b8ae:	d82c      	bhi.n	800b90a <__gethex+0x156>
 800b8b0:	f1a0 0210 	sub.w	r2, r0, #16
 800b8b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b8b8:	f7ff ff66 	bl	800b788 <__hexdig_fun>
 800b8bc:	1e43      	subs	r3, r0, #1
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	2b18      	cmp	r3, #24
 800b8c2:	d91d      	bls.n	800b900 <__gethex+0x14c>
 800b8c4:	f1b9 0f00 	cmp.w	r9, #0
 800b8c8:	d000      	beq.n	800b8cc <__gethex+0x118>
 800b8ca:	4252      	negs	r2, r2
 800b8cc:	4415      	add	r5, r2
 800b8ce:	f8cb 1000 	str.w	r1, [fp]
 800b8d2:	b1e4      	cbz	r4, 800b90e <__gethex+0x15a>
 800b8d4:	9b00      	ldr	r3, [sp, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	bf14      	ite	ne
 800b8da:	2700      	movne	r7, #0
 800b8dc:	2706      	moveq	r7, #6
 800b8de:	4638      	mov	r0, r7
 800b8e0:	b009      	add	sp, #36	; 0x24
 800b8e2:	ecbd 8b02 	vpop	{d8}
 800b8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ea:	463e      	mov	r6, r7
 800b8ec:	4625      	mov	r5, r4
 800b8ee:	2401      	movs	r4, #1
 800b8f0:	e7ca      	b.n	800b888 <__gethex+0xd4>
 800b8f2:	f04f 0900 	mov.w	r9, #0
 800b8f6:	1cb1      	adds	r1, r6, #2
 800b8f8:	e7d3      	b.n	800b8a2 <__gethex+0xee>
 800b8fa:	f04f 0901 	mov.w	r9, #1
 800b8fe:	e7fa      	b.n	800b8f6 <__gethex+0x142>
 800b900:	230a      	movs	r3, #10
 800b902:	fb03 0202 	mla	r2, r3, r2, r0
 800b906:	3a10      	subs	r2, #16
 800b908:	e7d4      	b.n	800b8b4 <__gethex+0x100>
 800b90a:	4631      	mov	r1, r6
 800b90c:	e7df      	b.n	800b8ce <__gethex+0x11a>
 800b90e:	1bf3      	subs	r3, r6, r7
 800b910:	3b01      	subs	r3, #1
 800b912:	4621      	mov	r1, r4
 800b914:	2b07      	cmp	r3, #7
 800b916:	dc0b      	bgt.n	800b930 <__gethex+0x17c>
 800b918:	ee18 0a10 	vmov	r0, s16
 800b91c:	f000 faec 	bl	800bef8 <_Balloc>
 800b920:	4604      	mov	r4, r0
 800b922:	b940      	cbnz	r0, 800b936 <__gethex+0x182>
 800b924:	4b5d      	ldr	r3, [pc, #372]	; (800ba9c <__gethex+0x2e8>)
 800b926:	4602      	mov	r2, r0
 800b928:	21de      	movs	r1, #222	; 0xde
 800b92a:	485d      	ldr	r0, [pc, #372]	; (800baa0 <__gethex+0x2ec>)
 800b92c:	f001 fad0 	bl	800ced0 <__assert_func>
 800b930:	3101      	adds	r1, #1
 800b932:	105b      	asrs	r3, r3, #1
 800b934:	e7ee      	b.n	800b914 <__gethex+0x160>
 800b936:	f100 0914 	add.w	r9, r0, #20
 800b93a:	f04f 0b00 	mov.w	fp, #0
 800b93e:	f1ca 0301 	rsb	r3, sl, #1
 800b942:	f8cd 9008 	str.w	r9, [sp, #8]
 800b946:	f8cd b000 	str.w	fp, [sp]
 800b94a:	9306      	str	r3, [sp, #24]
 800b94c:	42b7      	cmp	r7, r6
 800b94e:	d340      	bcc.n	800b9d2 <__gethex+0x21e>
 800b950:	9802      	ldr	r0, [sp, #8]
 800b952:	9b00      	ldr	r3, [sp, #0]
 800b954:	f840 3b04 	str.w	r3, [r0], #4
 800b958:	eba0 0009 	sub.w	r0, r0, r9
 800b95c:	1080      	asrs	r0, r0, #2
 800b95e:	0146      	lsls	r6, r0, #5
 800b960:	6120      	str	r0, [r4, #16]
 800b962:	4618      	mov	r0, r3
 800b964:	f000 fbba 	bl	800c0dc <__hi0bits>
 800b968:	1a30      	subs	r0, r6, r0
 800b96a:	f8d8 6000 	ldr.w	r6, [r8]
 800b96e:	42b0      	cmp	r0, r6
 800b970:	dd63      	ble.n	800ba3a <__gethex+0x286>
 800b972:	1b87      	subs	r7, r0, r6
 800b974:	4639      	mov	r1, r7
 800b976:	4620      	mov	r0, r4
 800b978:	f000 ff5e 	bl	800c838 <__any_on>
 800b97c:	4682      	mov	sl, r0
 800b97e:	b1a8      	cbz	r0, 800b9ac <__gethex+0x1f8>
 800b980:	1e7b      	subs	r3, r7, #1
 800b982:	1159      	asrs	r1, r3, #5
 800b984:	f003 021f 	and.w	r2, r3, #31
 800b988:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b98c:	f04f 0a01 	mov.w	sl, #1
 800b990:	fa0a f202 	lsl.w	r2, sl, r2
 800b994:	420a      	tst	r2, r1
 800b996:	d009      	beq.n	800b9ac <__gethex+0x1f8>
 800b998:	4553      	cmp	r3, sl
 800b99a:	dd05      	ble.n	800b9a8 <__gethex+0x1f4>
 800b99c:	1eb9      	subs	r1, r7, #2
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 ff4a 	bl	800c838 <__any_on>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d145      	bne.n	800ba34 <__gethex+0x280>
 800b9a8:	f04f 0a02 	mov.w	sl, #2
 800b9ac:	4639      	mov	r1, r7
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f7ff fe98 	bl	800b6e4 <rshift>
 800b9b4:	443d      	add	r5, r7
 800b9b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b9ba:	42ab      	cmp	r3, r5
 800b9bc:	da4c      	bge.n	800ba58 <__gethex+0x2a4>
 800b9be:	ee18 0a10 	vmov	r0, s16
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	f000 fad8 	bl	800bf78 <_Bfree>
 800b9c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	6013      	str	r3, [r2, #0]
 800b9ce:	27a3      	movs	r7, #163	; 0xa3
 800b9d0:	e785      	b.n	800b8de <__gethex+0x12a>
 800b9d2:	1e73      	subs	r3, r6, #1
 800b9d4:	9a05      	ldr	r2, [sp, #20]
 800b9d6:	9303      	str	r3, [sp, #12]
 800b9d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d019      	beq.n	800ba14 <__gethex+0x260>
 800b9e0:	f1bb 0f20 	cmp.w	fp, #32
 800b9e4:	d107      	bne.n	800b9f6 <__gethex+0x242>
 800b9e6:	9b02      	ldr	r3, [sp, #8]
 800b9e8:	9a00      	ldr	r2, [sp, #0]
 800b9ea:	f843 2b04 	str.w	r2, [r3], #4
 800b9ee:	9302      	str	r3, [sp, #8]
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	469b      	mov	fp, r3
 800b9f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b9fa:	f7ff fec5 	bl	800b788 <__hexdig_fun>
 800b9fe:	9b00      	ldr	r3, [sp, #0]
 800ba00:	f000 000f 	and.w	r0, r0, #15
 800ba04:	fa00 f00b 	lsl.w	r0, r0, fp
 800ba08:	4303      	orrs	r3, r0
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	f10b 0b04 	add.w	fp, fp, #4
 800ba10:	9b03      	ldr	r3, [sp, #12]
 800ba12:	e00d      	b.n	800ba30 <__gethex+0x27c>
 800ba14:	9b03      	ldr	r3, [sp, #12]
 800ba16:	9a06      	ldr	r2, [sp, #24]
 800ba18:	4413      	add	r3, r2
 800ba1a:	42bb      	cmp	r3, r7
 800ba1c:	d3e0      	bcc.n	800b9e0 <__gethex+0x22c>
 800ba1e:	4618      	mov	r0, r3
 800ba20:	9901      	ldr	r1, [sp, #4]
 800ba22:	9307      	str	r3, [sp, #28]
 800ba24:	4652      	mov	r2, sl
 800ba26:	f7fe f8bf 	bl	8009ba8 <strncmp>
 800ba2a:	9b07      	ldr	r3, [sp, #28]
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d1d7      	bne.n	800b9e0 <__gethex+0x22c>
 800ba30:	461e      	mov	r6, r3
 800ba32:	e78b      	b.n	800b94c <__gethex+0x198>
 800ba34:	f04f 0a03 	mov.w	sl, #3
 800ba38:	e7b8      	b.n	800b9ac <__gethex+0x1f8>
 800ba3a:	da0a      	bge.n	800ba52 <__gethex+0x29e>
 800ba3c:	1a37      	subs	r7, r6, r0
 800ba3e:	4621      	mov	r1, r4
 800ba40:	ee18 0a10 	vmov	r0, s16
 800ba44:	463a      	mov	r2, r7
 800ba46:	f000 fcb3 	bl	800c3b0 <__lshift>
 800ba4a:	1bed      	subs	r5, r5, r7
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	f100 0914 	add.w	r9, r0, #20
 800ba52:	f04f 0a00 	mov.w	sl, #0
 800ba56:	e7ae      	b.n	800b9b6 <__gethex+0x202>
 800ba58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ba5c:	42a8      	cmp	r0, r5
 800ba5e:	dd72      	ble.n	800bb46 <__gethex+0x392>
 800ba60:	1b45      	subs	r5, r0, r5
 800ba62:	42ae      	cmp	r6, r5
 800ba64:	dc36      	bgt.n	800bad4 <__gethex+0x320>
 800ba66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d02a      	beq.n	800bac4 <__gethex+0x310>
 800ba6e:	2b03      	cmp	r3, #3
 800ba70:	d02c      	beq.n	800bacc <__gethex+0x318>
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d11c      	bne.n	800bab0 <__gethex+0x2fc>
 800ba76:	42ae      	cmp	r6, r5
 800ba78:	d11a      	bne.n	800bab0 <__gethex+0x2fc>
 800ba7a:	2e01      	cmp	r6, #1
 800ba7c:	d112      	bne.n	800baa4 <__gethex+0x2f0>
 800ba7e:	9a04      	ldr	r2, [sp, #16]
 800ba80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ba84:	6013      	str	r3, [r2, #0]
 800ba86:	2301      	movs	r3, #1
 800ba88:	6123      	str	r3, [r4, #16]
 800ba8a:	f8c9 3000 	str.w	r3, [r9]
 800ba8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba90:	2762      	movs	r7, #98	; 0x62
 800ba92:	601c      	str	r4, [r3, #0]
 800ba94:	e723      	b.n	800b8de <__gethex+0x12a>
 800ba96:	bf00      	nop
 800ba98:	0800d750 	.word	0x0800d750
 800ba9c:	0800d6d7 	.word	0x0800d6d7
 800baa0:	0800d6e8 	.word	0x0800d6e8
 800baa4:	1e71      	subs	r1, r6, #1
 800baa6:	4620      	mov	r0, r4
 800baa8:	f000 fec6 	bl	800c838 <__any_on>
 800baac:	2800      	cmp	r0, #0
 800baae:	d1e6      	bne.n	800ba7e <__gethex+0x2ca>
 800bab0:	ee18 0a10 	vmov	r0, s16
 800bab4:	4621      	mov	r1, r4
 800bab6:	f000 fa5f 	bl	800bf78 <_Bfree>
 800baba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800babc:	2300      	movs	r3, #0
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	2750      	movs	r7, #80	; 0x50
 800bac2:	e70c      	b.n	800b8de <__gethex+0x12a>
 800bac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1f2      	bne.n	800bab0 <__gethex+0x2fc>
 800baca:	e7d8      	b.n	800ba7e <__gethex+0x2ca>
 800bacc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1d5      	bne.n	800ba7e <__gethex+0x2ca>
 800bad2:	e7ed      	b.n	800bab0 <__gethex+0x2fc>
 800bad4:	1e6f      	subs	r7, r5, #1
 800bad6:	f1ba 0f00 	cmp.w	sl, #0
 800bada:	d131      	bne.n	800bb40 <__gethex+0x38c>
 800badc:	b127      	cbz	r7, 800bae8 <__gethex+0x334>
 800bade:	4639      	mov	r1, r7
 800bae0:	4620      	mov	r0, r4
 800bae2:	f000 fea9 	bl	800c838 <__any_on>
 800bae6:	4682      	mov	sl, r0
 800bae8:	117b      	asrs	r3, r7, #5
 800baea:	2101      	movs	r1, #1
 800baec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800baf0:	f007 071f 	and.w	r7, r7, #31
 800baf4:	fa01 f707 	lsl.w	r7, r1, r7
 800baf8:	421f      	tst	r7, r3
 800bafa:	4629      	mov	r1, r5
 800bafc:	4620      	mov	r0, r4
 800bafe:	bf18      	it	ne
 800bb00:	f04a 0a02 	orrne.w	sl, sl, #2
 800bb04:	1b76      	subs	r6, r6, r5
 800bb06:	f7ff fded 	bl	800b6e4 <rshift>
 800bb0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bb0e:	2702      	movs	r7, #2
 800bb10:	f1ba 0f00 	cmp.w	sl, #0
 800bb14:	d048      	beq.n	800bba8 <__gethex+0x3f4>
 800bb16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d015      	beq.n	800bb4a <__gethex+0x396>
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d017      	beq.n	800bb52 <__gethex+0x39e>
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d109      	bne.n	800bb3a <__gethex+0x386>
 800bb26:	f01a 0f02 	tst.w	sl, #2
 800bb2a:	d006      	beq.n	800bb3a <__gethex+0x386>
 800bb2c:	f8d9 0000 	ldr.w	r0, [r9]
 800bb30:	ea4a 0a00 	orr.w	sl, sl, r0
 800bb34:	f01a 0f01 	tst.w	sl, #1
 800bb38:	d10e      	bne.n	800bb58 <__gethex+0x3a4>
 800bb3a:	f047 0710 	orr.w	r7, r7, #16
 800bb3e:	e033      	b.n	800bba8 <__gethex+0x3f4>
 800bb40:	f04f 0a01 	mov.w	sl, #1
 800bb44:	e7d0      	b.n	800bae8 <__gethex+0x334>
 800bb46:	2701      	movs	r7, #1
 800bb48:	e7e2      	b.n	800bb10 <__gethex+0x35c>
 800bb4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb4c:	f1c3 0301 	rsb	r3, r3, #1
 800bb50:	9315      	str	r3, [sp, #84]	; 0x54
 800bb52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d0f0      	beq.n	800bb3a <__gethex+0x386>
 800bb58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bb5c:	f104 0314 	add.w	r3, r4, #20
 800bb60:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bb64:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bb68:	f04f 0c00 	mov.w	ip, #0
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb72:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bb76:	d01c      	beq.n	800bbb2 <__gethex+0x3fe>
 800bb78:	3201      	adds	r2, #1
 800bb7a:	6002      	str	r2, [r0, #0]
 800bb7c:	2f02      	cmp	r7, #2
 800bb7e:	f104 0314 	add.w	r3, r4, #20
 800bb82:	d13f      	bne.n	800bc04 <__gethex+0x450>
 800bb84:	f8d8 2000 	ldr.w	r2, [r8]
 800bb88:	3a01      	subs	r2, #1
 800bb8a:	42b2      	cmp	r2, r6
 800bb8c:	d10a      	bne.n	800bba4 <__gethex+0x3f0>
 800bb8e:	1171      	asrs	r1, r6, #5
 800bb90:	2201      	movs	r2, #1
 800bb92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb96:	f006 061f 	and.w	r6, r6, #31
 800bb9a:	fa02 f606 	lsl.w	r6, r2, r6
 800bb9e:	421e      	tst	r6, r3
 800bba0:	bf18      	it	ne
 800bba2:	4617      	movne	r7, r2
 800bba4:	f047 0720 	orr.w	r7, r7, #32
 800bba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bbaa:	601c      	str	r4, [r3, #0]
 800bbac:	9b04      	ldr	r3, [sp, #16]
 800bbae:	601d      	str	r5, [r3, #0]
 800bbb0:	e695      	b.n	800b8de <__gethex+0x12a>
 800bbb2:	4299      	cmp	r1, r3
 800bbb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bbb8:	d8d8      	bhi.n	800bb6c <__gethex+0x3b8>
 800bbba:	68a3      	ldr	r3, [r4, #8]
 800bbbc:	459b      	cmp	fp, r3
 800bbbe:	db19      	blt.n	800bbf4 <__gethex+0x440>
 800bbc0:	6861      	ldr	r1, [r4, #4]
 800bbc2:	ee18 0a10 	vmov	r0, s16
 800bbc6:	3101      	adds	r1, #1
 800bbc8:	f000 f996 	bl	800bef8 <_Balloc>
 800bbcc:	4681      	mov	r9, r0
 800bbce:	b918      	cbnz	r0, 800bbd8 <__gethex+0x424>
 800bbd0:	4b1a      	ldr	r3, [pc, #104]	; (800bc3c <__gethex+0x488>)
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	2184      	movs	r1, #132	; 0x84
 800bbd6:	e6a8      	b.n	800b92a <__gethex+0x176>
 800bbd8:	6922      	ldr	r2, [r4, #16]
 800bbda:	3202      	adds	r2, #2
 800bbdc:	f104 010c 	add.w	r1, r4, #12
 800bbe0:	0092      	lsls	r2, r2, #2
 800bbe2:	300c      	adds	r0, #12
 800bbe4:	f7fd f96a 	bl	8008ebc <memcpy>
 800bbe8:	4621      	mov	r1, r4
 800bbea:	ee18 0a10 	vmov	r0, s16
 800bbee:	f000 f9c3 	bl	800bf78 <_Bfree>
 800bbf2:	464c      	mov	r4, r9
 800bbf4:	6923      	ldr	r3, [r4, #16]
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbfc:	6122      	str	r2, [r4, #16]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	615a      	str	r2, [r3, #20]
 800bc02:	e7bb      	b.n	800bb7c <__gethex+0x3c8>
 800bc04:	6922      	ldr	r2, [r4, #16]
 800bc06:	455a      	cmp	r2, fp
 800bc08:	dd0b      	ble.n	800bc22 <__gethex+0x46e>
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f7ff fd69 	bl	800b6e4 <rshift>
 800bc12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc16:	3501      	adds	r5, #1
 800bc18:	42ab      	cmp	r3, r5
 800bc1a:	f6ff aed0 	blt.w	800b9be <__gethex+0x20a>
 800bc1e:	2701      	movs	r7, #1
 800bc20:	e7c0      	b.n	800bba4 <__gethex+0x3f0>
 800bc22:	f016 061f 	ands.w	r6, r6, #31
 800bc26:	d0fa      	beq.n	800bc1e <__gethex+0x46a>
 800bc28:	4453      	add	r3, sl
 800bc2a:	f1c6 0620 	rsb	r6, r6, #32
 800bc2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bc32:	f000 fa53 	bl	800c0dc <__hi0bits>
 800bc36:	42b0      	cmp	r0, r6
 800bc38:	dbe7      	blt.n	800bc0a <__gethex+0x456>
 800bc3a:	e7f0      	b.n	800bc1e <__gethex+0x46a>
 800bc3c:	0800d6d7 	.word	0x0800d6d7

0800bc40 <L_shift>:
 800bc40:	f1c2 0208 	rsb	r2, r2, #8
 800bc44:	0092      	lsls	r2, r2, #2
 800bc46:	b570      	push	{r4, r5, r6, lr}
 800bc48:	f1c2 0620 	rsb	r6, r2, #32
 800bc4c:	6843      	ldr	r3, [r0, #4]
 800bc4e:	6804      	ldr	r4, [r0, #0]
 800bc50:	fa03 f506 	lsl.w	r5, r3, r6
 800bc54:	432c      	orrs	r4, r5
 800bc56:	40d3      	lsrs	r3, r2
 800bc58:	6004      	str	r4, [r0, #0]
 800bc5a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bc5e:	4288      	cmp	r0, r1
 800bc60:	d3f4      	bcc.n	800bc4c <L_shift+0xc>
 800bc62:	bd70      	pop	{r4, r5, r6, pc}

0800bc64 <__match>:
 800bc64:	b530      	push	{r4, r5, lr}
 800bc66:	6803      	ldr	r3, [r0, #0]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc6e:	b914      	cbnz	r4, 800bc76 <__match+0x12>
 800bc70:	6003      	str	r3, [r0, #0]
 800bc72:	2001      	movs	r0, #1
 800bc74:	bd30      	pop	{r4, r5, pc}
 800bc76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bc7e:	2d19      	cmp	r5, #25
 800bc80:	bf98      	it	ls
 800bc82:	3220      	addls	r2, #32
 800bc84:	42a2      	cmp	r2, r4
 800bc86:	d0f0      	beq.n	800bc6a <__match+0x6>
 800bc88:	2000      	movs	r0, #0
 800bc8a:	e7f3      	b.n	800bc74 <__match+0x10>

0800bc8c <__hexnan>:
 800bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc90:	680b      	ldr	r3, [r1, #0]
 800bc92:	115e      	asrs	r6, r3, #5
 800bc94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bc98:	f013 031f 	ands.w	r3, r3, #31
 800bc9c:	b087      	sub	sp, #28
 800bc9e:	bf18      	it	ne
 800bca0:	3604      	addne	r6, #4
 800bca2:	2500      	movs	r5, #0
 800bca4:	1f37      	subs	r7, r6, #4
 800bca6:	4690      	mov	r8, r2
 800bca8:	6802      	ldr	r2, [r0, #0]
 800bcaa:	9301      	str	r3, [sp, #4]
 800bcac:	4682      	mov	sl, r0
 800bcae:	f846 5c04 	str.w	r5, [r6, #-4]
 800bcb2:	46b9      	mov	r9, r7
 800bcb4:	463c      	mov	r4, r7
 800bcb6:	9502      	str	r5, [sp, #8]
 800bcb8:	46ab      	mov	fp, r5
 800bcba:	7851      	ldrb	r1, [r2, #1]
 800bcbc:	1c53      	adds	r3, r2, #1
 800bcbe:	9303      	str	r3, [sp, #12]
 800bcc0:	b341      	cbz	r1, 800bd14 <__hexnan+0x88>
 800bcc2:	4608      	mov	r0, r1
 800bcc4:	9205      	str	r2, [sp, #20]
 800bcc6:	9104      	str	r1, [sp, #16]
 800bcc8:	f7ff fd5e 	bl	800b788 <__hexdig_fun>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d14f      	bne.n	800bd70 <__hexnan+0xe4>
 800bcd0:	9904      	ldr	r1, [sp, #16]
 800bcd2:	9a05      	ldr	r2, [sp, #20]
 800bcd4:	2920      	cmp	r1, #32
 800bcd6:	d818      	bhi.n	800bd0a <__hexnan+0x7e>
 800bcd8:	9b02      	ldr	r3, [sp, #8]
 800bcda:	459b      	cmp	fp, r3
 800bcdc:	dd13      	ble.n	800bd06 <__hexnan+0x7a>
 800bcde:	454c      	cmp	r4, r9
 800bce0:	d206      	bcs.n	800bcf0 <__hexnan+0x64>
 800bce2:	2d07      	cmp	r5, #7
 800bce4:	dc04      	bgt.n	800bcf0 <__hexnan+0x64>
 800bce6:	462a      	mov	r2, r5
 800bce8:	4649      	mov	r1, r9
 800bcea:	4620      	mov	r0, r4
 800bcec:	f7ff ffa8 	bl	800bc40 <L_shift>
 800bcf0:	4544      	cmp	r4, r8
 800bcf2:	d950      	bls.n	800bd96 <__hexnan+0x10a>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f1a4 0904 	sub.w	r9, r4, #4
 800bcfa:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcfe:	f8cd b008 	str.w	fp, [sp, #8]
 800bd02:	464c      	mov	r4, r9
 800bd04:	461d      	mov	r5, r3
 800bd06:	9a03      	ldr	r2, [sp, #12]
 800bd08:	e7d7      	b.n	800bcba <__hexnan+0x2e>
 800bd0a:	2929      	cmp	r1, #41	; 0x29
 800bd0c:	d156      	bne.n	800bdbc <__hexnan+0x130>
 800bd0e:	3202      	adds	r2, #2
 800bd10:	f8ca 2000 	str.w	r2, [sl]
 800bd14:	f1bb 0f00 	cmp.w	fp, #0
 800bd18:	d050      	beq.n	800bdbc <__hexnan+0x130>
 800bd1a:	454c      	cmp	r4, r9
 800bd1c:	d206      	bcs.n	800bd2c <__hexnan+0xa0>
 800bd1e:	2d07      	cmp	r5, #7
 800bd20:	dc04      	bgt.n	800bd2c <__hexnan+0xa0>
 800bd22:	462a      	mov	r2, r5
 800bd24:	4649      	mov	r1, r9
 800bd26:	4620      	mov	r0, r4
 800bd28:	f7ff ff8a 	bl	800bc40 <L_shift>
 800bd2c:	4544      	cmp	r4, r8
 800bd2e:	d934      	bls.n	800bd9a <__hexnan+0x10e>
 800bd30:	f1a8 0204 	sub.w	r2, r8, #4
 800bd34:	4623      	mov	r3, r4
 800bd36:	f853 1b04 	ldr.w	r1, [r3], #4
 800bd3a:	f842 1f04 	str.w	r1, [r2, #4]!
 800bd3e:	429f      	cmp	r7, r3
 800bd40:	d2f9      	bcs.n	800bd36 <__hexnan+0xaa>
 800bd42:	1b3b      	subs	r3, r7, r4
 800bd44:	f023 0303 	bic.w	r3, r3, #3
 800bd48:	3304      	adds	r3, #4
 800bd4a:	3401      	adds	r4, #1
 800bd4c:	3e03      	subs	r6, #3
 800bd4e:	42b4      	cmp	r4, r6
 800bd50:	bf88      	it	hi
 800bd52:	2304      	movhi	r3, #4
 800bd54:	4443      	add	r3, r8
 800bd56:	2200      	movs	r2, #0
 800bd58:	f843 2b04 	str.w	r2, [r3], #4
 800bd5c:	429f      	cmp	r7, r3
 800bd5e:	d2fb      	bcs.n	800bd58 <__hexnan+0xcc>
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	b91b      	cbnz	r3, 800bd6c <__hexnan+0xe0>
 800bd64:	4547      	cmp	r7, r8
 800bd66:	d127      	bne.n	800bdb8 <__hexnan+0x12c>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	603b      	str	r3, [r7, #0]
 800bd6c:	2005      	movs	r0, #5
 800bd6e:	e026      	b.n	800bdbe <__hexnan+0x132>
 800bd70:	3501      	adds	r5, #1
 800bd72:	2d08      	cmp	r5, #8
 800bd74:	f10b 0b01 	add.w	fp, fp, #1
 800bd78:	dd06      	ble.n	800bd88 <__hexnan+0xfc>
 800bd7a:	4544      	cmp	r4, r8
 800bd7c:	d9c3      	bls.n	800bd06 <__hexnan+0x7a>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd84:	2501      	movs	r5, #1
 800bd86:	3c04      	subs	r4, #4
 800bd88:	6822      	ldr	r2, [r4, #0]
 800bd8a:	f000 000f 	and.w	r0, r0, #15
 800bd8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bd92:	6022      	str	r2, [r4, #0]
 800bd94:	e7b7      	b.n	800bd06 <__hexnan+0x7a>
 800bd96:	2508      	movs	r5, #8
 800bd98:	e7b5      	b.n	800bd06 <__hexnan+0x7a>
 800bd9a:	9b01      	ldr	r3, [sp, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d0df      	beq.n	800bd60 <__hexnan+0xd4>
 800bda0:	f04f 32ff 	mov.w	r2, #4294967295
 800bda4:	f1c3 0320 	rsb	r3, r3, #32
 800bda8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bdb0:	401a      	ands	r2, r3
 800bdb2:	f846 2c04 	str.w	r2, [r6, #-4]
 800bdb6:	e7d3      	b.n	800bd60 <__hexnan+0xd4>
 800bdb8:	3f04      	subs	r7, #4
 800bdba:	e7d1      	b.n	800bd60 <__hexnan+0xd4>
 800bdbc:	2004      	movs	r0, #4
 800bdbe:	b007      	add	sp, #28
 800bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bdc4 <_localeconv_r>:
 800bdc4:	4800      	ldr	r0, [pc, #0]	; (800bdc8 <_localeconv_r+0x4>)
 800bdc6:	4770      	bx	lr
 800bdc8:	20000454 	.word	0x20000454

0800bdcc <_lseek_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4d07      	ldr	r5, [pc, #28]	; (800bdec <_lseek_r+0x20>)
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	4608      	mov	r0, r1
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	602a      	str	r2, [r5, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	f7f6 ffa8 	bl	8002d30 <_lseek>
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	d102      	bne.n	800bdea <_lseek_r+0x1e>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	b103      	cbz	r3, 800bdea <_lseek_r+0x1e>
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	20005ec0 	.word	0x20005ec0

0800bdf0 <__swhatbuf_r>:
 800bdf0:	b570      	push	{r4, r5, r6, lr}
 800bdf2:	460e      	mov	r6, r1
 800bdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf8:	2900      	cmp	r1, #0
 800bdfa:	b096      	sub	sp, #88	; 0x58
 800bdfc:	4614      	mov	r4, r2
 800bdfe:	461d      	mov	r5, r3
 800be00:	da08      	bge.n	800be14 <__swhatbuf_r+0x24>
 800be02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	602a      	str	r2, [r5, #0]
 800be0a:	061a      	lsls	r2, r3, #24
 800be0c:	d410      	bmi.n	800be30 <__swhatbuf_r+0x40>
 800be0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be12:	e00e      	b.n	800be32 <__swhatbuf_r+0x42>
 800be14:	466a      	mov	r2, sp
 800be16:	f001 f88b 	bl	800cf30 <_fstat_r>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	dbf1      	blt.n	800be02 <__swhatbuf_r+0x12>
 800be1e:	9a01      	ldr	r2, [sp, #4]
 800be20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be28:	425a      	negs	r2, r3
 800be2a:	415a      	adcs	r2, r3
 800be2c:	602a      	str	r2, [r5, #0]
 800be2e:	e7ee      	b.n	800be0e <__swhatbuf_r+0x1e>
 800be30:	2340      	movs	r3, #64	; 0x40
 800be32:	2000      	movs	r0, #0
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	b016      	add	sp, #88	; 0x58
 800be38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be3c <__smakebuf_r>:
 800be3c:	898b      	ldrh	r3, [r1, #12]
 800be3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be40:	079d      	lsls	r5, r3, #30
 800be42:	4606      	mov	r6, r0
 800be44:	460c      	mov	r4, r1
 800be46:	d507      	bpl.n	800be58 <__smakebuf_r+0x1c>
 800be48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	6123      	str	r3, [r4, #16]
 800be50:	2301      	movs	r3, #1
 800be52:	6163      	str	r3, [r4, #20]
 800be54:	b002      	add	sp, #8
 800be56:	bd70      	pop	{r4, r5, r6, pc}
 800be58:	ab01      	add	r3, sp, #4
 800be5a:	466a      	mov	r2, sp
 800be5c:	f7ff ffc8 	bl	800bdf0 <__swhatbuf_r>
 800be60:	9900      	ldr	r1, [sp, #0]
 800be62:	4605      	mov	r5, r0
 800be64:	4630      	mov	r0, r6
 800be66:	f7fd f8ab 	bl	8008fc0 <_malloc_r>
 800be6a:	b948      	cbnz	r0, 800be80 <__smakebuf_r+0x44>
 800be6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be70:	059a      	lsls	r2, r3, #22
 800be72:	d4ef      	bmi.n	800be54 <__smakebuf_r+0x18>
 800be74:	f023 0303 	bic.w	r3, r3, #3
 800be78:	f043 0302 	orr.w	r3, r3, #2
 800be7c:	81a3      	strh	r3, [r4, #12]
 800be7e:	e7e3      	b.n	800be48 <__smakebuf_r+0xc>
 800be80:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <__smakebuf_r+0x7c>)
 800be82:	62b3      	str	r3, [r6, #40]	; 0x28
 800be84:	89a3      	ldrh	r3, [r4, #12]
 800be86:	6020      	str	r0, [r4, #0]
 800be88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be8c:	81a3      	strh	r3, [r4, #12]
 800be8e:	9b00      	ldr	r3, [sp, #0]
 800be90:	6163      	str	r3, [r4, #20]
 800be92:	9b01      	ldr	r3, [sp, #4]
 800be94:	6120      	str	r0, [r4, #16]
 800be96:	b15b      	cbz	r3, 800beb0 <__smakebuf_r+0x74>
 800be98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be9c:	4630      	mov	r0, r6
 800be9e:	f001 f859 	bl	800cf54 <_isatty_r>
 800bea2:	b128      	cbz	r0, 800beb0 <__smakebuf_r+0x74>
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	f023 0303 	bic.w	r3, r3, #3
 800beaa:	f043 0301 	orr.w	r3, r3, #1
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	89a0      	ldrh	r0, [r4, #12]
 800beb2:	4305      	orrs	r5, r0
 800beb4:	81a5      	strh	r5, [r4, #12]
 800beb6:	e7cd      	b.n	800be54 <__smakebuf_r+0x18>
 800beb8:	08008ca9 	.word	0x08008ca9

0800bebc <__ascii_mbtowc>:
 800bebc:	b082      	sub	sp, #8
 800bebe:	b901      	cbnz	r1, 800bec2 <__ascii_mbtowc+0x6>
 800bec0:	a901      	add	r1, sp, #4
 800bec2:	b142      	cbz	r2, 800bed6 <__ascii_mbtowc+0x1a>
 800bec4:	b14b      	cbz	r3, 800beda <__ascii_mbtowc+0x1e>
 800bec6:	7813      	ldrb	r3, [r2, #0]
 800bec8:	600b      	str	r3, [r1, #0]
 800beca:	7812      	ldrb	r2, [r2, #0]
 800becc:	1e10      	subs	r0, r2, #0
 800bece:	bf18      	it	ne
 800bed0:	2001      	movne	r0, #1
 800bed2:	b002      	add	sp, #8
 800bed4:	4770      	bx	lr
 800bed6:	4610      	mov	r0, r2
 800bed8:	e7fb      	b.n	800bed2 <__ascii_mbtowc+0x16>
 800beda:	f06f 0001 	mvn.w	r0, #1
 800bede:	e7f8      	b.n	800bed2 <__ascii_mbtowc+0x16>

0800bee0 <__malloc_lock>:
 800bee0:	4801      	ldr	r0, [pc, #4]	; (800bee8 <__malloc_lock+0x8>)
 800bee2:	f7fc bfd8 	b.w	8008e96 <__retarget_lock_acquire_recursive>
 800bee6:	bf00      	nop
 800bee8:	20005eb4 	.word	0x20005eb4

0800beec <__malloc_unlock>:
 800beec:	4801      	ldr	r0, [pc, #4]	; (800bef4 <__malloc_unlock+0x8>)
 800beee:	f7fc bfd3 	b.w	8008e98 <__retarget_lock_release_recursive>
 800bef2:	bf00      	nop
 800bef4:	20005eb4 	.word	0x20005eb4

0800bef8 <_Balloc>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800befc:	4604      	mov	r4, r0
 800befe:	460d      	mov	r5, r1
 800bf00:	b976      	cbnz	r6, 800bf20 <_Balloc+0x28>
 800bf02:	2010      	movs	r0, #16
 800bf04:	f7fc ffca 	bl	8008e9c <malloc>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	6260      	str	r0, [r4, #36]	; 0x24
 800bf0c:	b920      	cbnz	r0, 800bf18 <_Balloc+0x20>
 800bf0e:	4b18      	ldr	r3, [pc, #96]	; (800bf70 <_Balloc+0x78>)
 800bf10:	4818      	ldr	r0, [pc, #96]	; (800bf74 <_Balloc+0x7c>)
 800bf12:	2166      	movs	r1, #102	; 0x66
 800bf14:	f000 ffdc 	bl	800ced0 <__assert_func>
 800bf18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf1c:	6006      	str	r6, [r0, #0]
 800bf1e:	60c6      	str	r6, [r0, #12]
 800bf20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf22:	68f3      	ldr	r3, [r6, #12]
 800bf24:	b183      	cbz	r3, 800bf48 <_Balloc+0x50>
 800bf26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf2e:	b9b8      	cbnz	r0, 800bf60 <_Balloc+0x68>
 800bf30:	2101      	movs	r1, #1
 800bf32:	fa01 f605 	lsl.w	r6, r1, r5
 800bf36:	1d72      	adds	r2, r6, #5
 800bf38:	0092      	lsls	r2, r2, #2
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f000 fc9d 	bl	800c87a <_calloc_r>
 800bf40:	b160      	cbz	r0, 800bf5c <_Balloc+0x64>
 800bf42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf46:	e00e      	b.n	800bf66 <_Balloc+0x6e>
 800bf48:	2221      	movs	r2, #33	; 0x21
 800bf4a:	2104      	movs	r1, #4
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f000 fc94 	bl	800c87a <_calloc_r>
 800bf52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf54:	60f0      	str	r0, [r6, #12]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1e4      	bne.n	800bf26 <_Balloc+0x2e>
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	bd70      	pop	{r4, r5, r6, pc}
 800bf60:	6802      	ldr	r2, [r0, #0]
 800bf62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf66:	2300      	movs	r3, #0
 800bf68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf6c:	e7f7      	b.n	800bf5e <_Balloc+0x66>
 800bf6e:	bf00      	nop
 800bf70:	0800d665 	.word	0x0800d665
 800bf74:	0800d764 	.word	0x0800d764

0800bf78 <_Bfree>:
 800bf78:	b570      	push	{r4, r5, r6, lr}
 800bf7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	460c      	mov	r4, r1
 800bf80:	b976      	cbnz	r6, 800bfa0 <_Bfree+0x28>
 800bf82:	2010      	movs	r0, #16
 800bf84:	f7fc ff8a 	bl	8008e9c <malloc>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	6268      	str	r0, [r5, #36]	; 0x24
 800bf8c:	b920      	cbnz	r0, 800bf98 <_Bfree+0x20>
 800bf8e:	4b09      	ldr	r3, [pc, #36]	; (800bfb4 <_Bfree+0x3c>)
 800bf90:	4809      	ldr	r0, [pc, #36]	; (800bfb8 <_Bfree+0x40>)
 800bf92:	218a      	movs	r1, #138	; 0x8a
 800bf94:	f000 ff9c 	bl	800ced0 <__assert_func>
 800bf98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf9c:	6006      	str	r6, [r0, #0]
 800bf9e:	60c6      	str	r6, [r0, #12]
 800bfa0:	b13c      	cbz	r4, 800bfb2 <_Bfree+0x3a>
 800bfa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfa4:	6862      	ldr	r2, [r4, #4]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfac:	6021      	str	r1, [r4, #0]
 800bfae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	0800d665 	.word	0x0800d665
 800bfb8:	0800d764 	.word	0x0800d764

0800bfbc <__multadd>:
 800bfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc0:	690d      	ldr	r5, [r1, #16]
 800bfc2:	4607      	mov	r7, r0
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	461e      	mov	r6, r3
 800bfc8:	f101 0c14 	add.w	ip, r1, #20
 800bfcc:	2000      	movs	r0, #0
 800bfce:	f8dc 3000 	ldr.w	r3, [ip]
 800bfd2:	b299      	uxth	r1, r3
 800bfd4:	fb02 6101 	mla	r1, r2, r1, r6
 800bfd8:	0c1e      	lsrs	r6, r3, #16
 800bfda:	0c0b      	lsrs	r3, r1, #16
 800bfdc:	fb02 3306 	mla	r3, r2, r6, r3
 800bfe0:	b289      	uxth	r1, r1
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfe8:	4285      	cmp	r5, r0
 800bfea:	f84c 1b04 	str.w	r1, [ip], #4
 800bfee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bff2:	dcec      	bgt.n	800bfce <__multadd+0x12>
 800bff4:	b30e      	cbz	r6, 800c03a <__multadd+0x7e>
 800bff6:	68a3      	ldr	r3, [r4, #8]
 800bff8:	42ab      	cmp	r3, r5
 800bffa:	dc19      	bgt.n	800c030 <__multadd+0x74>
 800bffc:	6861      	ldr	r1, [r4, #4]
 800bffe:	4638      	mov	r0, r7
 800c000:	3101      	adds	r1, #1
 800c002:	f7ff ff79 	bl	800bef8 <_Balloc>
 800c006:	4680      	mov	r8, r0
 800c008:	b928      	cbnz	r0, 800c016 <__multadd+0x5a>
 800c00a:	4602      	mov	r2, r0
 800c00c:	4b0c      	ldr	r3, [pc, #48]	; (800c040 <__multadd+0x84>)
 800c00e:	480d      	ldr	r0, [pc, #52]	; (800c044 <__multadd+0x88>)
 800c010:	21b5      	movs	r1, #181	; 0xb5
 800c012:	f000 ff5d 	bl	800ced0 <__assert_func>
 800c016:	6922      	ldr	r2, [r4, #16]
 800c018:	3202      	adds	r2, #2
 800c01a:	f104 010c 	add.w	r1, r4, #12
 800c01e:	0092      	lsls	r2, r2, #2
 800c020:	300c      	adds	r0, #12
 800c022:	f7fc ff4b 	bl	8008ebc <memcpy>
 800c026:	4621      	mov	r1, r4
 800c028:	4638      	mov	r0, r7
 800c02a:	f7ff ffa5 	bl	800bf78 <_Bfree>
 800c02e:	4644      	mov	r4, r8
 800c030:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c034:	3501      	adds	r5, #1
 800c036:	615e      	str	r6, [r3, #20]
 800c038:	6125      	str	r5, [r4, #16]
 800c03a:	4620      	mov	r0, r4
 800c03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c040:	0800d6d7 	.word	0x0800d6d7
 800c044:	0800d764 	.word	0x0800d764

0800c048 <__s2b>:
 800c048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c04c:	460c      	mov	r4, r1
 800c04e:	4615      	mov	r5, r2
 800c050:	461f      	mov	r7, r3
 800c052:	2209      	movs	r2, #9
 800c054:	3308      	adds	r3, #8
 800c056:	4606      	mov	r6, r0
 800c058:	fb93 f3f2 	sdiv	r3, r3, r2
 800c05c:	2100      	movs	r1, #0
 800c05e:	2201      	movs	r2, #1
 800c060:	429a      	cmp	r2, r3
 800c062:	db09      	blt.n	800c078 <__s2b+0x30>
 800c064:	4630      	mov	r0, r6
 800c066:	f7ff ff47 	bl	800bef8 <_Balloc>
 800c06a:	b940      	cbnz	r0, 800c07e <__s2b+0x36>
 800c06c:	4602      	mov	r2, r0
 800c06e:	4b19      	ldr	r3, [pc, #100]	; (800c0d4 <__s2b+0x8c>)
 800c070:	4819      	ldr	r0, [pc, #100]	; (800c0d8 <__s2b+0x90>)
 800c072:	21ce      	movs	r1, #206	; 0xce
 800c074:	f000 ff2c 	bl	800ced0 <__assert_func>
 800c078:	0052      	lsls	r2, r2, #1
 800c07a:	3101      	adds	r1, #1
 800c07c:	e7f0      	b.n	800c060 <__s2b+0x18>
 800c07e:	9b08      	ldr	r3, [sp, #32]
 800c080:	6143      	str	r3, [r0, #20]
 800c082:	2d09      	cmp	r5, #9
 800c084:	f04f 0301 	mov.w	r3, #1
 800c088:	6103      	str	r3, [r0, #16]
 800c08a:	dd16      	ble.n	800c0ba <__s2b+0x72>
 800c08c:	f104 0909 	add.w	r9, r4, #9
 800c090:	46c8      	mov	r8, r9
 800c092:	442c      	add	r4, r5
 800c094:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c098:	4601      	mov	r1, r0
 800c09a:	3b30      	subs	r3, #48	; 0x30
 800c09c:	220a      	movs	r2, #10
 800c09e:	4630      	mov	r0, r6
 800c0a0:	f7ff ff8c 	bl	800bfbc <__multadd>
 800c0a4:	45a0      	cmp	r8, r4
 800c0a6:	d1f5      	bne.n	800c094 <__s2b+0x4c>
 800c0a8:	f1a5 0408 	sub.w	r4, r5, #8
 800c0ac:	444c      	add	r4, r9
 800c0ae:	1b2d      	subs	r5, r5, r4
 800c0b0:	1963      	adds	r3, r4, r5
 800c0b2:	42bb      	cmp	r3, r7
 800c0b4:	db04      	blt.n	800c0c0 <__s2b+0x78>
 800c0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ba:	340a      	adds	r4, #10
 800c0bc:	2509      	movs	r5, #9
 800c0be:	e7f6      	b.n	800c0ae <__s2b+0x66>
 800c0c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0c4:	4601      	mov	r1, r0
 800c0c6:	3b30      	subs	r3, #48	; 0x30
 800c0c8:	220a      	movs	r2, #10
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	f7ff ff76 	bl	800bfbc <__multadd>
 800c0d0:	e7ee      	b.n	800c0b0 <__s2b+0x68>
 800c0d2:	bf00      	nop
 800c0d4:	0800d6d7 	.word	0x0800d6d7
 800c0d8:	0800d764 	.word	0x0800d764

0800c0dc <__hi0bits>:
 800c0dc:	0c03      	lsrs	r3, r0, #16
 800c0de:	041b      	lsls	r3, r3, #16
 800c0e0:	b9d3      	cbnz	r3, 800c118 <__hi0bits+0x3c>
 800c0e2:	0400      	lsls	r0, r0, #16
 800c0e4:	2310      	movs	r3, #16
 800c0e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0ea:	bf04      	itt	eq
 800c0ec:	0200      	lsleq	r0, r0, #8
 800c0ee:	3308      	addeq	r3, #8
 800c0f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0f4:	bf04      	itt	eq
 800c0f6:	0100      	lsleq	r0, r0, #4
 800c0f8:	3304      	addeq	r3, #4
 800c0fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0fe:	bf04      	itt	eq
 800c100:	0080      	lsleq	r0, r0, #2
 800c102:	3302      	addeq	r3, #2
 800c104:	2800      	cmp	r0, #0
 800c106:	db05      	blt.n	800c114 <__hi0bits+0x38>
 800c108:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c10c:	f103 0301 	add.w	r3, r3, #1
 800c110:	bf08      	it	eq
 800c112:	2320      	moveq	r3, #32
 800c114:	4618      	mov	r0, r3
 800c116:	4770      	bx	lr
 800c118:	2300      	movs	r3, #0
 800c11a:	e7e4      	b.n	800c0e6 <__hi0bits+0xa>

0800c11c <__lo0bits>:
 800c11c:	6803      	ldr	r3, [r0, #0]
 800c11e:	f013 0207 	ands.w	r2, r3, #7
 800c122:	4601      	mov	r1, r0
 800c124:	d00b      	beq.n	800c13e <__lo0bits+0x22>
 800c126:	07da      	lsls	r2, r3, #31
 800c128:	d423      	bmi.n	800c172 <__lo0bits+0x56>
 800c12a:	0798      	lsls	r0, r3, #30
 800c12c:	bf49      	itett	mi
 800c12e:	085b      	lsrmi	r3, r3, #1
 800c130:	089b      	lsrpl	r3, r3, #2
 800c132:	2001      	movmi	r0, #1
 800c134:	600b      	strmi	r3, [r1, #0]
 800c136:	bf5c      	itt	pl
 800c138:	600b      	strpl	r3, [r1, #0]
 800c13a:	2002      	movpl	r0, #2
 800c13c:	4770      	bx	lr
 800c13e:	b298      	uxth	r0, r3
 800c140:	b9a8      	cbnz	r0, 800c16e <__lo0bits+0x52>
 800c142:	0c1b      	lsrs	r3, r3, #16
 800c144:	2010      	movs	r0, #16
 800c146:	b2da      	uxtb	r2, r3
 800c148:	b90a      	cbnz	r2, 800c14e <__lo0bits+0x32>
 800c14a:	3008      	adds	r0, #8
 800c14c:	0a1b      	lsrs	r3, r3, #8
 800c14e:	071a      	lsls	r2, r3, #28
 800c150:	bf04      	itt	eq
 800c152:	091b      	lsreq	r3, r3, #4
 800c154:	3004      	addeq	r0, #4
 800c156:	079a      	lsls	r2, r3, #30
 800c158:	bf04      	itt	eq
 800c15a:	089b      	lsreq	r3, r3, #2
 800c15c:	3002      	addeq	r0, #2
 800c15e:	07da      	lsls	r2, r3, #31
 800c160:	d403      	bmi.n	800c16a <__lo0bits+0x4e>
 800c162:	085b      	lsrs	r3, r3, #1
 800c164:	f100 0001 	add.w	r0, r0, #1
 800c168:	d005      	beq.n	800c176 <__lo0bits+0x5a>
 800c16a:	600b      	str	r3, [r1, #0]
 800c16c:	4770      	bx	lr
 800c16e:	4610      	mov	r0, r2
 800c170:	e7e9      	b.n	800c146 <__lo0bits+0x2a>
 800c172:	2000      	movs	r0, #0
 800c174:	4770      	bx	lr
 800c176:	2020      	movs	r0, #32
 800c178:	4770      	bx	lr
	...

0800c17c <__i2b>:
 800c17c:	b510      	push	{r4, lr}
 800c17e:	460c      	mov	r4, r1
 800c180:	2101      	movs	r1, #1
 800c182:	f7ff feb9 	bl	800bef8 <_Balloc>
 800c186:	4602      	mov	r2, r0
 800c188:	b928      	cbnz	r0, 800c196 <__i2b+0x1a>
 800c18a:	4b05      	ldr	r3, [pc, #20]	; (800c1a0 <__i2b+0x24>)
 800c18c:	4805      	ldr	r0, [pc, #20]	; (800c1a4 <__i2b+0x28>)
 800c18e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c192:	f000 fe9d 	bl	800ced0 <__assert_func>
 800c196:	2301      	movs	r3, #1
 800c198:	6144      	str	r4, [r0, #20]
 800c19a:	6103      	str	r3, [r0, #16]
 800c19c:	bd10      	pop	{r4, pc}
 800c19e:	bf00      	nop
 800c1a0:	0800d6d7 	.word	0x0800d6d7
 800c1a4:	0800d764 	.word	0x0800d764

0800c1a8 <__multiply>:
 800c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	4691      	mov	r9, r2
 800c1ae:	690a      	ldr	r2, [r1, #16]
 800c1b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	bfb8      	it	lt
 800c1b8:	460b      	movlt	r3, r1
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	bfbc      	itt	lt
 800c1be:	464c      	movlt	r4, r9
 800c1c0:	4699      	movlt	r9, r3
 800c1c2:	6927      	ldr	r7, [r4, #16]
 800c1c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1c8:	68a3      	ldr	r3, [r4, #8]
 800c1ca:	6861      	ldr	r1, [r4, #4]
 800c1cc:	eb07 060a 	add.w	r6, r7, sl
 800c1d0:	42b3      	cmp	r3, r6
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	bfb8      	it	lt
 800c1d6:	3101      	addlt	r1, #1
 800c1d8:	f7ff fe8e 	bl	800bef8 <_Balloc>
 800c1dc:	b930      	cbnz	r0, 800c1ec <__multiply+0x44>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	4b44      	ldr	r3, [pc, #272]	; (800c2f4 <__multiply+0x14c>)
 800c1e2:	4845      	ldr	r0, [pc, #276]	; (800c2f8 <__multiply+0x150>)
 800c1e4:	f240 115d 	movw	r1, #349	; 0x15d
 800c1e8:	f000 fe72 	bl	800ced0 <__assert_func>
 800c1ec:	f100 0514 	add.w	r5, r0, #20
 800c1f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1f4:	462b      	mov	r3, r5
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	4543      	cmp	r3, r8
 800c1fa:	d321      	bcc.n	800c240 <__multiply+0x98>
 800c1fc:	f104 0314 	add.w	r3, r4, #20
 800c200:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c204:	f109 0314 	add.w	r3, r9, #20
 800c208:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c20c:	9202      	str	r2, [sp, #8]
 800c20e:	1b3a      	subs	r2, r7, r4
 800c210:	3a15      	subs	r2, #21
 800c212:	f022 0203 	bic.w	r2, r2, #3
 800c216:	3204      	adds	r2, #4
 800c218:	f104 0115 	add.w	r1, r4, #21
 800c21c:	428f      	cmp	r7, r1
 800c21e:	bf38      	it	cc
 800c220:	2204      	movcc	r2, #4
 800c222:	9201      	str	r2, [sp, #4]
 800c224:	9a02      	ldr	r2, [sp, #8]
 800c226:	9303      	str	r3, [sp, #12]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d80c      	bhi.n	800c246 <__multiply+0x9e>
 800c22c:	2e00      	cmp	r6, #0
 800c22e:	dd03      	ble.n	800c238 <__multiply+0x90>
 800c230:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c234:	2b00      	cmp	r3, #0
 800c236:	d05a      	beq.n	800c2ee <__multiply+0x146>
 800c238:	6106      	str	r6, [r0, #16]
 800c23a:	b005      	add	sp, #20
 800c23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c240:	f843 2b04 	str.w	r2, [r3], #4
 800c244:	e7d8      	b.n	800c1f8 <__multiply+0x50>
 800c246:	f8b3 a000 	ldrh.w	sl, [r3]
 800c24a:	f1ba 0f00 	cmp.w	sl, #0
 800c24e:	d024      	beq.n	800c29a <__multiply+0xf2>
 800c250:	f104 0e14 	add.w	lr, r4, #20
 800c254:	46a9      	mov	r9, r5
 800c256:	f04f 0c00 	mov.w	ip, #0
 800c25a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c25e:	f8d9 1000 	ldr.w	r1, [r9]
 800c262:	fa1f fb82 	uxth.w	fp, r2
 800c266:	b289      	uxth	r1, r1
 800c268:	fb0a 110b 	mla	r1, sl, fp, r1
 800c26c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c270:	f8d9 2000 	ldr.w	r2, [r9]
 800c274:	4461      	add	r1, ip
 800c276:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c27a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c27e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c282:	b289      	uxth	r1, r1
 800c284:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c288:	4577      	cmp	r7, lr
 800c28a:	f849 1b04 	str.w	r1, [r9], #4
 800c28e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c292:	d8e2      	bhi.n	800c25a <__multiply+0xb2>
 800c294:	9a01      	ldr	r2, [sp, #4]
 800c296:	f845 c002 	str.w	ip, [r5, r2]
 800c29a:	9a03      	ldr	r2, [sp, #12]
 800c29c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	f1b9 0f00 	cmp.w	r9, #0
 800c2a6:	d020      	beq.n	800c2ea <__multiply+0x142>
 800c2a8:	6829      	ldr	r1, [r5, #0]
 800c2aa:	f104 0c14 	add.w	ip, r4, #20
 800c2ae:	46ae      	mov	lr, r5
 800c2b0:	f04f 0a00 	mov.w	sl, #0
 800c2b4:	f8bc b000 	ldrh.w	fp, [ip]
 800c2b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2bc:	fb09 220b 	mla	r2, r9, fp, r2
 800c2c0:	4492      	add	sl, r2
 800c2c2:	b289      	uxth	r1, r1
 800c2c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c2c8:	f84e 1b04 	str.w	r1, [lr], #4
 800c2cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2d0:	f8be 1000 	ldrh.w	r1, [lr]
 800c2d4:	0c12      	lsrs	r2, r2, #16
 800c2d6:	fb09 1102 	mla	r1, r9, r2, r1
 800c2da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c2de:	4567      	cmp	r7, ip
 800c2e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2e4:	d8e6      	bhi.n	800c2b4 <__multiply+0x10c>
 800c2e6:	9a01      	ldr	r2, [sp, #4]
 800c2e8:	50a9      	str	r1, [r5, r2]
 800c2ea:	3504      	adds	r5, #4
 800c2ec:	e79a      	b.n	800c224 <__multiply+0x7c>
 800c2ee:	3e01      	subs	r6, #1
 800c2f0:	e79c      	b.n	800c22c <__multiply+0x84>
 800c2f2:	bf00      	nop
 800c2f4:	0800d6d7 	.word	0x0800d6d7
 800c2f8:	0800d764 	.word	0x0800d764

0800c2fc <__pow5mult>:
 800c2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c300:	4615      	mov	r5, r2
 800c302:	f012 0203 	ands.w	r2, r2, #3
 800c306:	4606      	mov	r6, r0
 800c308:	460f      	mov	r7, r1
 800c30a:	d007      	beq.n	800c31c <__pow5mult+0x20>
 800c30c:	4c25      	ldr	r4, [pc, #148]	; (800c3a4 <__pow5mult+0xa8>)
 800c30e:	3a01      	subs	r2, #1
 800c310:	2300      	movs	r3, #0
 800c312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c316:	f7ff fe51 	bl	800bfbc <__multadd>
 800c31a:	4607      	mov	r7, r0
 800c31c:	10ad      	asrs	r5, r5, #2
 800c31e:	d03d      	beq.n	800c39c <__pow5mult+0xa0>
 800c320:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c322:	b97c      	cbnz	r4, 800c344 <__pow5mult+0x48>
 800c324:	2010      	movs	r0, #16
 800c326:	f7fc fdb9 	bl	8008e9c <malloc>
 800c32a:	4602      	mov	r2, r0
 800c32c:	6270      	str	r0, [r6, #36]	; 0x24
 800c32e:	b928      	cbnz	r0, 800c33c <__pow5mult+0x40>
 800c330:	4b1d      	ldr	r3, [pc, #116]	; (800c3a8 <__pow5mult+0xac>)
 800c332:	481e      	ldr	r0, [pc, #120]	; (800c3ac <__pow5mult+0xb0>)
 800c334:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c338:	f000 fdca 	bl	800ced0 <__assert_func>
 800c33c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c340:	6004      	str	r4, [r0, #0]
 800c342:	60c4      	str	r4, [r0, #12]
 800c344:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c34c:	b94c      	cbnz	r4, 800c362 <__pow5mult+0x66>
 800c34e:	f240 2171 	movw	r1, #625	; 0x271
 800c352:	4630      	mov	r0, r6
 800c354:	f7ff ff12 	bl	800c17c <__i2b>
 800c358:	2300      	movs	r3, #0
 800c35a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c35e:	4604      	mov	r4, r0
 800c360:	6003      	str	r3, [r0, #0]
 800c362:	f04f 0900 	mov.w	r9, #0
 800c366:	07eb      	lsls	r3, r5, #31
 800c368:	d50a      	bpl.n	800c380 <__pow5mult+0x84>
 800c36a:	4639      	mov	r1, r7
 800c36c:	4622      	mov	r2, r4
 800c36e:	4630      	mov	r0, r6
 800c370:	f7ff ff1a 	bl	800c1a8 <__multiply>
 800c374:	4639      	mov	r1, r7
 800c376:	4680      	mov	r8, r0
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff fdfd 	bl	800bf78 <_Bfree>
 800c37e:	4647      	mov	r7, r8
 800c380:	106d      	asrs	r5, r5, #1
 800c382:	d00b      	beq.n	800c39c <__pow5mult+0xa0>
 800c384:	6820      	ldr	r0, [r4, #0]
 800c386:	b938      	cbnz	r0, 800c398 <__pow5mult+0x9c>
 800c388:	4622      	mov	r2, r4
 800c38a:	4621      	mov	r1, r4
 800c38c:	4630      	mov	r0, r6
 800c38e:	f7ff ff0b 	bl	800c1a8 <__multiply>
 800c392:	6020      	str	r0, [r4, #0]
 800c394:	f8c0 9000 	str.w	r9, [r0]
 800c398:	4604      	mov	r4, r0
 800c39a:	e7e4      	b.n	800c366 <__pow5mult+0x6a>
 800c39c:	4638      	mov	r0, r7
 800c39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3a2:	bf00      	nop
 800c3a4:	0800d8b0 	.word	0x0800d8b0
 800c3a8:	0800d665 	.word	0x0800d665
 800c3ac:	0800d764 	.word	0x0800d764

0800c3b0 <__lshift>:
 800c3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	6849      	ldr	r1, [r1, #4]
 800c3b8:	6923      	ldr	r3, [r4, #16]
 800c3ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3be:	68a3      	ldr	r3, [r4, #8]
 800c3c0:	4607      	mov	r7, r0
 800c3c2:	4691      	mov	r9, r2
 800c3c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3c8:	f108 0601 	add.w	r6, r8, #1
 800c3cc:	42b3      	cmp	r3, r6
 800c3ce:	db0b      	blt.n	800c3e8 <__lshift+0x38>
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	f7ff fd91 	bl	800bef8 <_Balloc>
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	b948      	cbnz	r0, 800c3ee <__lshift+0x3e>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	4b2a      	ldr	r3, [pc, #168]	; (800c488 <__lshift+0xd8>)
 800c3de:	482b      	ldr	r0, [pc, #172]	; (800c48c <__lshift+0xdc>)
 800c3e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3e4:	f000 fd74 	bl	800ced0 <__assert_func>
 800c3e8:	3101      	adds	r1, #1
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	e7ee      	b.n	800c3cc <__lshift+0x1c>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	f100 0114 	add.w	r1, r0, #20
 800c3f4:	f100 0210 	add.w	r2, r0, #16
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	4553      	cmp	r3, sl
 800c3fc:	db37      	blt.n	800c46e <__lshift+0xbe>
 800c3fe:	6920      	ldr	r0, [r4, #16]
 800c400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c404:	f104 0314 	add.w	r3, r4, #20
 800c408:	f019 091f 	ands.w	r9, r9, #31
 800c40c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c414:	d02f      	beq.n	800c476 <__lshift+0xc6>
 800c416:	f1c9 0e20 	rsb	lr, r9, #32
 800c41a:	468a      	mov	sl, r1
 800c41c:	f04f 0c00 	mov.w	ip, #0
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	fa02 f209 	lsl.w	r2, r2, r9
 800c426:	ea42 020c 	orr.w	r2, r2, ip
 800c42a:	f84a 2b04 	str.w	r2, [sl], #4
 800c42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c432:	4298      	cmp	r0, r3
 800c434:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c438:	d8f2      	bhi.n	800c420 <__lshift+0x70>
 800c43a:	1b03      	subs	r3, r0, r4
 800c43c:	3b15      	subs	r3, #21
 800c43e:	f023 0303 	bic.w	r3, r3, #3
 800c442:	3304      	adds	r3, #4
 800c444:	f104 0215 	add.w	r2, r4, #21
 800c448:	4290      	cmp	r0, r2
 800c44a:	bf38      	it	cc
 800c44c:	2304      	movcc	r3, #4
 800c44e:	f841 c003 	str.w	ip, [r1, r3]
 800c452:	f1bc 0f00 	cmp.w	ip, #0
 800c456:	d001      	beq.n	800c45c <__lshift+0xac>
 800c458:	f108 0602 	add.w	r6, r8, #2
 800c45c:	3e01      	subs	r6, #1
 800c45e:	4638      	mov	r0, r7
 800c460:	612e      	str	r6, [r5, #16]
 800c462:	4621      	mov	r1, r4
 800c464:	f7ff fd88 	bl	800bf78 <_Bfree>
 800c468:	4628      	mov	r0, r5
 800c46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c46e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c472:	3301      	adds	r3, #1
 800c474:	e7c1      	b.n	800c3fa <__lshift+0x4a>
 800c476:	3904      	subs	r1, #4
 800c478:	f853 2b04 	ldr.w	r2, [r3], #4
 800c47c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c480:	4298      	cmp	r0, r3
 800c482:	d8f9      	bhi.n	800c478 <__lshift+0xc8>
 800c484:	e7ea      	b.n	800c45c <__lshift+0xac>
 800c486:	bf00      	nop
 800c488:	0800d6d7 	.word	0x0800d6d7
 800c48c:	0800d764 	.word	0x0800d764

0800c490 <__mcmp>:
 800c490:	b530      	push	{r4, r5, lr}
 800c492:	6902      	ldr	r2, [r0, #16]
 800c494:	690c      	ldr	r4, [r1, #16]
 800c496:	1b12      	subs	r2, r2, r4
 800c498:	d10e      	bne.n	800c4b8 <__mcmp+0x28>
 800c49a:	f100 0314 	add.w	r3, r0, #20
 800c49e:	3114      	adds	r1, #20
 800c4a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c4a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c4a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c4ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c4b0:	42a5      	cmp	r5, r4
 800c4b2:	d003      	beq.n	800c4bc <__mcmp+0x2c>
 800c4b4:	d305      	bcc.n	800c4c2 <__mcmp+0x32>
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	bd30      	pop	{r4, r5, pc}
 800c4bc:	4283      	cmp	r3, r0
 800c4be:	d3f3      	bcc.n	800c4a8 <__mcmp+0x18>
 800c4c0:	e7fa      	b.n	800c4b8 <__mcmp+0x28>
 800c4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c6:	e7f7      	b.n	800c4b8 <__mcmp+0x28>

0800c4c8 <__mdiff>:
 800c4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	460c      	mov	r4, r1
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	4690      	mov	r8, r2
 800c4d6:	f7ff ffdb 	bl	800c490 <__mcmp>
 800c4da:	1e05      	subs	r5, r0, #0
 800c4dc:	d110      	bne.n	800c500 <__mdiff+0x38>
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	f7ff fd09 	bl	800bef8 <_Balloc>
 800c4e6:	b930      	cbnz	r0, 800c4f6 <__mdiff+0x2e>
 800c4e8:	4b3a      	ldr	r3, [pc, #232]	; (800c5d4 <__mdiff+0x10c>)
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	f240 2132 	movw	r1, #562	; 0x232
 800c4f0:	4839      	ldr	r0, [pc, #228]	; (800c5d8 <__mdiff+0x110>)
 800c4f2:	f000 fced 	bl	800ced0 <__assert_func>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c500:	bfa4      	itt	ge
 800c502:	4643      	movge	r3, r8
 800c504:	46a0      	movge	r8, r4
 800c506:	4630      	mov	r0, r6
 800c508:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c50c:	bfa6      	itte	ge
 800c50e:	461c      	movge	r4, r3
 800c510:	2500      	movge	r5, #0
 800c512:	2501      	movlt	r5, #1
 800c514:	f7ff fcf0 	bl	800bef8 <_Balloc>
 800c518:	b920      	cbnz	r0, 800c524 <__mdiff+0x5c>
 800c51a:	4b2e      	ldr	r3, [pc, #184]	; (800c5d4 <__mdiff+0x10c>)
 800c51c:	4602      	mov	r2, r0
 800c51e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c522:	e7e5      	b.n	800c4f0 <__mdiff+0x28>
 800c524:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c528:	6926      	ldr	r6, [r4, #16]
 800c52a:	60c5      	str	r5, [r0, #12]
 800c52c:	f104 0914 	add.w	r9, r4, #20
 800c530:	f108 0514 	add.w	r5, r8, #20
 800c534:	f100 0e14 	add.w	lr, r0, #20
 800c538:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c53c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c540:	f108 0210 	add.w	r2, r8, #16
 800c544:	46f2      	mov	sl, lr
 800c546:	2100      	movs	r1, #0
 800c548:	f859 3b04 	ldr.w	r3, [r9], #4
 800c54c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c550:	fa1f f883 	uxth.w	r8, r3
 800c554:	fa11 f18b 	uxtah	r1, r1, fp
 800c558:	0c1b      	lsrs	r3, r3, #16
 800c55a:	eba1 0808 	sub.w	r8, r1, r8
 800c55e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c562:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c566:	fa1f f888 	uxth.w	r8, r8
 800c56a:	1419      	asrs	r1, r3, #16
 800c56c:	454e      	cmp	r6, r9
 800c56e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c572:	f84a 3b04 	str.w	r3, [sl], #4
 800c576:	d8e7      	bhi.n	800c548 <__mdiff+0x80>
 800c578:	1b33      	subs	r3, r6, r4
 800c57a:	3b15      	subs	r3, #21
 800c57c:	f023 0303 	bic.w	r3, r3, #3
 800c580:	3304      	adds	r3, #4
 800c582:	3415      	adds	r4, #21
 800c584:	42a6      	cmp	r6, r4
 800c586:	bf38      	it	cc
 800c588:	2304      	movcc	r3, #4
 800c58a:	441d      	add	r5, r3
 800c58c:	4473      	add	r3, lr
 800c58e:	469e      	mov	lr, r3
 800c590:	462e      	mov	r6, r5
 800c592:	4566      	cmp	r6, ip
 800c594:	d30e      	bcc.n	800c5b4 <__mdiff+0xec>
 800c596:	f10c 0203 	add.w	r2, ip, #3
 800c59a:	1b52      	subs	r2, r2, r5
 800c59c:	f022 0203 	bic.w	r2, r2, #3
 800c5a0:	3d03      	subs	r5, #3
 800c5a2:	45ac      	cmp	ip, r5
 800c5a4:	bf38      	it	cc
 800c5a6:	2200      	movcc	r2, #0
 800c5a8:	441a      	add	r2, r3
 800c5aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c5ae:	b17b      	cbz	r3, 800c5d0 <__mdiff+0x108>
 800c5b0:	6107      	str	r7, [r0, #16]
 800c5b2:	e7a3      	b.n	800c4fc <__mdiff+0x34>
 800c5b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c5b8:	fa11 f288 	uxtah	r2, r1, r8
 800c5bc:	1414      	asrs	r4, r2, #16
 800c5be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c5c2:	b292      	uxth	r2, r2
 800c5c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c5c8:	f84e 2b04 	str.w	r2, [lr], #4
 800c5cc:	1421      	asrs	r1, r4, #16
 800c5ce:	e7e0      	b.n	800c592 <__mdiff+0xca>
 800c5d0:	3f01      	subs	r7, #1
 800c5d2:	e7ea      	b.n	800c5aa <__mdiff+0xe2>
 800c5d4:	0800d6d7 	.word	0x0800d6d7
 800c5d8:	0800d764 	.word	0x0800d764

0800c5dc <__ulp>:
 800c5dc:	b082      	sub	sp, #8
 800c5de:	ed8d 0b00 	vstr	d0, [sp]
 800c5e2:	9b01      	ldr	r3, [sp, #4]
 800c5e4:	4912      	ldr	r1, [pc, #72]	; (800c630 <__ulp+0x54>)
 800c5e6:	4019      	ands	r1, r3
 800c5e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c5ec:	2900      	cmp	r1, #0
 800c5ee:	dd05      	ble.n	800c5fc <__ulp+0x20>
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	ec43 2b10 	vmov	d0, r2, r3
 800c5f8:	b002      	add	sp, #8
 800c5fa:	4770      	bx	lr
 800c5fc:	4249      	negs	r1, r1
 800c5fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c602:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c606:	f04f 0200 	mov.w	r2, #0
 800c60a:	f04f 0300 	mov.w	r3, #0
 800c60e:	da04      	bge.n	800c61a <__ulp+0x3e>
 800c610:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c614:	fa41 f300 	asr.w	r3, r1, r0
 800c618:	e7ec      	b.n	800c5f4 <__ulp+0x18>
 800c61a:	f1a0 0114 	sub.w	r1, r0, #20
 800c61e:	291e      	cmp	r1, #30
 800c620:	bfda      	itte	le
 800c622:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c626:	fa20 f101 	lsrle.w	r1, r0, r1
 800c62a:	2101      	movgt	r1, #1
 800c62c:	460a      	mov	r2, r1
 800c62e:	e7e1      	b.n	800c5f4 <__ulp+0x18>
 800c630:	7ff00000 	.word	0x7ff00000

0800c634 <__b2d>:
 800c634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c636:	6905      	ldr	r5, [r0, #16]
 800c638:	f100 0714 	add.w	r7, r0, #20
 800c63c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c640:	1f2e      	subs	r6, r5, #4
 800c642:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c646:	4620      	mov	r0, r4
 800c648:	f7ff fd48 	bl	800c0dc <__hi0bits>
 800c64c:	f1c0 0320 	rsb	r3, r0, #32
 800c650:	280a      	cmp	r0, #10
 800c652:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c6d0 <__b2d+0x9c>
 800c656:	600b      	str	r3, [r1, #0]
 800c658:	dc14      	bgt.n	800c684 <__b2d+0x50>
 800c65a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c65e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c662:	42b7      	cmp	r7, r6
 800c664:	ea41 030c 	orr.w	r3, r1, ip
 800c668:	bf34      	ite	cc
 800c66a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c66e:	2100      	movcs	r1, #0
 800c670:	3015      	adds	r0, #21
 800c672:	fa04 f000 	lsl.w	r0, r4, r0
 800c676:	fa21 f10e 	lsr.w	r1, r1, lr
 800c67a:	ea40 0201 	orr.w	r2, r0, r1
 800c67e:	ec43 2b10 	vmov	d0, r2, r3
 800c682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c684:	42b7      	cmp	r7, r6
 800c686:	bf3a      	itte	cc
 800c688:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c68c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c690:	2100      	movcs	r1, #0
 800c692:	380b      	subs	r0, #11
 800c694:	d017      	beq.n	800c6c6 <__b2d+0x92>
 800c696:	f1c0 0c20 	rsb	ip, r0, #32
 800c69a:	fa04 f500 	lsl.w	r5, r4, r0
 800c69e:	42be      	cmp	r6, r7
 800c6a0:	fa21 f40c 	lsr.w	r4, r1, ip
 800c6a4:	ea45 0504 	orr.w	r5, r5, r4
 800c6a8:	bf8c      	ite	hi
 800c6aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c6ae:	2400      	movls	r4, #0
 800c6b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c6b4:	fa01 f000 	lsl.w	r0, r1, r0
 800c6b8:	fa24 f40c 	lsr.w	r4, r4, ip
 800c6bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c6c0:	ea40 0204 	orr.w	r2, r0, r4
 800c6c4:	e7db      	b.n	800c67e <__b2d+0x4a>
 800c6c6:	ea44 030c 	orr.w	r3, r4, ip
 800c6ca:	460a      	mov	r2, r1
 800c6cc:	e7d7      	b.n	800c67e <__b2d+0x4a>
 800c6ce:	bf00      	nop
 800c6d0:	3ff00000 	.word	0x3ff00000

0800c6d4 <__d2b>:
 800c6d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6d8:	4689      	mov	r9, r1
 800c6da:	2101      	movs	r1, #1
 800c6dc:	ec57 6b10 	vmov	r6, r7, d0
 800c6e0:	4690      	mov	r8, r2
 800c6e2:	f7ff fc09 	bl	800bef8 <_Balloc>
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	b930      	cbnz	r0, 800c6f8 <__d2b+0x24>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	4b25      	ldr	r3, [pc, #148]	; (800c784 <__d2b+0xb0>)
 800c6ee:	4826      	ldr	r0, [pc, #152]	; (800c788 <__d2b+0xb4>)
 800c6f0:	f240 310a 	movw	r1, #778	; 0x30a
 800c6f4:	f000 fbec 	bl	800ced0 <__assert_func>
 800c6f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c700:	bb35      	cbnz	r5, 800c750 <__d2b+0x7c>
 800c702:	2e00      	cmp	r6, #0
 800c704:	9301      	str	r3, [sp, #4]
 800c706:	d028      	beq.n	800c75a <__d2b+0x86>
 800c708:	4668      	mov	r0, sp
 800c70a:	9600      	str	r6, [sp, #0]
 800c70c:	f7ff fd06 	bl	800c11c <__lo0bits>
 800c710:	9900      	ldr	r1, [sp, #0]
 800c712:	b300      	cbz	r0, 800c756 <__d2b+0x82>
 800c714:	9a01      	ldr	r2, [sp, #4]
 800c716:	f1c0 0320 	rsb	r3, r0, #32
 800c71a:	fa02 f303 	lsl.w	r3, r2, r3
 800c71e:	430b      	orrs	r3, r1
 800c720:	40c2      	lsrs	r2, r0
 800c722:	6163      	str	r3, [r4, #20]
 800c724:	9201      	str	r2, [sp, #4]
 800c726:	9b01      	ldr	r3, [sp, #4]
 800c728:	61a3      	str	r3, [r4, #24]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	bf14      	ite	ne
 800c72e:	2202      	movne	r2, #2
 800c730:	2201      	moveq	r2, #1
 800c732:	6122      	str	r2, [r4, #16]
 800c734:	b1d5      	cbz	r5, 800c76c <__d2b+0x98>
 800c736:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c73a:	4405      	add	r5, r0
 800c73c:	f8c9 5000 	str.w	r5, [r9]
 800c740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c744:	f8c8 0000 	str.w	r0, [r8]
 800c748:	4620      	mov	r0, r4
 800c74a:	b003      	add	sp, #12
 800c74c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c754:	e7d5      	b.n	800c702 <__d2b+0x2e>
 800c756:	6161      	str	r1, [r4, #20]
 800c758:	e7e5      	b.n	800c726 <__d2b+0x52>
 800c75a:	a801      	add	r0, sp, #4
 800c75c:	f7ff fcde 	bl	800c11c <__lo0bits>
 800c760:	9b01      	ldr	r3, [sp, #4]
 800c762:	6163      	str	r3, [r4, #20]
 800c764:	2201      	movs	r2, #1
 800c766:	6122      	str	r2, [r4, #16]
 800c768:	3020      	adds	r0, #32
 800c76a:	e7e3      	b.n	800c734 <__d2b+0x60>
 800c76c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c770:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c774:	f8c9 0000 	str.w	r0, [r9]
 800c778:	6918      	ldr	r0, [r3, #16]
 800c77a:	f7ff fcaf 	bl	800c0dc <__hi0bits>
 800c77e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c782:	e7df      	b.n	800c744 <__d2b+0x70>
 800c784:	0800d6d7 	.word	0x0800d6d7
 800c788:	0800d764 	.word	0x0800d764

0800c78c <__ratio>:
 800c78c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c790:	4688      	mov	r8, r1
 800c792:	4669      	mov	r1, sp
 800c794:	4681      	mov	r9, r0
 800c796:	f7ff ff4d 	bl	800c634 <__b2d>
 800c79a:	a901      	add	r1, sp, #4
 800c79c:	4640      	mov	r0, r8
 800c79e:	ec55 4b10 	vmov	r4, r5, d0
 800c7a2:	f7ff ff47 	bl	800c634 <__b2d>
 800c7a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c7ae:	eba3 0c02 	sub.w	ip, r3, r2
 800c7b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c7b6:	1a9b      	subs	r3, r3, r2
 800c7b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c7bc:	ec51 0b10 	vmov	r0, r1, d0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	bfd6      	itet	le
 800c7c4:	460a      	movle	r2, r1
 800c7c6:	462a      	movgt	r2, r5
 800c7c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c7cc:	468b      	mov	fp, r1
 800c7ce:	462f      	mov	r7, r5
 800c7d0:	bfd4      	ite	le
 800c7d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c7d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c7da:	4620      	mov	r0, r4
 800c7dc:	ee10 2a10 	vmov	r2, s0
 800c7e0:	465b      	mov	r3, fp
 800c7e2:	4639      	mov	r1, r7
 800c7e4:	f7f4 f84a 	bl	800087c <__aeabi_ddiv>
 800c7e8:	ec41 0b10 	vmov	d0, r0, r1
 800c7ec:	b003      	add	sp, #12
 800c7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7f2 <__copybits>:
 800c7f2:	3901      	subs	r1, #1
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	1149      	asrs	r1, r1, #5
 800c7f8:	6914      	ldr	r4, [r2, #16]
 800c7fa:	3101      	adds	r1, #1
 800c7fc:	f102 0314 	add.w	r3, r2, #20
 800c800:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c804:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c808:	1f05      	subs	r5, r0, #4
 800c80a:	42a3      	cmp	r3, r4
 800c80c:	d30c      	bcc.n	800c828 <__copybits+0x36>
 800c80e:	1aa3      	subs	r3, r4, r2
 800c810:	3b11      	subs	r3, #17
 800c812:	f023 0303 	bic.w	r3, r3, #3
 800c816:	3211      	adds	r2, #17
 800c818:	42a2      	cmp	r2, r4
 800c81a:	bf88      	it	hi
 800c81c:	2300      	movhi	r3, #0
 800c81e:	4418      	add	r0, r3
 800c820:	2300      	movs	r3, #0
 800c822:	4288      	cmp	r0, r1
 800c824:	d305      	bcc.n	800c832 <__copybits+0x40>
 800c826:	bd70      	pop	{r4, r5, r6, pc}
 800c828:	f853 6b04 	ldr.w	r6, [r3], #4
 800c82c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c830:	e7eb      	b.n	800c80a <__copybits+0x18>
 800c832:	f840 3b04 	str.w	r3, [r0], #4
 800c836:	e7f4      	b.n	800c822 <__copybits+0x30>

0800c838 <__any_on>:
 800c838:	f100 0214 	add.w	r2, r0, #20
 800c83c:	6900      	ldr	r0, [r0, #16]
 800c83e:	114b      	asrs	r3, r1, #5
 800c840:	4298      	cmp	r0, r3
 800c842:	b510      	push	{r4, lr}
 800c844:	db11      	blt.n	800c86a <__any_on+0x32>
 800c846:	dd0a      	ble.n	800c85e <__any_on+0x26>
 800c848:	f011 011f 	ands.w	r1, r1, #31
 800c84c:	d007      	beq.n	800c85e <__any_on+0x26>
 800c84e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c852:	fa24 f001 	lsr.w	r0, r4, r1
 800c856:	fa00 f101 	lsl.w	r1, r0, r1
 800c85a:	428c      	cmp	r4, r1
 800c85c:	d10b      	bne.n	800c876 <__any_on+0x3e>
 800c85e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c862:	4293      	cmp	r3, r2
 800c864:	d803      	bhi.n	800c86e <__any_on+0x36>
 800c866:	2000      	movs	r0, #0
 800c868:	bd10      	pop	{r4, pc}
 800c86a:	4603      	mov	r3, r0
 800c86c:	e7f7      	b.n	800c85e <__any_on+0x26>
 800c86e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c872:	2900      	cmp	r1, #0
 800c874:	d0f5      	beq.n	800c862 <__any_on+0x2a>
 800c876:	2001      	movs	r0, #1
 800c878:	e7f6      	b.n	800c868 <__any_on+0x30>

0800c87a <_calloc_r>:
 800c87a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c87c:	fba1 2402 	umull	r2, r4, r1, r2
 800c880:	b94c      	cbnz	r4, 800c896 <_calloc_r+0x1c>
 800c882:	4611      	mov	r1, r2
 800c884:	9201      	str	r2, [sp, #4]
 800c886:	f7fc fb9b 	bl	8008fc0 <_malloc_r>
 800c88a:	9a01      	ldr	r2, [sp, #4]
 800c88c:	4605      	mov	r5, r0
 800c88e:	b930      	cbnz	r0, 800c89e <_calloc_r+0x24>
 800c890:	4628      	mov	r0, r5
 800c892:	b003      	add	sp, #12
 800c894:	bd30      	pop	{r4, r5, pc}
 800c896:	220c      	movs	r2, #12
 800c898:	6002      	str	r2, [r0, #0]
 800c89a:	2500      	movs	r5, #0
 800c89c:	e7f8      	b.n	800c890 <_calloc_r+0x16>
 800c89e:	4621      	mov	r1, r4
 800c8a0:	f7fc fb1a 	bl	8008ed8 <memset>
 800c8a4:	e7f4      	b.n	800c890 <_calloc_r+0x16>

0800c8a6 <_realloc_r>:
 800c8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8aa:	4680      	mov	r8, r0
 800c8ac:	4614      	mov	r4, r2
 800c8ae:	460e      	mov	r6, r1
 800c8b0:	b921      	cbnz	r1, 800c8bc <_realloc_r+0x16>
 800c8b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	f7fc bb82 	b.w	8008fc0 <_malloc_r>
 800c8bc:	b92a      	cbnz	r2, 800c8ca <_realloc_r+0x24>
 800c8be:	f7fc fb13 	bl	8008ee8 <_free_r>
 800c8c2:	4625      	mov	r5, r4
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ca:	f000 fb6d 	bl	800cfa8 <_malloc_usable_size_r>
 800c8ce:	4284      	cmp	r4, r0
 800c8d0:	4607      	mov	r7, r0
 800c8d2:	d802      	bhi.n	800c8da <_realloc_r+0x34>
 800c8d4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8d8:	d812      	bhi.n	800c900 <_realloc_r+0x5a>
 800c8da:	4621      	mov	r1, r4
 800c8dc:	4640      	mov	r0, r8
 800c8de:	f7fc fb6f 	bl	8008fc0 <_malloc_r>
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d0ed      	beq.n	800c8c4 <_realloc_r+0x1e>
 800c8e8:	42bc      	cmp	r4, r7
 800c8ea:	4622      	mov	r2, r4
 800c8ec:	4631      	mov	r1, r6
 800c8ee:	bf28      	it	cs
 800c8f0:	463a      	movcs	r2, r7
 800c8f2:	f7fc fae3 	bl	8008ebc <memcpy>
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	f7fc faf5 	bl	8008ee8 <_free_r>
 800c8fe:	e7e1      	b.n	800c8c4 <_realloc_r+0x1e>
 800c900:	4635      	mov	r5, r6
 800c902:	e7df      	b.n	800c8c4 <_realloc_r+0x1e>

0800c904 <__ssputs_r>:
 800c904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c908:	688e      	ldr	r6, [r1, #8]
 800c90a:	429e      	cmp	r6, r3
 800c90c:	4682      	mov	sl, r0
 800c90e:	460c      	mov	r4, r1
 800c910:	4690      	mov	r8, r2
 800c912:	461f      	mov	r7, r3
 800c914:	d838      	bhi.n	800c988 <__ssputs_r+0x84>
 800c916:	898a      	ldrh	r2, [r1, #12]
 800c918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c91c:	d032      	beq.n	800c984 <__ssputs_r+0x80>
 800c91e:	6825      	ldr	r5, [r4, #0]
 800c920:	6909      	ldr	r1, [r1, #16]
 800c922:	eba5 0901 	sub.w	r9, r5, r1
 800c926:	6965      	ldr	r5, [r4, #20]
 800c928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c92c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c930:	3301      	adds	r3, #1
 800c932:	444b      	add	r3, r9
 800c934:	106d      	asrs	r5, r5, #1
 800c936:	429d      	cmp	r5, r3
 800c938:	bf38      	it	cc
 800c93a:	461d      	movcc	r5, r3
 800c93c:	0553      	lsls	r3, r2, #21
 800c93e:	d531      	bpl.n	800c9a4 <__ssputs_r+0xa0>
 800c940:	4629      	mov	r1, r5
 800c942:	f7fc fb3d 	bl	8008fc0 <_malloc_r>
 800c946:	4606      	mov	r6, r0
 800c948:	b950      	cbnz	r0, 800c960 <__ssputs_r+0x5c>
 800c94a:	230c      	movs	r3, #12
 800c94c:	f8ca 3000 	str.w	r3, [sl]
 800c950:	89a3      	ldrh	r3, [r4, #12]
 800c952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c956:	81a3      	strh	r3, [r4, #12]
 800c958:	f04f 30ff 	mov.w	r0, #4294967295
 800c95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c960:	6921      	ldr	r1, [r4, #16]
 800c962:	464a      	mov	r2, r9
 800c964:	f7fc faaa 	bl	8008ebc <memcpy>
 800c968:	89a3      	ldrh	r3, [r4, #12]
 800c96a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c96e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c972:	81a3      	strh	r3, [r4, #12]
 800c974:	6126      	str	r6, [r4, #16]
 800c976:	6165      	str	r5, [r4, #20]
 800c978:	444e      	add	r6, r9
 800c97a:	eba5 0509 	sub.w	r5, r5, r9
 800c97e:	6026      	str	r6, [r4, #0]
 800c980:	60a5      	str	r5, [r4, #8]
 800c982:	463e      	mov	r6, r7
 800c984:	42be      	cmp	r6, r7
 800c986:	d900      	bls.n	800c98a <__ssputs_r+0x86>
 800c988:	463e      	mov	r6, r7
 800c98a:	6820      	ldr	r0, [r4, #0]
 800c98c:	4632      	mov	r2, r6
 800c98e:	4641      	mov	r1, r8
 800c990:	f000 faf0 	bl	800cf74 <memmove>
 800c994:	68a3      	ldr	r3, [r4, #8]
 800c996:	1b9b      	subs	r3, r3, r6
 800c998:	60a3      	str	r3, [r4, #8]
 800c99a:	6823      	ldr	r3, [r4, #0]
 800c99c:	4433      	add	r3, r6
 800c99e:	6023      	str	r3, [r4, #0]
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	e7db      	b.n	800c95c <__ssputs_r+0x58>
 800c9a4:	462a      	mov	r2, r5
 800c9a6:	f7ff ff7e 	bl	800c8a6 <_realloc_r>
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d1e1      	bne.n	800c974 <__ssputs_r+0x70>
 800c9b0:	6921      	ldr	r1, [r4, #16]
 800c9b2:	4650      	mov	r0, sl
 800c9b4:	f7fc fa98 	bl	8008ee8 <_free_r>
 800c9b8:	e7c7      	b.n	800c94a <__ssputs_r+0x46>
	...

0800c9bc <_svfiprintf_r>:
 800c9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c0:	4698      	mov	r8, r3
 800c9c2:	898b      	ldrh	r3, [r1, #12]
 800c9c4:	061b      	lsls	r3, r3, #24
 800c9c6:	b09d      	sub	sp, #116	; 0x74
 800c9c8:	4607      	mov	r7, r0
 800c9ca:	460d      	mov	r5, r1
 800c9cc:	4614      	mov	r4, r2
 800c9ce:	d50e      	bpl.n	800c9ee <_svfiprintf_r+0x32>
 800c9d0:	690b      	ldr	r3, [r1, #16]
 800c9d2:	b963      	cbnz	r3, 800c9ee <_svfiprintf_r+0x32>
 800c9d4:	2140      	movs	r1, #64	; 0x40
 800c9d6:	f7fc faf3 	bl	8008fc0 <_malloc_r>
 800c9da:	6028      	str	r0, [r5, #0]
 800c9dc:	6128      	str	r0, [r5, #16]
 800c9de:	b920      	cbnz	r0, 800c9ea <_svfiprintf_r+0x2e>
 800c9e0:	230c      	movs	r3, #12
 800c9e2:	603b      	str	r3, [r7, #0]
 800c9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e8:	e0d1      	b.n	800cb8e <_svfiprintf_r+0x1d2>
 800c9ea:	2340      	movs	r3, #64	; 0x40
 800c9ec:	616b      	str	r3, [r5, #20]
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f2:	2320      	movs	r3, #32
 800c9f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9fc:	2330      	movs	r3, #48	; 0x30
 800c9fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cba8 <_svfiprintf_r+0x1ec>
 800ca02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca06:	f04f 0901 	mov.w	r9, #1
 800ca0a:	4623      	mov	r3, r4
 800ca0c:	469a      	mov	sl, r3
 800ca0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca12:	b10a      	cbz	r2, 800ca18 <_svfiprintf_r+0x5c>
 800ca14:	2a25      	cmp	r2, #37	; 0x25
 800ca16:	d1f9      	bne.n	800ca0c <_svfiprintf_r+0x50>
 800ca18:	ebba 0b04 	subs.w	fp, sl, r4
 800ca1c:	d00b      	beq.n	800ca36 <_svfiprintf_r+0x7a>
 800ca1e:	465b      	mov	r3, fp
 800ca20:	4622      	mov	r2, r4
 800ca22:	4629      	mov	r1, r5
 800ca24:	4638      	mov	r0, r7
 800ca26:	f7ff ff6d 	bl	800c904 <__ssputs_r>
 800ca2a:	3001      	adds	r0, #1
 800ca2c:	f000 80aa 	beq.w	800cb84 <_svfiprintf_r+0x1c8>
 800ca30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca32:	445a      	add	r2, fp
 800ca34:	9209      	str	r2, [sp, #36]	; 0x24
 800ca36:	f89a 3000 	ldrb.w	r3, [sl]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 80a2 	beq.w	800cb84 <_svfiprintf_r+0x1c8>
 800ca40:	2300      	movs	r3, #0
 800ca42:	f04f 32ff 	mov.w	r2, #4294967295
 800ca46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca4a:	f10a 0a01 	add.w	sl, sl, #1
 800ca4e:	9304      	str	r3, [sp, #16]
 800ca50:	9307      	str	r3, [sp, #28]
 800ca52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca56:	931a      	str	r3, [sp, #104]	; 0x68
 800ca58:	4654      	mov	r4, sl
 800ca5a:	2205      	movs	r2, #5
 800ca5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca60:	4851      	ldr	r0, [pc, #324]	; (800cba8 <_svfiprintf_r+0x1ec>)
 800ca62:	f7f3 fbd5 	bl	8000210 <memchr>
 800ca66:	9a04      	ldr	r2, [sp, #16]
 800ca68:	b9d8      	cbnz	r0, 800caa2 <_svfiprintf_r+0xe6>
 800ca6a:	06d0      	lsls	r0, r2, #27
 800ca6c:	bf44      	itt	mi
 800ca6e:	2320      	movmi	r3, #32
 800ca70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca74:	0711      	lsls	r1, r2, #28
 800ca76:	bf44      	itt	mi
 800ca78:	232b      	movmi	r3, #43	; 0x2b
 800ca7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ca82:	2b2a      	cmp	r3, #42	; 0x2a
 800ca84:	d015      	beq.n	800cab2 <_svfiprintf_r+0xf6>
 800ca86:	9a07      	ldr	r2, [sp, #28]
 800ca88:	4654      	mov	r4, sl
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	f04f 0c0a 	mov.w	ip, #10
 800ca90:	4621      	mov	r1, r4
 800ca92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca96:	3b30      	subs	r3, #48	; 0x30
 800ca98:	2b09      	cmp	r3, #9
 800ca9a:	d94e      	bls.n	800cb3a <_svfiprintf_r+0x17e>
 800ca9c:	b1b0      	cbz	r0, 800cacc <_svfiprintf_r+0x110>
 800ca9e:	9207      	str	r2, [sp, #28]
 800caa0:	e014      	b.n	800cacc <_svfiprintf_r+0x110>
 800caa2:	eba0 0308 	sub.w	r3, r0, r8
 800caa6:	fa09 f303 	lsl.w	r3, r9, r3
 800caaa:	4313      	orrs	r3, r2
 800caac:	9304      	str	r3, [sp, #16]
 800caae:	46a2      	mov	sl, r4
 800cab0:	e7d2      	b.n	800ca58 <_svfiprintf_r+0x9c>
 800cab2:	9b03      	ldr	r3, [sp, #12]
 800cab4:	1d19      	adds	r1, r3, #4
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	9103      	str	r1, [sp, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	bfbb      	ittet	lt
 800cabe:	425b      	neglt	r3, r3
 800cac0:	f042 0202 	orrlt.w	r2, r2, #2
 800cac4:	9307      	strge	r3, [sp, #28]
 800cac6:	9307      	strlt	r3, [sp, #28]
 800cac8:	bfb8      	it	lt
 800caca:	9204      	strlt	r2, [sp, #16]
 800cacc:	7823      	ldrb	r3, [r4, #0]
 800cace:	2b2e      	cmp	r3, #46	; 0x2e
 800cad0:	d10c      	bne.n	800caec <_svfiprintf_r+0x130>
 800cad2:	7863      	ldrb	r3, [r4, #1]
 800cad4:	2b2a      	cmp	r3, #42	; 0x2a
 800cad6:	d135      	bne.n	800cb44 <_svfiprintf_r+0x188>
 800cad8:	9b03      	ldr	r3, [sp, #12]
 800cada:	1d1a      	adds	r2, r3, #4
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	9203      	str	r2, [sp, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	bfb8      	it	lt
 800cae4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cae8:	3402      	adds	r4, #2
 800caea:	9305      	str	r3, [sp, #20]
 800caec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cbb8 <_svfiprintf_r+0x1fc>
 800caf0:	7821      	ldrb	r1, [r4, #0]
 800caf2:	2203      	movs	r2, #3
 800caf4:	4650      	mov	r0, sl
 800caf6:	f7f3 fb8b 	bl	8000210 <memchr>
 800cafa:	b140      	cbz	r0, 800cb0e <_svfiprintf_r+0x152>
 800cafc:	2340      	movs	r3, #64	; 0x40
 800cafe:	eba0 000a 	sub.w	r0, r0, sl
 800cb02:	fa03 f000 	lsl.w	r0, r3, r0
 800cb06:	9b04      	ldr	r3, [sp, #16]
 800cb08:	4303      	orrs	r3, r0
 800cb0a:	3401      	adds	r4, #1
 800cb0c:	9304      	str	r3, [sp, #16]
 800cb0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb12:	4826      	ldr	r0, [pc, #152]	; (800cbac <_svfiprintf_r+0x1f0>)
 800cb14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb18:	2206      	movs	r2, #6
 800cb1a:	f7f3 fb79 	bl	8000210 <memchr>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d038      	beq.n	800cb94 <_svfiprintf_r+0x1d8>
 800cb22:	4b23      	ldr	r3, [pc, #140]	; (800cbb0 <_svfiprintf_r+0x1f4>)
 800cb24:	bb1b      	cbnz	r3, 800cb6e <_svfiprintf_r+0x1b2>
 800cb26:	9b03      	ldr	r3, [sp, #12]
 800cb28:	3307      	adds	r3, #7
 800cb2a:	f023 0307 	bic.w	r3, r3, #7
 800cb2e:	3308      	adds	r3, #8
 800cb30:	9303      	str	r3, [sp, #12]
 800cb32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb34:	4433      	add	r3, r6
 800cb36:	9309      	str	r3, [sp, #36]	; 0x24
 800cb38:	e767      	b.n	800ca0a <_svfiprintf_r+0x4e>
 800cb3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb3e:	460c      	mov	r4, r1
 800cb40:	2001      	movs	r0, #1
 800cb42:	e7a5      	b.n	800ca90 <_svfiprintf_r+0xd4>
 800cb44:	2300      	movs	r3, #0
 800cb46:	3401      	adds	r4, #1
 800cb48:	9305      	str	r3, [sp, #20]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	f04f 0c0a 	mov.w	ip, #10
 800cb50:	4620      	mov	r0, r4
 800cb52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb56:	3a30      	subs	r2, #48	; 0x30
 800cb58:	2a09      	cmp	r2, #9
 800cb5a:	d903      	bls.n	800cb64 <_svfiprintf_r+0x1a8>
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d0c5      	beq.n	800caec <_svfiprintf_r+0x130>
 800cb60:	9105      	str	r1, [sp, #20]
 800cb62:	e7c3      	b.n	800caec <_svfiprintf_r+0x130>
 800cb64:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb68:	4604      	mov	r4, r0
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e7f0      	b.n	800cb50 <_svfiprintf_r+0x194>
 800cb6e:	ab03      	add	r3, sp, #12
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	462a      	mov	r2, r5
 800cb74:	4b0f      	ldr	r3, [pc, #60]	; (800cbb4 <_svfiprintf_r+0x1f8>)
 800cb76:	a904      	add	r1, sp, #16
 800cb78:	4638      	mov	r0, r7
 800cb7a:	f7fc fb35 	bl	80091e8 <_printf_float>
 800cb7e:	1c42      	adds	r2, r0, #1
 800cb80:	4606      	mov	r6, r0
 800cb82:	d1d6      	bne.n	800cb32 <_svfiprintf_r+0x176>
 800cb84:	89ab      	ldrh	r3, [r5, #12]
 800cb86:	065b      	lsls	r3, r3, #25
 800cb88:	f53f af2c 	bmi.w	800c9e4 <_svfiprintf_r+0x28>
 800cb8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb8e:	b01d      	add	sp, #116	; 0x74
 800cb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb94:	ab03      	add	r3, sp, #12
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	462a      	mov	r2, r5
 800cb9a:	4b06      	ldr	r3, [pc, #24]	; (800cbb4 <_svfiprintf_r+0x1f8>)
 800cb9c:	a904      	add	r1, sp, #16
 800cb9e:	4638      	mov	r0, r7
 800cba0:	f7fc fdc6 	bl	8009730 <_printf_i>
 800cba4:	e7eb      	b.n	800cb7e <_svfiprintf_r+0x1c2>
 800cba6:	bf00      	nop
 800cba8:	0800d8bc 	.word	0x0800d8bc
 800cbac:	0800d8c6 	.word	0x0800d8c6
 800cbb0:	080091e9 	.word	0x080091e9
 800cbb4:	0800c905 	.word	0x0800c905
 800cbb8:	0800d8c2 	.word	0x0800d8c2

0800cbbc <__sfputc_r>:
 800cbbc:	6893      	ldr	r3, [r2, #8]
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	b410      	push	{r4}
 800cbc4:	6093      	str	r3, [r2, #8]
 800cbc6:	da08      	bge.n	800cbda <__sfputc_r+0x1e>
 800cbc8:	6994      	ldr	r4, [r2, #24]
 800cbca:	42a3      	cmp	r3, r4
 800cbcc:	db01      	blt.n	800cbd2 <__sfputc_r+0x16>
 800cbce:	290a      	cmp	r1, #10
 800cbd0:	d103      	bne.n	800cbda <__sfputc_r+0x1e>
 800cbd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbd6:	f7fd be29 	b.w	800a82c <__swbuf_r>
 800cbda:	6813      	ldr	r3, [r2, #0]
 800cbdc:	1c58      	adds	r0, r3, #1
 800cbde:	6010      	str	r0, [r2, #0]
 800cbe0:	7019      	strb	r1, [r3, #0]
 800cbe2:	4608      	mov	r0, r1
 800cbe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <__sfputs_r>:
 800cbea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbec:	4606      	mov	r6, r0
 800cbee:	460f      	mov	r7, r1
 800cbf0:	4614      	mov	r4, r2
 800cbf2:	18d5      	adds	r5, r2, r3
 800cbf4:	42ac      	cmp	r4, r5
 800cbf6:	d101      	bne.n	800cbfc <__sfputs_r+0x12>
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	e007      	b.n	800cc0c <__sfputs_r+0x22>
 800cbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc00:	463a      	mov	r2, r7
 800cc02:	4630      	mov	r0, r6
 800cc04:	f7ff ffda 	bl	800cbbc <__sfputc_r>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	d1f3      	bne.n	800cbf4 <__sfputs_r+0xa>
 800cc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc10 <_vfiprintf_r>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	460d      	mov	r5, r1
 800cc16:	b09d      	sub	sp, #116	; 0x74
 800cc18:	4614      	mov	r4, r2
 800cc1a:	4698      	mov	r8, r3
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	b118      	cbz	r0, 800cc28 <_vfiprintf_r+0x18>
 800cc20:	6983      	ldr	r3, [r0, #24]
 800cc22:	b90b      	cbnz	r3, 800cc28 <_vfiprintf_r+0x18>
 800cc24:	f7fc f874 	bl	8008d10 <__sinit>
 800cc28:	4b89      	ldr	r3, [pc, #548]	; (800ce50 <_vfiprintf_r+0x240>)
 800cc2a:	429d      	cmp	r5, r3
 800cc2c:	d11b      	bne.n	800cc66 <_vfiprintf_r+0x56>
 800cc2e:	6875      	ldr	r5, [r6, #4]
 800cc30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc32:	07d9      	lsls	r1, r3, #31
 800cc34:	d405      	bmi.n	800cc42 <_vfiprintf_r+0x32>
 800cc36:	89ab      	ldrh	r3, [r5, #12]
 800cc38:	059a      	lsls	r2, r3, #22
 800cc3a:	d402      	bmi.n	800cc42 <_vfiprintf_r+0x32>
 800cc3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc3e:	f7fc f92a 	bl	8008e96 <__retarget_lock_acquire_recursive>
 800cc42:	89ab      	ldrh	r3, [r5, #12]
 800cc44:	071b      	lsls	r3, r3, #28
 800cc46:	d501      	bpl.n	800cc4c <_vfiprintf_r+0x3c>
 800cc48:	692b      	ldr	r3, [r5, #16]
 800cc4a:	b9eb      	cbnz	r3, 800cc88 <_vfiprintf_r+0x78>
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f7fd fe50 	bl	800a8f4 <__swsetup_r>
 800cc54:	b1c0      	cbz	r0, 800cc88 <_vfiprintf_r+0x78>
 800cc56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc58:	07dc      	lsls	r4, r3, #31
 800cc5a:	d50e      	bpl.n	800cc7a <_vfiprintf_r+0x6a>
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc60:	b01d      	add	sp, #116	; 0x74
 800cc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc66:	4b7b      	ldr	r3, [pc, #492]	; (800ce54 <_vfiprintf_r+0x244>)
 800cc68:	429d      	cmp	r5, r3
 800cc6a:	d101      	bne.n	800cc70 <_vfiprintf_r+0x60>
 800cc6c:	68b5      	ldr	r5, [r6, #8]
 800cc6e:	e7df      	b.n	800cc30 <_vfiprintf_r+0x20>
 800cc70:	4b79      	ldr	r3, [pc, #484]	; (800ce58 <_vfiprintf_r+0x248>)
 800cc72:	429d      	cmp	r5, r3
 800cc74:	bf08      	it	eq
 800cc76:	68f5      	ldreq	r5, [r6, #12]
 800cc78:	e7da      	b.n	800cc30 <_vfiprintf_r+0x20>
 800cc7a:	89ab      	ldrh	r3, [r5, #12]
 800cc7c:	0598      	lsls	r0, r3, #22
 800cc7e:	d4ed      	bmi.n	800cc5c <_vfiprintf_r+0x4c>
 800cc80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc82:	f7fc f909 	bl	8008e98 <__retarget_lock_release_recursive>
 800cc86:	e7e9      	b.n	800cc5c <_vfiprintf_r+0x4c>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc8c:	2320      	movs	r3, #32
 800cc8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc92:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc96:	2330      	movs	r3, #48	; 0x30
 800cc98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce5c <_vfiprintf_r+0x24c>
 800cc9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cca0:	f04f 0901 	mov.w	r9, #1
 800cca4:	4623      	mov	r3, r4
 800cca6:	469a      	mov	sl, r3
 800cca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccac:	b10a      	cbz	r2, 800ccb2 <_vfiprintf_r+0xa2>
 800ccae:	2a25      	cmp	r2, #37	; 0x25
 800ccb0:	d1f9      	bne.n	800cca6 <_vfiprintf_r+0x96>
 800ccb2:	ebba 0b04 	subs.w	fp, sl, r4
 800ccb6:	d00b      	beq.n	800ccd0 <_vfiprintf_r+0xc0>
 800ccb8:	465b      	mov	r3, fp
 800ccba:	4622      	mov	r2, r4
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f7ff ff93 	bl	800cbea <__sfputs_r>
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	f000 80aa 	beq.w	800ce1e <_vfiprintf_r+0x20e>
 800ccca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cccc:	445a      	add	r2, fp
 800ccce:	9209      	str	r2, [sp, #36]	; 0x24
 800ccd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f000 80a2 	beq.w	800ce1e <_vfiprintf_r+0x20e>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cce4:	f10a 0a01 	add.w	sl, sl, #1
 800cce8:	9304      	str	r3, [sp, #16]
 800ccea:	9307      	str	r3, [sp, #28]
 800ccec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccf0:	931a      	str	r3, [sp, #104]	; 0x68
 800ccf2:	4654      	mov	r4, sl
 800ccf4:	2205      	movs	r2, #5
 800ccf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfa:	4858      	ldr	r0, [pc, #352]	; (800ce5c <_vfiprintf_r+0x24c>)
 800ccfc:	f7f3 fa88 	bl	8000210 <memchr>
 800cd00:	9a04      	ldr	r2, [sp, #16]
 800cd02:	b9d8      	cbnz	r0, 800cd3c <_vfiprintf_r+0x12c>
 800cd04:	06d1      	lsls	r1, r2, #27
 800cd06:	bf44      	itt	mi
 800cd08:	2320      	movmi	r3, #32
 800cd0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd0e:	0713      	lsls	r3, r2, #28
 800cd10:	bf44      	itt	mi
 800cd12:	232b      	movmi	r3, #43	; 0x2b
 800cd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd18:	f89a 3000 	ldrb.w	r3, [sl]
 800cd1c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd1e:	d015      	beq.n	800cd4c <_vfiprintf_r+0x13c>
 800cd20:	9a07      	ldr	r2, [sp, #28]
 800cd22:	4654      	mov	r4, sl
 800cd24:	2000      	movs	r0, #0
 800cd26:	f04f 0c0a 	mov.w	ip, #10
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd30:	3b30      	subs	r3, #48	; 0x30
 800cd32:	2b09      	cmp	r3, #9
 800cd34:	d94e      	bls.n	800cdd4 <_vfiprintf_r+0x1c4>
 800cd36:	b1b0      	cbz	r0, 800cd66 <_vfiprintf_r+0x156>
 800cd38:	9207      	str	r2, [sp, #28]
 800cd3a:	e014      	b.n	800cd66 <_vfiprintf_r+0x156>
 800cd3c:	eba0 0308 	sub.w	r3, r0, r8
 800cd40:	fa09 f303 	lsl.w	r3, r9, r3
 800cd44:	4313      	orrs	r3, r2
 800cd46:	9304      	str	r3, [sp, #16]
 800cd48:	46a2      	mov	sl, r4
 800cd4a:	e7d2      	b.n	800ccf2 <_vfiprintf_r+0xe2>
 800cd4c:	9b03      	ldr	r3, [sp, #12]
 800cd4e:	1d19      	adds	r1, r3, #4
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	9103      	str	r1, [sp, #12]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	bfbb      	ittet	lt
 800cd58:	425b      	neglt	r3, r3
 800cd5a:	f042 0202 	orrlt.w	r2, r2, #2
 800cd5e:	9307      	strge	r3, [sp, #28]
 800cd60:	9307      	strlt	r3, [sp, #28]
 800cd62:	bfb8      	it	lt
 800cd64:	9204      	strlt	r2, [sp, #16]
 800cd66:	7823      	ldrb	r3, [r4, #0]
 800cd68:	2b2e      	cmp	r3, #46	; 0x2e
 800cd6a:	d10c      	bne.n	800cd86 <_vfiprintf_r+0x176>
 800cd6c:	7863      	ldrb	r3, [r4, #1]
 800cd6e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd70:	d135      	bne.n	800cdde <_vfiprintf_r+0x1ce>
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	1d1a      	adds	r2, r3, #4
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	9203      	str	r2, [sp, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	bfb8      	it	lt
 800cd7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd82:	3402      	adds	r4, #2
 800cd84:	9305      	str	r3, [sp, #20]
 800cd86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce6c <_vfiprintf_r+0x25c>
 800cd8a:	7821      	ldrb	r1, [r4, #0]
 800cd8c:	2203      	movs	r2, #3
 800cd8e:	4650      	mov	r0, sl
 800cd90:	f7f3 fa3e 	bl	8000210 <memchr>
 800cd94:	b140      	cbz	r0, 800cda8 <_vfiprintf_r+0x198>
 800cd96:	2340      	movs	r3, #64	; 0x40
 800cd98:	eba0 000a 	sub.w	r0, r0, sl
 800cd9c:	fa03 f000 	lsl.w	r0, r3, r0
 800cda0:	9b04      	ldr	r3, [sp, #16]
 800cda2:	4303      	orrs	r3, r0
 800cda4:	3401      	adds	r4, #1
 800cda6:	9304      	str	r3, [sp, #16]
 800cda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdac:	482c      	ldr	r0, [pc, #176]	; (800ce60 <_vfiprintf_r+0x250>)
 800cdae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdb2:	2206      	movs	r2, #6
 800cdb4:	f7f3 fa2c 	bl	8000210 <memchr>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d03f      	beq.n	800ce3c <_vfiprintf_r+0x22c>
 800cdbc:	4b29      	ldr	r3, [pc, #164]	; (800ce64 <_vfiprintf_r+0x254>)
 800cdbe:	bb1b      	cbnz	r3, 800ce08 <_vfiprintf_r+0x1f8>
 800cdc0:	9b03      	ldr	r3, [sp, #12]
 800cdc2:	3307      	adds	r3, #7
 800cdc4:	f023 0307 	bic.w	r3, r3, #7
 800cdc8:	3308      	adds	r3, #8
 800cdca:	9303      	str	r3, [sp, #12]
 800cdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdce:	443b      	add	r3, r7
 800cdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd2:	e767      	b.n	800cca4 <_vfiprintf_r+0x94>
 800cdd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdd8:	460c      	mov	r4, r1
 800cdda:	2001      	movs	r0, #1
 800cddc:	e7a5      	b.n	800cd2a <_vfiprintf_r+0x11a>
 800cdde:	2300      	movs	r3, #0
 800cde0:	3401      	adds	r4, #1
 800cde2:	9305      	str	r3, [sp, #20]
 800cde4:	4619      	mov	r1, r3
 800cde6:	f04f 0c0a 	mov.w	ip, #10
 800cdea:	4620      	mov	r0, r4
 800cdec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdf0:	3a30      	subs	r2, #48	; 0x30
 800cdf2:	2a09      	cmp	r2, #9
 800cdf4:	d903      	bls.n	800cdfe <_vfiprintf_r+0x1ee>
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d0c5      	beq.n	800cd86 <_vfiprintf_r+0x176>
 800cdfa:	9105      	str	r1, [sp, #20]
 800cdfc:	e7c3      	b.n	800cd86 <_vfiprintf_r+0x176>
 800cdfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce02:	4604      	mov	r4, r0
 800ce04:	2301      	movs	r3, #1
 800ce06:	e7f0      	b.n	800cdea <_vfiprintf_r+0x1da>
 800ce08:	ab03      	add	r3, sp, #12
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	462a      	mov	r2, r5
 800ce0e:	4b16      	ldr	r3, [pc, #88]	; (800ce68 <_vfiprintf_r+0x258>)
 800ce10:	a904      	add	r1, sp, #16
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7fc f9e8 	bl	80091e8 <_printf_float>
 800ce18:	4607      	mov	r7, r0
 800ce1a:	1c78      	adds	r0, r7, #1
 800ce1c:	d1d6      	bne.n	800cdcc <_vfiprintf_r+0x1bc>
 800ce1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce20:	07d9      	lsls	r1, r3, #31
 800ce22:	d405      	bmi.n	800ce30 <_vfiprintf_r+0x220>
 800ce24:	89ab      	ldrh	r3, [r5, #12]
 800ce26:	059a      	lsls	r2, r3, #22
 800ce28:	d402      	bmi.n	800ce30 <_vfiprintf_r+0x220>
 800ce2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce2c:	f7fc f834 	bl	8008e98 <__retarget_lock_release_recursive>
 800ce30:	89ab      	ldrh	r3, [r5, #12]
 800ce32:	065b      	lsls	r3, r3, #25
 800ce34:	f53f af12 	bmi.w	800cc5c <_vfiprintf_r+0x4c>
 800ce38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce3a:	e711      	b.n	800cc60 <_vfiprintf_r+0x50>
 800ce3c:	ab03      	add	r3, sp, #12
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	462a      	mov	r2, r5
 800ce42:	4b09      	ldr	r3, [pc, #36]	; (800ce68 <_vfiprintf_r+0x258>)
 800ce44:	a904      	add	r1, sp, #16
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7fc fc72 	bl	8009730 <_printf_i>
 800ce4c:	e7e4      	b.n	800ce18 <_vfiprintf_r+0x208>
 800ce4e:	bf00      	nop
 800ce50:	0800d590 	.word	0x0800d590
 800ce54:	0800d5b0 	.word	0x0800d5b0
 800ce58:	0800d570 	.word	0x0800d570
 800ce5c:	0800d8bc 	.word	0x0800d8bc
 800ce60:	0800d8c6 	.word	0x0800d8c6
 800ce64:	080091e9 	.word	0x080091e9
 800ce68:	0800cbeb 	.word	0x0800cbeb
 800ce6c:	0800d8c2 	.word	0x0800d8c2

0800ce70 <_read_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4d07      	ldr	r5, [pc, #28]	; (800ce90 <_read_r+0x20>)
 800ce74:	4604      	mov	r4, r0
 800ce76:	4608      	mov	r0, r1
 800ce78:	4611      	mov	r1, r2
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	602a      	str	r2, [r5, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	f7f5 ff12 	bl	8002ca8 <_read>
 800ce84:	1c43      	adds	r3, r0, #1
 800ce86:	d102      	bne.n	800ce8e <_read_r+0x1e>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	b103      	cbz	r3, 800ce8e <_read_r+0x1e>
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	bd38      	pop	{r3, r4, r5, pc}
 800ce90:	20005ec0 	.word	0x20005ec0
 800ce94:	00000000 	.word	0x00000000

0800ce98 <nan>:
 800ce98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cea0 <nan+0x8>
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	00000000 	.word	0x00000000
 800cea4:	7ff80000 	.word	0x7ff80000

0800cea8 <nanf>:
 800cea8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ceb0 <nanf+0x8>
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	7fc00000 	.word	0x7fc00000

0800ceb4 <__ascii_wctomb>:
 800ceb4:	b149      	cbz	r1, 800ceca <__ascii_wctomb+0x16>
 800ceb6:	2aff      	cmp	r2, #255	; 0xff
 800ceb8:	bf85      	ittet	hi
 800ceba:	238a      	movhi	r3, #138	; 0x8a
 800cebc:	6003      	strhi	r3, [r0, #0]
 800cebe:	700a      	strbls	r2, [r1, #0]
 800cec0:	f04f 30ff 	movhi.w	r0, #4294967295
 800cec4:	bf98      	it	ls
 800cec6:	2001      	movls	r0, #1
 800cec8:	4770      	bx	lr
 800ceca:	4608      	mov	r0, r1
 800cecc:	4770      	bx	lr
	...

0800ced0 <__assert_func>:
 800ced0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ced2:	4614      	mov	r4, r2
 800ced4:	461a      	mov	r2, r3
 800ced6:	4b09      	ldr	r3, [pc, #36]	; (800cefc <__assert_func+0x2c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4605      	mov	r5, r0
 800cedc:	68d8      	ldr	r0, [r3, #12]
 800cede:	b14c      	cbz	r4, 800cef4 <__assert_func+0x24>
 800cee0:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <__assert_func+0x30>)
 800cee2:	9100      	str	r1, [sp, #0]
 800cee4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cee8:	4906      	ldr	r1, [pc, #24]	; (800cf04 <__assert_func+0x34>)
 800ceea:	462b      	mov	r3, r5
 800ceec:	f000 f80e 	bl	800cf0c <fiprintf>
 800cef0:	f000 f862 	bl	800cfb8 <abort>
 800cef4:	4b04      	ldr	r3, [pc, #16]	; (800cf08 <__assert_func+0x38>)
 800cef6:	461c      	mov	r4, r3
 800cef8:	e7f3      	b.n	800cee2 <__assert_func+0x12>
 800cefa:	bf00      	nop
 800cefc:	200002fc 	.word	0x200002fc
 800cf00:	0800d8cd 	.word	0x0800d8cd
 800cf04:	0800d8da 	.word	0x0800d8da
 800cf08:	0800d908 	.word	0x0800d908

0800cf0c <fiprintf>:
 800cf0c:	b40e      	push	{r1, r2, r3}
 800cf0e:	b503      	push	{r0, r1, lr}
 800cf10:	4601      	mov	r1, r0
 800cf12:	ab03      	add	r3, sp, #12
 800cf14:	4805      	ldr	r0, [pc, #20]	; (800cf2c <fiprintf+0x20>)
 800cf16:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf1a:	6800      	ldr	r0, [r0, #0]
 800cf1c:	9301      	str	r3, [sp, #4]
 800cf1e:	f7ff fe77 	bl	800cc10 <_vfiprintf_r>
 800cf22:	b002      	add	sp, #8
 800cf24:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf28:	b003      	add	sp, #12
 800cf2a:	4770      	bx	lr
 800cf2c:	200002fc 	.word	0x200002fc

0800cf30 <_fstat_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4d07      	ldr	r5, [pc, #28]	; (800cf50 <_fstat_r+0x20>)
 800cf34:	2300      	movs	r3, #0
 800cf36:	4604      	mov	r4, r0
 800cf38:	4608      	mov	r0, r1
 800cf3a:	4611      	mov	r1, r2
 800cf3c:	602b      	str	r3, [r5, #0]
 800cf3e:	f7f5 fedc 	bl	8002cfa <_fstat>
 800cf42:	1c43      	adds	r3, r0, #1
 800cf44:	d102      	bne.n	800cf4c <_fstat_r+0x1c>
 800cf46:	682b      	ldr	r3, [r5, #0]
 800cf48:	b103      	cbz	r3, 800cf4c <_fstat_r+0x1c>
 800cf4a:	6023      	str	r3, [r4, #0]
 800cf4c:	bd38      	pop	{r3, r4, r5, pc}
 800cf4e:	bf00      	nop
 800cf50:	20005ec0 	.word	0x20005ec0

0800cf54 <_isatty_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	4d06      	ldr	r5, [pc, #24]	; (800cf70 <_isatty_r+0x1c>)
 800cf58:	2300      	movs	r3, #0
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	4608      	mov	r0, r1
 800cf5e:	602b      	str	r3, [r5, #0]
 800cf60:	f7f5 fedb 	bl	8002d1a <_isatty>
 800cf64:	1c43      	adds	r3, r0, #1
 800cf66:	d102      	bne.n	800cf6e <_isatty_r+0x1a>
 800cf68:	682b      	ldr	r3, [r5, #0]
 800cf6a:	b103      	cbz	r3, 800cf6e <_isatty_r+0x1a>
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	bd38      	pop	{r3, r4, r5, pc}
 800cf70:	20005ec0 	.word	0x20005ec0

0800cf74 <memmove>:
 800cf74:	4288      	cmp	r0, r1
 800cf76:	b510      	push	{r4, lr}
 800cf78:	eb01 0402 	add.w	r4, r1, r2
 800cf7c:	d902      	bls.n	800cf84 <memmove+0x10>
 800cf7e:	4284      	cmp	r4, r0
 800cf80:	4623      	mov	r3, r4
 800cf82:	d807      	bhi.n	800cf94 <memmove+0x20>
 800cf84:	1e43      	subs	r3, r0, #1
 800cf86:	42a1      	cmp	r1, r4
 800cf88:	d008      	beq.n	800cf9c <memmove+0x28>
 800cf8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf92:	e7f8      	b.n	800cf86 <memmove+0x12>
 800cf94:	4402      	add	r2, r0
 800cf96:	4601      	mov	r1, r0
 800cf98:	428a      	cmp	r2, r1
 800cf9a:	d100      	bne.n	800cf9e <memmove+0x2a>
 800cf9c:	bd10      	pop	{r4, pc}
 800cf9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfa6:	e7f7      	b.n	800cf98 <memmove+0x24>

0800cfa8 <_malloc_usable_size_r>:
 800cfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfac:	1f18      	subs	r0, r3, #4
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfbc      	itt	lt
 800cfb2:	580b      	ldrlt	r3, [r1, r0]
 800cfb4:	18c0      	addlt	r0, r0, r3
 800cfb6:	4770      	bx	lr

0800cfb8 <abort>:
 800cfb8:	b508      	push	{r3, lr}
 800cfba:	2006      	movs	r0, #6
 800cfbc:	f000 f82c 	bl	800d018 <raise>
 800cfc0:	2001      	movs	r0, #1
 800cfc2:	f7f5 fe67 	bl	8002c94 <_exit>

0800cfc6 <_raise_r>:
 800cfc6:	291f      	cmp	r1, #31
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4604      	mov	r4, r0
 800cfcc:	460d      	mov	r5, r1
 800cfce:	d904      	bls.n	800cfda <_raise_r+0x14>
 800cfd0:	2316      	movs	r3, #22
 800cfd2:	6003      	str	r3, [r0, #0]
 800cfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd8:	bd38      	pop	{r3, r4, r5, pc}
 800cfda:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cfdc:	b112      	cbz	r2, 800cfe4 <_raise_r+0x1e>
 800cfde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfe2:	b94b      	cbnz	r3, 800cff8 <_raise_r+0x32>
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 f831 	bl	800d04c <_getpid_r>
 800cfea:	462a      	mov	r2, r5
 800cfec:	4601      	mov	r1, r0
 800cfee:	4620      	mov	r0, r4
 800cff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cff4:	f000 b818 	b.w	800d028 <_kill_r>
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d00a      	beq.n	800d012 <_raise_r+0x4c>
 800cffc:	1c59      	adds	r1, r3, #1
 800cffe:	d103      	bne.n	800d008 <_raise_r+0x42>
 800d000:	2316      	movs	r3, #22
 800d002:	6003      	str	r3, [r0, #0]
 800d004:	2001      	movs	r0, #1
 800d006:	e7e7      	b.n	800cfd8 <_raise_r+0x12>
 800d008:	2400      	movs	r4, #0
 800d00a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d00e:	4628      	mov	r0, r5
 800d010:	4798      	blx	r3
 800d012:	2000      	movs	r0, #0
 800d014:	e7e0      	b.n	800cfd8 <_raise_r+0x12>
	...

0800d018 <raise>:
 800d018:	4b02      	ldr	r3, [pc, #8]	; (800d024 <raise+0xc>)
 800d01a:	4601      	mov	r1, r0
 800d01c:	6818      	ldr	r0, [r3, #0]
 800d01e:	f7ff bfd2 	b.w	800cfc6 <_raise_r>
 800d022:	bf00      	nop
 800d024:	200002fc 	.word	0x200002fc

0800d028 <_kill_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d07      	ldr	r5, [pc, #28]	; (800d048 <_kill_r+0x20>)
 800d02c:	2300      	movs	r3, #0
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	4611      	mov	r1, r2
 800d034:	602b      	str	r3, [r5, #0]
 800d036:	f7f5 fe1d 	bl	8002c74 <_kill>
 800d03a:	1c43      	adds	r3, r0, #1
 800d03c:	d102      	bne.n	800d044 <_kill_r+0x1c>
 800d03e:	682b      	ldr	r3, [r5, #0]
 800d040:	b103      	cbz	r3, 800d044 <_kill_r+0x1c>
 800d042:	6023      	str	r3, [r4, #0]
 800d044:	bd38      	pop	{r3, r4, r5, pc}
 800d046:	bf00      	nop
 800d048:	20005ec0 	.word	0x20005ec0

0800d04c <_getpid_r>:
 800d04c:	f7f5 be0a 	b.w	8002c64 <_getpid>

0800d050 <logf>:
 800d050:	b508      	push	{r3, lr}
 800d052:	ed2d 8b02 	vpush	{d8}
 800d056:	eeb0 8a40 	vmov.f32	s16, s0
 800d05a:	f000 f827 	bl	800d0ac <__ieee754_logf>
 800d05e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d066:	d60f      	bvs.n	800d088 <logf+0x38>
 800d068:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d070:	dc0a      	bgt.n	800d088 <logf+0x38>
 800d072:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d07a:	d108      	bne.n	800d08e <logf+0x3e>
 800d07c:	f7fb fd16 	bl	8008aac <__errno>
 800d080:	2322      	movs	r3, #34	; 0x22
 800d082:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800d0a4 <logf+0x54>
 800d086:	6003      	str	r3, [r0, #0]
 800d088:	ecbd 8b02 	vpop	{d8}
 800d08c:	bd08      	pop	{r3, pc}
 800d08e:	f7fb fd0d 	bl	8008aac <__errno>
 800d092:	ecbd 8b02 	vpop	{d8}
 800d096:	2321      	movs	r3, #33	; 0x21
 800d098:	6003      	str	r3, [r0, #0]
 800d09a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d09e:	4802      	ldr	r0, [pc, #8]	; (800d0a8 <logf+0x58>)
 800d0a0:	f7ff bf02 	b.w	800cea8 <nanf>
 800d0a4:	ff800000 	.word	0xff800000
 800d0a8:	0800d908 	.word	0x0800d908

0800d0ac <__ieee754_logf>:
 800d0ac:	ee10 3a10 	vmov	r3, s0
 800d0b0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d0b4:	d106      	bne.n	800d0c4 <__ieee754_logf+0x18>
 800d0b6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d24c <__ieee754_logf+0x1a0>
 800d0ba:	eddf 7a65 	vldr	s15, [pc, #404]	; 800d250 <__ieee754_logf+0x1a4>
 800d0be:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d0c2:	4770      	bx	lr
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	da02      	bge.n	800d0ce <__ieee754_logf+0x22>
 800d0c8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d0cc:	e7f5      	b.n	800d0ba <__ieee754_logf+0xe>
 800d0ce:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d0d2:	db02      	blt.n	800d0da <__ieee754_logf+0x2e>
 800d0d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d0d8:	4770      	bx	lr
 800d0da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d0de:	bfb8      	it	lt
 800d0e0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800d254 <__ieee754_logf+0x1a8>
 800d0e4:	485c      	ldr	r0, [pc, #368]	; (800d258 <__ieee754_logf+0x1ac>)
 800d0e6:	bfbe      	ittt	lt
 800d0e8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d0ec:	f06f 0118 	mvnlt.w	r1, #24
 800d0f0:	ee17 3a90 	vmovlt	r3, s15
 800d0f4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800d0f8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d0fc:	4418      	add	r0, r3
 800d0fe:	bfa8      	it	ge
 800d100:	2100      	movge	r1, #0
 800d102:	3a7f      	subs	r2, #127	; 0x7f
 800d104:	440a      	add	r2, r1
 800d106:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800d10a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800d10e:	4319      	orrs	r1, r3
 800d110:	ee00 1a10 	vmov	s0, r1
 800d114:	4951      	ldr	r1, [pc, #324]	; (800d25c <__ieee754_logf+0x1b0>)
 800d116:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800d11a:	f103 000f 	add.w	r0, r3, #15
 800d11e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d122:	4001      	ands	r1, r0
 800d124:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d128:	bb89      	cbnz	r1, 800d18e <__ieee754_logf+0xe2>
 800d12a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d132:	d10f      	bne.n	800d154 <__ieee754_logf+0xa8>
 800d134:	2a00      	cmp	r2, #0
 800d136:	f000 8085 	beq.w	800d244 <__ieee754_logf+0x198>
 800d13a:	ee07 2a90 	vmov	s15, r2
 800d13e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800d260 <__ieee754_logf+0x1b4>
 800d142:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800d264 <__ieee754_logf+0x1b8>
 800d146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d14a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d14e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800d152:	4770      	bx	lr
 800d154:	eddf 6a44 	vldr	s13, [pc, #272]	; 800d268 <__ieee754_logf+0x1bc>
 800d158:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d15c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800d160:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d164:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d168:	b912      	cbnz	r2, 800d170 <__ieee754_logf+0xc4>
 800d16a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d16e:	4770      	bx	lr
 800d170:	ee07 2a90 	vmov	s15, r2
 800d174:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800d260 <__ieee754_logf+0x1b4>
 800d178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d17c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d180:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d184:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800d264 <__ieee754_logf+0x1b8>
 800d188:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800d18c:	4770      	bx	lr
 800d18e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d192:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d196:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d26c <__ieee754_logf+0x1c0>
 800d19a:	eddf 4a35 	vldr	s9, [pc, #212]	; 800d270 <__ieee754_logf+0x1c4>
 800d19e:	4935      	ldr	r1, [pc, #212]	; (800d274 <__ieee754_logf+0x1c8>)
 800d1a0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800d1a4:	4419      	add	r1, r3
 800d1a6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800d1aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d1ae:	430b      	orrs	r3, r1
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	ee07 2a90 	vmov	s15, r2
 800d1b6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800d1ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d1be:	ee25 7a05 	vmul.f32	s14, s10, s10
 800d1c2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800d278 <__ieee754_logf+0x1cc>
 800d1c6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d1ca:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d27c <__ieee754_logf+0x1d0>
 800d1ce:	eee7 5a87 	vfma.f32	s11, s15, s14
 800d1d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d280 <__ieee754_logf+0x1d4>
 800d1d6:	eee7 7a24 	vfma.f32	s15, s14, s9
 800d1da:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800d284 <__ieee754_logf+0x1d8>
 800d1de:	eee7 4a87 	vfma.f32	s9, s15, s14
 800d1e2:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d288 <__ieee754_logf+0x1dc>
 800d1e6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800d1ea:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d1ee:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d1f2:	dd1c      	ble.n	800d22e <__ieee754_logf+0x182>
 800d1f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d1f8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d1fc:	ee27 7a00 	vmul.f32	s14, s14, s0
 800d200:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d204:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d208:	b922      	cbnz	r2, 800d214 <__ieee754_logf+0x168>
 800d20a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d20e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d212:	4770      	bx	lr
 800d214:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800d260 <__ieee754_logf+0x1b4>
 800d218:	eee6 7a86 	vfma.f32	s15, s13, s12
 800d21c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d220:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d224:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d264 <__ieee754_logf+0x1b8>
 800d228:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800d22c:	4770      	bx	lr
 800d22e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d232:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d236:	2a00      	cmp	r2, #0
 800d238:	d0e9      	beq.n	800d20e <__ieee754_logf+0x162>
 800d23a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800d260 <__ieee754_logf+0x1b4>
 800d23e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d242:	e7ed      	b.n	800d220 <__ieee754_logf+0x174>
 800d244:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800d250 <__ieee754_logf+0x1a4>
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	cc000000 	.word	0xcc000000
 800d250:	00000000 	.word	0x00000000
 800d254:	4c000000 	.word	0x4c000000
 800d258:	004afb20 	.word	0x004afb20
 800d25c:	007ffff0 	.word	0x007ffff0
 800d260:	3717f7d1 	.word	0x3717f7d1
 800d264:	3f317180 	.word	0x3f317180
 800d268:	3eaaaaab 	.word	0x3eaaaaab
 800d26c:	3e1cd04f 	.word	0x3e1cd04f
 800d270:	3e178897 	.word	0x3e178897
 800d274:	ffcf5c30 	.word	0xffcf5c30
 800d278:	3e638e29 	.word	0x3e638e29
 800d27c:	3ecccccd 	.word	0x3ecccccd
 800d280:	3e3a3325 	.word	0x3e3a3325
 800d284:	3e924925 	.word	0x3e924925
 800d288:	3f2aaaab 	.word	0x3f2aaaab

0800d28c <_init>:
 800d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28e:	bf00      	nop
 800d290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d292:	bc08      	pop	{r3}
 800d294:	469e      	mov	lr, r3
 800d296:	4770      	bx	lr

0800d298 <_fini>:
 800d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29a:	bf00      	nop
 800d29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29e:	bc08      	pop	{r3}
 800d2a0:	469e      	mov	lr, r3
 800d2a2:	4770      	bx	lr
