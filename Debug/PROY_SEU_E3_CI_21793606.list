
PROY_SEU_E3_CI_21793606.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d294  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800d438  0800d438  0001d438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dab4  0800dab4  000204c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dab4  0800dab4  0001dab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dabc  0800dabc  000204c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dabc  0800dabc  0001dabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dac0  0800dac0  0001dac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c0  20000000  0800dac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059f4  200004c0  0800df84  000204c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005eb4  0800df84  00025eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017089  00000000  00000000  000204f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003abb  00000000  00000000  00037579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b50a  00000000  00000000  0003d618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173ee  00000000  00000000  00058b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f3cc  00000000  00000000  0006ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f2dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006554  00000000  00000000  0010f32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004c0 	.word	0x200004c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d41c 	.word	0x0800d41c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004c4 	.word	0x200004c4
 80001dc:	0800d41c 	.word	0x0800d41c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b9aa 	b.w	8000f84 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f83c 	bl	8000cb4 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2lz>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	f7ff ff5b 	bl	8000b0c <__aeabi_dcmplt>
 8000c56:	b928      	cbnz	r0, 8000c64 <__aeabi_d2lz+0x1c>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c60:	f000 b80a 	b.w	8000c78 <__aeabi_d2ulz>
 8000c64:	4620      	mov	r0, r4
 8000c66:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c6a:	f000 f805 	bl	8000c78 <__aeabi_d2ulz>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__aeabi_d2ulz+0x34>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4606      	mov	r6, r0
 8000c80:	460f      	mov	r7, r1
 8000c82:	f7ff fcd1 	bl	8000628 <__aeabi_dmul>
 8000c86:	f7ff ffa7 	bl	8000bd8 <__aeabi_d2uiz>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	f7ff fc52 	bl	8000534 <__aeabi_ui2d>
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <__aeabi_d2ulz+0x38>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f7ff fcc8 	bl	8000628 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	f7ff fb0a 	bl	80002b8 <__aeabi_dsub>
 8000ca4:	f7ff ff98 	bl	8000bd8 <__aeabi_d2uiz>
 8000ca8:	4621      	mov	r1, r4
 8000caa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cac:	3df00000 	.word	0x3df00000
 8000cb0:	41f00000 	.word	0x41f00000

08000cb4 <__udivmoddi4>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	9d08      	ldr	r5, [sp, #32]
 8000cba:	4604      	mov	r4, r0
 8000cbc:	468e      	mov	lr, r1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d14d      	bne.n	8000d5e <__udivmoddi4+0xaa>
 8000cc2:	428a      	cmp	r2, r1
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	d969      	bls.n	8000d9c <__udivmoddi4+0xe8>
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	b152      	cbz	r2, 8000ce4 <__udivmoddi4+0x30>
 8000cce:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd2:	f1c2 0120 	rsb	r1, r2, #32
 8000cd6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cda:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cde:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce2:	4094      	lsls	r4, r2
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	0c21      	lsrs	r1, r4, #16
 8000cea:	fbbe f6f8 	udiv	r6, lr, r8
 8000cee:	fa1f f78c 	uxth.w	r7, ip
 8000cf2:	fb08 e316 	mls	r3, r8, r6, lr
 8000cf6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfa:	fb06 f107 	mul.w	r1, r6, r7
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x64>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 811f 	bcs.w	8000f4c <__udivmoddi4+0x298>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 811c 	bls.w	8000f4c <__udivmoddi4+0x298>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 f707 	mul.w	r7, r0, r7
 8000d2c:	42a7      	cmp	r7, r4
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x92>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d38:	f080 810a 	bcs.w	8000f50 <__udivmoddi4+0x29c>
 8000d3c:	42a7      	cmp	r7, r4
 8000d3e:	f240 8107 	bls.w	8000f50 <__udivmoddi4+0x29c>
 8000d42:	4464      	add	r4, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4a:	1be4      	subs	r4, r4, r7
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa4>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xc2>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	f000 80ef 	beq.w	8000f46 <__udivmoddi4+0x292>
 8000d68:	2600      	movs	r6, #0
 8000d6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f683 	clz	r6, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d14a      	bne.n	8000e14 <__udivmoddi4+0x160>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd4>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80f9 	bhi.w	8000f7a <__udivmoddi4+0x2c6>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	469e      	mov	lr, r3
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa4>
 8000d96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa4>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xec>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 8092 	bne.w	8000ece <__udivmoddi4+0x21a>
 8000daa:	eba1 010c 	sub.w	r1, r1, ip
 8000dae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	2601      	movs	r6, #1
 8000db8:	0c20      	lsrs	r0, r4, #16
 8000dba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dbe:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc6:	fb0e f003 	mul.w	r0, lr, r3
 8000dca:	4288      	cmp	r0, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x12c>
 8000dce:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x12a>
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	f200 80cb 	bhi.w	8000f74 <__udivmoddi4+0x2c0>
 8000dde:	4643      	mov	r3, r8
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de8:	fb07 1110 	mls	r1, r7, r0, r1
 8000dec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df0:	fb0e fe00 	mul.w	lr, lr, r0
 8000df4:	45a6      	cmp	lr, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x156>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x154>
 8000e02:	45a6      	cmp	lr, r4
 8000e04:	f200 80bb 	bhi.w	8000f7e <__udivmoddi4+0x2ca>
 8000e08:	4608      	mov	r0, r1
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x9a>
 8000e14:	f1c6 0720 	rsb	r7, r6, #32
 8000e18:	40b3      	lsls	r3, r6
 8000e1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e22:	fa20 f407 	lsr.w	r4, r0, r7
 8000e26:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2a:	431c      	orrs	r4, r3
 8000e2c:	40f9      	lsrs	r1, r7
 8000e2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e32:	fa00 f306 	lsl.w	r3, r0, r6
 8000e36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3a:	0c20      	lsrs	r0, r4, #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fb09 1118 	mls	r1, r9, r8, r1
 8000e44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e48:	fb08 f00e 	mul.w	r0, r8, lr
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e52:	d90b      	bls.n	8000e6c <__udivmoddi4+0x1b8>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e5c:	f080 8088 	bcs.w	8000f70 <__udivmoddi4+0x2bc>
 8000e60:	4288      	cmp	r0, r1
 8000e62:	f240 8085 	bls.w	8000f70 <__udivmoddi4+0x2bc>
 8000e66:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	1a09      	subs	r1, r1, r0
 8000e6e:	b2a4      	uxth	r4, r4
 8000e70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e74:	fb09 1110 	mls	r1, r9, r0, r1
 8000e78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e80:	458e      	cmp	lr, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1e2>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e8c:	d26c      	bcs.n	8000f68 <__udivmoddi4+0x2b4>
 8000e8e:	458e      	cmp	lr, r1
 8000e90:	d96a      	bls.n	8000f68 <__udivmoddi4+0x2b4>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ea2:	42a1      	cmp	r1, r4
 8000ea4:	46c8      	mov	r8, r9
 8000ea6:	46a6      	mov	lr, r4
 8000ea8:	d356      	bcc.n	8000f58 <__udivmoddi4+0x2a4>
 8000eaa:	d053      	beq.n	8000f54 <__udivmoddi4+0x2a0>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x212>
 8000eae:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000eb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eba:	fa22 f306 	lsr.w	r3, r2, r6
 8000ebe:	40f1      	lsrs	r1, r6
 8000ec0:	431f      	orrs	r7, r3
 8000ec2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	f1c2 0320 	rsb	r3, r2, #32
 8000ed2:	40d8      	lsrs	r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa21 f303 	lsr.w	r3, r1, r3
 8000edc:	4091      	lsls	r1, r2
 8000ede:	4301      	orrs	r1, r0
 8000ee0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee4:	fa1f fe8c 	uxth.w	lr, ip
 8000ee8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eec:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef0:	0c0b      	lsrs	r3, r1, #16
 8000ef2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ef6:	fb00 f60e 	mul.w	r6, r0, lr
 8000efa:	429e      	cmp	r6, r3
 8000efc:	fa04 f402 	lsl.w	r4, r4, r2
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x260>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0a:	d22f      	bcs.n	8000f6c <__udivmoddi4+0x2b8>
 8000f0c:	429e      	cmp	r6, r3
 8000f0e:	d92d      	bls.n	8000f6c <__udivmoddi4+0x2b8>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1b9b      	subs	r3, r3, r6
 8000f16:	b289      	uxth	r1, r1
 8000f18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f24:	fb06 f30e 	mul.w	r3, r6, lr
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x28a>
 8000f2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f34:	d216      	bcs.n	8000f64 <__udivmoddi4+0x2b0>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d914      	bls.n	8000f64 <__udivmoddi4+0x2b0>
 8000f3a:	3e02      	subs	r6, #2
 8000f3c:	4461      	add	r1, ip
 8000f3e:	1ac9      	subs	r1, r1, r3
 8000f40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f44:	e738      	b.n	8000db8 <__udivmoddi4+0x104>
 8000f46:	462e      	mov	r6, r5
 8000f48:	4628      	mov	r0, r5
 8000f4a:	e705      	b.n	8000d58 <__udivmoddi4+0xa4>
 8000f4c:	4606      	mov	r6, r0
 8000f4e:	e6e3      	b.n	8000d18 <__udivmoddi4+0x64>
 8000f50:	4618      	mov	r0, r3
 8000f52:	e6f8      	b.n	8000d46 <__udivmoddi4+0x92>
 8000f54:	454b      	cmp	r3, r9
 8000f56:	d2a9      	bcs.n	8000eac <__udivmoddi4+0x1f8>
 8000f58:	ebb9 0802 	subs.w	r8, r9, r2
 8000f5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f60:	3801      	subs	r0, #1
 8000f62:	e7a3      	b.n	8000eac <__udivmoddi4+0x1f8>
 8000f64:	4646      	mov	r6, r8
 8000f66:	e7ea      	b.n	8000f3e <__udivmoddi4+0x28a>
 8000f68:	4620      	mov	r0, r4
 8000f6a:	e794      	b.n	8000e96 <__udivmoddi4+0x1e2>
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	e7d1      	b.n	8000f14 <__udivmoddi4+0x260>
 8000f70:	46d0      	mov	r8, sl
 8000f72:	e77b      	b.n	8000e6c <__udivmoddi4+0x1b8>
 8000f74:	3b02      	subs	r3, #2
 8000f76:	4461      	add	r1, ip
 8000f78:	e732      	b.n	8000de0 <__udivmoddi4+0x12c>
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	e709      	b.n	8000d92 <__udivmoddi4+0xde>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e742      	b.n	8000e0a <__udivmoddi4+0x156>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <cJSON_GetStringValue>:
{
    return (const char*) (global_error.json + global_error.position);
}

CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsString(item))
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f001 f904 	bl	800219e <cJSON_IsString>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <cJSON_GetStringValue+0x18>
    {
        return NULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e001      	b.n	8000fa4 <cJSON_GetStringValue+0x1c>
    }

    return item->valuestring;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <case_insensitive_strcmp+0x16>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e056      	b.n	8001074 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d10d      	bne.n	8000fea <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e050      	b.n	8001074 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e04a      	b.n	8001074 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <case_insensitive_strcmp+0xd4>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d103      	bne.n	800100a <case_insensitive_strcmp+0x5e>
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f103 0220 	add.w	r2, r3, #32
 8001008:	e000      	b.n	800100c <case_insensitive_strcmp+0x60>
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	73bb      	strb	r3, [r7, #14]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	3301      	adds	r3, #1
 8001016:	491a      	ldr	r1, [pc, #104]	; (8001080 <case_insensitive_strcmp+0xd4>)
 8001018:	440b      	add	r3, r1
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d102      	bne.n	800102a <case_insensitive_strcmp+0x7e>
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	3320      	adds	r3, #32
 8001028:	e000      	b.n	800102c <case_insensitive_strcmp+0x80>
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	429a      	cmp	r2, r3
 800102e:	d0d0      	beq.n	8000fd2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	737b      	strb	r3, [r7, #13]
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	3301      	adds	r3, #1
 800103a:	4a11      	ldr	r2, [pc, #68]	; (8001080 <case_insensitive_strcmp+0xd4>)
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d103      	bne.n	8001050 <case_insensitive_strcmp+0xa4>
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	f103 0220 	add.w	r2, r3, #32
 800104e:	e000      	b.n	8001052 <case_insensitive_strcmp+0xa6>
 8001050:	7b7a      	ldrb	r2, [r7, #13]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	733b      	strb	r3, [r7, #12]
 8001058:	7b3b      	ldrb	r3, [r7, #12]
 800105a:	3301      	adds	r3, #1
 800105c:	4908      	ldr	r1, [pc, #32]	; (8001080 <case_insensitive_strcmp+0xd4>)
 800105e:	440b      	add	r3, r1
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d102      	bne.n	8001070 <case_insensitive_strcmp+0xc4>
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	3320      	adds	r3, #32
 800106e:	e000      	b.n	8001072 <case_insensitive_strcmp+0xc6>
 8001070:	7b3b      	ldrb	r3, [r7, #12]
 8001072:	1ad3      	subs	r3, r2, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	0800d610 	.word	0x0800d610

08001084 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2028      	movs	r0, #40	; 0x28
 8001092:	4798      	blx	r3
 8001094:	60f8      	str	r0, [r7, #12]
    if (node)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800109c:	2228      	movs	r2, #40	; 0x28
 800109e:	2100      	movs	r1, #0
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f007 fff9 	bl	8009098 <memset>
    }

    return node;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80010bc:	e037      	b.n	800112e <cJSON_Delete+0x7e>
    {
        next = item->next;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d108      	bne.n	80010e2 <cJSON_Delete+0x32>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffe7 	bl	80010b0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <cJSON_Delete+0x52>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <cJSON_Delete+0x90>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6912      	ldr	r2, [r2, #16]
 80010fe:	4610      	mov	r0, r2
 8001100:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800110a:	2b00      	cmp	r3, #0
 800110c:	d109      	bne.n	8001122 <cJSON_Delete+0x72>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <cJSON_Delete+0x90>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6a12      	ldr	r2, [r2, #32]
 800111e:	4610      	mov	r0, r2
 8001120:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <cJSON_Delete+0x90>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	4798      	blx	r3
        item = next;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1c4      	bne.n	80010be <cJSON_Delete+0xe>
    }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000000 	.word	0x20000000

08001144 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001148:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	0000      	movs	r0, r0
	...

08001158 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b098      	sub	sp, #96	; 0x60
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800116e:	2300      	movs	r3, #0
 8001170:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001172:	f7ff ffe7 	bl	8001144 <get_decimal_point>
 8001176:	4603      	mov	r3, r0
 8001178:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <parse_number+0x36>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <parse_number+0x3a>
    {
        return false;
 800118e:	2300      	movs	r3, #0
 8001190:	e0c6      	b.n	8001320 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001192:	2300      	movs	r3, #0
 8001194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001196:	e063      	b.n	8001260 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6899      	ldr	r1, [r3, #8]
 80011a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a2:	440b      	add	r3, r1
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b45      	cmp	r3, #69	; 0x45
 80011aa:	dc3d      	bgt.n	8001228 <parse_number+0xd0>
 80011ac:	2b2b      	cmp	r3, #43	; 0x2b
 80011ae:	db66      	blt.n	800127e <parse_number+0x126>
 80011b0:	3b2b      	subs	r3, #43	; 0x2b
 80011b2:	2b1a      	cmp	r3, #26
 80011b4:	d863      	bhi.n	800127e <parse_number+0x126>
 80011b6:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <parse_number+0x64>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	0800122d 	.word	0x0800122d
 80011c0:	0800127f 	.word	0x0800127f
 80011c4:	0800122d 	.word	0x0800122d
 80011c8:	0800124b 	.word	0x0800124b
 80011cc:	0800127f 	.word	0x0800127f
 80011d0:	0800122d 	.word	0x0800122d
 80011d4:	0800122d 	.word	0x0800122d
 80011d8:	0800122d 	.word	0x0800122d
 80011dc:	0800122d 	.word	0x0800122d
 80011e0:	0800122d 	.word	0x0800122d
 80011e4:	0800122d 	.word	0x0800122d
 80011e8:	0800122d 	.word	0x0800122d
 80011ec:	0800122d 	.word	0x0800122d
 80011f0:	0800122d 	.word	0x0800122d
 80011f4:	0800122d 	.word	0x0800122d
 80011f8:	0800127f 	.word	0x0800127f
 80011fc:	0800127f 	.word	0x0800127f
 8001200:	0800127f 	.word	0x0800127f
 8001204:	0800127f 	.word	0x0800127f
 8001208:	0800127f 	.word	0x0800127f
 800120c:	0800127f 	.word	0x0800127f
 8001210:	0800127f 	.word	0x0800127f
 8001214:	0800127f 	.word	0x0800127f
 8001218:	0800127f 	.word	0x0800127f
 800121c:	0800127f 	.word	0x0800127f
 8001220:	0800127f 	.word	0x0800127f
 8001224:	0800122d 	.word	0x0800122d
 8001228:	2b65      	cmp	r3, #101	; 0x65
 800122a:	d128      	bne.n	800127e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6899      	ldr	r1, [r3, #8]
 8001234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001236:	440b      	add	r3, r1
 8001238:	4413      	add	r3, r2
 800123a:	7819      	ldrb	r1, [r3, #0]
 800123c:	f107 0208 	add.w	r2, r7, #8
 8001240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001242:	4413      	add	r3, r2
 8001244:	460a      	mov	r2, r1
 8001246:	701a      	strb	r2, [r3, #0]
                break;
 8001248:	e007      	b.n	800125a <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800124a:	f107 0208 	add.w	r2, r7, #8
 800124e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001250:	4413      	add	r3, r2
 8001252:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001256:	701a      	strb	r2, [r3, #0]
                break;
 8001258:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800125a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800125c:	3301      	adds	r3, #1
 800125e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001262:	2b3e      	cmp	r3, #62	; 0x3e
 8001264:	d80d      	bhi.n	8001282 <parse_number+0x12a>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00a      	beq.n	8001282 <parse_number+0x12a>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001272:	441a      	add	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	d38d      	bcc.n	8001198 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800127c:	e001      	b.n	8001282 <parse_number+0x12a>
                goto loop_end;
 800127e:	bf00      	nop
 8001280:	e000      	b.n	8001284 <parse_number+0x12c>
loop_end:
 8001282:	bf00      	nop
    number_c_string[i] = '\0';
 8001284:	f107 0208 	add.w	r2, r7, #8
 8001288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128a:	4413      	add	r3, r2
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001290:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f009 fb82 	bl	800a9a4 <strtod>
 80012a0:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80012a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d101      	bne.n	80012b2 <parse_number+0x15a>
    {
        return false; /* parse_error */
 80012ae:	2300      	movs	r3, #0
 80012b0:	e036      	b.n	8001320 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012b8:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80012bc:	a31b      	add	r3, pc, #108	; (adr r3, 800132c <parse_number+0x1d4>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012c6:	f7ff fc35 	bl	8000b34 <__aeabi_dcmpge>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	e015      	b.n	8001306 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <parse_number+0x1d0>)
 80012e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012e4:	f7ff fc1c 	bl	8000b20 <__aeabi_dcmple>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	e006      	b.n	8001306 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 80012f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012fc:	f7ff fc44 	bl	8000b88 <__aeabi_d2iz>
 8001300:	4602      	mov	r2, r0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2208      	movs	r2, #8
 800130a:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001312:	f107 0208 	add.w	r2, r7, #8
 8001316:	1a8a      	subs	r2, r1, r2
 8001318:	441a      	add	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	609a      	str	r2, [r3, #8]
    return true;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3760      	adds	r7, #96	; 0x60
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	c1e00000 	.word	0xc1e00000
 800132c:	ffc00000 	.word	0xffc00000
 8001330:	41dfffff 	.word	0x41dfffff

08001334 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	e04c      	b.n	80013e4 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b2f      	cmp	r3, #47	; 0x2f
 8001354:	d90f      	bls.n	8001376 <parse_hex4+0x42>
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b39      	cmp	r3, #57	; 0x39
 8001360:	d809      	bhi.n	8001376 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	3b30      	subs	r3, #48	; 0x30
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e02d      	b.n	80013d2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b40      	cmp	r3, #64	; 0x40
 8001380:	d90f      	bls.n	80013a2 <parse_hex4+0x6e>
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b46      	cmp	r3, #70	; 0x46
 800138c:	d809      	bhi.n	80013a2 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	3b37      	subs	r3, #55	; 0x37
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e017      	b.n	80013d2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b60      	cmp	r3, #96	; 0x60
 80013ac:	d90f      	bls.n	80013ce <parse_hex4+0x9a>
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b66      	cmp	r3, #102	; 0x66
 80013b8:	d809      	bhi.n	80013ce <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	3b57      	subs	r3, #87	; 0x57
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	e001      	b.n	80013d2 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e00c      	b.n	80013ec <parse_hex4+0xb8>
        }

        if (i < 3)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d802      	bhi.n	80013de <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3301      	adds	r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d9af      	bls.n	800134a <parse_hex4+0x16>
        }
    }

    return h;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b05      	cmp	r3, #5
 8001430:	f340 80b7 	ble.w	80015a2 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	3302      	adds	r3, #2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff7b 	bl	8001334 <parse_hex4>
 800143e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001446:	d304      	bcc.n	8001452 <utf16_literal_to_utf8+0x5a>
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800144e:	f0c0 80aa 	bcc.w	80015a6 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001458:	d337      	bcc.n	80014ca <utf16_literal_to_utf8+0xd2>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001460:	d233      	bcs.n	80014ca <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	3306      	adds	r3, #6
 8001466:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800146c:	230c      	movs	r3, #12
 800146e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b05      	cmp	r3, #5
 800147a:	f340 8096 	ble.w	80015aa <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b5c      	cmp	r3, #92	; 0x5c
 8001484:	f040 8093 	bne.w	80015ae <utf16_literal_to_utf8+0x1b6>
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b75      	cmp	r3, #117	; 0x75
 8001490:	f040 808d 	bne.w	80015ae <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3302      	adds	r3, #2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff4b 	bl	8001334 <parse_hex4>
 800149e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80014a6:	f0c0 8084 	bcc.w	80015b2 <utf16_literal_to_utf8+0x1ba>
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80014b0:	d27f      	bcs.n	80015b2 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	029a      	lsls	r2, r3, #10
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <utf16_literal_to_utf8+0x1cc>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014c0:	4313      	orrs	r3, r2
 80014c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80014c8:	e004      	b.n	80014d4 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80014ca:	2306      	movs	r3, #6
 80014cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	2b7f      	cmp	r3, #127	; 0x7f
 80014d8:	d803      	bhi.n	80014e2 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80014da:	2301      	movs	r3, #1
 80014dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80014e0:	e01f      	b.n	8001522 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014e8:	d206      	bcs.n	80014f8 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80014f0:	23c0      	movs	r3, #192	; 0xc0
 80014f2:	f887 3020 	strb.w	r3, [r7, #32]
 80014f6:	e014      	b.n	8001522 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fe:	d206      	bcs.n	800150e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001500:	2303      	movs	r3, #3
 8001502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001506:	23e0      	movs	r3, #224	; 0xe0
 8001508:	f887 3020 	strb.w	r3, [r7, #32]
 800150c:	e009      	b.n	8001522 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001514:	d24f      	bcs.n	80015b6 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001516:	2304      	movs	r3, #4
 8001518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800151c:	23f0      	movs	r3, #240	; 0xf0
 800151e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001526:	3b01      	subs	r3, #1
 8001528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800152c:	e015      	b.n	800155a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001536:	b2da      	uxtb	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001540:	440b      	add	r3, r1
 8001542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001550:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001554:	3b01      	subs	r3, #1
 8001556:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800155a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e5      	bne.n	800152e <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001562:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001566:	2b01      	cmp	r3, #1
 8001568:	d909      	bls.n	800157e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	b2d9      	uxtb	r1, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001576:	430a      	orrs	r2, r1
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e007      	b.n	800158e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	b2da      	uxtb	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001596:	441a      	add	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800159c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015a0:	e00b      	b.n	80015ba <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80015a2:	bf00      	nop
 80015a4:	e008      	b.n	80015b8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015a6:	bf00      	nop
 80015a8:	e006      	b.n	80015b8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015aa:	bf00      	nop
 80015ac:	e004      	b.n	80015b8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015ae:	bf00      	nop
 80015b0:	e002      	b.n	80015b8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015b2:	bf00      	nop
 80015b4:	e000      	b.n	80015b8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015b6:	bf00      	nop

fail:
    return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	000ffc00 	.word	0x000ffc00

080015c8 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	3301      	adds	r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b22      	cmp	r3, #34	; 0x22
 8001604:	f040 8102 	bne.w	800180c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001610:	e017      	b.n	8001642 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b5c      	cmp	r3, #92	; 0x5c
 8001618:	d110      	bne.n	800163c <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	461a      	mov	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	f080 80f0 	bcs.w	8001810 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	3301      	adds	r3, #1
 8001634:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	3301      	adds	r3, #1
 800163a:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	3301      	adds	r3, #1
 8001640:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a3a      	ldr	r2, [r7, #32]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	461a      	mov	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	d203      	bcs.n	800165c <parse_string+0x94>
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b22      	cmp	r3, #34	; 0x22
 800165a:	d1da      	bne.n	8001612 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a3a      	ldr	r2, [r7, #32]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	461a      	mov	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	f080 80d2 	bcs.w	8001814 <parse_string+0x24c>
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b22      	cmp	r3, #34	; 0x22
 8001676:	f040 80cd 	bne.w	8001814 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	4413      	add	r3, r2
 8001684:	6a3a      	ldr	r2, [r7, #32]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	461a      	mov	r2, r3
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	3201      	adds	r2, #1
 8001698:	4610      	mov	r0, r2
 800169a:	4798      	blx	r3
 800169c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80b9 	beq.w	8001818 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80016aa:	e093      	b.n	80017d4 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b5c      	cmp	r3, #92	; 0x5c
 80016b2:	d008      	beq.n	80016c6 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80016b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b6:	1c53      	adds	r3, r2, #1
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1c59      	adds	r1, r3, #1
 80016be:	60f9      	str	r1, [r7, #12]
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e086      	b.n	80017d4 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80016ca:	6a3a      	ldr	r2, [r7, #32]
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f340 80a3 	ble.w	800181c <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	3301      	adds	r3, #1
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b75      	cmp	r3, #117	; 0x75
 80016de:	f300 809f 	bgt.w	8001820 <parse_string+0x258>
 80016e2:	2b5c      	cmp	r3, #92	; 0x5c
 80016e4:	da04      	bge.n	80016f0 <parse_string+0x128>
 80016e6:	2b22      	cmp	r3, #34	; 0x22
 80016e8:	d05c      	beq.n	80017a4 <parse_string+0x1dc>
 80016ea:	2b2f      	cmp	r3, #47	; 0x2f
 80016ec:	d05a      	beq.n	80017a4 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 80016ee:	e097      	b.n	8001820 <parse_string+0x258>
            switch (input_pointer[1])
 80016f0:	3b5c      	subs	r3, #92	; 0x5c
 80016f2:	2b19      	cmp	r3, #25
 80016f4:	f200 8094 	bhi.w	8001820 <parse_string+0x258>
 80016f8:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <parse_string+0x138>)
 80016fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fe:	bf00      	nop
 8001700:	080017a5 	.word	0x080017a5
 8001704:	08001821 	.word	0x08001821
 8001708:	08001821 	.word	0x08001821
 800170c:	08001821 	.word	0x08001821
 8001710:	08001821 	.word	0x08001821
 8001714:	08001821 	.word	0x08001821
 8001718:	08001769 	.word	0x08001769
 800171c:	08001821 	.word	0x08001821
 8001720:	08001821 	.word	0x08001821
 8001724:	08001821 	.word	0x08001821
 8001728:	08001775 	.word	0x08001775
 800172c:	08001821 	.word	0x08001821
 8001730:	08001821 	.word	0x08001821
 8001734:	08001821 	.word	0x08001821
 8001738:	08001821 	.word	0x08001821
 800173c:	08001821 	.word	0x08001821
 8001740:	08001821 	.word	0x08001821
 8001744:	08001821 	.word	0x08001821
 8001748:	08001781 	.word	0x08001781
 800174c:	08001821 	.word	0x08001821
 8001750:	08001821 	.word	0x08001821
 8001754:	08001821 	.word	0x08001821
 8001758:	0800178d 	.word	0x0800178d
 800175c:	08001821 	.word	0x08001821
 8001760:	08001799 	.word	0x08001799
 8001764:	080017b3 	.word	0x080017b3
                    *output_pointer++ = '\b';
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60fa      	str	r2, [r7, #12]
 800176e:	2208      	movs	r2, #8
 8001770:	701a      	strb	r2, [r3, #0]
                    break;
 8001772:	e02b      	b.n	80017cc <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60fa      	str	r2, [r7, #12]
 800177a:	220c      	movs	r2, #12
 800177c:	701a      	strb	r2, [r3, #0]
                    break;
 800177e:	e025      	b.n	80017cc <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	60fa      	str	r2, [r7, #12]
 8001786:	220a      	movs	r2, #10
 8001788:	701a      	strb	r2, [r3, #0]
                    break;
 800178a:	e01f      	b.n	80017cc <parse_string+0x204>
                    *output_pointer++ = '\r';
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60fa      	str	r2, [r7, #12]
 8001792:	220d      	movs	r2, #13
 8001794:	701a      	strb	r2, [r3, #0]
                    break;
 8001796:	e019      	b.n	80017cc <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60fa      	str	r2, [r7, #12]
 800179e:	2209      	movs	r2, #9
 80017a0:	701a      	strb	r2, [r3, #0]
                    break;
 80017a2:	e013      	b.n	80017cc <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	60fa      	str	r2, [r7, #12]
 80017aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ac:	7852      	ldrb	r2, [r2, #1]
 80017ae:	701a      	strb	r2, [r3, #0]
                    break;
 80017b0:	e00c      	b.n	80017cc <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	461a      	mov	r2, r3
 80017b8:	6a39      	ldr	r1, [r7, #32]
 80017ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017bc:	f7ff fe1c 	bl	80013f8 <utf16_literal_to_utf8>
 80017c0:	4603      	mov	r3, r0
 80017c2:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d02c      	beq.n	8001824 <parse_string+0x25c>
                    break;
 80017ca:	bf00      	nop
            }
            input_pointer += sequence_length;
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d0:	4413      	add	r3, r2
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80017d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f4ff af67 	bcc.w	80016ac <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2210      	movs	r2, #16
 80017e8:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6a3a      	ldr	r2, [r7, #32]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	461a      	mov	r2, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	609a      	str	r2, [r3, #8]

    return true;
 8001808:	2301      	movs	r3, #1
 800180a:	e01e      	b.n	800184a <parse_string+0x282>
        goto fail;
 800180c:	bf00      	nop
 800180e:	e00a      	b.n	8001826 <parse_string+0x25e>
                    goto fail;
 8001810:	bf00      	nop
 8001812:	e008      	b.n	8001826 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001814:	bf00      	nop
 8001816:	e006      	b.n	8001826 <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001818:	bf00      	nop
 800181a:	e004      	b.n	8001826 <parse_string+0x25e>
                goto fail;
 800181c:	bf00      	nop
 800181e:	e002      	b.n	8001826 <parse_string+0x25e>
                    goto fail;
 8001820:	bf00      	nop
 8001822:	e000      	b.n	8001826 <parse_string+0x25e>
                        goto fail;
 8001824:	bf00      	nop

fail:
    if (output != NULL)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	69f8      	ldr	r0, [r7, #28]
 8001832:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	461a      	mov	r2, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop

08001854 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <buffer_skip_whitespace+0x16>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800186a:	2300      	movs	r3, #0
 800186c:	e02c      	b.n	80018c8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <buffer_skip_whitespace+0x2c>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	d306      	bcc.n	800188e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	e021      	b.n	80018c8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00d      	beq.n	80018b0 <buffer_skip_whitespace+0x5c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <buffer_skip_whitespace+0x5c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4413      	add	r3, r2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b20      	cmp	r3, #32
 80018ae:	d9e9      	bls.n	8001884 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d104      	bne.n	80018c6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	1e5a      	subs	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <skip_utf8_bom+0x1e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <skip_utf8_bom+0x1e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <skip_utf8_bom+0x22>
    {
        return NULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e01c      	b.n	8001930 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d018      	beq.n	800192e <skip_utf8_bom+0x5a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	1d1a      	adds	r2, r3, #4
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d211      	bcs.n	800192e <skip_utf8_bom+0x5a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4413      	add	r3, r2
 8001914:	2203      	movs	r2, #3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <skip_utf8_bom+0x64>)
 8001918:	4618      	mov	r0, r3
 800191a:	f008 fa0d 	bl	8009d38 <strncmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d104      	bne.n	800192e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	1cda      	adds	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800192e:	687b      	ldr	r3, [r7, #4]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	0800d470 	.word	0x0800d470

0800193c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800194e:	2300      	movs	r3, #0
 8001950:	e00c      	b.n	800196c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7fe fc4e 	bl	80001f4 <strlen>
 8001958:	4603      	mov	r3, r0
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f805 	bl	8001974 <cJSON_ParseWithLengthOpts>
 800196a:	4603      	mov	r3, r0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08e      	sub	sp, #56	; 0x38
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	615a      	str	r2, [r3, #20]
 8001994:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <cJSON_ParseWithLengthOpts+0x12c>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80019a0:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <cJSON_ParseWithLengthOpts+0x12c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d042      	beq.n	8001a32 <cJSON_ParseWithLengthOpts+0xbe>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d03f      	beq.n	8001a32 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80019be:	4a39      	ldr	r2, [pc, #228]	; (8001aa4 <cJSON_ParseWithLengthOpts+0x130>)
 80019c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80019ca:	4836      	ldr	r0, [pc, #216]	; (8001aa4 <cJSON_ParseWithLengthOpts+0x130>)
 80019cc:	f7ff fb5a 	bl	8001084 <cJSON_New_Item>
 80019d0:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80019d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d02e      	beq.n	8001a36 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80019d8:	f107 0318 	add.w	r3, r7, #24
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff79 	bl	80018d4 <skip_utf8_bom>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff35 	bl	8001854 <buffer_skip_whitespace>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4619      	mov	r1, r3
 80019ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019f0:	f000 f868 	bl	8001ac4 <parse_value>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01f      	beq.n	8001a3a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00e      	beq.n	8001a1e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001a00:	f107 0318 	add.w	r3, r7, #24
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff25 	bl	8001854 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d215      	bcs.n	8001a3e <cJSON_ParseWithLengthOpts+0xca>
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	4413      	add	r3, r2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	441a      	add	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	e031      	b.n	8001a96 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001a32:	bf00      	nop
 8001a34:	e004      	b.n	8001a40 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a36:	bf00      	nop
 8001a38:	e002      	b.n	8001a40 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a3a:	bf00      	nop
 8001a3c:	e000      	b.n	8001a40 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001a3e:	bf00      	nop

fail:
    if (item != NULL)
 8001a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a48:	f7ff fb32 	bl	80010b0 <cJSON_Delete>
    }

    if (value != NULL)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d020      	beq.n	8001a94 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a5a:	6a3a      	ldr	r2, [r7, #32]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d202      	bcs.n	8001a68 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	e005      	b.n	8001a74 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	441a      	add	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001a86:	461a      	mov	r2, r3
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a90:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3738      	adds	r7, #56	; 0x38
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200004dc 	.word	0x200004dc
 8001aa4:	20000000 	.word	0x20000000

08001aa8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff41 	bl	800193c <cJSON_ParseWithOpts>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <parse_value+0x18>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <parse_value+0x1c>
    {
        return false; /* no input */
 8001adc:	2300      	movs	r3, #0
 8001ade:	e0d2      	b.n	8001c86 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01d      	beq.n	8001b22 <parse_value+0x5e>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	1d1a      	adds	r2, r3, #4
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d816      	bhi.n	8001b22 <parse_value+0x5e>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4413      	add	r3, r2
 8001afe:	2204      	movs	r2, #4
 8001b00:	4963      	ldr	r1, [pc, #396]	; (8001c90 <parse_value+0x1cc>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f008 f918 	bl	8009d38 <strncmp>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2204      	movs	r2, #4
 8001b12:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	1d1a      	adds	r2, r3, #4
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	609a      	str	r2, [r3, #8]
        return true;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0b1      	b.n	8001c86 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01d      	beq.n	8001b64 <parse_value+0xa0>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	1d5a      	adds	r2, r3, #5
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d816      	bhi.n	8001b64 <parse_value+0xa0>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4413      	add	r3, r2
 8001b40:	2205      	movs	r2, #5
 8001b42:	4954      	ldr	r1, [pc, #336]	; (8001c94 <parse_value+0x1d0>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f008 f8f7 	bl	8009d38 <strncmp>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	1d5a      	adds	r2, r3, #5
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	609a      	str	r2, [r3, #8]
        return true;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e090      	b.n	8001c86 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d020      	beq.n	8001bac <parse_value+0xe8>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	1d1a      	adds	r2, r3, #4
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d819      	bhi.n	8001bac <parse_value+0xe8>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	2204      	movs	r2, #4
 8001b84:	4944      	ldr	r1, [pc, #272]	; (8001c98 <parse_value+0x1d4>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f008 f8d6 	bl	8009d38 <strncmp>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10c      	bne.n	8001bac <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	1d1a      	adds	r2, r3, #4
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	609a      	str	r2, [r3, #8]
        return true;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e06c      	b.n	8001c86 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d013      	beq.n	8001bda <parse_value+0x116>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d20d      	bcs.n	8001bda <parse_value+0x116>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b22      	cmp	r3, #34	; 0x22
 8001bcc:	d105      	bne.n	8001bda <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001bce:	6839      	ldr	r1, [r7, #0]
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff fcf9 	bl	80015c8 <parse_string>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	e055      	b.n	8001c86 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d023      	beq.n	8001c28 <parse_value+0x164>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d21d      	bcs.n	8001c28 <parse_value+0x164>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b2d      	cmp	r3, #45	; 0x2d
 8001bfa:	d00f      	beq.n	8001c1c <parse_value+0x158>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4413      	add	r3, r2
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b2f      	cmp	r3, #47	; 0x2f
 8001c0a:	d90d      	bls.n	8001c28 <parse_value+0x164>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b39      	cmp	r3, #57	; 0x39
 8001c1a:	d805      	bhi.n	8001c28 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001c1c:	6839      	ldr	r1, [r7, #0]
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fa9a 	bl	8001158 <parse_number>
 8001c24:	4603      	mov	r3, r0
 8001c26:	e02e      	b.n	8001c86 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d013      	beq.n	8001c56 <parse_value+0x192>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d20d      	bcs.n	8001c56 <parse_value+0x192>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4413      	add	r3, r2
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b5b      	cmp	r3, #91	; 0x5b
 8001c48:	d105      	bne.n	8001c56 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c4a:	6839      	ldr	r1, [r7, #0]
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f825 	bl	8001c9c <parse_array>
 8001c52:	4603      	mov	r3, r0
 8001c54:	e017      	b.n	8001c86 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <parse_value+0x1c0>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d20d      	bcs.n	8001c84 <parse_value+0x1c0>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4413      	add	r3, r2
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b7b      	cmp	r3, #123	; 0x7b
 8001c76:	d105      	bne.n	8001c84 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001c78:	6839      	ldr	r1, [r7, #0]
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8d2 	bl	8001e24 <parse_object>
 8001c80:	4603      	mov	r3, r0
 8001c82:	e000      	b.n	8001c86 <parse_value+0x1c2>
    }

    return false;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	0800d444 	.word	0x0800d444
 8001c94:	0800d474 	.word	0x0800d474
 8001c98:	0800d47c 	.word	0x0800d47c

08001c9c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cb6:	d301      	bcc.n	8001cbc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e0af      	b.n	8001e1c <parse_array+0x180>
    }
    input_buffer->depth++;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b5b      	cmp	r3, #91	; 0x5b
 8001cd4:	f040 8094 	bne.w	8001e00 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f7ff fdb6 	bl	8001854 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00d      	beq.n	8001d0a <parse_array+0x6e>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d207      	bcs.n	8001d0a <parse_array+0x6e>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b5d      	cmp	r3, #93	; 0x5d
 8001d08:	d061      	beq.n	8001dce <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <parse_array+0x80>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d305      	bcc.n	8001d28 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	1e5a      	subs	r2, r3, #1
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d26:	e072      	b.n	8001e0e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	3310      	adds	r3, #16
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f9a4 	bl	8001084 <cJSON_New_Item>
 8001d3c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d05f      	beq.n	8001e04 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d104      	bne.n	8001d54 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	e007      	b.n	8001d64 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d6e:	6838      	ldr	r0, [r7, #0]
 8001d70:	f7ff fd70 	bl	8001854 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001d74:	6839      	ldr	r1, [r7, #0]
 8001d76:	6938      	ldr	r0, [r7, #16]
 8001d78:	f7ff fea4 	bl	8001ac4 <parse_value>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d042      	beq.n	8001e08 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001d82:	6838      	ldr	r0, [r7, #0]
 8001d84:	f7ff fd66 	bl	8001854 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00d      	beq.n	8001daa <parse_array+0x10e>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d207      	bcs.n	8001daa <parse_array+0x10e>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4413      	add	r3, r2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b2c      	cmp	r3, #44	; 0x2c
 8001da8:	d0c3      	beq.n	8001d32 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d02d      	beq.n	8001e0c <parse_array+0x170>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d227      	bcs.n	8001e0c <parse_array+0x170>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b5d      	cmp	r3, #93	; 0x5d
 8001dca:	d11f      	bne.n	8001e0c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001dcc:	e000      	b.n	8001dd0 <parse_array+0x134>
        goto success;
 8001dce:	bf00      	nop
    input_buffer->depth--;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	1e5a      	subs	r2, r3, #1
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <parse_array+0x14a>
        head->prev = current_item;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	609a      	str	r2, [r3, #8]

    return true;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e00d      	b.n	8001e1c <parse_array+0x180>
        goto fail;
 8001e00:	bf00      	nop
 8001e02:	e004      	b.n	8001e0e <parse_array+0x172>
            goto fail; /* allocation failure */
 8001e04:	bf00      	nop
 8001e06:	e002      	b.n	8001e0e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001e08:	bf00      	nop
 8001e0a:	e000      	b.n	8001e0e <parse_array+0x172>
        goto fail; /* expected end of array */
 8001e0c:	bf00      	nop

fail:
    if (head != NULL)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001e14:	6978      	ldr	r0, [r7, #20]
 8001e16:	f7ff f94b 	bl	80010b0 <cJSON_Delete>
    }

    return false;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e3e:	d301      	bcc.n	8001e44 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e40:	2300      	movs	r3, #0
 8001e42:	e0ea      	b.n	800201a <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80d0 	beq.w	8001ff6 <parse_object+0x1d2>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	f080 80c9 	bcs.w	8001ff6 <parse_object+0x1d2>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b7b      	cmp	r3, #123	; 0x7b
 8001e72:	f040 80c0 	bne.w	8001ff6 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e80:	6838      	ldr	r0, [r7, #0]
 8001e82:	f7ff fce7 	bl	8001854 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00e      	beq.n	8001eaa <parse_object+0x86>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d208      	bcs.n	8001eaa <parse_object+0x86>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b7d      	cmp	r3, #125	; 0x7d
 8001ea6:	f000 808d 	beq.w	8001fc4 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <parse_object+0x98>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d305      	bcc.n	8001ec8 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	1e5a      	subs	r2, r3, #1
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	609a      	str	r2, [r3, #8]
        goto fail;
 8001ec6:	e0a1      	b.n	800200c <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	1e5a      	subs	r2, r3, #1
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	3310      	adds	r3, #16
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f8d4 	bl	8001084 <cJSON_New_Item>
 8001edc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 808a 	beq.w	8001ffa <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d104      	bne.n	8001ef6 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	e007      	b.n	8001f06 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f10:	6838      	ldr	r0, [r7, #0]
 8001f12:	f7ff fc9f 	bl	8001854 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001f16:	6839      	ldr	r1, [r7, #0]
 8001f18:	6938      	ldr	r0, [r7, #16]
 8001f1a:	f7ff fb55 	bl	80015c8 <parse_string>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d06c      	beq.n	8001ffe <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001f24:	6838      	ldr	r0, [r7, #0]
 8001f26:	f7ff fc95 	bl	8001854 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d061      	beq.n	8002002 <parse_object+0x1de>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d25b      	bcs.n	8002002 <parse_object+0x1de>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	4413      	add	r3, r2
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b3a      	cmp	r3, #58	; 0x3a
 8001f58:	d153      	bne.n	8002002 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f64:	6838      	ldr	r0, [r7, #0]
 8001f66:	f7ff fc75 	bl	8001854 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001f6a:	6839      	ldr	r1, [r7, #0]
 8001f6c:	6938      	ldr	r0, [r7, #16]
 8001f6e:	f7ff fda9 	bl	8001ac4 <parse_value>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d046      	beq.n	8002006 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001f78:	6838      	ldr	r0, [r7, #0]
 8001f7a:	f7ff fc6b 	bl	8001854 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <parse_object+0x17c>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <parse_object+0x17c>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b2c      	cmp	r3, #44	; 0x2c
 8001f9e:	d098      	beq.n	8001ed2 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d031      	beq.n	800200a <parse_object+0x1e6>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d22b      	bcs.n	800200a <parse_object+0x1e6>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4413      	add	r3, r2
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b7d      	cmp	r3, #125	; 0x7d
 8001fc0:	d123      	bne.n	800200a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001fc2:	e000      	b.n	8001fc6 <parse_object+0x1a2>
        goto success; /* empty object */
 8001fc4:	bf00      	nop
    input_buffer->depth--;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	1e5a      	subs	r2, r3, #1
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <parse_object+0x1b8>
        head->prev = current_item;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	609a      	str	r2, [r3, #8]
    return true;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e011      	b.n	800201a <parse_object+0x1f6>
        goto fail; /* not an object */
 8001ff6:	bf00      	nop
 8001ff8:	e008      	b.n	800200c <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001ffa:	bf00      	nop
 8001ffc:	e006      	b.n	800200c <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001ffe:	bf00      	nop
 8002000:	e004      	b.n	800200c <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002002:	bf00      	nop
 8002004:	e002      	b.n	800200c <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002006:	bf00      	nop
 8002008:	e000      	b.n	800200c <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800200a:	bf00      	nop

fail:
    if (head != NULL)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff f84c 	bl	80010b0 <cJSON_Delete>
    }

    return false;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8002038:	2300      	movs	r3, #0
 800203a:	e00d      	b.n	8002058 <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 8002042:	e005      	b.n	8002050 <cJSON_GetArraySize+0x2e>
    {
        size++;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3301      	adds	r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
        child = child->next;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f6      	bne.n	8002044 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 8002056:	68bb      	ldr	r3, [r7, #8]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <get_array_item+0x18>
    {
        return NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	e010      	b.n	800209e <get_array_item+0x3a>
    }

    current_child = array->child;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002082:	e005      	b.n	8002090 <get_array_item+0x2c>
    {
        index--;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	3b01      	subs	r3, #1
 8002088:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <get_array_item+0x38>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f3      	bne.n	8002084 <get_array_item+0x20>
    }

    return current_child;
 800209c:	68fb      	ldr	r3, [r7, #12]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
    if (index < 0)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da01      	bge.n	80020be <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e005      	b.n	80020ca <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffce 	bl	8002064 <get_array_item>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <get_object_item+0x1c>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <get_object_item+0x20>
    {
        return NULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e033      	b.n	800215a <get_object_item+0x88>
    }

    current_element = object->child;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d017      	beq.n	800212e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020fe:	e002      	b.n	8002106 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01c      	beq.n	8002146 <get_object_item+0x74>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d018      	beq.n	8002146 <get_object_item+0x74>
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4619      	mov	r1, r3
 800211a:	68b8      	ldr	r0, [r7, #8]
 800211c:	f7fe f860 	bl	80001e0 <strcmp>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ec      	bne.n	8002100 <get_object_item+0x2e>
 8002126:	e00e      	b.n	8002146 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <get_object_item+0x74>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4619      	mov	r1, r3
 800213a:	68b8      	ldr	r0, [r7, #8]
 800213c:	f7fe ff36 	bl	8000fac <case_insensitive_strcmp>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <get_object_item+0x82>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <get_object_item+0x86>
        return NULL;
 8002154:	2300      	movs	r3, #0
 8002156:	e000      	b.n	800215a <get_object_item+0x88>
    }

    return current_element;
 8002158:	697b      	ldr	r3, [r7, #20]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800216c:	2200      	movs	r2, #0
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ffae 	bl	80020d2 <get_object_item>
 8002176:	4603      	mov	r3, r0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <cJSON_GetObjectItemCaseSensitive>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 800218a:	2201      	movs	r2, #1
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff9f 	bl	80020d2 <get_object_item>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <cJSON_IsString>:

    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <cJSON_IsString+0x12>
    {
        return false;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e007      	b.n	80021c0 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <lecturaPonteciometroSetAlarma>:
	}else{
		llamadas++;
	}
}

void lecturaPonteciometroSetAlarma(void){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0

	sConfig.Channel = ADC_CHANNEL_4;
 80021d2:	4b46      	ldr	r3, [pc, #280]	; (80022ec <lecturaPonteciometroSetAlarma+0x120>)
 80021d4:	2204      	movs	r2, #4
 80021d6:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80021d8:	4b44      	ldr	r3, [pc, #272]	; (80022ec <lecturaPonteciometroSetAlarma+0x120>)
 80021da:	2201      	movs	r2, #1
 80021dc:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021de:	4b43      	ldr	r3, [pc, #268]	; (80022ec <lecturaPonteciometroSetAlarma+0x120>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e4:	4941      	ldr	r1, [pc, #260]	; (80022ec <lecturaPonteciometroSetAlarma+0x120>)
 80021e6:	4842      	ldr	r0, [pc, #264]	; (80022f0 <lecturaPonteciometroSetAlarma+0x124>)
 80021e8:	f002 f818 	bl	800421c <HAL_ADC_ConfigChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <lecturaPonteciometroSetAlarma+0x2a>
	{
		Error_Handler();
 80021f2:	f000 fc3b 	bl	8002a6c <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 80021f6:	483e      	ldr	r0, [pc, #248]	; (80022f0 <lecturaPonteciometroSetAlarma+0x124>)
 80021f8:	f001 fe90 	bl	8003f1c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,10000);
 80021fc:	f242 7110 	movw	r1, #10000	; 0x2710
 8002200:	483b      	ldr	r0, [pc, #236]	; (80022f0 <lecturaPonteciometroSetAlarma+0x124>)
 8002202:	f001 ff72 	bl	80040ea <HAL_ADC_PollForConversion>
	valor=HAL_ADC_GetValue(&hadc1);
 8002206:	483a      	ldr	r0, [pc, #232]	; (80022f0 <lecturaPonteciometroSetAlarma+0x124>)
 8002208:	f001 fffa 	bl	8004200 <HAL_ADC_GetValue>
 800220c:	ee07 0a90 	vmov	s15, r0
 8002210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002214:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <lecturaPonteciometroSetAlarma+0x128>)
 8002216:	edc3 7a00 	vstr	s15, [r3]
	luzSalto = (valor/(float)4100)*100;
 800221a:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <lecturaPonteciometroSetAlarma+0x128>)
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	eddf 6a35 	vldr	s13, [pc, #212]	; 80022f8 <lecturaPonteciometroSetAlarma+0x12c>
 8002224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002228:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80022fc <lecturaPonteciometroSetAlarma+0x130>
 800222c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002230:	4b33      	ldr	r3, [pc, #204]	; (8002300 <lecturaPonteciometroSetAlarma+0x134>)
 8002232:	edc3 7a00 	vstr	s15, [r3]
	tempSalto = 25 + (valor/(float)4100)*5;
 8002236:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <lecturaPonteciometroSetAlarma+0x128>)
 8002238:	ed93 7a00 	vldr	s14, [r3]
 800223c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80022f8 <lecturaPonteciometroSetAlarma+0x12c>
 8002240:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002244:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002250:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <lecturaPonteciometroSetAlarma+0x138>)
 8002256:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 800225a:	4825      	ldr	r0, [pc, #148]	; (80022f0 <lecturaPonteciometroSetAlarma+0x124>)
 800225c:	f001 ff12 	bl	8004084 <HAL_ADC_Stop>

		if(valor>20){
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <lecturaPonteciometroSetAlarma+0x128>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800226a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	dd0d      	ble.n	8002290 <lecturaPonteciometroSetAlarma+0xc4>
			led_level_buzzer=valor/500;
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <lecturaPonteciometroSetAlarma+0x128>)
 8002276:	ed93 7a00 	vldr	s14, [r3]
 800227a:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002308 <lecturaPonteciometroSetAlarma+0x13c>
 800227e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002286:	ee17 2a90 	vmov	r2, s15
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <lecturaPonteciometroSetAlarma+0x140>)
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e003      	b.n	8002298 <lecturaPonteciometroSetAlarma+0xcc>
		}else{
			led_level_buzzer=-1;
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <lecturaPonteciometroSetAlarma+0x140>)
 8002292:	f04f 32ff 	mov.w	r2, #4294967295
 8002296:	601a      	str	r2, [r3, #0]
		}
		if (led_level_buzzer>7){
 8002298:	4b1c      	ldr	r3, [pc, #112]	; (800230c <lecturaPonteciometroSetAlarma+0x140>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b07      	cmp	r3, #7
 800229e:	dd02      	ble.n	80022a6 <lecturaPonteciometroSetAlarma+0xda>
			led_level_buzzer=7;
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <lecturaPonteciometroSetAlarma+0x140>)
 80022a2:	2207      	movs	r2, #7
 80022a4:	601a      	str	r2, [r3, #0]
		}
		for(int i = 0 ;i<8;i++){
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	e016      	b.n	80022da <lecturaPonteciometroSetAlarma+0x10e>
		if (led_level_buzzer>=0 && led_level_buzzer>=i){
 80022ac:	4b17      	ldr	r3, [pc, #92]	; (800230c <lecturaPonteciometroSetAlarma+0x140>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <lecturaPonteciometroSetAlarma+0xfe>
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <lecturaPonteciometroSetAlarma+0x140>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	dc05      	bgt.n	80022ca <lecturaPonteciometroSetAlarma+0xfe>
			ledsEncendidos[i]= 1;
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <lecturaPonteciometroSetAlarma+0x144>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2101      	movs	r1, #1
 80022c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80022c8:	e004      	b.n	80022d4 <lecturaPonteciometroSetAlarma+0x108>
		}else{
			ledsEncendidos[i]= 0;
 80022ca:	4a11      	ldr	r2, [pc, #68]	; (8002310 <lecturaPonteciometroSetAlarma+0x144>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2100      	movs	r1, #0
 80022d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0 ;i<8;i++){
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3301      	adds	r3, #1
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b07      	cmp	r3, #7
 80022de:	dde5      	ble.n	80022ac <lecturaPonteciometroSetAlarma+0xe0>
		}
	}
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000050c 	.word	0x2000050c
 80022f0:	20000794 	.word	0x20000794
 80022f4:	2000053c 	.word	0x2000053c
 80022f8:	45802000 	.word	0x45802000
 80022fc:	42c80000 	.word	0x42c80000
 8002300:	20000534 	.word	0x20000534
 8002304:	20000538 	.word	0x20000538
 8002308:	43fa0000 	.word	0x43fa0000
 800230c:	20000504 	.word	0x20000504
 8002310:	200004e4 	.word	0x200004e4

08002314 <ldrReadAndmodify>:

void ldrReadAndmodify(void){
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0

	sConfig.Channel = ADC_CHANNEL_0;
 800231a:	4b41      	ldr	r3, [pc, #260]	; (8002420 <ldrReadAndmodify+0x10c>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8002320:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <ldrReadAndmodify+0x10c>)
 8002322:	2201      	movs	r2, #1
 8002324:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002326:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <ldrReadAndmodify+0x10c>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800232c:	493c      	ldr	r1, [pc, #240]	; (8002420 <ldrReadAndmodify+0x10c>)
 800232e:	483d      	ldr	r0, [pc, #244]	; (8002424 <ldrReadAndmodify+0x110>)
 8002330:	f001 ff74 	bl	800421c <HAL_ADC_ConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <ldrReadAndmodify+0x2a>
	{
		Error_Handler();
 800233a:	f000 fb97 	bl	8002a6c <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 800233e:	4839      	ldr	r0, [pc, #228]	; (8002424 <ldrReadAndmodify+0x110>)
 8002340:	f001 fdec 	bl	8003f1c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,10000);
 8002344:	f242 7110 	movw	r1, #10000	; 0x2710
 8002348:	4836      	ldr	r0, [pc, #216]	; (8002424 <ldrReadAndmodify+0x110>)
 800234a:	f001 fece 	bl	80040ea <HAL_ADC_PollForConversion>
	float valorL=HAL_ADC_GetValue(&hadc1);
 800234e:	4835      	ldr	r0, [pc, #212]	; (8002424 <ldrReadAndmodify+0x110>)
 8002350:	f001 ff56 	bl	8004200 <HAL_ADC_GetValue>
 8002354:	ee07 0a90 	vmov	s15, r0
 8002358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235c:	edc7 7a02 	vstr	s15, [r7, #8]
	valorReal = (1-(valorL/(float)0xfff))*100;//porcentaje de luminiscencia
 8002360:	ed97 7a02 	vldr	s14, [r7, #8]
 8002364:	eddf 6a30 	vldr	s13, [pc, #192]	; 8002428 <ldrReadAndmodify+0x114>
 8002368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800236c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002374:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800242c <ldrReadAndmodify+0x118>
 8002378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237c:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <ldrReadAndmodify+0x11c>)
 800237e:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8002382:	4828      	ldr	r0, [pc, #160]	; (8002424 <ldrReadAndmodify+0x110>)
 8002384:	f001 fe7e 	bl	8004084 <HAL_ADC_Stop>
	float stepLDR=12.5;
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <ldrReadAndmodify+0x120>)
 800238a:	607b      	str	r3, [r7, #4]
	ultimo_led=valorReal/stepLDR;//division para calcular el ultimo led encedido
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <ldrReadAndmodify+0x11c>)
 800238e:	edd3 6a00 	vldr	s13, [r3]
 8002392:	ed97 7a01 	vldr	s14, [r7, #4]
 8002396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239e:	ee17 2a90 	vmov	r2, s15
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <ldrReadAndmodify+0x124>)
 80023a4:	601a      	str	r2, [r3, #0]

	if (valorReal>luzMax){
 80023a6:	4b22      	ldr	r3, [pc, #136]	; (8002430 <ldrReadAndmodify+0x11c>)
 80023a8:	ed93 7a00 	vldr	s14, [r3]
 80023ac:	4b23      	ldr	r3, [pc, #140]	; (800243c <ldrReadAndmodify+0x128>)
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	dd03      	ble.n	80023c4 <ldrReadAndmodify+0xb0>
		luzMax = valorReal;
 80023bc:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <ldrReadAndmodify+0x11c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <ldrReadAndmodify+0x128>)
 80023c2:	6013      	str	r3, [r2, #0]
	}
	if (valorReal<luzMin){
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <ldrReadAndmodify+0x11c>)
 80023c6:	ed93 7a00 	vldr	s14, [r3]
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <ldrReadAndmodify+0x12c>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d503      	bpl.n	80023e2 <ldrReadAndmodify+0xce>
		luzMin = valorReal;
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <ldrReadAndmodify+0x11c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a18      	ldr	r2, [pc, #96]	; (8002440 <ldrReadAndmodify+0x12c>)
 80023e0:	6013      	str	r3, [r2, #0]
	}

	for(int i = 0 ;i<8;i++){
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	e012      	b.n	800240e <ldrReadAndmodify+0xfa>
			if ( ultimo_led>=i){
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <ldrReadAndmodify+0x124>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	dc05      	bgt.n	80023fe <ldrReadAndmodify+0xea>
				ledsEncendidos[i]= 1;
 80023f2:	4a14      	ldr	r2, [pc, #80]	; (8002444 <ldrReadAndmodify+0x130>)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2101      	movs	r1, #1
 80023f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80023fc:	e004      	b.n	8002408 <ldrReadAndmodify+0xf4>
			}else{
				ledsEncendidos[i]= 0;
 80023fe:	4a11      	ldr	r2, [pc, #68]	; (8002444 <ldrReadAndmodify+0x130>)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2100      	movs	r1, #0
 8002404:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ;i<8;i++){
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3301      	adds	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b07      	cmp	r3, #7
 8002412:	dde9      	ble.n	80023e8 <ldrReadAndmodify+0xd4>
			}
		}

}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000050c 	.word	0x2000050c
 8002424:	20000794 	.word	0x20000794
 8002428:	457ff000 	.word	0x457ff000
 800242c:	42c80000 	.word	0x42c80000
 8002430:	20000520 	.word	0x20000520
 8002434:	41480000 	.word	0x41480000
 8002438:	20000508 	.word	0x20000508
 800243c:	2000052c 	.word	0x2000052c
 8002440:	20000530 	.word	0x20000530
 8002444:	200004e4 	.word	0x200004e4

08002448 <ntcReadAndmodify>:
void ntcReadAndmodify(void){
 8002448:	b580      	push	{r7, lr}
 800244a:	ed2d 8b02 	vpush	{d8}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_1;
 8002452:	4b5c      	ldr	r3, [pc, #368]	; (80025c4 <ntcReadAndmodify+0x17c>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8002458:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <ntcReadAndmodify+0x17c>)
 800245a:	2201      	movs	r2, #1
 800245c:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800245e:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <ntcReadAndmodify+0x17c>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002464:	4957      	ldr	r1, [pc, #348]	; (80025c4 <ntcReadAndmodify+0x17c>)
 8002466:	4858      	ldr	r0, [pc, #352]	; (80025c8 <ntcReadAndmodify+0x180>)
 8002468:	f001 fed8 	bl	800421c <HAL_ADC_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <ntcReadAndmodify+0x2e>
	{
			Error_Handler();
 8002472:	f000 fafb 	bl	8002a6c <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8002476:	4854      	ldr	r0, [pc, #336]	; (80025c8 <ntcReadAndmodify+0x180>)
 8002478:	f001 fd50 	bl	8003f1c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,10000);
 800247c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002480:	4851      	ldr	r0, [pc, #324]	; (80025c8 <ntcReadAndmodify+0x180>)
 8002482:	f001 fe32 	bl	80040ea <HAL_ADC_PollForConversion>
	float c = HAL_ADC_GetValue(&hadc1);
 8002486:	4850      	ldr	r0, [pc, #320]	; (80025c8 <ntcReadAndmodify+0x180>)
 8002488:	f001 feba 	bl	8004200 <HAL_ADC_GetValue>
 800248c:	ee07 0a90 	vmov	s15, r0
 8002490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002494:	edc7 7a04 	vstr	s15, [r7, #16]
	float finalVal = c/(float)0xFFF * 3.3f;
 8002498:	ed97 7a04 	vldr	s14, [r7, #16]
 800249c:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80025cc <ntcReadAndmodify+0x184>
 80024a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80025d0 <ntcReadAndmodify+0x188>
 80024a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ac:	edc7 7a03 	vstr	s15, [r7, #12]
	float resistencia = (3.3f * NTC_RDIV) / (3.3f - finalVal) - NTC_RDIV;
 80024b0:	4b48      	ldr	r3, [pc, #288]	; (80025d4 <ntcReadAndmodify+0x18c>)
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80025d0 <ntcReadAndmodify+0x188>
 80024ba:	ee67 6a87 	vmul.f32	s13, s15, s14
 80024be:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80025d0 <ntcReadAndmodify+0x188>
 80024c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ce:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <ntcReadAndmodify+0x18c>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d8:	edc7 7a02 	vstr	s15, [r7, #8]
	temperatura = (NTC_B / (logf(resistencia / NTC_RDIV )+ NTC_B/NTC_T25)) - 273.f;
 80024dc:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <ntcReadAndmodify+0x190>)
 80024de:	ed93 8a00 	vldr	s16, [r3]
 80024e2:	4b3c      	ldr	r3, [pc, #240]	; (80025d4 <ntcReadAndmodify+0x18c>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80024ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80024f0:	eeb0 0a66 	vmov.f32	s0, s13
 80024f4:	f00a fe74 	bl	800d1e0 <logf>
 80024f8:	eeb0 6a40 	vmov.f32	s12, s0
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <ntcReadAndmodify+0x190>)
 80024fe:	edd3 6a00 	vldr	s13, [r3]
 8002502:	4b36      	ldr	r3, [pc, #216]	; (80025dc <ntcReadAndmodify+0x194>)
 8002504:	ed93 7a00 	vldr	s14, [r3]
 8002508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800250c:	ee36 7a27 	vadd.f32	s14, s12, s15
 8002510:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002514:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80025e0 <ntcReadAndmodify+0x198>
 8002518:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <ntcReadAndmodify+0x19c>)
 800251e:	edc3 7a00 	vstr	s15, [r3]
	float stepNTC=0.625;
 8002522:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <ntcReadAndmodify+0x1a0>)
 8002524:	607b      	str	r3, [r7, #4]
	ultimo_led=(temperatura-25)/stepNTC;//division para calcular el ultimo led encedido
 8002526:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <ntcReadAndmodify+0x19c>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002530:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002534:	ed97 7a01 	vldr	s14, [r7, #4]
 8002538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800253c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002540:	ee17 2a90 	vmov	r2, s15
 8002544:	4b29      	ldr	r3, [pc, #164]	; (80025ec <ntcReadAndmodify+0x1a4>)
 8002546:	601a      	str	r2, [r3, #0]
	if(tempMax<temperatura){
 8002548:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <ntcReadAndmodify+0x1a8>)
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <ntcReadAndmodify+0x19c>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	d503      	bpl.n	8002566 <ntcReadAndmodify+0x11e>
		tempMax=temperatura;
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <ntcReadAndmodify+0x19c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <ntcReadAndmodify+0x1a8>)
 8002564:	6013      	str	r3, [r2, #0]
	}
	if(tempMin>temperatura){
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <ntcReadAndmodify+0x1ac>)
 8002568:	ed93 7a00 	vldr	s14, [r3]
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <ntcReadAndmodify+0x19c>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257a:	dd03      	ble.n	8002584 <ntcReadAndmodify+0x13c>
		tempMin=temperatura;
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <ntcReadAndmodify+0x19c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <ntcReadAndmodify+0x1ac>)
 8002582:	6013      	str	r3, [r2, #0]
	}

	for(int i = 0 ;i<8;i++){
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e012      	b.n	80025b0 <ntcReadAndmodify+0x168>
		if ( ultimo_led>=i){
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <ntcReadAndmodify+0x1a4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	dc05      	bgt.n	80025a0 <ntcReadAndmodify+0x158>
			ledsEncendidos[i]= 1;
 8002594:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <ntcReadAndmodify+0x1b0>)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2101      	movs	r1, #1
 800259a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800259e:	e004      	b.n	80025aa <ntcReadAndmodify+0x162>
		}else{
			ledsEncendidos[i]= 0;
 80025a0:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <ntcReadAndmodify+0x1b0>)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2100      	movs	r1, #0
 80025a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ;i<8;i++){
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b07      	cmp	r3, #7
 80025b4:	dde9      	ble.n	800258a <ntcReadAndmodify+0x142>
		}
	}


}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	ecbd 8b02 	vpop	{d8}
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2000050c 	.word	0x2000050c
 80025c8:	20000794 	.word	0x20000794
 80025cc:	457ff000 	.word	0x457ff000
 80025d0:	40533333 	.word	0x40533333
 80025d4:	20000014 	.word	0x20000014
 80025d8:	2000000c 	.word	0x2000000c
 80025dc:	20000010 	.word	0x20000010
 80025e0:	43888000 	.word	0x43888000
 80025e4:	2000051c 	.word	0x2000051c
 80025e8:	3f200000 	.word	0x3f200000
 80025ec:	20000508 	.word	0x20000508
 80025f0:	20000524 	.word	0x20000524
 80025f4:	20000528 	.word	0x20000528
 80025f8:	200004e4 	.word	0x200004e4

080025fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <vApplicationGetIdleTaskMemory+0x2c>)
 800260c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <vApplicationGetIdleTaskMemory+0x30>)
 8002612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000540 	.word	0x20000540
 800262c:	20000594 	.word	0x20000594

08002630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002636:	f001 fbbb 	bl	8003db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800263a:	f000 f825 	bl	8002688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800263e:	f000 f969 	bl	8002914 <MX_GPIO_Init>
  MX_DMA_Init();
 8002642:	f000 f931 	bl	80028a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002646:	f000 f905 	bl	8002854 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800264a:	f000 f8d9 	bl	8002800 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800264e:	f000 f885 	bl	800275c <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <main+0x50>)
 8002654:	1d3c      	adds	r4, r7, #4
 8002656:	461d      	mov	r5, r3
 8002658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800265c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f004 fa08 	bl	8006a7e <osThreadCreate>
 800266e:	4603      	mov	r3, r0
 8002670:	4a04      	ldr	r2, [pc, #16]	; (8002684 <main+0x54>)
 8002672:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  serie_Init_FreeRTOS();
 8002674:	f000 fd22 	bl	80030bc <serie_Init_FreeRTOS>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002678:	f004 f9fa 	bl	8006a70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800267c:	e7fe      	b.n	800267c <main+0x4c>
 800267e:	bf00      	nop
 8002680:	0800d490 	.word	0x0800d490
 8002684:	20000924 	.word	0x20000924

08002688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b094      	sub	sp, #80	; 0x50
 800268c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268e:	f107 0320 	add.w	r3, r7, #32
 8002692:	2230      	movs	r2, #48	; 0x30
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f006 fcfe 	bl	8009098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	4b28      	ldr	r3, [pc, #160]	; (8002754 <SystemClock_Config+0xcc>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <SystemClock_Config+0xcc>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6413      	str	r3, [r2, #64]	; 0x40
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <SystemClock_Config+0xcc>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c8:	2300      	movs	r3, #0
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	4b22      	ldr	r3, [pc, #136]	; (8002758 <SystemClock_Config+0xd0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <SystemClock_Config+0xd0>)
 80026d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <SystemClock_Config+0xd0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026e4:	2302      	movs	r3, #2
 80026e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026e8:	2301      	movs	r3, #1
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026ec:	2310      	movs	r3, #16
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f0:	2302      	movs	r3, #2
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80026f8:	2310      	movs	r3, #16
 80026fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80026fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002702:	2304      	movs	r3, #4
 8002704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002706:	2304      	movs	r3, #4
 8002708:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800270a:	f107 0320 	add.w	r3, r7, #32
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fe42 	bl	8005398 <HAL_RCC_OscConfig>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800271a:	f000 f9a7 	bl	8002a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800271e:	230f      	movs	r3, #15
 8002720:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002722:	2302      	movs	r3, #2
 8002724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800272a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002734:	f107 030c 	add.w	r3, r7, #12
 8002738:	2102      	movs	r1, #2
 800273a:	4618      	mov	r0, r3
 800273c:	f003 f8a4 	bl	8005888 <HAL_RCC_ClockConfig>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002746:	f000 f991 	bl	8002a6c <Error_Handler>
  }
}
 800274a:	bf00      	nop
 800274c:	3750      	adds	r7, #80	; 0x50
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40007000 	.word	0x40007000

0800275c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002762:	463b      	mov	r3, r7
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800276e:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <MX_ADC1_Init+0x98>)
 8002770:	4a21      	ldr	r2, [pc, #132]	; (80027f8 <MX_ADC1_Init+0x9c>)
 8002772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <MX_ADC1_Init+0x98>)
 8002776:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800277a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <MX_ADC1_Init+0x98>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <MX_ADC1_Init+0x98>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <MX_ADC1_Init+0x98>)
 800278a:	2200      	movs	r2, #0
 800278c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <MX_ADC1_Init+0x98>)
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <MX_ADC1_Init+0x98>)
 8002798:	2200      	movs	r2, #0
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <MX_ADC1_Init+0x98>)
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <MX_ADC1_Init+0xa0>)
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027bc:	480d      	ldr	r0, [pc, #52]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027be:	f001 fb69 	bl	8003e94 <HAL_ADC_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80027c8:	f000 f950 	bl	8002a6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027d0:	2301      	movs	r3, #1
 80027d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d8:	463b      	mov	r3, r7
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	; (80027f4 <MX_ADC1_Init+0x98>)
 80027de:	f001 fd1d 	bl	800421c <HAL_ADC_ConfigChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80027e8:	f000 f940 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000794 	.word	0x20000794
 80027f8:	40012000 	.word	0x40012000
 80027fc:	0f000001 	.word	0x0f000001

08002800 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <MX_USART1_UART_Init+0x4c>)
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <MX_USART1_UART_Init+0x50>)
 8002808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <MX_USART1_UART_Init+0x4c>)
 800280c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_USART1_UART_Init+0x4c>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_USART1_UART_Init+0x4c>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_USART1_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_USART1_UART_Init+0x4c>)
 8002826:	220c      	movs	r2, #12
 8002828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <MX_USART1_UART_Init+0x4c>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_USART1_UART_Init+0x4c>)
 8002832:	2200      	movs	r2, #0
 8002834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002836:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_USART1_UART_Init+0x4c>)
 8002838:	f003 fa46 	bl	8005cc8 <HAL_UART_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002842:	f000 f913 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200007dc 	.word	0x200007dc
 8002850:	40011000 	.word	0x40011000

08002854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <MX_USART2_UART_Init+0x50>)
 800285c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 8002860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 800287a:	220c      	movs	r2, #12
 800287c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800288a:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 800288c:	f003 fa1c 	bl	8005cc8 <HAL_UART_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002896:	f000 f8e9 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000820 	.word	0x20000820
 80028a4:	40004400 	.word	0x40004400

080028a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <MX_DMA_Init+0x68>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a16      	ldr	r2, [pc, #88]	; (8002910 <MX_DMA_Init+0x68>)
 80028b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <MX_DMA_Init+0x68>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <MX_DMA_Init+0x68>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <MX_DMA_Init+0x68>)
 80028d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <MX_DMA_Init+0x68>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2105      	movs	r1, #5
 80028ea:	2010      	movs	r0, #16
 80028ec:	f001 ff9f 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80028f0:	2010      	movs	r0, #16
 80028f2:	f001 ffb8 	bl	8004866 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2105      	movs	r1, #5
 80028fa:	203a      	movs	r0, #58	; 0x3a
 80028fc:	f001 ff97 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002900:	203a      	movs	r0, #58	; 0x3a
 8002902:	f001 ffb0 	bl	8004866 <HAL_NVIC_EnableIRQ>

}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800

08002914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
 8002928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <MX_GPIO_Init+0x138>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a46      	ldr	r2, [pc, #280]	; (8002a4c <MX_GPIO_Init+0x138>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <MX_GPIO_Init+0x138>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <MX_GPIO_Init+0x138>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a3f      	ldr	r2, [pc, #252]	; (8002a4c <MX_GPIO_Init+0x138>)
 8002950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <MX_GPIO_Init+0x138>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <MX_GPIO_Init+0x138>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a38      	ldr	r2, [pc, #224]	; (8002a4c <MX_GPIO_Init+0x138>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <MX_GPIO_Init+0x138>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <MX_GPIO_Init+0x138>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a31      	ldr	r2, [pc, #196]	; (8002a4c <MX_GPIO_Init+0x138>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <MX_GPIO_Init+0x138>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);
 800299a:	2201      	movs	r2, #1
 800299c:	2120      	movs	r1, #32
 800299e:	482c      	ldr	r0, [pc, #176]	; (8002a50 <MX_GPIO_Init+0x13c>)
 80029a0:	f002 fce0 	bl	8005364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D6_Pin|Buzzer_Pin|D3_Pin, GPIO_PIN_RESET);
 80029a4:	2200      	movs	r2, #0
 80029a6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80029aa:	4829      	ldr	r0, [pc, #164]	; (8002a50 <MX_GPIO_Init+0x13c>)
 80029ac:	f002 fcda 	bl	8005364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D2_Pin|D5_Pin|D1_Pin
 80029b0:	2200      	movs	r2, #0
 80029b2:	f240 4139 	movw	r1, #1081	; 0x439
 80029b6:	4827      	ldr	r0, [pc, #156]	; (8002a54 <MX_GPIO_Init+0x140>)
 80029b8:	f002 fcd4 	bl	8005364 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	4821      	ldr	r0, [pc, #132]	; (8002a58 <MX_GPIO_Init+0x144>)
 80029d4:	f002 fb42 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pins : D8_Pin D6_Pin Buzzer_Pin D3_Pin */
  GPIO_InitStruct.Pin = D8_Pin|D6_Pin|Buzzer_Pin|D3_Pin;
 80029d8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80029dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029de:	2301      	movs	r3, #1
 80029e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	4619      	mov	r1, r3
 80029f0:	4817      	ldr	r0, [pc, #92]	; (8002a50 <MX_GPIO_Init+0x13c>)
 80029f2:	f002 fb33 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin D5_Pin D1_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin|D5_Pin|D1_Pin
 80029f6:	f240 4339 	movw	r3, #1081	; 0x439
 80029fa:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fc:	2301      	movs	r3, #1
 80029fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4811      	ldr	r0, [pc, #68]	; (8002a54 <MX_GPIO_Init+0x140>)
 8002a10:	f002 fb24 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulsador2_Pin */
  GPIO_InitStruct.Pin = Pulsador2_Pin;
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pulsador2_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	480c      	ldr	r0, [pc, #48]	; (8002a58 <MX_GPIO_Init+0x144>)
 8002a28:	f002 fb18 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulsador1_Pin */
  GPIO_InitStruct.Pin = Pulsador1_Pin;
 8002a2c:	2340      	movs	r3, #64	; 0x40
 8002a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a34:	2301      	movs	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pulsador1_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4805      	ldr	r0, [pc, #20]	; (8002a54 <MX_GPIO_Init+0x140>)
 8002a40:	f002 fb0c 	bl	800505c <HAL_GPIO_Init>

}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800

08002a5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002a64:	2001      	movs	r0, #1
 8002a66:	f004 f856 	bl	8006b16 <osDelay>
 8002a6a:	e7fb      	b.n	8002a64 <StartDefaultTask+0x8>

08002a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a70:	b672      	cpsid	i
}
 8002a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <Error_Handler+0x8>
	...

08002a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_MspInit+0x54>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a11      	ldr	r2, [pc, #68]	; (8002acc <HAL_MspInit+0x54>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_MspInit+0x54>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_MspInit+0x54>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_MspInit+0x54>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_MspInit+0x54>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	210f      	movs	r1, #15
 8002aba:	f06f 0001 	mvn.w	r0, #1
 8002abe:	f001 feb6 	bl	800482e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_ADC_MspInit+0x7c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d127      	bne.n	8002b42 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6453      	str	r3, [r2, #68]	; 0x44
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002b2a:	2313      	movs	r3, #19
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f107 0314 	add.w	r3, r7, #20
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4805      	ldr	r0, [pc, #20]	; (8002b54 <HAL_ADC_MspInit+0x84>)
 8002b3e:	f002 fa8d 	bl	800505c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b42:	bf00      	nop
 8002b44:	3728      	adds	r7, #40	; 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40012000 	.word	0x40012000
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020000 	.word	0x40020000

08002b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	; 0x30
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a60      	ldr	r2, [pc, #384]	; (8002cf8 <HAL_UART_MspInit+0x1a0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d15b      	bne.n	8002c32 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	4a5e      	ldr	r2, [pc, #376]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002b84:	f043 0310 	orr.w	r3, r3, #16
 8002b88:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8a:	4b5c      	ldr	r3, [pc, #368]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	61bb      	str	r3, [r7, #24]
 8002b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	4b58      	ldr	r3, [pc, #352]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a57      	ldr	r2, [pc, #348]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b55      	ldr	r3, [pc, #340]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bc4:	2307      	movs	r3, #7
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	4619      	mov	r1, r3
 8002bce:	484c      	ldr	r0, [pc, #304]	; (8002d00 <HAL_UART_MspInit+0x1a8>)
 8002bd0:	f002 fa44 	bl	800505c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002bd6:	4a4c      	ldr	r2, [pc, #304]	; (8002d08 <HAL_UART_MspInit+0x1b0>)
 8002bd8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002bda:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002bdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002be0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002be2:	4b48      	ldr	r3, [pc, #288]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be8:	4b46      	ldr	r3, [pc, #280]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bee:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bf4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf6:	4b43      	ldr	r3, [pc, #268]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bfc:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c02:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c08:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c14:	483b      	ldr	r0, [pc, #236]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002c16:	f001 fe41 	bl	800489c <HAL_DMA_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002c20:	f7ff ff24 	bl	8002a6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a37      	ldr	r2, [pc, #220]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38
 8002c2a:	4a36      	ldr	r2, [pc, #216]	; (8002d04 <HAL_UART_MspInit+0x1ac>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c30:	e05e      	b.n	8002cf0 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a35      	ldr	r2, [pc, #212]	; (8002d0c <HAL_UART_MspInit+0x1b4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d159      	bne.n	8002cf0 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6313      	str	r3, [r2, #48]	; 0x30
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_UART_MspInit+0x1a4>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c74:	230c      	movs	r3, #12
 8002c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c84:	2307      	movs	r3, #7
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	f107 031c 	add.w	r3, r7, #28
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	481c      	ldr	r0, [pc, #112]	; (8002d00 <HAL_UART_MspInit+0x1a8>)
 8002c90:	f002 f9e4 	bl	800505c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c96:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <HAL_UART_MspInit+0x1bc>)
 8002c98:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002c9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ca0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002cd4:	480e      	ldr	r0, [pc, #56]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cd6:	f001 fde1 	bl	800489c <HAL_DMA_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002ce0:	f7ff fec4 	bl	8002a6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_UART_MspInit+0x1b8>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002cf0:	bf00      	nop
 8002cf2:	3730      	adds	r7, #48	; 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	20000864 	.word	0x20000864
 8002d08:	40026440 	.word	0x40026440
 8002d0c:	40004400 	.word	0x40004400
 8002d10:	200008c4 	.word	0x200008c4
 8002d14:	40026088 	.word	0x40026088

08002d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <NMI_Handler+0x4>

08002d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <HardFault_Handler+0x4>

08002d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <MemManage_Handler+0x4>

08002d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <BusFault_Handler+0x4>

08002d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <UsageFault_Handler+0x4>

08002d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d48:	f001 f884 	bl	8003e54 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d4c:	f005 f972 	bl	8008034 <xTaskGetSchedulerState>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d56:	f005 fd4f 	bl	80087f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d64:	4802      	ldr	r0, [pc, #8]	; (8002d70 <DMA1_Stream5_IRQHandler+0x10>)
 8002d66:	f001 ff0f 	bl	8004b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200008c4 	.word	0x200008c4

08002d74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <DMA2_Stream2_IRQHandler+0x10>)
 8002d7a:	f001 ff05 	bl	8004b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000864 	.word	0x20000864

08002d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
	return 1;
 8002d8c:	2301      	movs	r3, #1
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_kill>:

int _kill(int pid, int sig)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002da2:	f005 ff63 	bl	8008c6c <__errno>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2216      	movs	r2, #22
 8002daa:	601a      	str	r2, [r3, #0]
	return -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_exit>:

void _exit (int status)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ffe7 	bl	8002d98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dca:	e7fe      	b.n	8002dca <_exit+0x12>

08002dcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e00a      	b.n	8002df4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dde:	f3af 8000 	nop.w
 8002de2:	4601      	mov	r1, r0
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	60ba      	str	r2, [r7, #8]
 8002dea:	b2ca      	uxtb	r2, r1
 8002dec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3301      	adds	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	dbf0      	blt.n	8002dde <_read+0x12>
	}

return len;
 8002dfc:	687b      	ldr	r3, [r7, #4]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
	return -1;
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e2e:	605a      	str	r2, [r3, #4]
	return 0;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <_isatty>:

int _isatty(int file)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
	return 1;
 8002e46:	2301      	movs	r3, #1
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e78:	4a14      	ldr	r2, [pc, #80]	; (8002ecc <_sbrk+0x5c>)
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <_sbrk+0x60>)
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <_sbrk+0x64>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <_sbrk+0x64>)
 8002e8e:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <_sbrk+0x68>)
 8002e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d207      	bcs.n	8002eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ea0:	f005 fee4 	bl	8008c6c <__errno>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002eae:	e009      	b.n	8002ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <_sbrk+0x64>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <_sbrk+0x64>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <_sbrk+0x64>)
 8002ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20020000 	.word	0x20020000
 8002ed0:	00000400 	.word	0x00000400
 8002ed4:	20000988 	.word	0x20000988
 8002ed8:	20005eb8 	.word	0x20005eb8

08002edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <SystemInit+0x20>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <SystemInit+0x20>)
 8002ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <Task_DMA>:
extern uint8_t buffer_DMA_1[buffer_SIZE];
extern uint8_t buffer_DMA_2[buffer_SIZE];



void Task_DMA( void *pvParameters ){
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef res;
	uint32_t nbuff;



    hdma_usart2_rx2.Instance = DMA1_Stream7;
 8002f08:	4b54      	ldr	r3, [pc, #336]	; (800305c <Task_DMA+0x15c>)
 8002f0a:	4a55      	ldr	r2, [pc, #340]	; (8003060 <Task_DMA+0x160>)
 8002f0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx2.Init.Channel = DMA_CHANNEL_6;
 8002f0e:	4b53      	ldr	r3, [pc, #332]	; (800305c <Task_DMA+0x15c>)
 8002f10:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002f14:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f16:	4b51      	ldr	r3, [pc, #324]	; (800305c <Task_DMA+0x15c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1c:	4b4f      	ldr	r3, [pc, #316]	; (800305c <Task_DMA+0x15c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx2.Init.MemInc = DMA_MINC_ENABLE;
 8002f22:	4b4e      	ldr	r3, [pc, #312]	; (800305c <Task_DMA+0x15c>)
 8002f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	; (800305c <Task_DMA+0x15c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f30:	4b4a      	ldr	r3, [pc, #296]	; (800305c <Task_DMA+0x15c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx2.Init.Mode = DMA_NORMAL;
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <Task_DMA+0x15c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx2.Init.Priority = DMA_PRIORITY_LOW;
 8002f3c:	4b47      	ldr	r3, [pc, #284]	; (800305c <Task_DMA+0x15c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <Task_DMA+0x15c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24



    if (HAL_DMA_Init(&hdma_usart2_rx2) != HAL_OK)
 8002f48:	4844      	ldr	r0, [pc, #272]	; (800305c <Task_DMA+0x15c>)
 8002f4a:	f001 fca7 	bl	800489c <HAL_DMA_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <Task_DMA+0x58>
    {
      Error_Handler();
 8002f54:	f7ff fd8a 	bl	8002a6c <Error_Handler>
    }

	nbuff=0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
	res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE); // Para arrancar
 8002f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f60:	4940      	ldr	r1, [pc, #256]	; (8003064 <Task_DMA+0x164>)
 8002f62:	4841      	ldr	r0, [pc, #260]	; (8003068 <Task_DMA+0x168>)
 8002f64:	f002 ff8f 	bl	8005e86 <HAL_UART_Receive_DMA>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	73fb      	strb	r3, [r7, #15]

	it=0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
	while(1){

		switch (nbuff){
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <Task_DMA+0x7e>
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d032      	beq.n	8002fe2 <Task_DMA+0xe2>
 8002f7c:	e066      	b.n	800304c <Task_DMA+0x14c>
		case 0: 	num=hdma_usart2_rx.Instance->NDTR;
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <Task_DMA+0x16c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	60bb      	str	r3, [r7, #8]
					if (num<buffer_SIZE){
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8c:	d25b      	bcs.n	8003046 <Task_DMA+0x146>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f8e:	b672      	cpsid	i
}
 8002f90:	bf00      	nop
						__disable_irq();
						res=HAL_UART_DMAStop_PAS(&huart2);
 8002f92:	4835      	ldr	r0, [pc, #212]	; (8003068 <Task_DMA+0x168>)
 8002f94:	f000 fe8e 	bl	8003cb4 <HAL_UART_DMAStop_PAS>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]
					   __HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx2);
 8002f9c:	4b32      	ldr	r3, [pc, #200]	; (8003068 <Task_DMA+0x168>)
 8002f9e:	4a2f      	ldr	r2, [pc, #188]	; (800305c <Task_DMA+0x15c>)
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8002fa2:	4b2e      	ldr	r3, [pc, #184]	; (800305c <Task_DMA+0x15c>)
 8002fa4:	4a30      	ldr	r2, [pc, #192]	; (8003068 <Task_DMA+0x168>)
 8002fa6:	639a      	str	r2, [r3, #56]	; 0x38
					   res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_2,buffer_SIZE);
 8002fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fac:	4930      	ldr	r1, [pc, #192]	; (8003070 <Task_DMA+0x170>)
 8002fae:	482e      	ldr	r0, [pc, #184]	; (8003068 <Task_DMA+0x168>)
 8002fb0:	f002 ff69 	bl	8005e86 <HAL_UART_Receive_DMA>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fb8:	b662      	cpsie	i
}
 8002fba:	bf00      	nop
					   __enable_irq();
					   nbuff=1;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]
					   num=hdma_usart2_rx.Instance->NDTR;
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <Task_DMA+0x16c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	60bb      	str	r3, [r7, #8]
					   res=buff->puts(buff_rx,buffer_DMA_1,buffer_SIZE-num);
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <Task_DMA+0x174>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	4a2a      	ldr	r2, [pc, #168]	; (8003078 <Task_DMA+0x178>)
 8002fd0:	6810      	ldr	r0, [r2, #0]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8002fd8:	4922      	ldr	r1, [pc, #136]	; (8003064 <Task_DMA+0x164>)
 8002fda:	4798      	blx	r3
 8002fdc:	4603      	mov	r3, r0
 8002fde:	73fb      	strb	r3, [r7, #15]
					}else
						;

					break;
 8002fe0:	e031      	b.n	8003046 <Task_DMA+0x146>
		case 1:
	    			num=hdma_usart2_rx2.Instance->NDTR;
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	; (800305c <Task_DMA+0x15c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	60bb      	str	r3, [r7, #8]
	    			if (num<buffer_SIZE){
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff0:	d22b      	bcs.n	800304a <Task_DMA+0x14a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff2:	b672      	cpsid	i
}
 8002ff4:	bf00      	nop
	    				__disable_irq();
	    				res=HAL_UART_DMAStop_PAS(&huart2);
 8002ff6:	481c      	ldr	r0, [pc, #112]	; (8003068 <Task_DMA+0x168>)
 8002ff8:	f000 fe5c 	bl	8003cb4 <HAL_UART_DMAStop_PAS>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]
	    				__HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx);
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <Task_DMA+0x168>)
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <Task_DMA+0x16c>)
 8003004:	639a      	str	r2, [r3, #56]	; 0x38
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <Task_DMA+0x16c>)
 8003008:	4a17      	ldr	r2, [pc, #92]	; (8003068 <Task_DMA+0x168>)
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
	    				res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE);
 800300c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003010:	4914      	ldr	r1, [pc, #80]	; (8003064 <Task_DMA+0x164>)
 8003012:	4815      	ldr	r0, [pc, #84]	; (8003068 <Task_DMA+0x168>)
 8003014:	f002 ff37 	bl	8005e86 <HAL_UART_Receive_DMA>
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800301c:	b662      	cpsie	i
}
 800301e:	bf00      	nop
	    				__enable_irq();
	    				nbuff=0;
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]
	    				num=hdma_usart2_rx2.Instance->NDTR;
 8003024:	4b0d      	ldr	r3, [pc, #52]	; (800305c <Task_DMA+0x15c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60bb      	str	r3, [r7, #8]
	    				res=buff->puts(buff_rx,buffer_DMA_2,buffer_SIZE-num);
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <Task_DMA+0x174>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	4a11      	ldr	r2, [pc, #68]	; (8003078 <Task_DMA+0x178>)
 8003034:	6810      	ldr	r0, [r2, #0]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 800303c:	490c      	ldr	r1, [pc, #48]	; (8003070 <Task_DMA+0x170>)
 800303e:	4798      	blx	r3
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]
	    			}else
	    				;
	    			break;
 8003044:	e001      	b.n	800304a <Task_DMA+0x14a>
					break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <Task_DMA+0x14c>
	    			break;
 800304a:	bf00      	nop
		}

		it++;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3301      	adds	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
		vTaskDelay(1/portTICK_RATE_MS );
 8003052:	2001      	movs	r0, #1
 8003054:	f004 fbbc 	bl	80077d0 <vTaskDelay>
		switch (nbuff){
 8003058:	e78a      	b.n	8002f70 <Task_DMA+0x70>
 800305a:	bf00      	nop
 800305c:	20000928 	.word	0x20000928
 8003060:	400260b8 	.word	0x400260b8
 8003064:	20001d4c 	.word	0x20001d4c
 8003068:	20000820 	.word	0x20000820
 800306c:	200008c4 	.word	0x200008c4
 8003070:	20001f4c 	.word	0x20001f4c
 8003074:	20001d44 	.word	0x20001d44
 8003078:	20001d48 	.word	0x20001d48

0800307c <Task_Display>:
	}
}


void Task_Display( void *pvParameters ){
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

	uint32_t it;
	BUFF_ITEM_t car;
	HAL_StatusTypeDef res;

    it=0;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
	while(1){

		buff->get(buff,&car);
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <Task_Display+0x38>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <Task_Display+0x38>)
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	f107 010a 	add.w	r1, r7, #10
 8003096:	4610      	mov	r0, r2
 8003098:	4798      	blx	r3
		res=HAL_UART_Transmit(& huart2,&car,1,100);
 800309a:	f107 010a 	add.w	r1, r7, #10
 800309e:	2364      	movs	r3, #100	; 0x64
 80030a0:	2201      	movs	r2, #1
 80030a2:	4805      	ldr	r0, [pc, #20]	; (80030b8 <Task_Display+0x3c>)
 80030a4:	f002 fe5d 	bl	8005d62 <HAL_UART_Transmit>
 80030a8:	4603      	mov	r3, r0
 80030aa:	72fb      	strb	r3, [r7, #11]
		it++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
		buff->get(buff,&car);
 80030b2:	e7e9      	b.n	8003088 <Task_Display+0xc>
 80030b4:	20001d44 	.word	0x20001d44
 80030b8:	20000820 	.word	0x20000820

080030bc <serie_Init_FreeRTOS>:


extern BUFF_BUFFER_t * buff;
extern BUFF_BUFFER_t * buff_rx;

void serie_Init_FreeRTOS(void){
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af02      	add	r7, sp, #8

	BaseType_t res_task;

	//printf (PASCU_PRJ " at "__TIME__);
	fflush(0);
 80030c2:	2000      	movs	r0, #0
 80030c4:	f005 fe9a 	bl	8008dfc <fflush>

	buff=bufferCreat(128);
 80030c8:	2080      	movs	r0, #128	; 0x80
 80030ca:	f000 fcab 	bl	8003a24 <bufferCreat>
 80030ce:	4603      	mov	r3, r0
 80030d0:	4a3f      	ldr	r2, [pc, #252]	; (80031d0 <serie_Init_FreeRTOS+0x114>)
 80030d2:	6013      	str	r3, [r2, #0]
	if (!buff) return;
 80030d4:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <serie_Init_FreeRTOS+0x114>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d072      	beq.n	80031c2 <serie_Init_FreeRTOS+0x106>

	buff_rx=bufferCreat(512);
 80030dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030e0:	f000 fca0 	bl	8003a24 <bufferCreat>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4a3b      	ldr	r2, [pc, #236]	; (80031d4 <serie_Init_FreeRTOS+0x118>)
 80030e8:	6013      	str	r3, [r2, #0]
	if (!buff_rx) return;
 80030ea:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <serie_Init_FreeRTOS+0x118>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d069      	beq.n	80031c6 <serie_Init_FreeRTOS+0x10a>

	res_task=xTaskCreate(Task_Display,"DISPLAY",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 80030f2:	2000      	movs	r0, #0
 80030f4:	f000 fcf0 	bl	8003ad8 <makeFreeRtosPriority>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	2300      	movs	r3, #0
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	9200      	str	r2, [sp, #0]
 8003102:	2300      	movs	r3, #0
 8003104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003108:	4933      	ldr	r1, [pc, #204]	; (80031d8 <serie_Init_FreeRTOS+0x11c>)
 800310a:	4834      	ldr	r0, [pc, #208]	; (80031dc <serie_Init_FreeRTOS+0x120>)
 800310c:	f004 fa29 	bl	8007562 <xTaskCreate>
 8003110:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d006      	beq.n	8003126 <serie_Init_FreeRTOS+0x6a>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8003118:	4831      	ldr	r0, [pc, #196]	; (80031e0 <serie_Init_FreeRTOS+0x124>)
 800311a:	f006 fd7d 	bl	8009c18 <puts>
			fflush(NULL);
 800311e:	2000      	movs	r0, #0
 8003120:	f005 fe6c 	bl	8008dfc <fflush>
			while(1);
 8003124:	e7fe      	b.n	8003124 <serie_Init_FreeRTOS+0x68>
	}

	res_task=xTaskCreate(Task_DMA,"DMA",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8003126:	2000      	movs	r0, #0
 8003128:	f000 fcd6 	bl	8003ad8 <makeFreeRtosPriority>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	2300      	movs	r3, #0
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	9200      	str	r2, [sp, #0]
 8003136:	2300      	movs	r3, #0
 8003138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800313c:	4929      	ldr	r1, [pc, #164]	; (80031e4 <serie_Init_FreeRTOS+0x128>)
 800313e:	482a      	ldr	r0, [pc, #168]	; (80031e8 <serie_Init_FreeRTOS+0x12c>)
 8003140:	f004 fa0f 	bl	8007562 <xTaskCreate>
 8003144:	6078      	str	r0, [r7, #4]
		if( res_task != pdPASS ){
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d006      	beq.n	800315a <serie_Init_FreeRTOS+0x9e>
				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 800314c:	4824      	ldr	r0, [pc, #144]	; (80031e0 <serie_Init_FreeRTOS+0x124>)
 800314e:	f006 fd63 	bl	8009c18 <puts>
				fflush(NULL);
 8003152:	2000      	movs	r0, #0
 8003154:	f005 fe52 	bl	8008dfc <fflush>
				while(1);
 8003158:	e7fe      	b.n	8003158 <serie_Init_FreeRTOS+0x9c>
		}

	res_task=xTaskCreate(Task_Send,"ENVIO",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 800315a:	2000      	movs	r0, #0
 800315c:	f000 fcbc 	bl	8003ad8 <makeFreeRtosPriority>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	2300      	movs	r3, #0
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	9200      	str	r2, [sp, #0]
 800316a:	2300      	movs	r3, #0
 800316c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003170:	491e      	ldr	r1, [pc, #120]	; (80031ec <serie_Init_FreeRTOS+0x130>)
 8003172:	481f      	ldr	r0, [pc, #124]	; (80031f0 <serie_Init_FreeRTOS+0x134>)
 8003174:	f004 f9f5 	bl	8007562 <xTaskCreate>
 8003178:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d006      	beq.n	800318e <serie_Init_FreeRTOS+0xd2>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8003180:	4817      	ldr	r0, [pc, #92]	; (80031e0 <serie_Init_FreeRTOS+0x124>)
 8003182:	f006 fd49 	bl	8009c18 <puts>
			fflush(NULL);
 8003186:	2000      	movs	r0, #0
 8003188:	f005 fe38 	bl	8008dfc <fflush>
			while(1);
 800318c:	e7fe      	b.n	800318c <serie_Init_FreeRTOS+0xd0>
	}

	res_task=xTaskCreate(Task_Receive,"RECEIVE",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 800318e:	2000      	movs	r0, #0
 8003190:	f000 fca2 	bl	8003ad8 <makeFreeRtosPriority>
 8003194:	4603      	mov	r3, r0
 8003196:	461a      	mov	r2, r3
 8003198:	2300      	movs	r3, #0
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	9200      	str	r2, [sp, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a4:	4913      	ldr	r1, [pc, #76]	; (80031f4 <serie_Init_FreeRTOS+0x138>)
 80031a6:	4814      	ldr	r0, [pc, #80]	; (80031f8 <serie_Init_FreeRTOS+0x13c>)
 80031a8:	f004 f9db 	bl	8007562 <xTaskCreate>
 80031ac:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d009      	beq.n	80031c8 <serie_Init_FreeRTOS+0x10c>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 80031b4:	480a      	ldr	r0, [pc, #40]	; (80031e0 <serie_Init_FreeRTOS+0x124>)
 80031b6:	f006 fd2f 	bl	8009c18 <puts>
			fflush(NULL);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f005 fe1e 	bl	8008dfc <fflush>
			while(1);
 80031c0:	e7fe      	b.n	80031c0 <serie_Init_FreeRTOS+0x104>
	if (!buff) return;
 80031c2:	bf00      	nop
 80031c4:	e000      	b.n	80031c8 <serie_Init_FreeRTOS+0x10c>
	if (!buff_rx) return;
 80031c6:	bf00      	nop
	}
}
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20001d44 	.word	0x20001d44
 80031d4:	20001d48 	.word	0x20001d48
 80031d8:	0800d4ac 	.word	0x0800d4ac
 80031dc:	0800307d 	.word	0x0800307d
 80031e0:	0800d4b4 	.word	0x0800d4b4
 80031e4:	0800d4e0 	.word	0x0800d4e0
 80031e8:	08002f01 	.word	0x08002f01
 80031ec:	0800d4e4 	.word	0x0800d4e4
 80031f0:	0800367d 	.word	0x0800367d
 80031f4:	0800d4ec 	.word	0x0800d4ec
 80031f8:	080036bd 	.word	0x080036bd

080031fc <funcion_conf>:

char candenafinal[2000];
int funcion_conf(char * cadena,int len,int  osDelay_, int  osDelay_2){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
	int vuelta=1;
 800320a:	2301      	movs	r3, #1
 800320c:	61bb      	str	r3, [r7, #24]
	uint32_t res;
	res=HAL_UART_Transmit(UART_ESP_AT_WIFI,cadena,len,1000);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	b29a      	uxth	r2, r3
 8003212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	481b      	ldr	r0, [pc, #108]	; (8003288 <funcion_conf+0x8c>)
 800321a:	f002 fda2 	bl	8005d62 <HAL_UART_Transmit>
 800321e:	4603      	mov	r3, r0
 8003220:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 8003222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003226:	4919      	ldr	r1, [pc, #100]	; (800328c <funcion_conf+0x90>)
 8003228:	4817      	ldr	r0, [pc, #92]	; (8003288 <funcion_conf+0x8c>)
 800322a:	f002 fe2c 	bl	8005e86 <HAL_UART_Receive_DMA>
	osDelay(osDelay_);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4618      	mov	r0, r3
 8003232:	f003 fc70 	bl	8006b16 <osDelay>
	HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8003236:	4814      	ldr	r0, [pc, #80]	; (8003288 <funcion_conf+0x8c>)
 8003238:	f002 fe55 	bl	8005ee6 <HAL_UART_DMAStop>
	int buffer_ct1=buffer_DMA_size - HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 800323c:	4812      	ldr	r0, [pc, #72]	; (8003288 <funcion_conf+0x8c>)
 800323e:	f000 fd7e 	bl	8003d3e <HAL_DMA_getcounter>
 8003242:	4603      	mov	r3, r0
 8003244:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003248:	613b      	str	r3, [r7, #16]
	int buffer_ct=0;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
	while (buffer_ct<buffer_ct1)
 800324e:	e00d      	b.n	800326c <funcion_conf+0x70>
		res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <funcion_conf+0x94>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <funcion_conf+0x94>)
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	1c59      	adds	r1, r3, #1
 800325e:	61f9      	str	r1, [r7, #28]
 8003260:	490a      	ldr	r1, [pc, #40]	; (800328c <funcion_conf+0x90>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	4619      	mov	r1, r3
 8003266:	4790      	blx	r2
 8003268:	4603      	mov	r3, r0
 800326a:	617b      	str	r3, [r7, #20]
	while (buffer_ct<buffer_ct1)
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	dbed      	blt.n	8003250 <funcion_conf+0x54>
	osDelay(osDelay_2);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f003 fc4d 	bl	8006b16 <osDelay>

	return vuelta;
 800327c:	69bb      	ldr	r3, [r7, #24]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200007dc 	.word	0x200007dc
 800328c:	2000098c 	.word	0x2000098c
 8003290:	20001d44 	.word	0x20001d44

08003294 <conexion>:
	}



}
void conexion(char * nombreMaquina,char * ssid, char * passwd, char * puerto){
 8003294:	b5b0      	push	{r4, r5, r7, lr}
 8003296:	b09c      	sub	sp, #112	; 0x70
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
	uint32_t res;
	char cad[]="AT+CWJAP=\"%s\",\"%s\"\r\n";
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <conexion+0xf8>)
 80032a4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80032a8:	461d      	mov	r5, r3
 80032aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032b2:	6020      	str	r0, [r4, #0]
 80032b4:	3404      	adds	r4, #4
 80032b6:	7021      	strb	r1, [r4, #0]
	char cad1[]="AT+CWMODE=1\r\n";
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <conexion+0xfc>)
 80032ba:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80032be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c0:	c407      	stmia	r4!, {r0, r1, r2}
 80032c2:	8023      	strh	r3, [r4, #0]
	char cad2[]="AT+CIFSR\r\n";
 80032c4:	4a33      	ldr	r2, [pc, #204]	; (8003394 <conexion+0x100>)
 80032c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80032cc:	c303      	stmia	r3!, {r0, r1}
 80032ce:	801a      	strh	r2, [r3, #0]
 80032d0:	3302      	adds	r3, #2
 80032d2:	0c12      	lsrs	r2, r2, #16
 80032d4:	701a      	strb	r2, [r3, #0]
	char cad3[]="AT+CIPSTART=\"TCP\",\"%s\",%s\r\n";
 80032d6:	4b30      	ldr	r3, [pc, #192]	; (8003398 <conexion+0x104>)
 80032d8:	f107 0410 	add.w	r4, r7, #16
 80032dc:	461d      	mov	r5, r3
 80032de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sprintf(candenafinal,cad3,nombreMaquina,puerto);
 80032ea:	f107 0110 	add.w	r1, r7, #16
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	482a      	ldr	r0, [pc, #168]	; (800339c <conexion+0x108>)
 80032f4:	f006 fcb0 	bl	8009c58 <siprintf>
	int r = funcion_conf(cad1,strlen(cad1),2000,1);
 80032f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fc ff79 	bl	80001f4 <strlen>
 8003302:	4603      	mov	r3, r0
 8003304:	4619      	mov	r1, r3
 8003306:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800330a:	2301      	movs	r3, #1
 800330c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003310:	f7ff ff74 	bl	80031fc <funcion_conf>
 8003314:	66f8      	str	r0, [r7, #108]	; 0x6c
	sprintf(candenafinal,cad,ssid,passwd);
 8003316:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	481f      	ldr	r0, [pc, #124]	; (800339c <conexion+0x108>)
 8003320:	f006 fc9a 	bl	8009c58 <siprintf>
	int r2 = funcion_conf(candenafinal,strlen(candenafinal),2000,1);
 8003324:	481d      	ldr	r0, [pc, #116]	; (800339c <conexion+0x108>)
 8003326:	f7fc ff65 	bl	80001f4 <strlen>
 800332a:	4603      	mov	r3, r0
 800332c:	4619      	mov	r1, r3
 800332e:	2301      	movs	r3, #1
 8003330:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003334:	4819      	ldr	r0, [pc, #100]	; (800339c <conexion+0x108>)
 8003336:	f7ff ff61 	bl	80031fc <funcion_conf>
 800333a:	66b8      	str	r0, [r7, #104]	; 0x68
	int r3 = funcion_conf(cad2,strlen(cad2),2000,1);
 800333c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003340:	4618      	mov	r0, r3
 8003342:	f7fc ff57 	bl	80001f4 <strlen>
 8003346:	4603      	mov	r3, r0
 8003348:	4619      	mov	r1, r3
 800334a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800334e:	2301      	movs	r3, #1
 8003350:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003354:	f7ff ff52 	bl	80031fc <funcion_conf>
 8003358:	6678      	str	r0, [r7, #100]	; 0x64
	sprintf(candenafinal,cad3,nombreMaquina,puerto);
 800335a:	f107 0110 	add.w	r1, r7, #16
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	480e      	ldr	r0, [pc, #56]	; (800339c <conexion+0x108>)
 8003364:	f006 fc78 	bl	8009c58 <siprintf>
	int r4 = funcion_conf(candenafinal,strlen(candenafinal),500,1000);
 8003368:	480c      	ldr	r0, [pc, #48]	; (800339c <conexion+0x108>)
 800336a:	f7fc ff43 	bl	80001f4 <strlen>
 800336e:	4603      	mov	r3, r0
 8003370:	4619      	mov	r1, r3
 8003372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003376:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800337a:	4808      	ldr	r0, [pc, #32]	; (800339c <conexion+0x108>)
 800337c:	f7ff ff3e 	bl	80031fc <funcion_conf>
 8003380:	6638      	str	r0, [r7, #96]	; 0x60

}
 8003382:	bf00      	nop
 8003384:	3770      	adds	r7, #112	; 0x70
 8003386:	46bd      	mov	sp, r7
 8003388:	bdb0      	pop	{r4, r5, r7, pc}
 800338a:	bf00      	nop
 800338c:	0800d52c 	.word	0x0800d52c
 8003390:	0800d544 	.word	0x0800d544
 8003394:	0800d554 	.word	0x0800d554
 8003398:	0800d560 	.word	0x0800d560
 800339c:	20001574 	.word	0x20001574

080033a0 <json_querryTotal>:
void json_querryTotal(void){
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b093      	sub	sp, #76	; 0x4c
 80033a4:	af00      	add	r7, sp, #0
	//tratado del json
	//struct json res;
	char *jsonp = strstr(buffer_DMA,"{");
 80033a6:	217b      	movs	r1, #123	; 0x7b
 80033a8:	483e      	ldr	r0, [pc, #248]	; (80034a4 <json_querryTotal+0x104>)
 80033aa:	f006 fcb8 	bl	8009d1e <strchr>
 80033ae:	63b8      	str	r0, [r7, #56]	; 0x38
	jsonp[strlen(jsonp)-2] = '\0';
 80033b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033b2:	f7fc ff1f 	bl	80001f4 <strlen>
 80033b6:	4603      	mov	r3, r0
 80033b8:	3b02      	subs	r3, #2
 80033ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033bc:	4413      	add	r3, r2
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
	cJSON * contextResponses = cJSON_Parse(jsonp);
 80033c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033c4:	f7fe fb70 	bl	8001aa8 <cJSON_Parse>
 80033c8:	6378      	str	r0, [r7, #52]	; 0x34
	cJSON * contextEl = cJSON_GetObjectItemCaseSensitive(contextResponses,"contextResponses");
 80033ca:	4937      	ldr	r1, [pc, #220]	; (80034a8 <json_querryTotal+0x108>)
 80033cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033ce:	f7fe fed7 	bl	8002180 <cJSON_GetObjectItemCaseSensitive>
 80033d2:	6338      	str	r0, [r7, #48]	; 0x30
	cJSON * contextResponseArray = cJSON_GetArrayItem(contextEl,0);
 80033d4:	2100      	movs	r1, #0
 80033d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033d8:	f7fe fe67 	bl	80020aa <cJSON_GetArrayItem>
 80033dc:	62f8      	str	r0, [r7, #44]	; 0x2c
	cJSON * array1 = cJSON_GetObjectItemCaseSensitive(contextResponseArray, "contextElement");
 80033de:	4933      	ldr	r1, [pc, #204]	; (80034ac <json_querryTotal+0x10c>)
 80033e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033e2:	f7fe fecd 	bl	8002180 <cJSON_GetObjectItemCaseSensitive>
 80033e6:	62b8      	str	r0, [r7, #40]	; 0x28
	cJSON * atributes = cJSON_GetObjectItemCaseSensitive(array1,"attributes");
 80033e8:	4931      	ldr	r1, [pc, #196]	; (80034b0 <json_querryTotal+0x110>)
 80033ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ec:	f7fe fec8 	bl	8002180 <cJSON_GetObjectItemCaseSensitive>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24
	int sizeofar = cJSON_GetArraySize(atributes);
 80033f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033f4:	f7fe fe15 	bl	8002022 <cJSON_GetArraySize>
 80033f8:	6238      	str	r0, [r7, #32]
	for (int i = 0; i < sizeofar; i++){
 80033fa:	2300      	movs	r3, #0
 80033fc:	647b      	str	r3, [r7, #68]	; 0x44
 80033fe:	e048      	b.n	8003492 <json_querryTotal+0xf2>
		cJSON * atr = cJSON_GetArrayItem(atributes,i);
 8003400:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003404:	f7fe fe51 	bl	80020aa <cJSON_GetArrayItem>
 8003408:	61f8      	str	r0, [r7, #28]
		char*name = cJSON_GetStringValue(cJSON_GetObjectItem(atr, "name"));
 800340a:	492a      	ldr	r1, [pc, #168]	; (80034b4 <json_querryTotal+0x114>)
 800340c:	69f8      	ldr	r0, [r7, #28]
 800340e:	f7fe fea8 	bl	8002162 <cJSON_GetObjectItem>
 8003412:	4603      	mov	r3, r0
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd fdb7 	bl	8000f88 <cJSON_GetStringValue>
 800341a:	61b8      	str	r0, [r7, #24]
		char*type = cJSON_GetStringValue(cJSON_GetObjectItem(atr, "type"));
 800341c:	4926      	ldr	r1, [pc, #152]	; (80034b8 <json_querryTotal+0x118>)
 800341e:	69f8      	ldr	r0, [r7, #28]
 8003420:	f7fe fe9f 	bl	8002162 <cJSON_GetObjectItem>
 8003424:	4603      	mov	r3, r0
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd fdae 	bl	8000f88 <cJSON_GetStringValue>
 800342c:	6178      	str	r0, [r7, #20]
		char pr[13]="IntesnidadLuz";
 800342e:	4b23      	ldr	r3, [pc, #140]	; (80034bc <json_querryTotal+0x11c>)
 8003430:	463c      	mov	r4, r7
 8003432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003434:	c407      	stmia	r4!, {r0, r1, r2}
 8003436:	7023      	strb	r3, [r4, #0]
		int itl=1;
 8003438:	2301      	movs	r3, #1
 800343a:	643b      	str	r3, [r7, #64]	; 0x40
		for(int j = 0 ; j<13; j++){
 800343c:	2300      	movs	r3, #0
 800343e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003440:	e014      	b.n	800346c <json_querryTotal+0xcc>
					if(pr[j]==name[j] && itl==1){
 8003442:	463a      	mov	r2, r7
 8003444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003446:	4413      	add	r3, r2
 8003448:	781a      	ldrb	r2, [r3, #0]
 800344a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344c:	69b9      	ldr	r1, [r7, #24]
 800344e:	440b      	add	r3, r1
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d105      	bne.n	8003462 <json_querryTotal+0xc2>
 8003456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003458:	2b01      	cmp	r3, #1
 800345a:	d102      	bne.n	8003462 <json_querryTotal+0xc2>
						itl=1;
 800345c:	2301      	movs	r3, #1
 800345e:	643b      	str	r3, [r7, #64]	; 0x40
 8003460:	e001      	b.n	8003466 <json_querryTotal+0xc6>
					}else{
						itl=0;
 8003462:	2300      	movs	r3, #0
 8003464:	643b      	str	r3, [r7, #64]	; 0x40
		for(int j = 0 ; j<13; j++){
 8003466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003468:	3301      	adds	r3, #1
 800346a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800346c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346e:	2b0c      	cmp	r3, #12
 8003470:	dde7      	ble.n	8003442 <json_querryTotal+0xa2>
					}
				}
		if(pr==name){
 8003472:	463b      	mov	r3, r7
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	429a      	cmp	r2, r3
 8003478:	d108      	bne.n	800348c <json_querryTotal+0xec>
			char*type = cJSON_GetStringValue(cJSON_GetObjectItem(atr, "value"));
 800347a:	4911      	ldr	r1, [pc, #68]	; (80034c0 <json_querryTotal+0x120>)
 800347c:	69f8      	ldr	r0, [r7, #28]
 800347e:	f7fe fe70 	bl	8002162 <cJSON_GetObjectItem>
 8003482:	4603      	mov	r3, r0
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fd7f 	bl	8000f88 <cJSON_GetStringValue>
 800348a:	6138      	str	r0, [r7, #16]
	for (int i = 0; i < sizeofar; i++){
 800348c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348e:	3301      	adds	r3, #1
 8003490:	647b      	str	r3, [r7, #68]	; 0x44
 8003492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	429a      	cmp	r2, r3
 8003498:	dbb2      	blt.n	8003400 <json_querryTotal+0x60>
	}
	//
	//cJSON * contextElement = cJSON_GetObjectItemCaseSensitive(array1,"contextElement");
	//char* leds= values->valuestring;
	//printf(leds);
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	374c      	adds	r7, #76	; 0x4c
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd90      	pop	{r4, r7, pc}
 80034a4:	2000098c 	.word	0x2000098c
 80034a8:	0800d4f4 	.word	0x0800d4f4
 80034ac:	0800d508 	.word	0x0800d508
 80034b0:	0800d518 	.word	0x0800d518
 80034b4:	0800d58c 	.word	0x0800d58c
 80034b8:	0800d594 	.word	0x0800d594
 80034bc:	0800d59c 	.word	0x0800d59c
 80034c0:	0800d524 	.word	0x0800d524

080034c4 <conectado>:
void conectado(void){
 80034c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c8:	b0a0      	sub	sp, #128	; 0x80
 80034ca:	af10      	add	r7, sp, #64	; 0x40
	//***post***
	char cad4[]="AT+CIPSEND=%d\r\n";
 80034cc:	4b5b      	ldr	r3, [pc, #364]	; (800363c <conectado+0x178>)
 80034ce:	f107 0420 	add.w	r4, r7, #32
 80034d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sprintf(cadenafinalv2,body_update_todo,valorReal,luzMax,luzMin,luzSalto,temperatura,tempMax,tempMin,tempSalto,"T");
 80034d8:	4b59      	ldr	r3, [pc, #356]	; (8003640 <conectado+0x17c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd f84b 	bl	8000578 <__aeabi_f2d>
 80034e2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80034e6:	4b57      	ldr	r3, [pc, #348]	; (8003644 <conectado+0x180>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd f844 	bl	8000578 <__aeabi_f2d>
 80034f0:	4682      	mov	sl, r0
 80034f2:	468b      	mov	fp, r1
 80034f4:	4b54      	ldr	r3, [pc, #336]	; (8003648 <conectado+0x184>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd f83d 	bl	8000578 <__aeabi_f2d>
 80034fe:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003502:	4b52      	ldr	r3, [pc, #328]	; (800364c <conectado+0x188>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd f836 	bl	8000578 <__aeabi_f2d>
 800350c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003510:	4b4f      	ldr	r3, [pc, #316]	; (8003650 <conectado+0x18c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd f82f 	bl	8000578 <__aeabi_f2d>
 800351a:	e9c7 0100 	strd	r0, r1, [r7]
 800351e:	4b4d      	ldr	r3, [pc, #308]	; (8003654 <conectado+0x190>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd f828 	bl	8000578 <__aeabi_f2d>
 8003528:	4680      	mov	r8, r0
 800352a:	4689      	mov	r9, r1
 800352c:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <conectado+0x194>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd f821 	bl	8000578 <__aeabi_f2d>
 8003536:	4604      	mov	r4, r0
 8003538:	460d      	mov	r5, r1
 800353a:	4b48      	ldr	r3, [pc, #288]	; (800365c <conectado+0x198>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd f81a 	bl	8000578 <__aeabi_f2d>
 8003544:	4b46      	ldr	r3, [pc, #280]	; (8003660 <conectado+0x19c>)
 8003546:	930e      	str	r3, [sp, #56]	; 0x38
 8003548:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800354c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003550:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003554:	ed97 7b00 	vldr	d7, [r7]
 8003558:	ed8d 7b06 	vstr	d7, [sp, #24]
 800355c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003560:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003564:	ed97 7b04 	vldr	d7, [r7, #16]
 8003568:	ed8d 7b02 	vstr	d7, [sp, #8]
 800356c:	e9cd ab00 	strd	sl, fp, [sp]
 8003570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003574:	493b      	ldr	r1, [pc, #236]	; (8003664 <conectado+0x1a0>)
 8003576:	483c      	ldr	r0, [pc, #240]	; (8003668 <conectado+0x1a4>)
 8003578:	f006 fb6e 	bl	8009c58 <siprintf>
	sprintf(candenafinal,post_temp_apli,strlen(cadenafinalv2),cadenafinalv2);
 800357c:	483a      	ldr	r0, [pc, #232]	; (8003668 <conectado+0x1a4>)
 800357e:	f7fc fe39 	bl	80001f4 <strlen>
 8003582:	4602      	mov	r2, r0
 8003584:	4b38      	ldr	r3, [pc, #224]	; (8003668 <conectado+0x1a4>)
 8003586:	4939      	ldr	r1, [pc, #228]	; (800366c <conectado+0x1a8>)
 8003588:	4839      	ldr	r0, [pc, #228]	; (8003670 <conectado+0x1ac>)
 800358a:	f006 fb65 	bl	8009c58 <siprintf>
	sprintf(cadenafinalv2,cad4,strlen(candenafinal));
 800358e:	4838      	ldr	r0, [pc, #224]	; (8003670 <conectado+0x1ac>)
 8003590:	f7fc fe30 	bl	80001f4 <strlen>
 8003594:	4602      	mov	r2, r0
 8003596:	f107 0320 	add.w	r3, r7, #32
 800359a:	4619      	mov	r1, r3
 800359c:	4832      	ldr	r0, [pc, #200]	; (8003668 <conectado+0x1a4>)
 800359e:	f006 fb5b 	bl	8009c58 <siprintf>
	int r5 = funcion_conf(cadenafinalv2,strlen(cadenafinalv2),500,20);//send=de bytes
 80035a2:	4831      	ldr	r0, [pc, #196]	; (8003668 <conectado+0x1a4>)
 80035a4:	f7fc fe26 	bl	80001f4 <strlen>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4619      	mov	r1, r3
 80035ac:	2314      	movs	r3, #20
 80035ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035b2:	482d      	ldr	r0, [pc, #180]	; (8003668 <conectado+0x1a4>)
 80035b4:	f7ff fe22 	bl	80031fc <funcion_conf>
 80035b8:	63f8      	str	r0, [r7, #60]	; 0x3c
	int r6 = funcion_conf(candenafinal,strlen(candenafinal),500,20);//json peticion
 80035ba:	482d      	ldr	r0, [pc, #180]	; (8003670 <conectado+0x1ac>)
 80035bc:	f7fc fe1a 	bl	80001f4 <strlen>
 80035c0:	4603      	mov	r3, r0
 80035c2:	4619      	mov	r1, r3
 80035c4:	2314      	movs	r3, #20
 80035c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035ca:	4829      	ldr	r0, [pc, #164]	; (8003670 <conectado+0x1ac>)
 80035cc:	f7ff fe16 	bl	80031fc <funcion_conf>
 80035d0:	63b8      	str	r0, [r7, #56]	; 0x38

	sprintf(candenafinal,post_temp,strlen(body),&body);
 80035d2:	4828      	ldr	r0, [pc, #160]	; (8003674 <conectado+0x1b0>)
 80035d4:	f7fc fe0e 	bl	80001f4 <strlen>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b26      	ldr	r3, [pc, #152]	; (8003674 <conectado+0x1b0>)
 80035dc:	4926      	ldr	r1, [pc, #152]	; (8003678 <conectado+0x1b4>)
 80035de:	4824      	ldr	r0, [pc, #144]	; (8003670 <conectado+0x1ac>)
 80035e0:	f006 fb3a 	bl	8009c58 <siprintf>
	sprintf(cadenafinalv2,cad4,strlen(candenafinal));
 80035e4:	4822      	ldr	r0, [pc, #136]	; (8003670 <conectado+0x1ac>)
 80035e6:	f7fc fe05 	bl	80001f4 <strlen>
 80035ea:	4602      	mov	r2, r0
 80035ec:	f107 0320 	add.w	r3, r7, #32
 80035f0:	4619      	mov	r1, r3
 80035f2:	481d      	ldr	r0, [pc, #116]	; (8003668 <conectado+0x1a4>)
 80035f4:	f006 fb30 	bl	8009c58 <siprintf>
	int r7 = funcion_conf(cadenafinalv2,strlen(cadenafinalv2),1000,2000);
 80035f8:	481b      	ldr	r0, [pc, #108]	; (8003668 <conectado+0x1a4>)
 80035fa:	f7fc fdfb 	bl	80001f4 <strlen>
 80035fe:	4603      	mov	r3, r0
 8003600:	4619      	mov	r1, r3
 8003602:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800360a:	4817      	ldr	r0, [pc, #92]	; (8003668 <conectado+0x1a4>)
 800360c:	f7ff fdf6 	bl	80031fc <funcion_conf>
 8003610:	6378      	str	r0, [r7, #52]	; 0x34
	int r8 = funcion_conf(candenafinal,strlen(candenafinal),1000,2000);
 8003612:	4817      	ldr	r0, [pc, #92]	; (8003670 <conectado+0x1ac>)
 8003614:	f7fc fdee 	bl	80001f4 <strlen>
 8003618:	4603      	mov	r3, r0
 800361a:	4619      	mov	r1, r3
 800361c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003624:	4812      	ldr	r0, [pc, #72]	; (8003670 <conectado+0x1ac>)
 8003626:	f7ff fde9 	bl	80031fc <funcion_conf>
 800362a:	6338      	str	r0, [r7, #48]	; 0x30
	/*free(candenafinal);
	free(cadenafinalv2);*/
	json_querryTotal();
 800362c:	f7ff feb8 	bl	80033a0 <json_querryTotal>
}
 8003630:	bf00      	nop
 8003632:	3740      	adds	r7, #64	; 0x40
 8003634:	46bd      	mov	sp, r7
 8003636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800363a:	bf00      	nop
 800363c:	0800d57c 	.word	0x0800d57c
 8003640:	20000520 	.word	0x20000520
 8003644:	2000052c 	.word	0x2000052c
 8003648:	20000530 	.word	0x20000530
 800364c:	20000534 	.word	0x20000534
 8003650:	2000051c 	.word	0x2000051c
 8003654:	20000524 	.word	0x20000524
 8003658:	20000528 	.word	0x20000528
 800365c:	20000538 	.word	0x20000538
 8003660:	0800d5ac 	.word	0x0800d5ac
 8003664:	2000019c 	.word	0x2000019c
 8003668:	2000118c 	.word	0x2000118c
 800366c:	200000b4 	.word	0x200000b4
 8003670:	20001574 	.word	0x20001574
 8003674:	2000014c 	.word	0x2000014c
 8003678:	2000001c 	.word	0x2000001c

0800367c <Task_Send>:


void Task_Send( void *pvParameters ){
 800367c:	b580      	push	{r7, lr}
 800367e:	b09c      	sub	sp, #112	; 0x70
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

	uint32_t it;
    uint32_t res;

	char cad[100];
	it=0;
 8003684:	2300      	movs	r3, #0
 8003686:	66fb      	str	r3, [r7, #108]	; 0x6c
	//boot_wifi("OPPOReno2","ilovematy");
	//entregable("worldclockapi.com","OPPOReno2","ilovematy","80");
	//postfunc("pperez-seu-or.disca.upv.es","routerSEU","00000000","10000");
	ldrReadAndmodify();
 8003688:	f7fe fe44 	bl	8002314 <ldrReadAndmodify>
	ntcReadAndmodify();
 800368c:	f7fe fedc 	bl	8002448 <ntcReadAndmodify>
	lecturaPonteciometroSetAlarma();
 8003690:	f7fe fd9c 	bl	80021cc <lecturaPonteciometroSetAlarma>
	//postfunc("pperez2.disca.upv.es","OPPOReno2","ilovematy","10000");
	conexion("pperez2.disca.upv.es","OPPOReno2","ilovematy","10000");
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <Task_Send+0x30>)
 8003696:	4a06      	ldr	r2, [pc, #24]	; (80036b0 <Task_Send+0x34>)
 8003698:	4906      	ldr	r1, [pc, #24]	; (80036b4 <Task_Send+0x38>)
 800369a:	4807      	ldr	r0, [pc, #28]	; (80036b8 <Task_Send+0x3c>)
 800369c:	f7ff fdfa 	bl	8003294 <conexion>
	conectado();
 80036a0:	f7ff ff10 	bl	80034c4 <conectado>
		sprintf(cad,"IT %d\r\n",(int)it);
		res=buff->puts(buff,(BUFF_ITEM_t *)cad,strlen(cad));
		vTaskDelay(10000/portTICK_RATE_MS );

	}*/
}
 80036a4:	bf00      	nop
 80036a6:	3770      	adds	r7, #112	; 0x70
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	0800d5b0 	.word	0x0800d5b0
 80036b0:	0800d5b8 	.word	0x0800d5b8
 80036b4:	0800d5c4 	.word	0x0800d5c4
 80036b8:	0800d5d0 	.word	0x0800d5d0

080036bc <Task_Receive>:

void Task_Receive( void *pvParameters ){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b0a8      	sub	sp, #160	; 0xa0
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
#define buffer_length	128
    BUFF_ITEM_t  buffer[buffer_length];
    int buffer_ct,buffer_ct1;
    int crln_detect;

	it=0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


	while(1){
		it++;
 80036ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036ce:	3301      	adds	r3, #1
 80036d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		crln_detect=0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		buffer_ct=0;
 80036da:	2300      	movs	r3, #0
 80036dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		while(crln_detect<2){
 80036e0:	e037      	b.n	8003752 <Task_Receive+0x96>
	    	res=buff->get(buff_rx,&car);
 80036e2:	4b3d      	ldr	r3, [pc, #244]	; (80037d8 <Task_Receive+0x11c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a3c      	ldr	r2, [pc, #240]	; (80037dc <Task_Receive+0x120>)
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	f107 018b 	add.w	r1, r7, #139	; 0x8b
 80036f0:	4610      	mov	r0, r2
 80036f2:	4798      	blx	r3
 80036f4:	4603      	mov	r3, r0
 80036f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	    	buffer[buffer_ct++]=car;
 80036fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8003704:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8003708:	33a0      	adds	r3, #160	; 0xa0
 800370a:	443b      	add	r3, r7
 800370c:	f803 2c98 	strb.w	r2, [r3, #-152]
	    	if (buffer_ct>1){
 8003710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003714:	2b01      	cmp	r3, #1
 8003716:	dd1c      	ble.n	8003752 <Task_Receive+0x96>

	    		if ((buffer[buffer_ct-2]=='\r')&&(buffer[buffer_ct-1]=='\n')) // \r\n detection end of line
 8003718:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800371c:	3b02      	subs	r3, #2
 800371e:	33a0      	adds	r3, #160	; 0xa0
 8003720:	443b      	add	r3, r7
 8003722:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8003726:	2b0d      	cmp	r3, #13
 8003728:	d10c      	bne.n	8003744 <Task_Receive+0x88>
 800372a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800372e:	3b01      	subs	r3, #1
 8003730:	33a0      	adds	r3, #160	; 0xa0
 8003732:	443b      	add	r3, r7
 8003734:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8003738:	2b0a      	cmp	r3, #10
 800373a:	d103      	bne.n	8003744 <Task_Receive+0x88>
					crln_detect=2;
 800373c:	2302      	movs	r3, #2
 800373e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003742:	e006      	b.n	8003752 <Task_Receive+0x96>
				else
					if ((buffer_ct)==buffer_length)  // line out of limits --> error
 8003744:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d102      	bne.n	8003752 <Task_Receive+0x96>
						crln_detect=3;
 800374c:	2303      	movs	r3, #3
 800374e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(crln_detect<2){
 8003752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003756:	2b01      	cmp	r3, #1
 8003758:	ddc3      	ble.n	80036e2 <Task_Receive+0x26>
	    	}

		}

		// prepare reception buffer from ESP
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 800375a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800375e:	4920      	ldr	r1, [pc, #128]	; (80037e0 <Task_Receive+0x124>)
 8003760:	4820      	ldr	r0, [pc, #128]	; (80037e4 <Task_Receive+0x128>)
 8003762:	f002 fb90 	bl	8005e86 <HAL_UART_Receive_DMA>
		// send line (command) to ESP
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,buffer,buffer_ct,1000);
 8003766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800376a:	b29a      	uxth	r2, r3
 800376c:	f107 0108 	add.w	r1, r7, #8
 8003770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003774:	481b      	ldr	r0, [pc, #108]	; (80037e4 <Task_Receive+0x128>)
 8003776:	f002 faf4 	bl	8005d62 <HAL_UART_Transmit>
 800377a:	4603      	mov	r3, r0
 800377c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		// wait a bit time
		osDelay(500);
 8003780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003784:	f003 f9c7 	bl	8006b16 <osDelay>
		//stop reception probably all data are in dma buffer
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8003788:	4816      	ldr	r0, [pc, #88]	; (80037e4 <Task_Receive+0x128>)
 800378a:	f002 fbac 	bl	8005ee6 <HAL_UART_DMAStop>

		// send to console ESP answer.
		buffer_ct1=HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 800378e:	4815      	ldr	r0, [pc, #84]	; (80037e4 <Task_Receive+0x128>)
 8003790:	f000 fad5 	bl	8003d3e <HAL_DMA_getcounter>
 8003794:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		buffer_ct=0;
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while (buffer_ct<buffer_ct1)
 800379e:	e010      	b.n	80037c2 <Task_Receive+0x106>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <Task_Receive+0x11c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <Task_Receive+0x11c>)
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037ae:	1c59      	adds	r1, r3, #1
 80037b0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80037b4:	490a      	ldr	r1, [pc, #40]	; (80037e0 <Task_Receive+0x124>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	4619      	mov	r1, r3
 80037ba:	4790      	blx	r2
 80037bc:	4603      	mov	r3, r0
 80037be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (buffer_ct<buffer_ct1)
 80037c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80037c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ca:	429a      	cmp	r2, r3
 80037cc:	dbe8      	blt.n	80037a0 <Task_Receive+0xe4>
		// wait a bit time
		osDelay(1);
 80037ce:	2001      	movs	r0, #1
 80037d0:	f003 f9a1 	bl	8006b16 <osDelay>
	while(1){
 80037d4:	e779      	b.n	80036ca <Task_Receive+0xe>
 80037d6:	bf00      	nop
 80037d8:	20001d44 	.word	0x20001d44
 80037dc:	20001d48 	.word	0x20001d48
 80037e0:	2000098c 	.word	0x2000098c
 80037e4:	200007dc 	.word	0x200007dc

080037e8 <BUFF_is_empty>:
#include <task.h>
#include <math.h>

/////////////////////////////////////////////////////////////////////////////////////// BUFFER sin proteccion

uint32_t BUFF_is_empty(BUFF_BUFFER_t * buffer){
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==0);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <BUFF_is_full>:

uint32_t BUFF_is_full(BUFF_BUFFER_t * buffer){
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==buffer->size);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	429a      	cmp	r2, r3
 800381c:	bf0c      	ite	eq
 800381e:	2301      	moveq	r3, #1
 8003820:	2300      	movne	r3, #0
 8003822:	b2db      	uxtb	r3, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <BUFF_inserta>:

uint32_t BUFF_inserta(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item){
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]

	if (!buffer->isfull(buffer)){
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d119      	bne.n	800387e <BUFF_inserta+0x4e>
		buffer->buff[buffer->cabeza]=item;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	4413      	add	r3, r2
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	701a      	strb	r2, [r3, #0]
		buffer->cabeza=((buffer->cabeza)+1)%(buffer->size);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	3301      	adds	r3, #1
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6a12      	ldr	r2, [r2, #32]
 8003862:	fbb3 f1f2 	udiv	r1, r3, r2
 8003866:	fb01 f202 	mul.w	r2, r1, r2
 800386a:	1a9a      	subs	r2, r3, r2
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	619a      	str	r2, [r3, #24]
		buffer->n_elem++;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
		return 1;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <BUFF_inserta+0x50>
	} else return 0;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <BUFF_extrae>:

uint32_t BUFF_extrae(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]

	if (!buffer->isempty(buffer)){
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11a      	bne.n	80038d6 <BUFF_extrae+0x4e>
			*item=buffer->buff[buffer->cola];
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	701a      	strb	r2, [r3, #0]
			buffer->cola=(buffer->cola+1)%(buffer->size);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6a12      	ldr	r2, [r2, #32]
 80038ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80038be:	fb01 f202 	mul.w	r2, r1, r2
 80038c2:	1a9a      	subs	r2, r3, r2
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	61da      	str	r2, [r3, #28]
			buffer->n_elem--;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28

	} else return 0;

   return 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <BUFF_extrae+0x50>
	} else return 0;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <BUFF_extrae_prot>:

uint32_t BUFF_extrae_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item)
{ //variable condicion
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
	int it;

	it=0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 80038ee:	bf00      	nop
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f242 7110 	movw	r1, #10000	; 0x2710
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fbc7 	bl	800708c <xQueueSemaphoreTake>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d1f5      	bne.n	80038f0 <BUFF_extrae_prot+0x10>
	 // lock
	while(!BUFF_extrae(buffer,item)){
 8003904:	e017      	b.n	8003936 <BUFF_extrae_prot+0x56>
			 xSemaphoreGive(buffer->xSem);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6958      	ldr	r0, [r3, #20]
 800390a:	2300      	movs	r3, #0
 800390c:	2200      	movs	r2, #0
 800390e:	2100      	movs	r1, #0
 8003910:	f003 fabe 	bl	8006e90 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8003914:	2064      	movs	r0, #100	; 0x64
 8003916:	f003 ff5b 	bl	80077d0 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800391a:	bf00      	nop
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f242 7110 	movw	r1, #10000	; 0x2710
 8003924:	4618      	mov	r0, r3
 8003926:	f003 fbb1 	bl	800708c <xQueueSemaphoreTake>
 800392a:	4603      	mov	r3, r0
 800392c:	2b01      	cmp	r3, #1
 800392e:	d1f5      	bne.n	800391c <BUFF_extrae_prot+0x3c>
	 		 it++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
	while(!BUFF_extrae(buffer,item)){
 8003936:	6839      	ldr	r1, [r7, #0]
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ffa5 	bl	8003888 <BUFF_extrae>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0e0      	beq.n	8003906 <BUFF_extrae_prot+0x26>
	}
	xSemaphoreGive(buffer->xSem);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6958      	ldr	r0, [r3, #20]
 8003948:	2300      	movs	r3, #0
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	f003 fa9f 	bl	8006e90 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 8003952:	2301      	movs	r3, #1
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <BUFF_inserta_prot>:
uint32_t BUFF_inserta_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item)
{ //variable condicion
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
	int it;

	it=0;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800396c:	bf00      	nop
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f242 7110 	movw	r1, #10000	; 0x2710
 8003976:	4618      	mov	r0, r3
 8003978:	f003 fb88 	bl	800708c <xQueueSemaphoreTake>
 800397c:	4603      	mov	r3, r0
 800397e:	2b01      	cmp	r3, #1
 8003980:	d1f5      	bne.n	800396e <BUFF_inserta_prot+0x12>
	 // lock
	while(!BUFF_inserta(buffer,item)){
 8003982:	e017      	b.n	80039b4 <BUFF_inserta_prot+0x58>
	 		 xSemaphoreGive(buffer->xSem);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6958      	ldr	r0, [r3, #20]
 8003988:	2300      	movs	r3, #0
 800398a:	2200      	movs	r2, #0
 800398c:	2100      	movs	r1, #0
 800398e:	f003 fa7f 	bl	8006e90 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8003992:	2064      	movs	r0, #100	; 0x64
 8003994:	f003 ff1c 	bl	80077d0 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8003998:	bf00      	nop
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f242 7110 	movw	r1, #10000	; 0x2710
 80039a2:	4618      	mov	r0, r3
 80039a4:	f003 fb72 	bl	800708c <xQueueSemaphoreTake>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d1f5      	bne.n	800399a <BUFF_inserta_prot+0x3e>
	 		 it++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3301      	adds	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
	while(!BUFF_inserta(buffer,item)){
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff39 	bl	8003830 <BUFF_inserta>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0df      	beq.n	8003984 <BUFF_inserta_prot+0x28>
	}
	xSemaphoreGive(buffer->xSem);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6958      	ldr	r0, [r3, #20]
 80039c8:	2300      	movs	r3, #0
 80039ca:	2200      	movs	r2, #0
 80039cc:	2100      	movs	r1, #0
 80039ce:	f003 fa5f 	bl	8006e90 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 80039d2:	2301      	movs	r3, #1
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <BUFF_inserta_cad>:

uint32_t BUFF_inserta_cad(BUFF_BUFFER_t * buffer,BUFF_ITEM_t * cad,uint32_t nitems)
{ //variable condicion
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]

	int it;
	uint32_t res;
	for (it=0;it<nitems;it++)
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	e010      	b.n	8003a10 <BUFF_inserta_cad+0x34>
	{
		res=BUFF_inserta_prot(buffer,cad[it]);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	4413      	add	r3, r2
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	4619      	mov	r1, r3
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff ffaf 	bl	800395c <BUFF_inserta_prot>
 80039fe:	6138      	str	r0, [r7, #16]
		if (!res) return it;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <BUFF_inserta_cad+0x2e>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	e007      	b.n	8003a1a <BUFF_inserta_cad+0x3e>
	for (it=0;it<nitems;it++)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d8ea      	bhi.n	80039ee <BUFF_inserta_cad+0x12>
	}
	return 1; // siempre tiene éxito
 8003a18:	2301      	movs	r3, #1
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <bufferCreat>:
} BUFF_BUFFER_t;
*/


// API
BUFF_BUFFER_t * bufferCreat(int size){
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	BUFF_BUFFER_t * tmp;
	void * bff;

	tmp=malloc(sizeof(BUFF_BUFFER_t));
 8003a2c:	202c      	movs	r0, #44	; 0x2c
 8003a2e:	f005 fb15 	bl	800905c <malloc>
 8003a32:	4603      	mov	r3, r0
 8003a34:	60fb      	str	r3, [r7, #12]
	if (tmp){ // enought for structure
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d03d      	beq.n	8003ab8 <bufferCreat+0x94>

		bff=malloc(sizeof(uint8_t)*size);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f005 fb0c 	bl	800905c <malloc>
 8003a44:	4603      	mov	r3, r0
 8003a46:	60bb      	str	r3, [r7, #8]
		if (bff){ //enought for buffer
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d031      	beq.n	8003ab2 <bufferCreat+0x8e>
			tmp->xSem=xSemaphoreCreateMutex();
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f003 fa05 	bl	8006e5e <xQueueCreateMutex>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	615a      	str	r2, [r3, #20]
			if (!tmp->xSem){
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d107      	bne.n	8003a72 <bufferCreat+0x4e>
				free(bff);
 8003a62:	68b8      	ldr	r0, [r7, #8]
 8003a64:	f005 fb02 	bl	800906c <free>
				free(tmp);
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f005 faff 	bl	800906c <free>
				return NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e023      	b.n	8003aba <bufferCreat+0x96>
			};
            tmp->buff=bff;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24
			tmp->cabeza=0;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	619a      	str	r2, [r3, #24]
			tmp->cola=0;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	61da      	str	r2, [r3, #28]
			tmp->size=size;
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	621a      	str	r2, [r3, #32]
			tmp->n_elem=0;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
			tmp->get=(void*)BUFF_extrae_prot;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a0c      	ldr	r2, [pc, #48]	; (8003ac4 <bufferCreat+0xa0>)
 8003a94:	601a      	str	r2, [r3, #0]
			tmp->put=(void*)BUFF_inserta_prot;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <bufferCreat+0xa4>)
 8003a9a:	605a      	str	r2, [r3, #4]
			tmp->puts=(void*)BUFF_inserta_cad;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <bufferCreat+0xa8>)
 8003aa0:	611a      	str	r2, [r3, #16]

			tmp->isfull=(void*)BUFF_is_full;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <bufferCreat+0xac>)
 8003aa6:	60da      	str	r2, [r3, #12]
			tmp->isempty=(void*)BUFF_is_empty;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <bufferCreat+0xb0>)
 8003aac:	609a      	str	r2, [r3, #8]
			return tmp;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	e003      	b.n	8003aba <bufferCreat+0x96>
		}
		else
			free(tmp);
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f005 fada 	bl	800906c <free>
	}
	return NULL;
 8003ab8:	2300      	movs	r3, #0

}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	080038e1 	.word	0x080038e1
 8003ac8:	0800395d 	.word	0x0800395d
 8003acc:	080039dd 	.word	0x080039dd
 8003ad0:	0800380b 	.word	0x0800380b
 8003ad4:	080037e9 	.word	0x080037e9

08003ad8 <makeFreeRtosPriority>:
uint8_t buffer_DMA_1[buffer_SIZE];
uint8_t buffer_DMA_2[buffer_SIZE];


unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	80fb      	strh	r3, [r7, #6]
unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]

if (priority != osPriorityError) {
 8003ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aea:	2b84      	cmp	r3, #132	; 0x84
 8003aec:	d005      	beq.n	8003afa <makeFreeRtosPriority+0x22>
fpriority += (priority - osPriorityIdle);
 8003aee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	3303      	adds	r3, #3
 8003af8:	60fb      	str	r3, [r7, #12]
}

return fpriority;
 8003afa:	68fb      	ldr	r3, [r7, #12]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <_write>:

int _write(int file, char *ptr, int len){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++){
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	e00a      	b.n	8003b30 <_write+0x28>
       //ITM_SendChar( ptr++ );
       HAL_UART_Transmit(&huart2, ptr,len,1000);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4807      	ldr	r0, [pc, #28]	; (8003b44 <_write+0x3c>)
 8003b26:	f002 f91c 	bl	8005d62 <HAL_UART_Transmit>
    for (DataIdx = 0; DataIdx < len; DataIdx++){
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	dbf0      	blt.n	8003b1a <_write+0x12>
    }
    return len;
 8003b38:	687b      	ldr	r3, [r7, #4]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000820 	.word	0x20000820

08003b48 <UART_EndRxTransfer>:
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */

static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b095      	sub	sp, #84	; 0x54
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5a:	e853 3f00 	ldrex	r3, [r3]
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b70:	643a      	str	r2, [r7, #64]	; 0x40
 8003b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e5      	bne.n	8003b50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3314      	adds	r3, #20
 8003b8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e5      	bne.n	8003b84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d119      	bne.n	8003bf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f023 0310 	bic.w	r3, r3, #16
 8003bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003be0:	61ba      	str	r2, [r7, #24]
 8003be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6979      	ldr	r1, [r7, #20]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	613b      	str	r3, [r7, #16]
   return(result);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e5      	bne.n	8003bc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c02:	bf00      	nop
 8003c04:	3754      	adds	r7, #84	; 0x54
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_DMA_Abort_PAS>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_PAS(DMA_HandleTypeDef *hdma)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b085      	sub	sp, #20
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	60fb      	str	r3, [r7, #12]

  //uint32_t tickstart = HAL_GetTick();

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d008      	beq.n	8003c3a <HAL_DMA_Abort_PAS+0x2c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2280      	movs	r2, #128	; 0x80
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e036      	b.n	8003ca8 <HAL_DMA_Abort_PAS+0x9a>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0216 	bic.w	r2, r2, #22
 8003c48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c58:	615a      	str	r2, [r3, #20]

    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <HAL_DMA_Abort_PAS+0x5c>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <HAL_DMA_Abort_PAS+0x6c>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0208 	bic.w	r2, r2, #8
 8003c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
        return HAL_TIMEOUT;
      }
    }*/

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	223f      	movs	r2, #63	; 0x3f
 8003c90:	409a      	lsls	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	609a      	str	r2, [r3, #8]

    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_UART_DMAStop_PAS>:

HAL_StatusTypeDef HAL_UART_DMAStop_PAS(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */


  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b22      	cmp	r3, #34	; 0x22
 8003ce0:	d128      	bne.n	8003d34 <HAL_UART_DMAStop_PAS+0x80>
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d025      	beq.n	8003d34 <HAL_UART_DMAStop_PAS+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3314      	adds	r3, #20
 8003cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	e853 3f00 	ldrex	r3, [r3]
 8003cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfe:	623b      	str	r3, [r7, #32]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3314      	adds	r3, #20
 8003d06:	6a3a      	ldr	r2, [r7, #32]
 8003d08:	61fa      	str	r2, [r7, #28]
 8003d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	69b9      	ldr	r1, [r7, #24]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	617b      	str	r3, [r7, #20]
   return(result);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e5      	bne.n	8003ce8 <HAL_UART_DMAStop_PAS+0x34>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <HAL_UART_DMAStop_PAS+0x7a>
    {
      HAL_DMA_Abort_PAS(huart->hdmarx);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff70 	bl	8003c0e <HAL_DMA_Abort_PAS>
    }
    UART_EndRxTransfer(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ff0a 	bl	8003b48 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3728      	adds	r7, #40	; 0x28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_DMA_getcounter>:



uint32_t HAL_DMA_getcounter(UART_HandleTypeDef *huart){
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
	return huart->hdmarx->Instance->NDTR;}
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d60:	480d      	ldr	r0, [pc, #52]	; (8003d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d62:	490e      	ldr	r1, [pc, #56]	; (8003d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d64:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d68:	e002      	b.n	8003d70 <LoopCopyDataInit>

08003d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d6e:	3304      	adds	r3, #4

08003d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d74:	d3f9      	bcc.n	8003d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d76:	4a0b      	ldr	r2, [pc, #44]	; (8003da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d78:	4c0b      	ldr	r4, [pc, #44]	; (8003da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d7c:	e001      	b.n	8003d82 <LoopFillZerobss>

08003d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d80:	3204      	adds	r2, #4

08003d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d84:	d3fb      	bcc.n	8003d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d86:	f7ff f8a9 	bl	8002edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d8a:	f005 f93f 	bl	800900c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d8e:	f7fe fc4f 	bl	8002630 <main>
  bx  lr    
 8003d92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d9c:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 8003da0:	0800dac4 	.word	0x0800dac4
  ldr r2, =_sbss
 8003da4:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 8003da8:	20005eb4 	.word	0x20005eb4

08003dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dac:	e7fe      	b.n	8003dac <ADC_IRQHandler>
	...

08003db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003db4:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <HAL_Init+0x40>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a0d      	ldr	r2, [pc, #52]	; (8003df0 <HAL_Init+0x40>)
 8003dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_Init+0x40>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <HAL_Init+0x40>)
 8003dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dcc:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_Init+0x40>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a07      	ldr	r2, [pc, #28]	; (8003df0 <HAL_Init+0x40>)
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd8:	2003      	movs	r0, #3
 8003dda:	f000 fd1d 	bl	8004818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dde:	200f      	movs	r0, #15
 8003de0:	f000 f808 	bl	8003df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003de4:	f7fe fe48 	bl	8002a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023c00 	.word	0x40023c00

08003df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_InitTick+0x54>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <HAL_InitTick+0x58>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4619      	mov	r1, r3
 8003e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fd35 	bl	8004882 <HAL_SYSTICK_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e00e      	b.n	8003e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b0f      	cmp	r3, #15
 8003e26:	d80a      	bhi.n	8003e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e30:	f000 fcfd 	bl	800482e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e34:	4a06      	ldr	r2, [pc, #24]	; (8003e50 <HAL_InitTick+0x5c>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000018 	.word	0x20000018
 8003e4c:	200002e4 	.word	0x200002e4
 8003e50:	200002e0 	.word	0x200002e0

08003e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_IncTick+0x20>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_IncTick+0x24>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	4a04      	ldr	r2, [pc, #16]	; (8003e78 <HAL_IncTick+0x24>)
 8003e66:	6013      	str	r3, [r2, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	200002e4 	.word	0x200002e4
 8003e78:	2000214c 	.word	0x2000214c

08003e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <HAL_GetTick+0x14>)
 8003e82:	681b      	ldr	r3, [r3, #0]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	2000214c 	.word	0x2000214c

08003e94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e033      	b.n	8003f12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fe fe0c 	bl	8002ad0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d118      	bne.n	8003f04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003eda:	f023 0302 	bic.w	r3, r3, #2
 8003ede:	f043 0202 	orr.w	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 faca 	bl	8004480 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
 8003f02:	e001      	b.n	8003f08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_ADC_Start+0x1a>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e097      	b.n	8004066 <HAL_ADC_Start+0x14a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d018      	beq.n	8003f7e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f5c:	4b45      	ldr	r3, [pc, #276]	; (8004074 <HAL_ADC_Start+0x158>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a45      	ldr	r2, [pc, #276]	; (8004078 <HAL_ADC_Start+0x15c>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	0c9a      	lsrs	r2, r3, #18
 8003f68:	4613      	mov	r3, r2
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4413      	add	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f70:	e002      	b.n	8003f78 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f9      	bne.n	8003f72 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d15f      	bne.n	800404c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d007      	beq.n	8003fbe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d106      	bne.n	8003fda <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd0:	f023 0206 	bic.w	r2, r3, #6
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44
 8003fd8:	e002      	b.n	8003fe0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_ADC_Start+0x160>)
 8003fea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ff4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d129      	bne.n	8004064 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	e020      	b.n	8004064 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a16      	ldr	r2, [pc, #88]	; (8004080 <HAL_ADC_Start+0x164>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d11b      	bne.n	8004064 <HAL_ADC_Start+0x148>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d114      	bne.n	8004064 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004048:	609a      	str	r2, [r3, #8]
 800404a:	e00b      	b.n	8004064 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f043 0210 	orr.w	r2, r3, #16
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000018 	.word	0x20000018
 8004078:	431bde83 	.word	0x431bde83
 800407c:	40012300 	.word	0x40012300
 8004080:	40012000 	.word	0x40012000

08004084 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_ADC_Stop+0x16>
 8004096:	2302      	movs	r3, #2
 8004098:	e021      	b.n	80040de <HAL_ADC_Stop+0x5a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	f043 0201 	orr.w	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004106:	d113      	bne.n	8004130 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004116:	d10b      	bne.n	8004130 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e063      	b.n	80041f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004130:	f7ff fea4 	bl	8003e7c <HAL_GetTick>
 8004134:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004136:	e021      	b.n	800417c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d01d      	beq.n	800417c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <HAL_ADC_PollForConversion+0x6c>
 8004146:	f7ff fe99 	bl	8003e7c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d212      	bcs.n	800417c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d00b      	beq.n	800417c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	f043 0204 	orr.w	r2, r3, #4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e03d      	b.n	80041f8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b02      	cmp	r3, #2
 8004188:	d1d6      	bne.n	8004138 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f06f 0212 	mvn.w	r2, #18
 8004192:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d123      	bne.n	80041f6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d11f      	bne.n	80041f6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d111      	bne.n	80041f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f043 0201 	orr.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x1c>
 8004234:	2302      	movs	r3, #2
 8004236:	e113      	b.n	8004460 <HAL_ADC_ConfigChannel+0x244>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b09      	cmp	r3, #9
 8004246:	d925      	bls.n	8004294 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68d9      	ldr	r1, [r3, #12]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	3b1e      	subs	r3, #30
 800425e:	2207      	movs	r2, #7
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43da      	mvns	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	400a      	ands	r2, r1
 800426c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68d9      	ldr	r1, [r3, #12]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	4618      	mov	r0, r3
 8004280:	4603      	mov	r3, r0
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4403      	add	r3, r0
 8004286:	3b1e      	subs	r3, #30
 8004288:	409a      	lsls	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	e022      	b.n	80042da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6919      	ldr	r1, [r3, #16]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	2207      	movs	r2, #7
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43da      	mvns	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	400a      	ands	r2, r1
 80042b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6919      	ldr	r1, [r3, #16]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	4618      	mov	r0, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4403      	add	r3, r0
 80042d0:	409a      	lsls	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d824      	bhi.n	800432c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	3b05      	subs	r3, #5
 80042f4:	221f      	movs	r2, #31
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43da      	mvns	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	400a      	ands	r2, r1
 8004302:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	4618      	mov	r0, r3
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	3b05      	subs	r3, #5
 800431e:	fa00 f203 	lsl.w	r2, r0, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	635a      	str	r2, [r3, #52]	; 0x34
 800432a:	e04c      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b0c      	cmp	r3, #12
 8004332:	d824      	bhi.n	800437e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	3b23      	subs	r3, #35	; 0x23
 8004346:	221f      	movs	r2, #31
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43da      	mvns	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	400a      	ands	r2, r1
 8004354:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	4618      	mov	r0, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	3b23      	subs	r3, #35	; 0x23
 8004370:	fa00 f203 	lsl.w	r2, r0, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
 800437c:	e023      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	3b41      	subs	r3, #65	; 0x41
 8004390:	221f      	movs	r2, #31
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	400a      	ands	r2, r1
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	4618      	mov	r0, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	3b41      	subs	r3, #65	; 0x41
 80043ba:	fa00 f203 	lsl.w	r2, r0, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043c6:	4b29      	ldr	r3, [pc, #164]	; (800446c <HAL_ADC_ConfigChannel+0x250>)
 80043c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a28      	ldr	r2, [pc, #160]	; (8004470 <HAL_ADC_ConfigChannel+0x254>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10f      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x1d8>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b12      	cmp	r3, #18
 80043da:	d10b      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <HAL_ADC_ConfigChannel+0x254>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d12b      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x23a>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1c      	ldr	r2, [pc, #112]	; (8004474 <HAL_ADC_ConfigChannel+0x258>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <HAL_ADC_ConfigChannel+0x1f4>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b11      	cmp	r3, #17
 800440e:	d122      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a11      	ldr	r2, [pc, #68]	; (8004474 <HAL_ADC_ConfigChannel+0x258>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d111      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <HAL_ADC_ConfigChannel+0x25c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a11      	ldr	r2, [pc, #68]	; (800447c <HAL_ADC_ConfigChannel+0x260>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	0c9a      	lsrs	r2, r3, #18
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004448:	e002      	b.n	8004450 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	3b01      	subs	r3, #1
 800444e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f9      	bne.n	800444a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	40012300 	.word	0x40012300
 8004470:	40012000 	.word	0x40012000
 8004474:	10000012 	.word	0x10000012
 8004478:	20000018 	.word	0x20000018
 800447c:	431bde83 	.word	0x431bde83

08004480 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004488:	4b79      	ldr	r3, [pc, #484]	; (8004670 <ADC_Init+0x1f0>)
 800448a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	021a      	lsls	r2, r3, #8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6899      	ldr	r1, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	4a58      	ldr	r2, [pc, #352]	; (8004674 <ADC_Init+0x1f4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004526:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6899      	ldr	r1, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6899      	ldr	r1, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	e00f      	b.n	800457e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800456c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800457c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0202 	bic.w	r2, r2, #2
 800458c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6899      	ldr	r1, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7e1b      	ldrb	r3, [r3, #24]
 8004598:	005a      	lsls	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01b      	beq.n	80045e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	3b01      	subs	r3, #1
 80045d8:	035a      	lsls	r2, r3, #13
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	e007      	b.n	80045f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	3b01      	subs	r3, #1
 8004610:	051a      	lsls	r2, r3, #20
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6899      	ldr	r1, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004636:	025a      	lsls	r2, r3, #9
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6899      	ldr	r1, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	029a      	lsls	r2, r3, #10
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40012300 	.word	0x40012300
 8004674:	0f000001 	.word	0x0f000001

08004678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <__NVIC_SetPriorityGrouping+0x44>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004694:	4013      	ands	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046aa:	4a04      	ldr	r2, [pc, #16]	; (80046bc <__NVIC_SetPriorityGrouping+0x44>)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	60d3      	str	r3, [r2, #12]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <__NVIC_GetPriorityGrouping+0x18>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	0a1b      	lsrs	r3, r3, #8
 80046ca:	f003 0307 	and.w	r3, r3, #7
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	db0b      	blt.n	8004706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	f003 021f 	and.w	r2, r3, #31
 80046f4:	4907      	ldr	r1, [pc, #28]	; (8004714 <__NVIC_EnableIRQ+0x38>)
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	2001      	movs	r0, #1
 80046fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000e100 	.word	0xe000e100

08004718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004728:	2b00      	cmp	r3, #0
 800472a:	db0a      	blt.n	8004742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	490c      	ldr	r1, [pc, #48]	; (8004764 <__NVIC_SetPriority+0x4c>)
 8004732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004736:	0112      	lsls	r2, r2, #4
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	440b      	add	r3, r1
 800473c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004740:	e00a      	b.n	8004758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	4908      	ldr	r1, [pc, #32]	; (8004768 <__NVIC_SetPriority+0x50>)
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	3b04      	subs	r3, #4
 8004750:	0112      	lsls	r2, r2, #4
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	440b      	add	r3, r1
 8004756:	761a      	strb	r2, [r3, #24]
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000e100 	.word	0xe000e100
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f1c3 0307 	rsb	r3, r3, #7
 8004786:	2b04      	cmp	r3, #4
 8004788:	bf28      	it	cs
 800478a:	2304      	movcs	r3, #4
 800478c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3304      	adds	r3, #4
 8004792:	2b06      	cmp	r3, #6
 8004794:	d902      	bls.n	800479c <NVIC_EncodePriority+0x30>
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3b03      	subs	r3, #3
 800479a:	e000      	b.n	800479e <NVIC_EncodePriority+0x32>
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43da      	mvns	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	401a      	ands	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047b4:	f04f 31ff 	mov.w	r1, #4294967295
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	43d9      	mvns	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c4:	4313      	orrs	r3, r2
         );
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3724      	adds	r7, #36	; 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e4:	d301      	bcc.n	80047ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047e6:	2301      	movs	r3, #1
 80047e8:	e00f      	b.n	800480a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <SysTick_Config+0x40>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047f2:	210f      	movs	r1, #15
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	f7ff ff8e 	bl	8004718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <SysTick_Config+0x40>)
 80047fe:	2200      	movs	r2, #0
 8004800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004802:	4b04      	ldr	r3, [pc, #16]	; (8004814 <SysTick_Config+0x40>)
 8004804:	2207      	movs	r2, #7
 8004806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	e000e010 	.word	0xe000e010

08004818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff29 	bl	8004678 <__NVIC_SetPriorityGrouping>
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	4603      	mov	r3, r0
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004840:	f7ff ff3e 	bl	80046c0 <__NVIC_GetPriorityGrouping>
 8004844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7ff ff8e 	bl	800476c <NVIC_EncodePriority>
 8004850:	4602      	mov	r2, r0
 8004852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff5d 	bl	8004718 <__NVIC_SetPriority>
}
 800485e:	bf00      	nop
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	4603      	mov	r3, r0
 800486e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff ff31 	bl	80046dc <__NVIC_EnableIRQ>
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff ffa2 	bl	80047d4 <SysTick_Config>
 8004890:	4603      	mov	r3, r0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048a8:	f7ff fae8 	bl	8003e7c <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e099      	b.n	80049ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d8:	e00f      	b.n	80048fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048da:	f7ff facf 	bl	8003e7c <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d908      	bls.n	80048fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2203      	movs	r2, #3
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e078      	b.n	80049ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e8      	bne.n	80048da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4b38      	ldr	r3, [pc, #224]	; (80049f4 <HAL_DMA_Init+0x158>)
 8004914:	4013      	ands	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	2b04      	cmp	r3, #4
 8004952:	d107      	bne.n	8004964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	4313      	orrs	r3, r2
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0307 	bic.w	r3, r3, #7
 800497a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b04      	cmp	r3, #4
 800498c:	d117      	bne.n	80049be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fadf 	bl	8004f64 <DMA_CheckFifoParam>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2240      	movs	r2, #64	; 0x40
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049ba:	2301      	movs	r3, #1
 80049bc:	e016      	b.n	80049ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa96 	bl	8004ef8 <DMA_CalcBaseAndBitshift>
 80049cc:	4603      	mov	r3, r0
 80049ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	223f      	movs	r2, #63	; 0x3f
 80049d6:	409a      	lsls	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	f010803f 	.word	0xf010803f

080049f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_DMA_Start_IT+0x26>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e040      	b.n	8004aa0 <HAL_DMA_Start_IT+0xa8>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d12f      	bne.n	8004a92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fa28 	bl	8004e9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a50:	223f      	movs	r2, #63	; 0x3f
 8004a52:	409a      	lsls	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0216 	orr.w	r2, r2, #22
 8004a66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e005      	b.n	8004a9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ab6:	f7ff f9e1 	bl	8003e7c <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d008      	beq.n	8004ada <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2280      	movs	r2, #128	; 0x80
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e052      	b.n	8004b80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0216 	bic.w	r2, r2, #22
 8004ae8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <HAL_DMA_Abort+0x62>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0208 	bic.w	r2, r2, #8
 8004b18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b2a:	e013      	b.n	8004b54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b2c:	f7ff f9a6 	bl	8003e7c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b05      	cmp	r3, #5
 8004b38:	d90c      	bls.n	8004b54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2203      	movs	r2, #3
 8004b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e015      	b.n	8004b80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e4      	bne.n	8004b2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b66:	223f      	movs	r2, #63	; 0x3f
 8004b68:	409a      	lsls	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b94:	4b8e      	ldr	r3, [pc, #568]	; (8004dd0 <HAL_DMA_IRQHandler+0x248>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a8e      	ldr	r2, [pc, #568]	; (8004dd4 <HAL_DMA_IRQHandler+0x24c>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01a      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d013      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0204 	bic.w	r2, r2, #4
 8004bda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	2208      	movs	r2, #8
 8004be2:	409a      	lsls	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f043 0201 	orr.w	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d012      	beq.n	8004c2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c16:	2201      	movs	r2, #1
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	f043 0202 	orr.w	r2, r3, #2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	2204      	movs	r2, #4
 8004c30:	409a      	lsls	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d012      	beq.n	8004c60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00b      	beq.n	8004c60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f043 0204 	orr.w	r2, r3, #4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c64:	2210      	movs	r2, #16
 8004c66:	409a      	lsls	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d043      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03c      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c82:	2210      	movs	r2, #16
 8004c84:	409a      	lsls	r2, r3
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d018      	beq.n	8004cca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d108      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d024      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
 8004cb6:	e01f      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01b      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
 8004cc8:	e016      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d107      	bne.n	8004ce8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0208 	bic.w	r2, r2, #8
 8004ce6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 808f 	beq.w	8004e28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8087 	beq.w	8004e28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1e:	2220      	movs	r2, #32
 8004d20:	409a      	lsls	r2, r3
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d136      	bne.n	8004da0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0216 	bic.w	r2, r2, #22
 8004d40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <HAL_DMA_IRQHandler+0x1da>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0208 	bic.w	r2, r2, #8
 8004d70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d76:	223f      	movs	r2, #63	; 0x3f
 8004d78:	409a      	lsls	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d07e      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	4798      	blx	r3
        }
        return;
 8004d9e:	e079      	b.n	8004e94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01d      	beq.n	8004dea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10d      	bne.n	8004dd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d031      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
 8004dcc:	e02c      	b.n	8004e28 <HAL_DMA_IRQHandler+0x2a0>
 8004dce:	bf00      	nop
 8004dd0:	20000018 	.word	0x20000018
 8004dd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d023      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	4798      	blx	r3
 8004de8:	e01e      	b.n	8004e28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10f      	bne.n	8004e18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0210 	bic.w	r2, r2, #16
 8004e06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d032      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d022      	beq.n	8004e82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2205      	movs	r2, #5
 8004e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d307      	bcc.n	8004e70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f2      	bne.n	8004e54 <HAL_DMA_IRQHandler+0x2cc>
 8004e6e:	e000      	b.n	8004e72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	4798      	blx	r3
 8004e92:	e000      	b.n	8004e96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e94:	bf00      	nop
    }
  }
}
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b40      	cmp	r3, #64	; 0x40
 8004ec8:	d108      	bne.n	8004edc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004eda:	e007      	b.n	8004eec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	60da      	str	r2, [r3, #12]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	3b10      	subs	r3, #16
 8004f08:	4a14      	ldr	r2, [pc, #80]	; (8004f5c <DMA_CalcBaseAndBitshift+0x64>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	091b      	lsrs	r3, r3, #4
 8004f10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f12:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <DMA_CalcBaseAndBitshift+0x68>)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d909      	bls.n	8004f3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	1d1a      	adds	r2, r3, #4
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	659a      	str	r2, [r3, #88]	; 0x58
 8004f38:	e007      	b.n	8004f4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	aaaaaaab 	.word	0xaaaaaaab
 8004f60:	0800d608 	.word	0x0800d608

08004f64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d11f      	bne.n	8004fbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d856      	bhi.n	8005032 <DMA_CheckFifoParam+0xce>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <DMA_CheckFifoParam+0x28>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004faf 	.word	0x08004faf
 8004f94:	08004f9d 	.word	0x08004f9d
 8004f98:	08005033 	.word	0x08005033
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d046      	beq.n	8005036 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fac:	e043      	b.n	8005036 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fb6:	d140      	bne.n	800503a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fbc:	e03d      	b.n	800503a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc6:	d121      	bne.n	800500c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d837      	bhi.n	800503e <DMA_CheckFifoParam+0xda>
 8004fce:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <DMA_CheckFifoParam+0x70>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08004fe5 	.word	0x08004fe5
 8004fd8:	08004feb 	.word	0x08004feb
 8004fdc:	08004fe5 	.word	0x08004fe5
 8004fe0:	08004ffd 	.word	0x08004ffd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe8:	e030      	b.n	800504c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d025      	beq.n	8005042 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffa:	e022      	b.n	8005042 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005004:	d11f      	bne.n	8005046 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800500a:	e01c      	b.n	8005046 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d903      	bls.n	800501a <DMA_CheckFifoParam+0xb6>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d003      	beq.n	8005020 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005018:	e018      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
      break;
 800501e:	e015      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00e      	beq.n	800504a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      break;
 8005030:	e00b      	b.n	800504a <DMA_CheckFifoParam+0xe6>
      break;
 8005032:	bf00      	nop
 8005034:	e00a      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;
 8005036:	bf00      	nop
 8005038:	e008      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;
 800503a:	bf00      	nop
 800503c:	e006      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;
 800503e:	bf00      	nop
 8005040:	e004      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;
 8005042:	bf00      	nop
 8005044:	e002      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;   
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;
 800504a:	bf00      	nop
    }
  } 
  
  return status; 
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop

0800505c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800505c:	b480      	push	{r7}
 800505e:	b089      	sub	sp, #36	; 0x24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	e159      	b.n	800532c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005078:	2201      	movs	r2, #1
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4013      	ands	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	429a      	cmp	r2, r3
 8005092:	f040 8148 	bne.w	8005326 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d005      	beq.n	80050ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d130      	bne.n	8005110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	2203      	movs	r2, #3
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050e4:	2201      	movs	r2, #1
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 0201 	and.w	r2, r3, #1
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	2b03      	cmp	r3, #3
 800511a:	d017      	beq.n	800514c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2203      	movs	r2, #3
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d123      	bne.n	80051a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	08da      	lsrs	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3208      	adds	r2, #8
 8005160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	220f      	movs	r2, #15
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4013      	ands	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	08da      	lsrs	r2, r3, #3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3208      	adds	r2, #8
 800519a:	69b9      	ldr	r1, [r7, #24]
 800519c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	2203      	movs	r2, #3
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 0203 	and.w	r2, r3, #3
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80a2 	beq.w	8005326 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	4b57      	ldr	r3, [pc, #348]	; (8005344 <HAL_GPIO_Init+0x2e8>)
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ea:	4a56      	ldr	r2, [pc, #344]	; (8005344 <HAL_GPIO_Init+0x2e8>)
 80051ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051f0:	6453      	str	r3, [r2, #68]	; 0x44
 80051f2:	4b54      	ldr	r3, [pc, #336]	; (8005344 <HAL_GPIO_Init+0x2e8>)
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051fe:	4a52      	ldr	r2, [pc, #328]	; (8005348 <HAL_GPIO_Init+0x2ec>)
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	089b      	lsrs	r3, r3, #2
 8005204:	3302      	adds	r3, #2
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	220f      	movs	r2, #15
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a49      	ldr	r2, [pc, #292]	; (800534c <HAL_GPIO_Init+0x2f0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d019      	beq.n	800525e <HAL_GPIO_Init+0x202>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a48      	ldr	r2, [pc, #288]	; (8005350 <HAL_GPIO_Init+0x2f4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d013      	beq.n	800525a <HAL_GPIO_Init+0x1fe>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a47      	ldr	r2, [pc, #284]	; (8005354 <HAL_GPIO_Init+0x2f8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00d      	beq.n	8005256 <HAL_GPIO_Init+0x1fa>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a46      	ldr	r2, [pc, #280]	; (8005358 <HAL_GPIO_Init+0x2fc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <HAL_GPIO_Init+0x1f6>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a45      	ldr	r2, [pc, #276]	; (800535c <HAL_GPIO_Init+0x300>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d101      	bne.n	800524e <HAL_GPIO_Init+0x1f2>
 800524a:	2304      	movs	r3, #4
 800524c:	e008      	b.n	8005260 <HAL_GPIO_Init+0x204>
 800524e:	2307      	movs	r3, #7
 8005250:	e006      	b.n	8005260 <HAL_GPIO_Init+0x204>
 8005252:	2303      	movs	r3, #3
 8005254:	e004      	b.n	8005260 <HAL_GPIO_Init+0x204>
 8005256:	2302      	movs	r3, #2
 8005258:	e002      	b.n	8005260 <HAL_GPIO_Init+0x204>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_GPIO_Init+0x204>
 800525e:	2300      	movs	r3, #0
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	f002 0203 	and.w	r2, r2, #3
 8005266:	0092      	lsls	r2, r2, #2
 8005268:	4093      	lsls	r3, r2
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4313      	orrs	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005270:	4935      	ldr	r1, [pc, #212]	; (8005348 <HAL_GPIO_Init+0x2ec>)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	089b      	lsrs	r3, r3, #2
 8005276:	3302      	adds	r3, #2
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800527e:	4b38      	ldr	r3, [pc, #224]	; (8005360 <HAL_GPIO_Init+0x304>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	43db      	mvns	r3, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4013      	ands	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052a2:	4a2f      	ldr	r2, [pc, #188]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052a8:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4013      	ands	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052cc:	4a24      	ldr	r2, [pc, #144]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052d2:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	43db      	mvns	r3, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052f6:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052fc:	4b18      	ldr	r3, [pc, #96]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	43db      	mvns	r3, r3
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	4013      	ands	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005320:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <HAL_GPIO_Init+0x304>)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b0f      	cmp	r3, #15
 8005330:	f67f aea2 	bls.w	8005078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	3724      	adds	r7, #36	; 0x24
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800
 8005348:	40013800 	.word	0x40013800
 800534c:	40020000 	.word	0x40020000
 8005350:	40020400 	.word	0x40020400
 8005354:	40020800 	.word	0x40020800
 8005358:	40020c00 	.word	0x40020c00
 800535c:	40021000 	.word	0x40021000
 8005360:	40013c00 	.word	0x40013c00

08005364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	807b      	strh	r3, [r7, #2]
 8005370:	4613      	mov	r3, r2
 8005372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005374:	787b      	ldrb	r3, [r7, #1]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800537a:	887a      	ldrh	r2, [r7, #2]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005380:	e003      	b.n	800538a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005382:	887b      	ldrh	r3, [r7, #2]
 8005384:	041a      	lsls	r2, r3, #16
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	619a      	str	r2, [r3, #24]
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e267      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d075      	beq.n	80054a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053b6:	4b88      	ldr	r3, [pc, #544]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d00c      	beq.n	80053dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c2:	4b85      	ldr	r3, [pc, #532]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d112      	bne.n	80053f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ce:	4b82      	ldr	r3, [pc, #520]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053da:	d10b      	bne.n	80053f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	4b7e      	ldr	r3, [pc, #504]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d05b      	beq.n	80054a0 <HAL_RCC_OscConfig+0x108>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d157      	bne.n	80054a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e242      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d106      	bne.n	800540c <HAL_RCC_OscConfig+0x74>
 80053fe:	4b76      	ldr	r3, [pc, #472]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a75      	ldr	r2, [pc, #468]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e01d      	b.n	8005448 <HAL_RCC_OscConfig+0xb0>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005414:	d10c      	bne.n	8005430 <HAL_RCC_OscConfig+0x98>
 8005416:	4b70      	ldr	r3, [pc, #448]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a6f      	ldr	r2, [pc, #444]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 800541c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	4b6d      	ldr	r3, [pc, #436]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6c      	ldr	r2, [pc, #432]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e00b      	b.n	8005448 <HAL_RCC_OscConfig+0xb0>
 8005430:	4b69      	ldr	r3, [pc, #420]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a68      	ldr	r2, [pc, #416]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	4b66      	ldr	r3, [pc, #408]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a65      	ldr	r2, [pc, #404]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d013      	beq.n	8005478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fe fd14 	bl	8003e7c <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005458:	f7fe fd10 	bl	8003e7c <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e207      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546a:	4b5b      	ldr	r3, [pc, #364]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0xc0>
 8005476:	e014      	b.n	80054a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fe fd00 	bl	8003e7c <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005480:	f7fe fcfc 	bl	8003e7c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	; 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e1f3      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005492:	4b51      	ldr	r3, [pc, #324]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0xe8>
 800549e:	e000      	b.n	80054a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d063      	beq.n	8005576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ae:	4b4a      	ldr	r3, [pc, #296]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00b      	beq.n	80054d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ba:	4b47      	ldr	r3, [pc, #284]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d11c      	bne.n	8005500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c6:	4b44      	ldr	r3, [pc, #272]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d116      	bne.n	8005500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d2:	4b41      	ldr	r3, [pc, #260]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_RCC_OscConfig+0x152>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d001      	beq.n	80054ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e1c7      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ea:	4b3b      	ldr	r3, [pc, #236]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4937      	ldr	r1, [pc, #220]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fe:	e03a      	b.n	8005576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d020      	beq.n	800554a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005508:	4b34      	ldr	r3, [pc, #208]	; (80055dc <HAL_RCC_OscConfig+0x244>)
 800550a:	2201      	movs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fe fcb5 	bl	8003e7c <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005516:	f7fe fcb1 	bl	8003e7c <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e1a8      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005528:	4b2b      	ldr	r3, [pc, #172]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005534:	4b28      	ldr	r3, [pc, #160]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4925      	ldr	r1, [pc, #148]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]
 8005548:	e015      	b.n	8005576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800554a:	4b24      	ldr	r3, [pc, #144]	; (80055dc <HAL_RCC_OscConfig+0x244>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fe fc94 	bl	8003e7c <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005558:	f7fe fc90 	bl	8003e7c <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e187      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800556a:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d036      	beq.n	80055f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d016      	beq.n	80055b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800558a:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <HAL_RCC_OscConfig+0x248>)
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005590:	f7fe fc74 	bl	8003e7c <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005598:	f7fe fc70 	bl	8003e7c <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e167      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCC_OscConfig+0x240>)
 80055ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0x200>
 80055b6:	e01b      	b.n	80055f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b8:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <HAL_RCC_OscConfig+0x248>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055be:	f7fe fc5d 	bl	8003e7c <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c4:	e00e      	b.n	80055e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c6:	f7fe fc59 	bl	8003e7c <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d907      	bls.n	80055e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e150      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
 80055d8:	40023800 	.word	0x40023800
 80055dc:	42470000 	.word	0x42470000
 80055e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e4:	4b88      	ldr	r3, [pc, #544]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80055e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ea      	bne.n	80055c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8097 	beq.w	800572c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fe:	2300      	movs	r3, #0
 8005600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005602:	4b81      	ldr	r3, [pc, #516]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10f      	bne.n	800562e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	4b7d      	ldr	r3, [pc, #500]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	4a7c      	ldr	r2, [pc, #496]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561c:	6413      	str	r3, [r2, #64]	; 0x40
 800561e:	4b7a      	ldr	r3, [pc, #488]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562e:	4b77      	ldr	r3, [pc, #476]	; (800580c <HAL_RCC_OscConfig+0x474>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d118      	bne.n	800566c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800563a:	4b74      	ldr	r3, [pc, #464]	; (800580c <HAL_RCC_OscConfig+0x474>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a73      	ldr	r2, [pc, #460]	; (800580c <HAL_RCC_OscConfig+0x474>)
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005646:	f7fe fc19 	bl	8003e7c <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564e:	f7fe fc15 	bl	8003e7c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e10c      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005660:	4b6a      	ldr	r3, [pc, #424]	; (800580c <HAL_RCC_OscConfig+0x474>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d106      	bne.n	8005682 <HAL_RCC_OscConfig+0x2ea>
 8005674:	4b64      	ldr	r3, [pc, #400]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	4a63      	ldr	r2, [pc, #396]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6713      	str	r3, [r2, #112]	; 0x70
 8005680:	e01c      	b.n	80056bc <HAL_RCC_OscConfig+0x324>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b05      	cmp	r3, #5
 8005688:	d10c      	bne.n	80056a4 <HAL_RCC_OscConfig+0x30c>
 800568a:	4b5f      	ldr	r3, [pc, #380]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a5e      	ldr	r2, [pc, #376]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005690:	f043 0304 	orr.w	r3, r3, #4
 8005694:	6713      	str	r3, [r2, #112]	; 0x70
 8005696:	4b5c      	ldr	r3, [pc, #368]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a5b      	ldr	r2, [pc, #364]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	6713      	str	r3, [r2, #112]	; 0x70
 80056a2:	e00b      	b.n	80056bc <HAL_RCC_OscConfig+0x324>
 80056a4:	4b58      	ldr	r3, [pc, #352]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	4a57      	ldr	r2, [pc, #348]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6713      	str	r3, [r2, #112]	; 0x70
 80056b0:	4b55      	ldr	r3, [pc, #340]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	4a54      	ldr	r2, [pc, #336]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80056b6:	f023 0304 	bic.w	r3, r3, #4
 80056ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d015      	beq.n	80056f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c4:	f7fe fbda 	bl	8003e7c <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ca:	e00a      	b.n	80056e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056cc:	f7fe fbd6 	bl	8003e7c <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0cb      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e2:	4b49      	ldr	r3, [pc, #292]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ee      	beq.n	80056cc <HAL_RCC_OscConfig+0x334>
 80056ee:	e014      	b.n	800571a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f0:	f7fe fbc4 	bl	8003e7c <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f6:	e00a      	b.n	800570e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f8:	f7fe fbc0 	bl	8003e7c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	; 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e0b5      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570e:	4b3e      	ldr	r3, [pc, #248]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1ee      	bne.n	80056f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d105      	bne.n	800572c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005720:	4b39      	ldr	r3, [pc, #228]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	4a38      	ldr	r2, [pc, #224]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800572a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80a1 	beq.w	8005878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005736:	4b34      	ldr	r3, [pc, #208]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b08      	cmp	r3, #8
 8005740:	d05c      	beq.n	80057fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d141      	bne.n	80057ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574a:	4b31      	ldr	r3, [pc, #196]	; (8005810 <HAL_RCC_OscConfig+0x478>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005750:	f7fe fb94 	bl	8003e7c <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005758:	f7fe fb90 	bl	8003e7c <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e087      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576a:	4b27      	ldr	r3, [pc, #156]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69da      	ldr	r2, [r3, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	019b      	lsls	r3, r3, #6
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	085b      	lsrs	r3, r3, #1
 800578e:	3b01      	subs	r3, #1
 8005790:	041b      	lsls	r3, r3, #16
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	061b      	lsls	r3, r3, #24
 800579a:	491b      	ldr	r1, [pc, #108]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 800579c:	4313      	orrs	r3, r2
 800579e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057a0:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <HAL_RCC_OscConfig+0x478>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fe fb69 	bl	8003e7c <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ae:	f7fe fb65 	bl	8003e7c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e05c      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x416>
 80057cc:	e054      	b.n	8005878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_RCC_OscConfig+0x478>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fe fb52 	bl	8003e7c <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057dc:	f7fe fb4e 	bl	8003e7c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e045      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ee:	4b06      	ldr	r3, [pc, #24]	; (8005808 <HAL_RCC_OscConfig+0x470>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0x444>
 80057fa:	e03d      	b.n	8005878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d107      	bne.n	8005814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e038      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
 8005808:	40023800 	.word	0x40023800
 800580c:	40007000 	.word	0x40007000
 8005810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005814:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <HAL_RCC_OscConfig+0x4ec>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d028      	beq.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800582c:	429a      	cmp	r2, r3
 800582e:	d121      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583a:	429a      	cmp	r2, r3
 800583c:	d11a      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005844:	4013      	ands	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800584a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800584c:	4293      	cmp	r3, r2
 800584e:	d111      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	3b01      	subs	r3, #1
 800585e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d107      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40023800 	.word	0x40023800

08005888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0cc      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800589c:	4b68      	ldr	r3, [pc, #416]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d90c      	bls.n	80058c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b65      	ldr	r3, [pc, #404]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b63      	ldr	r3, [pc, #396]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0b8      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d020      	beq.n	8005912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058dc:	4b59      	ldr	r3, [pc, #356]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a58      	ldr	r2, [pc, #352]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058f4:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4a52      	ldr	r2, [pc, #328]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005900:	4b50      	ldr	r3, [pc, #320]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	494d      	ldr	r1, [pc, #308]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d044      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d107      	bne.n	8005936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005926:	4b47      	ldr	r3, [pc, #284]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d119      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e07f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d003      	beq.n	8005946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005942:	2b03      	cmp	r3, #3
 8005944:	d107      	bne.n	8005956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005946:	4b3f      	ldr	r3, [pc, #252]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e06f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005956:	4b3b      	ldr	r3, [pc, #236]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e067      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005966:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f023 0203 	bic.w	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4934      	ldr	r1, [pc, #208]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005978:	f7fe fa80 	bl	8003e7c <HAL_GetTick>
 800597c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	e00a      	b.n	8005996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005980:	f7fe fa7c 	bl	8003e7c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	; 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e04f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005996:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 020c 	and.w	r2, r3, #12
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d1eb      	bne.n	8005980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059a8:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d20c      	bcs.n	80059d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b20      	ldr	r3, [pc, #128]	; (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e032      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059dc:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4916      	ldr	r1, [pc, #88]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	490e      	ldr	r1, [pc, #56]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a0e:	f000 f821 	bl	8005a54 <HAL_RCC_GetSysClockFreq>
 8005a12:	4602      	mov	r2, r0
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	490a      	ldr	r1, [pc, #40]	; (8005a48 <HAL_RCC_ClockConfig+0x1c0>)
 8005a20:	5ccb      	ldrb	r3, [r1, r3]
 8005a22:	fa22 f303 	lsr.w	r3, r2, r3
 8005a26:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe f9e0 	bl	8003df4 <HAL_InitTick>

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40023c00 	.word	0x40023c00
 8005a44:	40023800 	.word	0x40023800
 8005a48:	0800d5f0 	.word	0x0800d5f0
 8005a4c:	20000018 	.word	0x20000018
 8005a50:	200002e0 	.word	0x200002e0

08005a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a58:	b094      	sub	sp, #80	; 0x50
 8005a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a60:	2300      	movs	r3, #0
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a64:	2300      	movs	r3, #0
 8005a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a6c:	4b79      	ldr	r3, [pc, #484]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 030c 	and.w	r3, r3, #12
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d00d      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0x40>
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	f200 80e1 	bhi.w	8005c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_RCC_GetSysClockFreq+0x34>
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d003      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a86:	e0db      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a88:	4b73      	ldr	r3, [pc, #460]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a8c:	e0db      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a8e:	4b73      	ldr	r3, [pc, #460]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8005a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a92:	e0d8      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a94:	4b6f      	ldr	r3, [pc, #444]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a9e:	4b6d      	ldr	r3, [pc, #436]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d063      	beq.n	8005b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aaa:	4b6a      	ldr	r3, [pc, #424]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	099b      	lsrs	r3, r3, #6
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abc:	633b      	str	r3, [r7, #48]	; 0x30
 8005abe:	2300      	movs	r3, #0
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	f04f 0000 	mov.w	r0, #0
 8005ace:	f04f 0100 	mov.w	r1, #0
 8005ad2:	0159      	lsls	r1, r3, #5
 8005ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad8:	0150      	lsls	r0, r2, #5
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4621      	mov	r1, r4
 8005ae0:	1a51      	subs	r1, r2, r1
 8005ae2:	6139      	str	r1, [r7, #16]
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005af8:	4659      	mov	r1, fp
 8005afa:	018b      	lsls	r3, r1, #6
 8005afc:	4651      	mov	r1, sl
 8005afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b02:	4651      	mov	r1, sl
 8005b04:	018a      	lsls	r2, r1, #6
 8005b06:	4651      	mov	r1, sl
 8005b08:	ebb2 0801 	subs.w	r8, r2, r1
 8005b0c:	4659      	mov	r1, fp
 8005b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b26:	4690      	mov	r8, r2
 8005b28:	4699      	mov	r9, r3
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	eb18 0303 	adds.w	r3, r8, r3
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	462b      	mov	r3, r5
 8005b34:	eb49 0303 	adc.w	r3, r9, r3
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b46:	4629      	mov	r1, r5
 8005b48:	024b      	lsls	r3, r1, #9
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b50:	4621      	mov	r1, r4
 8005b52:	024a      	lsls	r2, r1, #9
 8005b54:	4610      	mov	r0, r2
 8005b56:	4619      	mov	r1, r3
 8005b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b64:	f7fb f858 	bl	8000c18 <__aeabi_uldivmod>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b70:	e058      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b72:	4b38      	ldr	r3, [pc, #224]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	099b      	lsrs	r3, r3, #6
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	2300      	movs	r3, #0
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
 8005b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	f04f 0000 	mov.w	r0, #0
 8005b94:	f04f 0100 	mov.w	r1, #0
 8005b98:	0159      	lsls	r1, r3, #5
 8005b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b9e:	0150      	lsls	r0, r2, #5
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005baa:	4649      	mov	r1, r9
 8005bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8005bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	00eb      	lsls	r3, r5, #3
 8005bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bda:	00e2      	lsls	r2, r4, #3
 8005bdc:	4614      	mov	r4, r2
 8005bde:	461d      	mov	r5, r3
 8005be0:	4643      	mov	r3, r8
 8005be2:	18e3      	adds	r3, r4, r3
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	464b      	mov	r3, r9
 8005be8:	eb45 0303 	adc.w	r3, r5, r3
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	028b      	lsls	r3, r1, #10
 8005bfe:	4621      	mov	r1, r4
 8005c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c04:	4621      	mov	r1, r4
 8005c06:	028a      	lsls	r2, r1, #10
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0e:	2200      	movs	r2, #0
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	61fa      	str	r2, [r7, #28]
 8005c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c18:	f7fa fffe 	bl	8000c18 <__aeabi_uldivmod>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4613      	mov	r3, r2
 8005c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c24:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	0c1b      	lsrs	r3, r3, #16
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	3301      	adds	r3, #1
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c3e:	e002      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3750      	adds	r7, #80	; 0x50
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c52:	bf00      	nop
 8005c54:	40023800 	.word	0x40023800
 8005c58:	00f42400 	.word	0x00f42400
 8005c5c:	007a1200 	.word	0x007a1200

08005c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c64:	4b03      	ldr	r3, [pc, #12]	; (8005c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c66:	681b      	ldr	r3, [r3, #0]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	20000018 	.word	0x20000018

08005c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c7c:	f7ff fff0 	bl	8005c60 <HAL_RCC_GetHCLKFreq>
 8005c80:	4602      	mov	r2, r0
 8005c82:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	0a9b      	lsrs	r3, r3, #10
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	4903      	ldr	r1, [pc, #12]	; (8005c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c8e:	5ccb      	ldrb	r3, [r1, r3]
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	0800d600 	.word	0x0800d600

08005ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ca4:	f7ff ffdc 	bl	8005c60 <HAL_RCC_GetHCLKFreq>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	0b5b      	lsrs	r3, r3, #13
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	4903      	ldr	r1, [pc, #12]	; (8005cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cb6:	5ccb      	ldrb	r3, [r1, r3]
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	0800d600 	.word	0x0800d600

08005cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e03f      	b.n	8005d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fc ff32 	bl	8002b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2224      	movs	r2, #36	; 0x24
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fc23 	bl	8006558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b08a      	sub	sp, #40	; 0x28
 8005d66:	af02      	add	r7, sp, #8
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d17c      	bne.n	8005e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_UART_Transmit+0x2c>
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e075      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_UART_Transmit+0x3e>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e06e      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2221      	movs	r2, #33	; 0x21
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005db6:	f7fe f861 	bl	8003e7c <HAL_GetTick>
 8005dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	88fa      	ldrh	r2, [r7, #6]
 8005dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	88fa      	ldrh	r2, [r7, #6]
 8005dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd0:	d108      	bne.n	8005de4 <HAL_UART_Transmit+0x82>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e003      	b.n	8005dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005df4:	e02a      	b.n	8005e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2180      	movs	r1, #128	; 0x80
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fa11 	bl	8006228 <UART_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e036      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	3302      	adds	r3, #2
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	e007      	b.n	8005e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1cf      	bne.n	8005df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2140      	movs	r1, #64	; 0x40
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f9e1 	bl	8006228 <UART_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e006      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e000      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	4613      	mov	r3, r2
 8005e92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	d11d      	bne.n	8005edc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_UART_Receive_DMA+0x26>
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e016      	b.n	8005ede <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_UART_Receive_DMA+0x38>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e00f      	b.n	8005ede <HAL_UART_Receive_DMA+0x58>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ecc:	88fb      	ldrh	r3, [r7, #6]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fa16 	bl	8006304 <UART_Start_Receive_DMA>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	e000      	b.n	8005ede <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b090      	sub	sp, #64	; 0x40
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	bf0c      	ite	eq
 8005f00:	2301      	moveq	r3, #1
 8005f02:	2300      	movne	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b21      	cmp	r3, #33	; 0x21
 8005f12:	d128      	bne.n	8005f66 <HAL_UART_DMAStop+0x80>
 8005f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d025      	beq.n	8005f66 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3314      	adds	r3, #20
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	623b      	str	r3, [r7, #32]
   return(result);
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3314      	adds	r3, #20
 8005f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fda4 	bl	8004aa8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa6d 	bl	8006440 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	bf0c      	ite	eq
 8005f74:	2301      	moveq	r3, #1
 8005f76:	2300      	movne	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b22      	cmp	r3, #34	; 0x22
 8005f86:	d128      	bne.n	8005fda <HAL_UART_DMAStop+0xf4>
 8005f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d025      	beq.n	8005fda <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3314      	adds	r3, #20
 8005fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fae:	61fa      	str	r2, [r7, #28]
 8005fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	617b      	str	r3, [r7, #20]
   return(result);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e5      	bne.n	8005f8e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d004      	beq.n	8005fd4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe fd6a 	bl	8004aa8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fa5b 	bl	8006490 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3740      	adds	r7, #64	; 0x40
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b09c      	sub	sp, #112	; 0x70
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d172      	bne.n	800613a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006056:	2200      	movs	r2, #0
 8006058:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800605a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800606a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006070:	66bb      	str	r3, [r7, #104]	; 0x68
 8006072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	330c      	adds	r3, #12
 8006078:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800607a:	65ba      	str	r2, [r7, #88]	; 0x58
 800607c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006080:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e5      	bne.n	800605a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3314      	adds	r3, #20
 8006094:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	667b      	str	r3, [r7, #100]	; 0x64
 80060a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060ae:	647a      	str	r2, [r7, #68]	; 0x44
 80060b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e5      	bne.n	800608e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3314      	adds	r3, #20
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	623b      	str	r3, [r7, #32]
   return(result);
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d8:	663b      	str	r3, [r7, #96]	; 0x60
 80060da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3314      	adds	r3, #20
 80060e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060e2:	633a      	str	r2, [r7, #48]	; 0x30
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e5      	bne.n	80060c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	2b01      	cmp	r3, #1
 8006104:	d119      	bne.n	800613a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	60fb      	str	r3, [r7, #12]
   return(result);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f023 0310 	bic.w	r3, r3, #16
 800611c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800611e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006126:	61fa      	str	r2, [r7, #28]
 8006128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	69b9      	ldr	r1, [r7, #24]
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	617b      	str	r3, [r7, #20]
   return(result);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e5      	bne.n	8006106 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	2b01      	cmp	r3, #1
 8006140:	d106      	bne.n	8006150 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006146:	4619      	mov	r1, r3
 8006148:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800614a:	f7ff ff69 	bl	8006020 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800614e:	e002      	b.n	8006156 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006150:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006152:	f7ff ff47 	bl	8005fe4 <HAL_UART_RxCpltCallback>
}
 8006156:	bf00      	nop
 8006158:	3770      	adds	r7, #112	; 0x70
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	2b01      	cmp	r3, #1
 8006172:	d108      	bne.n	8006186 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	b29b      	uxth	r3, r3
 800617c:	4619      	mov	r1, r3
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff ff4e 	bl	8006020 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006184:	e002      	b.n	800618c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff ff36 	bl	8005ff8 <HAL_UART_RxHalfCpltCallback>
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b0:	2b80      	cmp	r3, #128	; 0x80
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b21      	cmp	r3, #33	; 0x21
 80061c6:	d108      	bne.n	80061da <UART_DMAError+0x46>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2200      	movs	r2, #0
 80061d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80061d4:	68b8      	ldr	r0, [r7, #8]
 80061d6:	f000 f933 	bl	8006440 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	bf0c      	ite	eq
 80061e8:	2301      	moveq	r3, #1
 80061ea:	2300      	movne	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b22      	cmp	r3, #34	; 0x22
 80061fa:	d108      	bne.n	800620e <UART_DMAError+0x7a>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2200      	movs	r2, #0
 8006206:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006208:	68b8      	ldr	r0, [r7, #8]
 800620a:	f000 f941 	bl	8006490 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f043 0210 	orr.w	r2, r3, #16
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800621a:	68b8      	ldr	r0, [r7, #8]
 800621c:	f7ff fef6 	bl	800600c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b090      	sub	sp, #64	; 0x40
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006238:	e050      	b.n	80062dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006240:	d04c      	beq.n	80062dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <UART_WaitOnFlagUntilTimeout+0x30>
 8006248:	f7fd fe18 	bl	8003e7c <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006254:	429a      	cmp	r2, r3
 8006256:	d241      	bcs.n	80062dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	330c      	adds	r3, #12
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	330c      	adds	r3, #12
 8006276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006278:	637a      	str	r2, [r7, #52]	; 0x34
 800627a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800627e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e5      	bne.n	8006258 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3314      	adds	r3, #20
 8006292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	613b      	str	r3, [r7, #16]
   return(result);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f023 0301 	bic.w	r3, r3, #1
 80062a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3314      	adds	r3, #20
 80062aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ac:	623a      	str	r2, [r7, #32]
 80062ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	69f9      	ldr	r1, [r7, #28]
 80062b2:	6a3a      	ldr	r2, [r7, #32]
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e5      	bne.n	800628c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e00f      	b.n	80062fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4013      	ands	r3, r2
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d09f      	beq.n	800623a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3740      	adds	r7, #64	; 0x40
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b098      	sub	sp, #96	; 0x60
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	88fa      	ldrh	r2, [r7, #6]
 800631c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2222      	movs	r2, #34	; 0x22
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	4a40      	ldr	r2, [pc, #256]	; (8006434 <UART_Start_Receive_DMA+0x130>)
 8006332:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	4a3f      	ldr	r2, [pc, #252]	; (8006438 <UART_Start_Receive_DMA+0x134>)
 800633a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	4a3e      	ldr	r2, [pc, #248]	; (800643c <UART_Start_Receive_DMA+0x138>)
 8006342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	2200      	movs	r2, #0
 800634a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800634c:	f107 0308 	add.w	r3, r7, #8
 8006350:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	f7fe fb48 	bl	80049f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d019      	beq.n	80063c2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800639e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330c      	adds	r3, #12
 80063ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063ae:	64fa      	str	r2, [r7, #76]	; 0x4c
 80063b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80063b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80063bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e5      	bne.n	800638e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3314      	adds	r3, #20
 80063c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	657b      	str	r3, [r7, #84]	; 0x54
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3314      	adds	r3, #20
 80063e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ea:	e841 2300 	strex	r3, r2, [r1]
 80063ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e5      	bne.n	80063c2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3314      	adds	r3, #20
 80063fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	617b      	str	r3, [r7, #20]
   return(result);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640c:	653b      	str	r3, [r7, #80]	; 0x50
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006416:	627a      	str	r2, [r7, #36]	; 0x24
 8006418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6a39      	ldr	r1, [r7, #32]
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	61fb      	str	r3, [r7, #28]
   return(result);
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3760      	adds	r7, #96	; 0x60
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	08006039 	.word	0x08006039
 8006438:	0800615f 	.word	0x0800615f
 800643c:	08006195 	.word	0x08006195

08006440 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006440:	b480      	push	{r7}
 8006442:	b089      	sub	sp, #36	; 0x24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	60bb      	str	r3, [r7, #8]
   return(result);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	330c      	adds	r3, #12
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	61ba      	str	r2, [r7, #24]
 800646a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	6979      	ldr	r1, [r7, #20]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	e841 2300 	strex	r3, r2, [r1]
 8006474:	613b      	str	r3, [r7, #16]
   return(result);
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1e5      	bne.n	8006448 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006484:	bf00      	nop
 8006486:	3724      	adds	r7, #36	; 0x24
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006490:	b480      	push	{r7}
 8006492:	b095      	sub	sp, #84	; 0x54
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	330c      	adds	r3, #12
 80064b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064b8:	643a      	str	r2, [r7, #64]	; 0x40
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e5      	bne.n	8006498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3314      	adds	r3, #20
 80064d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	61fb      	str	r3, [r7, #28]
   return(result);
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f023 0301 	bic.w	r3, r3, #1
 80064e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3314      	adds	r3, #20
 80064ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e5      	bne.n	80064cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	2b01      	cmp	r3, #1
 8006506:	d119      	bne.n	800653c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	60bb      	str	r3, [r7, #8]
   return(result);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f023 0310 	bic.w	r3, r3, #16
 800651e:	647b      	str	r3, [r7, #68]	; 0x44
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006528:	61ba      	str	r2, [r7, #24]
 800652a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	6979      	ldr	r1, [r7, #20]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	613b      	str	r3, [r7, #16]
   return(result);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e5      	bne.n	8006508 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	631a      	str	r2, [r3, #48]	; 0x30
}
 800654a:	bf00      	nop
 800654c:	3754      	adds	r7, #84	; 0x54
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800655c:	b0c0      	sub	sp, #256	; 0x100
 800655e:	af00      	add	r7, sp, #0
 8006560:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	68d9      	ldr	r1, [r3, #12]
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	ea40 0301 	orr.w	r3, r0, r1
 8006580:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	431a      	orrs	r2, r3
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	431a      	orrs	r2, r3
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	4313      	orrs	r3, r2
 80065a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065b0:	f021 010c 	bic.w	r1, r1, #12
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065be:	430b      	orrs	r3, r1
 80065c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d2:	6999      	ldr	r1, [r3, #24]
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	ea40 0301 	orr.w	r3, r0, r1
 80065de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b8f      	ldr	r3, [pc, #572]	; (8006824 <UART_SetConfig+0x2cc>)
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d005      	beq.n	80065f8 <UART_SetConfig+0xa0>
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b8d      	ldr	r3, [pc, #564]	; (8006828 <UART_SetConfig+0x2d0>)
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d104      	bne.n	8006602 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065f8:	f7ff fb52 	bl	8005ca0 <HAL_RCC_GetPCLK2Freq>
 80065fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006600:	e003      	b.n	800660a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006602:	f7ff fb39 	bl	8005c78 <HAL_RCC_GetPCLK1Freq>
 8006606:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006614:	f040 810c 	bne.w	8006830 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800661c:	2200      	movs	r2, #0
 800661e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006622:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006626:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800662a:	4622      	mov	r2, r4
 800662c:	462b      	mov	r3, r5
 800662e:	1891      	adds	r1, r2, r2
 8006630:	65b9      	str	r1, [r7, #88]	; 0x58
 8006632:	415b      	adcs	r3, r3
 8006634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006636:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800663a:	4621      	mov	r1, r4
 800663c:	eb12 0801 	adds.w	r8, r2, r1
 8006640:	4629      	mov	r1, r5
 8006642:	eb43 0901 	adc.w	r9, r3, r1
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800665a:	4690      	mov	r8, r2
 800665c:	4699      	mov	r9, r3
 800665e:	4623      	mov	r3, r4
 8006660:	eb18 0303 	adds.w	r3, r8, r3
 8006664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006668:	462b      	mov	r3, r5
 800666a:	eb49 0303 	adc.w	r3, r9, r3
 800666e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800667e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006686:	460b      	mov	r3, r1
 8006688:	18db      	adds	r3, r3, r3
 800668a:	653b      	str	r3, [r7, #80]	; 0x50
 800668c:	4613      	mov	r3, r2
 800668e:	eb42 0303 	adc.w	r3, r2, r3
 8006692:	657b      	str	r3, [r7, #84]	; 0x54
 8006694:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006698:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800669c:	f7fa fabc 	bl	8000c18 <__aeabi_uldivmod>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4b61      	ldr	r3, [pc, #388]	; (800682c <UART_SetConfig+0x2d4>)
 80066a6:	fba3 2302 	umull	r2, r3, r3, r2
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	011c      	lsls	r4, r3, #4
 80066ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	1891      	adds	r1, r2, r2
 80066c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80066c8:	415b      	adcs	r3, r3
 80066ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066d0:	4641      	mov	r1, r8
 80066d2:	eb12 0a01 	adds.w	sl, r2, r1
 80066d6:	4649      	mov	r1, r9
 80066d8:	eb43 0b01 	adc.w	fp, r3, r1
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066f0:	4692      	mov	sl, r2
 80066f2:	469b      	mov	fp, r3
 80066f4:	4643      	mov	r3, r8
 80066f6:	eb1a 0303 	adds.w	r3, sl, r3
 80066fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066fe:	464b      	mov	r3, r9
 8006700:	eb4b 0303 	adc.w	r3, fp, r3
 8006704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006714:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006718:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800671c:	460b      	mov	r3, r1
 800671e:	18db      	adds	r3, r3, r3
 8006720:	643b      	str	r3, [r7, #64]	; 0x40
 8006722:	4613      	mov	r3, r2
 8006724:	eb42 0303 	adc.w	r3, r2, r3
 8006728:	647b      	str	r3, [r7, #68]	; 0x44
 800672a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800672e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006732:	f7fa fa71 	bl	8000c18 <__aeabi_uldivmod>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4611      	mov	r1, r2
 800673c:	4b3b      	ldr	r3, [pc, #236]	; (800682c <UART_SetConfig+0x2d4>)
 800673e:	fba3 2301 	umull	r2, r3, r3, r1
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	2264      	movs	r2, #100	; 0x64
 8006746:	fb02 f303 	mul.w	r3, r2, r3
 800674a:	1acb      	subs	r3, r1, r3
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006752:	4b36      	ldr	r3, [pc, #216]	; (800682c <UART_SetConfig+0x2d4>)
 8006754:	fba3 2302 	umull	r2, r3, r3, r2
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006760:	441c      	add	r4, r3
 8006762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006766:	2200      	movs	r2, #0
 8006768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800676c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006770:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	1891      	adds	r1, r2, r2
 800677a:	63b9      	str	r1, [r7, #56]	; 0x38
 800677c:	415b      	adcs	r3, r3
 800677e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006784:	4641      	mov	r1, r8
 8006786:	1851      	adds	r1, r2, r1
 8006788:	6339      	str	r1, [r7, #48]	; 0x30
 800678a:	4649      	mov	r1, r9
 800678c:	414b      	adcs	r3, r1
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800679c:	4659      	mov	r1, fp
 800679e:	00cb      	lsls	r3, r1, #3
 80067a0:	4651      	mov	r1, sl
 80067a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067a6:	4651      	mov	r1, sl
 80067a8:	00ca      	lsls	r2, r1, #3
 80067aa:	4610      	mov	r0, r2
 80067ac:	4619      	mov	r1, r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	4642      	mov	r2, r8
 80067b2:	189b      	adds	r3, r3, r2
 80067b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067b8:	464b      	mov	r3, r9
 80067ba:	460a      	mov	r2, r1
 80067bc:	eb42 0303 	adc.w	r3, r2, r3
 80067c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067d8:	460b      	mov	r3, r1
 80067da:	18db      	adds	r3, r3, r3
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80067de:	4613      	mov	r3, r2
 80067e0:	eb42 0303 	adc.w	r3, r2, r3
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067ee:	f7fa fa13 	bl	8000c18 <__aeabi_uldivmod>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4b0d      	ldr	r3, [pc, #52]	; (800682c <UART_SetConfig+0x2d4>)
 80067f8:	fba3 1302 	umull	r1, r3, r3, r2
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	2164      	movs	r1, #100	; 0x64
 8006800:	fb01 f303 	mul.w	r3, r1, r3
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	3332      	adds	r3, #50	; 0x32
 800680a:	4a08      	ldr	r2, [pc, #32]	; (800682c <UART_SetConfig+0x2d4>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	095b      	lsrs	r3, r3, #5
 8006812:	f003 0207 	and.w	r2, r3, #7
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4422      	add	r2, r4
 800681e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006820:	e105      	b.n	8006a2e <UART_SetConfig+0x4d6>
 8006822:	bf00      	nop
 8006824:	40011000 	.word	0x40011000
 8006828:	40011400 	.word	0x40011400
 800682c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006834:	2200      	movs	r2, #0
 8006836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800683a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800683e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006842:	4642      	mov	r2, r8
 8006844:	464b      	mov	r3, r9
 8006846:	1891      	adds	r1, r2, r2
 8006848:	6239      	str	r1, [r7, #32]
 800684a:	415b      	adcs	r3, r3
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
 800684e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006852:	4641      	mov	r1, r8
 8006854:	1854      	adds	r4, r2, r1
 8006856:	4649      	mov	r1, r9
 8006858:	eb43 0501 	adc.w	r5, r3, r1
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	00eb      	lsls	r3, r5, #3
 8006866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800686a:	00e2      	lsls	r2, r4, #3
 800686c:	4614      	mov	r4, r2
 800686e:	461d      	mov	r5, r3
 8006870:	4643      	mov	r3, r8
 8006872:	18e3      	adds	r3, r4, r3
 8006874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006878:	464b      	mov	r3, r9
 800687a:	eb45 0303 	adc.w	r3, r5, r3
 800687e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800688e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006892:	f04f 0200 	mov.w	r2, #0
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800689e:	4629      	mov	r1, r5
 80068a0:	008b      	lsls	r3, r1, #2
 80068a2:	4621      	mov	r1, r4
 80068a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068a8:	4621      	mov	r1, r4
 80068aa:	008a      	lsls	r2, r1, #2
 80068ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068b0:	f7fa f9b2 	bl	8000c18 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4b60      	ldr	r3, [pc, #384]	; (8006a3c <UART_SetConfig+0x4e4>)
 80068ba:	fba3 2302 	umull	r2, r3, r3, r2
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	011c      	lsls	r4, r3, #4
 80068c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068d4:	4642      	mov	r2, r8
 80068d6:	464b      	mov	r3, r9
 80068d8:	1891      	adds	r1, r2, r2
 80068da:	61b9      	str	r1, [r7, #24]
 80068dc:	415b      	adcs	r3, r3
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068e4:	4641      	mov	r1, r8
 80068e6:	1851      	adds	r1, r2, r1
 80068e8:	6139      	str	r1, [r7, #16]
 80068ea:	4649      	mov	r1, r9
 80068ec:	414b      	adcs	r3, r1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068fc:	4659      	mov	r1, fp
 80068fe:	00cb      	lsls	r3, r1, #3
 8006900:	4651      	mov	r1, sl
 8006902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006906:	4651      	mov	r1, sl
 8006908:	00ca      	lsls	r2, r1, #3
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	4603      	mov	r3, r0
 8006910:	4642      	mov	r2, r8
 8006912:	189b      	adds	r3, r3, r2
 8006914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006918:	464b      	mov	r3, r9
 800691a:	460a      	mov	r2, r1
 800691c:	eb42 0303 	adc.w	r3, r2, r3
 8006920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	67bb      	str	r3, [r7, #120]	; 0x78
 800692e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800693c:	4649      	mov	r1, r9
 800693e:	008b      	lsls	r3, r1, #2
 8006940:	4641      	mov	r1, r8
 8006942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006946:	4641      	mov	r1, r8
 8006948:	008a      	lsls	r2, r1, #2
 800694a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800694e:	f7fa f963 	bl	8000c18 <__aeabi_uldivmod>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	4b39      	ldr	r3, [pc, #228]	; (8006a3c <UART_SetConfig+0x4e4>)
 8006958:	fba3 1302 	umull	r1, r3, r3, r2
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	2164      	movs	r1, #100	; 0x64
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	3332      	adds	r3, #50	; 0x32
 800696a:	4a34      	ldr	r2, [pc, #208]	; (8006a3c <UART_SetConfig+0x4e4>)
 800696c:	fba2 2303 	umull	r2, r3, r2, r3
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006976:	441c      	add	r4, r3
 8006978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800697c:	2200      	movs	r2, #0
 800697e:	673b      	str	r3, [r7, #112]	; 0x70
 8006980:	677a      	str	r2, [r7, #116]	; 0x74
 8006982:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006986:	4642      	mov	r2, r8
 8006988:	464b      	mov	r3, r9
 800698a:	1891      	adds	r1, r2, r2
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	415b      	adcs	r3, r3
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006996:	4641      	mov	r1, r8
 8006998:	1851      	adds	r1, r2, r1
 800699a:	6039      	str	r1, [r7, #0]
 800699c:	4649      	mov	r1, r9
 800699e:	414b      	adcs	r3, r1
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069ae:	4659      	mov	r1, fp
 80069b0:	00cb      	lsls	r3, r1, #3
 80069b2:	4651      	mov	r1, sl
 80069b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069b8:	4651      	mov	r1, sl
 80069ba:	00ca      	lsls	r2, r1, #3
 80069bc:	4610      	mov	r0, r2
 80069be:	4619      	mov	r1, r3
 80069c0:	4603      	mov	r3, r0
 80069c2:	4642      	mov	r2, r8
 80069c4:	189b      	adds	r3, r3, r2
 80069c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80069c8:	464b      	mov	r3, r9
 80069ca:	460a      	mov	r2, r1
 80069cc:	eb42 0303 	adc.w	r3, r2, r3
 80069d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	663b      	str	r3, [r7, #96]	; 0x60
 80069dc:	667a      	str	r2, [r7, #100]	; 0x64
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069ea:	4649      	mov	r1, r9
 80069ec:	008b      	lsls	r3, r1, #2
 80069ee:	4641      	mov	r1, r8
 80069f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f4:	4641      	mov	r1, r8
 80069f6:	008a      	lsls	r2, r1, #2
 80069f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069fc:	f7fa f90c 	bl	8000c18 <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <UART_SetConfig+0x4e4>)
 8006a06:	fba3 1302 	umull	r1, r3, r3, r2
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	2164      	movs	r1, #100	; 0x64
 8006a0e:	fb01 f303 	mul.w	r3, r1, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	3332      	adds	r3, #50	; 0x32
 8006a18:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <UART_SetConfig+0x4e4>)
 8006a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	f003 020f 	and.w	r2, r3, #15
 8006a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4422      	add	r2, r4
 8006a2c:	609a      	str	r2, [r3, #8]
}
 8006a2e:	bf00      	nop
 8006a30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a3a:	bf00      	nop
 8006a3c:	51eb851f 	.word	0x51eb851f

08006a40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a52:	2b84      	cmp	r3, #132	; 0x84
 8006a54:	d005      	beq.n	8006a62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3303      	adds	r3, #3
 8006a60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006a62:	68fb      	ldr	r3, [r7, #12]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a74:	f000 fee0 	bl	8007838 <vTaskStartScheduler>
  
  return osOK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a80:	b089      	sub	sp, #36	; 0x24
 8006a82:	af04      	add	r7, sp, #16
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d020      	beq.n	8006ad2 <osThreadCreate+0x54>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01c      	beq.n	8006ad2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685c      	ldr	r4, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681d      	ldr	r5, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691e      	ldr	r6, [r3, #16]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff ffc8 	bl	8006a40 <makeFreeRtosPriority>
 8006ab0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aba:	9202      	str	r2, [sp, #8]
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	9100      	str	r1, [sp, #0]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	4632      	mov	r2, r6
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 fcee 	bl	80074a8 <xTaskCreateStatic>
 8006acc:	4603      	mov	r3, r0
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	e01c      	b.n	8006b0c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685c      	ldr	r4, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ade:	b29e      	uxth	r6, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff ffaa 	bl	8006a40 <makeFreeRtosPriority>
 8006aec:	4602      	mov	r2, r0
 8006aee:	f107 030c 	add.w	r3, r7, #12
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	9200      	str	r2, [sp, #0]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	4632      	mov	r2, r6
 8006afa:	4629      	mov	r1, r5
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 fd30 	bl	8007562 <xTaskCreate>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d001      	beq.n	8006b0c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e000      	b.n	8006b0e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b16 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <osDelay+0x16>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	e000      	b.n	8006b2e <osDelay+0x18>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fe4e 	bl	80077d0 <vTaskDelay>
  
  return osOK;
 8006b34:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f103 0208 	add.w	r2, r3, #8
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295
 8006b56:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f103 0208 	add.w	r2, r3, #8
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f103 0208 	add.w	r2, r3, #8
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d103      	bne.n	8006c00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e00c      	b.n	8006c1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3308      	adds	r3, #8
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	e002      	b.n	8006c0e <vListInsert+0x2e>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d2f6      	bcs.n	8006c08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	601a      	str	r2, [r3, #0]
}
 8006c46:	bf00      	nop
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6892      	ldr	r2, [r2, #8]
 8006c68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6852      	ldr	r2, [r2, #4]
 8006c72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d103      	bne.n	8006c86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	1e5a      	subs	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006cd2:	f001 fcff 	bl	80086d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cde:	68f9      	ldr	r1, [r7, #12]
 8006ce0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ce2:	fb01 f303 	mul.w	r3, r1, r3
 8006ce6:	441a      	add	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d02:	3b01      	subs	r3, #1
 8006d04:	68f9      	ldr	r1, [r7, #12]
 8006d06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d08:	fb01 f303 	mul.w	r3, r1, r3
 8006d0c:	441a      	add	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	22ff      	movs	r2, #255	; 0xff
 8006d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	22ff      	movs	r2, #255	; 0xff
 8006d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d114      	bne.n	8006d52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01a      	beq.n	8006d66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3310      	adds	r3, #16
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 ffc1 	bl	8007cbc <xTaskRemoveFromEventList>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d012      	beq.n	8006d66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d40:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <xQueueGenericReset+0xcc>)
 8006d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	e009      	b.n	8006d66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3310      	adds	r3, #16
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fef1 	bl	8006b3e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3324      	adds	r3, #36	; 0x24
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff feec 	bl	8006b3e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d66:	f001 fce5 	bl	8008734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d6a:	2301      	movs	r3, #1
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	e000ed04 	.word	0xe000ed04

08006d78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08a      	sub	sp, #40	; 0x28
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	613b      	str	r3, [r7, #16]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
 8006daa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	3348      	adds	r3, #72	; 0x48
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 fd71 	bl	8008898 <pvPortMalloc>
 8006db6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d011      	beq.n	8006de2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	3348      	adds	r3, #72	; 0x48
 8006dc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dd0:	79fa      	ldrb	r2, [r7, #7]
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f805 	bl	8006dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006de2:	69bb      	ldr	r3, [r7, #24]
	}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	e002      	b.n	8006e0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	69b8      	ldr	r0, [r7, #24]
 8006e1e:	f7ff ff43 	bl	8006ca8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e22:	bf00      	nop
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00e      	beq.n	8006e56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2100      	movs	r1, #0
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f81d 	bl	8006e90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	4603      	mov	r3, r0
 8006e66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	461a      	mov	r2, r3
 8006e74:	6939      	ldr	r1, [r7, #16]
 8006e76:	6978      	ldr	r0, [r7, #20]
 8006e78:	f7ff ff7e 	bl	8006d78 <xQueueGenericCreate>
 8006e7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff ffd3 	bl	8006e2a <prvInitialiseMutex>

		return xNewQueue;
 8006e84:	68fb      	ldr	r3, [r7, #12]
	}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08e      	sub	sp, #56	; 0x38
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <xQueueGenericSend+0x32>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ebe:	bf00      	nop
 8006ec0:	e7fe      	b.n	8006ec0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <xQueueGenericSend+0x40>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <xQueueGenericSend+0x44>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <xQueueGenericSend+0x46>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10a      	bne.n	8006ef0 <xQueueGenericSend+0x60>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d103      	bne.n	8006efe <xQueueGenericSend+0x6e>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <xQueueGenericSend+0x72>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <xQueueGenericSend+0x74>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <xQueueGenericSend+0x8e>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	623b      	str	r3, [r7, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	e7fe      	b.n	8006f1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f1e:	f001 f889 	bl	8008034 <xTaskGetSchedulerState>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <xQueueGenericSend+0x9e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <xQueueGenericSend+0xa2>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <xQueueGenericSend+0xa4>
 8006f32:	2300      	movs	r3, #0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <xQueueGenericSend+0xbe>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	61fb      	str	r3, [r7, #28]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f4e:	f001 fbc1 	bl	80086d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <xQueueGenericSend+0xd4>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d129      	bne.n	8006fb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	68b9      	ldr	r1, [r7, #8]
 8006f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f6a:	f000 f9b3 	bl	80072d4 <prvCopyDataToQueue>
 8006f6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d010      	beq.n	8006f9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	3324      	adds	r3, #36	; 0x24
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fe9d 	bl	8007cbc <xTaskRemoveFromEventList>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d013      	beq.n	8006fb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f88:	4b3f      	ldr	r3, [pc, #252]	; (8007088 <xQueueGenericSend+0x1f8>)
 8006f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	e00a      	b.n	8006fb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fa0:	4b39      	ldr	r3, [pc, #228]	; (8007088 <xQueueGenericSend+0x1f8>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fb0:	f001 fbc0 	bl	8008734 <vPortExitCritical>
				return pdPASS;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e063      	b.n	8007080 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d103      	bne.n	8006fc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fbe:	f001 fbb9 	bl	8008734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e05c      	b.n	8007080 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fcc:	f107 0314 	add.w	r3, r7, #20
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 fed5 	bl	8007d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fda:	f001 fbab 	bl	8008734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fde:	f000 fc8b 	bl	80078f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fe2:	f001 fb77 	bl	80086d4 <vPortEnterCritical>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fec:	b25b      	sxtb	r3, r3
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d103      	bne.n	8006ffc <xQueueGenericSend+0x16c>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007002:	b25b      	sxtb	r3, r3
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d103      	bne.n	8007012 <xQueueGenericSend+0x182>
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007012:	f001 fb8f 	bl	8008734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007016:	1d3a      	adds	r2, r7, #4
 8007018:	f107 0314 	add.w	r3, r7, #20
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fec4 	bl	8007dac <xTaskCheckForTimeOut>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d124      	bne.n	8007074 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800702a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800702c:	f000 fa24 	bl	8007478 <prvIsQueueFull>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d018      	beq.n	8007068 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	3310      	adds	r3, #16
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fe18 	bl	8007c74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007046:	f000 f9af 	bl	80073a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800704a:	f000 fc63 	bl	8007914 <xTaskResumeAll>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	f47f af7c 	bne.w	8006f4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <xQueueGenericSend+0x1f8>)
 8007058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	e772      	b.n	8006f4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800706a:	f000 f99d 	bl	80073a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800706e:	f000 fc51 	bl	8007914 <xTaskResumeAll>
 8007072:	e76c      	b.n	8006f4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007076:	f000 f997 	bl	80073a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800707a:	f000 fc4b 	bl	8007914 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800707e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007080:	4618      	mov	r0, r3
 8007082:	3738      	adds	r7, #56	; 0x38
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08e      	sub	sp, #56	; 0x38
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007096:	2300      	movs	r3, #0
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800709e:	2300      	movs	r3, #0
 80070a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	623b      	str	r3, [r7, #32]
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	61fb      	str	r3, [r7, #28]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070dc:	f000 ffaa 	bl	8008034 <xTaskGetSchedulerState>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <xQueueSemaphoreTake+0x60>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <xQueueSemaphoreTake+0x64>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <xQueueSemaphoreTake+0x66>
 80070f0:	2300      	movs	r3, #0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	61bb      	str	r3, [r7, #24]
}
 8007108:	bf00      	nop
 800710a:	e7fe      	b.n	800710a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800710c:	f001 fae2 	bl	80086d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	2b00      	cmp	r3, #0
 800711a:	d024      	beq.n	8007166 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	1e5a      	subs	r2, r3, #1
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d104      	bne.n	8007136 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800712c:	f001 f92a 	bl	8008384 <pvTaskIncrementMutexHeldCount>
 8007130:	4602      	mov	r2, r0
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00f      	beq.n	800715e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	3310      	adds	r3, #16
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fdba 	bl	8007cbc <xTaskRemoveFromEventList>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d007      	beq.n	800715e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800714e:	4b54      	ldr	r3, [pc, #336]	; (80072a0 <xQueueSemaphoreTake+0x214>)
 8007150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800715e:	f001 fae9 	bl	8008734 <vPortExitCritical>
				return pdPASS;
 8007162:	2301      	movs	r3, #1
 8007164:	e097      	b.n	8007296 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d111      	bne.n	8007190 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	617b      	str	r3, [r7, #20]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007188:	f001 fad4 	bl	8008734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800718c:	2300      	movs	r3, #0
 800718e:	e082      	b.n	8007296 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007196:	f107 030c 	add.w	r3, r7, #12
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fdf0 	bl	8007d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071a0:	2301      	movs	r3, #1
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071a4:	f001 fac6 	bl	8008734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071a8:	f000 fba6 	bl	80078f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071ac:	f001 fa92 	bl	80086d4 <vPortEnterCritical>
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071b6:	b25b      	sxtb	r3, r3
 80071b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071bc:	d103      	bne.n	80071c6 <xQueueSemaphoreTake+0x13a>
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071cc:	b25b      	sxtb	r3, r3
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d103      	bne.n	80071dc <xQueueSemaphoreTake+0x150>
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071dc:	f001 faaa 	bl	8008734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071e0:	463a      	mov	r2, r7
 80071e2:	f107 030c 	add.w	r3, r7, #12
 80071e6:	4611      	mov	r1, r2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fddf 	bl	8007dac <xTaskCheckForTimeOut>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d132      	bne.n	800725a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071f6:	f000 f929 	bl	800744c <prvIsQueueEmpty>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d026      	beq.n	800724e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d109      	bne.n	800721c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007208:	f001 fa64 	bl	80086d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	4618      	mov	r0, r3
 8007212:	f000 ff2d 	bl	8008070 <xTaskPriorityInherit>
 8007216:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007218:	f001 fa8c 	bl	8008734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	3324      	adds	r3, #36	; 0x24
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	4611      	mov	r1, r2
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fd25 	bl	8007c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800722a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800722c:	f000 f8bc 	bl	80073a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007230:	f000 fb70 	bl	8007914 <xTaskResumeAll>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	f47f af68 	bne.w	800710c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800723c:	4b18      	ldr	r3, [pc, #96]	; (80072a0 <xQueueSemaphoreTake+0x214>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	e75e      	b.n	800710c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800724e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007250:	f000 f8aa 	bl	80073a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007254:	f000 fb5e 	bl	8007914 <xTaskResumeAll>
 8007258:	e758      	b.n	800710c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800725a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800725c:	f000 f8a4 	bl	80073a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007260:	f000 fb58 	bl	8007914 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007266:	f000 f8f1 	bl	800744c <prvIsQueueEmpty>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	f43f af4d 	beq.w	800710c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00d      	beq.n	8007294 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007278:	f001 fa2c 	bl	80086d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800727c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800727e:	f000 f811 	bl	80072a4 <prvGetDisinheritPriorityAfterTimeout>
 8007282:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800728a:	4618      	mov	r0, r3
 800728c:	f000 ffec 	bl	8008268 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007290:	f001 fa50 	bl	8008734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007294:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007296:	4618      	mov	r0, r3
 8007298:	3738      	adds	r7, #56	; 0x38
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	e000ed04 	.word	0xe000ed04

080072a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d006      	beq.n	80072c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f1c3 0307 	rsb	r3, r3, #7
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e001      	b.n	80072c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80072c6:	68fb      	ldr	r3, [r7, #12]
	}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10d      	bne.n	800730e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d14d      	bne.n	8007396 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 ff2c 	bl	800815c <xTaskPriorityDisinherit>
 8007304:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	609a      	str	r2, [r3, #8]
 800730c:	e043      	b.n	8007396 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d119      	bne.n	8007348 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6858      	ldr	r0, [r3, #4]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	461a      	mov	r2, r3
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	f001 feac 	bl	800907c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732c:	441a      	add	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	429a      	cmp	r2, r3
 800733c:	d32b      	bcc.n	8007396 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	e026      	b.n	8007396 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	68d8      	ldr	r0, [r3, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007350:	461a      	mov	r2, r3
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	f001 fe92 	bl	800907c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	425b      	negs	r3, r3
 8007362:	441a      	add	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d207      	bcs.n	8007384 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	425b      	negs	r3, r3
 800737e:	441a      	add	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d105      	bne.n	8007396 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	3b01      	subs	r3, #1
 8007394:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800739e:	697b      	ldr	r3, [r7, #20]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073b0:	f001 f990 	bl	80086d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073bc:	e011      	b.n	80073e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d012      	beq.n	80073ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3324      	adds	r3, #36	; 0x24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fc76 	bl	8007cbc <xTaskRemoveFromEventList>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073d6:	f000 fd4b 	bl	8007e70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	3b01      	subs	r3, #1
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dce9      	bgt.n	80073be <prvUnlockQueue+0x16>
 80073ea:	e000      	b.n	80073ee <prvUnlockQueue+0x46>
					break;
 80073ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	22ff      	movs	r2, #255	; 0xff
 80073f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073f6:	f001 f99d 	bl	8008734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073fa:	f001 f96b 	bl	80086d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007404:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007406:	e011      	b.n	800742c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d012      	beq.n	8007436 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3310      	adds	r3, #16
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fc51 	bl	8007cbc <xTaskRemoveFromEventList>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007420:	f000 fd26 	bl	8007e70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	3b01      	subs	r3, #1
 8007428:	b2db      	uxtb	r3, r3
 800742a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800742c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007430:	2b00      	cmp	r3, #0
 8007432:	dce9      	bgt.n	8007408 <prvUnlockQueue+0x60>
 8007434:	e000      	b.n	8007438 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007436:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	22ff      	movs	r2, #255	; 0xff
 800743c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007440:	f001 f978 	bl	8008734 <vPortExitCritical>
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007454:	f001 f93e 	bl	80086d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e001      	b.n	800746a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800746a:	f001 f963 	bl	8008734 <vPortExitCritical>

	return xReturn;
 800746e:	68fb      	ldr	r3, [r7, #12]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007480:	f001 f928 	bl	80086d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748c:	429a      	cmp	r2, r3
 800748e:	d102      	bne.n	8007496 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007490:	2301      	movs	r3, #1
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	e001      	b.n	800749a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800749a:	f001 f94b 	bl	8008734 <vPortExitCritical>

	return xReturn;
 800749e:	68fb      	ldr	r3, [r7, #12]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08e      	sub	sp, #56	; 0x38
 80074ac:	af04      	add	r7, sp, #16
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	623b      	str	r3, [r7, #32]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <xTaskCreateStatic+0x46>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	61fb      	str	r3, [r7, #28]
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074ee:	2354      	movs	r3, #84	; 0x54
 80074f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	2b54      	cmp	r3, #84	; 0x54
 80074f6:	d00a      	beq.n	800750e <xTaskCreateStatic+0x66>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	61bb      	str	r3, [r7, #24]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800750e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01e      	beq.n	8007554 <xTaskCreateStatic+0xac>
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01b      	beq.n	8007554 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007524:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	2202      	movs	r2, #2
 800752a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800752e:	2300      	movs	r3, #0
 8007530:	9303      	str	r3, [sp, #12]
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	9302      	str	r3, [sp, #8]
 8007536:	f107 0314 	add.w	r3, r7, #20
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f850 	bl	80075ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800754c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800754e:	f000 f8d5 	bl	80076fc <prvAddNewTaskToReadyList>
 8007552:	e001      	b.n	8007558 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007558:	697b      	ldr	r3, [r7, #20]
	}
 800755a:	4618      	mov	r0, r3
 800755c:	3728      	adds	r7, #40	; 0x28
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007562:	b580      	push	{r7, lr}
 8007564:	b08c      	sub	sp, #48	; 0x30
 8007566:	af04      	add	r7, sp, #16
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	4613      	mov	r3, r2
 8007570:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007572:	88fb      	ldrh	r3, [r7, #6]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4618      	mov	r0, r3
 8007578:	f001 f98e 	bl	8008898 <pvPortMalloc>
 800757c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00e      	beq.n	80075a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007584:	2054      	movs	r0, #84	; 0x54
 8007586:	f001 f987 	bl	8008898 <pvPortMalloc>
 800758a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	631a      	str	r2, [r3, #48]	; 0x30
 8007598:	e005      	b.n	80075a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800759a:	6978      	ldr	r0, [r7, #20]
 800759c:	f001 fa48 	bl	8008a30 <vPortFree>
 80075a0:	e001      	b.n	80075a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d017      	beq.n	80075dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075b4:	88fa      	ldrh	r2, [r7, #6]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9303      	str	r3, [sp, #12]
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	9302      	str	r3, [sp, #8]
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 f80e 	bl	80075ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075d0:	69f8      	ldr	r0, [r7, #28]
 80075d2:	f000 f893 	bl	80076fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075d6:	2301      	movs	r3, #1
 80075d8:	61bb      	str	r3, [r7, #24]
 80075da:	e002      	b.n	80075e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075dc:	f04f 33ff 	mov.w	r3, #4294967295
 80075e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075e2:	69bb      	ldr	r3, [r7, #24]
	}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3720      	adds	r7, #32
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007604:	3b01      	subs	r3, #1
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f023 0307 	bic.w	r3, r3, #7
 8007612:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <prvInitialiseNewTask+0x48>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	617b      	str	r3, [r7, #20]
}
 8007630:	bf00      	nop
 8007632:	e7fe      	b.n	8007632 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01f      	beq.n	800767a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
 800763e:	e012      	b.n	8007666 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	7819      	ldrb	r1, [r3, #0]
 8007648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	4413      	add	r3, r2
 800764e:	3334      	adds	r3, #52	; 0x34
 8007650:	460a      	mov	r2, r1
 8007652:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d006      	beq.n	800766e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	3301      	adds	r3, #1
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	2b0f      	cmp	r3, #15
 800766a:	d9e9      	bls.n	8007640 <prvInitialiseNewTask+0x54>
 800766c:	e000      	b.n	8007670 <prvInitialiseNewTask+0x84>
			{
				break;
 800766e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007678:	e003      	b.n	8007682 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007684:	2b06      	cmp	r3, #6
 8007686:	d901      	bls.n	800768c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007688:	2306      	movs	r3, #6
 800768a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007690:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007696:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	2200      	movs	r2, #0
 800769c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	3304      	adds	r3, #4
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fa6b 	bl	8006b7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	3318      	adds	r3, #24
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff fa66 	bl	8006b7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	f1c3 0207 	rsb	r2, r3, #7
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	2200      	movs	r2, #0
 80076cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	68f9      	ldr	r1, [r7, #12]
 80076da:	69b8      	ldr	r0, [r7, #24]
 80076dc:	f000 fecc 	bl	8008478 <pxPortInitialiseStack>
 80076e0:	4602      	mov	r2, r0
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076f2:	bf00      	nop
 80076f4:	3720      	adds	r7, #32
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007704:	f000 ffe6 	bl	80086d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007708:	4b2a      	ldr	r3, [pc, #168]	; (80077b4 <prvAddNewTaskToReadyList+0xb8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3301      	adds	r3, #1
 800770e:	4a29      	ldr	r2, [pc, #164]	; (80077b4 <prvAddNewTaskToReadyList+0xb8>)
 8007710:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007712:	4b29      	ldr	r3, [pc, #164]	; (80077b8 <prvAddNewTaskToReadyList+0xbc>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d109      	bne.n	800772e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800771a:	4a27      	ldr	r2, [pc, #156]	; (80077b8 <prvAddNewTaskToReadyList+0xbc>)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007720:	4b24      	ldr	r3, [pc, #144]	; (80077b4 <prvAddNewTaskToReadyList+0xb8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d110      	bne.n	800774a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007728:	f000 fbc6 	bl	8007eb8 <prvInitialiseTaskLists>
 800772c:	e00d      	b.n	800774a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800772e:	4b23      	ldr	r3, [pc, #140]	; (80077bc <prvAddNewTaskToReadyList+0xc0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d109      	bne.n	800774a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007736:	4b20      	ldr	r3, [pc, #128]	; (80077b8 <prvAddNewTaskToReadyList+0xbc>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	429a      	cmp	r2, r3
 8007742:	d802      	bhi.n	800774a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007744:	4a1c      	ldr	r2, [pc, #112]	; (80077b8 <prvAddNewTaskToReadyList+0xbc>)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800774a:	4b1d      	ldr	r3, [pc, #116]	; (80077c0 <prvAddNewTaskToReadyList+0xc4>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3301      	adds	r3, #1
 8007750:	4a1b      	ldr	r2, [pc, #108]	; (80077c0 <prvAddNewTaskToReadyList+0xc4>)
 8007752:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	2201      	movs	r2, #1
 800775a:	409a      	lsls	r2, r3
 800775c:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <prvAddNewTaskToReadyList+0xc8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4313      	orrs	r3, r2
 8007762:	4a18      	ldr	r2, [pc, #96]	; (80077c4 <prvAddNewTaskToReadyList+0xc8>)
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4a15      	ldr	r2, [pc, #84]	; (80077c8 <prvAddNewTaskToReadyList+0xcc>)
 8007774:	441a      	add	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3304      	adds	r3, #4
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f7ff fa0b 	bl	8006b98 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007782:	f000 ffd7 	bl	8008734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007786:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <prvAddNewTaskToReadyList+0xc0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00e      	beq.n	80077ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800778e:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <prvAddNewTaskToReadyList+0xbc>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	429a      	cmp	r2, r3
 800779a:	d207      	bcs.n	80077ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <prvAddNewTaskToReadyList+0xd0>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20002250 	.word	0x20002250
 80077b8:	20002150 	.word	0x20002150
 80077bc:	2000225c 	.word	0x2000225c
 80077c0:	2000226c 	.word	0x2000226c
 80077c4:	20002258 	.word	0x20002258
 80077c8:	20002154 	.word	0x20002154
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d017      	beq.n	8007812 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077e2:	4b13      	ldr	r3, [pc, #76]	; (8007830 <vTaskDelay+0x60>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <vTaskDelay+0x30>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	60bb      	str	r3, [r7, #8]
}
 80077fc:	bf00      	nop
 80077fe:	e7fe      	b.n	80077fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007800:	f000 f87a 	bl	80078f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007804:	2100      	movs	r1, #0
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fdd0 	bl	80083ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800780c:	f000 f882 	bl	8007914 <xTaskResumeAll>
 8007810:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d107      	bne.n	8007828 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <vTaskDelay+0x64>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007828:	bf00      	nop
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20002278 	.word	0x20002278
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	; 0x28
 800783c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007846:	463a      	mov	r2, r7
 8007848:	1d39      	adds	r1, r7, #4
 800784a:	f107 0308 	add.w	r3, r7, #8
 800784e:	4618      	mov	r0, r3
 8007850:	f7fa fed4 	bl	80025fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	9202      	str	r2, [sp, #8]
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	2300      	movs	r3, #0
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	2300      	movs	r3, #0
 8007864:	460a      	mov	r2, r1
 8007866:	491e      	ldr	r1, [pc, #120]	; (80078e0 <vTaskStartScheduler+0xa8>)
 8007868:	481e      	ldr	r0, [pc, #120]	; (80078e4 <vTaskStartScheduler+0xac>)
 800786a:	f7ff fe1d 	bl	80074a8 <xTaskCreateStatic>
 800786e:	4603      	mov	r3, r0
 8007870:	4a1d      	ldr	r2, [pc, #116]	; (80078e8 <vTaskStartScheduler+0xb0>)
 8007872:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007874:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <vTaskStartScheduler+0xb0>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800787c:	2301      	movs	r3, #1
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	e001      	b.n	8007886 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d116      	bne.n	80078ba <vTaskStartScheduler+0x82>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	613b      	str	r3, [r7, #16]
}
 800789e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078a0:	4b12      	ldr	r3, [pc, #72]	; (80078ec <vTaskStartScheduler+0xb4>)
 80078a2:	f04f 32ff 	mov.w	r2, #4294967295
 80078a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078a8:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <vTaskStartScheduler+0xb8>)
 80078aa:	2201      	movs	r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078ae:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <vTaskStartScheduler+0xbc>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078b4:	f000 fe6c 	bl	8008590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078b8:	e00e      	b.n	80078d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c0:	d10a      	bne.n	80078d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60fb      	str	r3, [r7, #12]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <vTaskStartScheduler+0x9e>
}
 80078d8:	bf00      	nop
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	0800d5e8 	.word	0x0800d5e8
 80078e4:	08007e89 	.word	0x08007e89
 80078e8:	20002274 	.word	0x20002274
 80078ec:	20002270 	.word	0x20002270
 80078f0:	2000225c 	.word	0x2000225c
 80078f4:	20002254 	.word	0x20002254

080078f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <vTaskSuspendAll+0x18>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	4a03      	ldr	r2, [pc, #12]	; (8007910 <vTaskSuspendAll+0x18>)
 8007904:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007906:	bf00      	nop
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	20002278 	.word	0x20002278

08007914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800791e:	2300      	movs	r3, #0
 8007920:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007922:	4b41      	ldr	r3, [pc, #260]	; (8007a28 <xTaskResumeAll+0x114>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10a      	bne.n	8007940 <xTaskResumeAll+0x2c>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	603b      	str	r3, [r7, #0]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007940:	f000 fec8 	bl	80086d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007944:	4b38      	ldr	r3, [pc, #224]	; (8007a28 <xTaskResumeAll+0x114>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3b01      	subs	r3, #1
 800794a:	4a37      	ldr	r2, [pc, #220]	; (8007a28 <xTaskResumeAll+0x114>)
 800794c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800794e:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <xTaskResumeAll+0x114>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d161      	bne.n	8007a1a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007956:	4b35      	ldr	r3, [pc, #212]	; (8007a2c <xTaskResumeAll+0x118>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d05d      	beq.n	8007a1a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800795e:	e02e      	b.n	80079be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007960:	4b33      	ldr	r3, [pc, #204]	; (8007a30 <xTaskResumeAll+0x11c>)
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3318      	adds	r3, #24
 800796c:	4618      	mov	r0, r3
 800796e:	f7ff f970 	bl	8006c52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3304      	adds	r3, #4
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff f96b 	bl	8006c52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	2201      	movs	r2, #1
 8007982:	409a      	lsls	r2, r3
 8007984:	4b2b      	ldr	r3, [pc, #172]	; (8007a34 <xTaskResumeAll+0x120>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4313      	orrs	r3, r2
 800798a:	4a2a      	ldr	r2, [pc, #168]	; (8007a34 <xTaskResumeAll+0x120>)
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4a27      	ldr	r2, [pc, #156]	; (8007a38 <xTaskResumeAll+0x124>)
 800799c:	441a      	add	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4619      	mov	r1, r3
 80079a4:	4610      	mov	r0, r2
 80079a6:	f7ff f8f7 	bl	8006b98 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ae:	4b23      	ldr	r3, [pc, #140]	; (8007a3c <xTaskResumeAll+0x128>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d302      	bcc.n	80079be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80079b8:	4b21      	ldr	r3, [pc, #132]	; (8007a40 <xTaskResumeAll+0x12c>)
 80079ba:	2201      	movs	r2, #1
 80079bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079be:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <xTaskResumeAll+0x11c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1cc      	bne.n	8007960 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079cc:	f000 fb12 	bl	8007ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079d0:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <xTaskResumeAll+0x130>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d010      	beq.n	80079fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079dc:	f000 f836 	bl	8007a4c <xTaskIncrementTick>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80079e6:	4b16      	ldr	r3, [pc, #88]	; (8007a40 <xTaskResumeAll+0x12c>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1f1      	bne.n	80079dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80079f8:	4b12      	ldr	r3, [pc, #72]	; (8007a44 <xTaskResumeAll+0x130>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079fe:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <xTaskResumeAll+0x12c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a06:	2301      	movs	r3, #1
 8007a08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a0a:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <xTaskResumeAll+0x134>)
 8007a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a1a:	f000 fe8b 	bl	8008734 <vPortExitCritical>

	return xAlreadyYielded;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20002278 	.word	0x20002278
 8007a2c:	20002250 	.word	0x20002250
 8007a30:	20002210 	.word	0x20002210
 8007a34:	20002258 	.word	0x20002258
 8007a38:	20002154 	.word	0x20002154
 8007a3c:	20002150 	.word	0x20002150
 8007a40:	20002264 	.word	0x20002264
 8007a44:	20002260 	.word	0x20002260
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a56:	4b4e      	ldr	r3, [pc, #312]	; (8007b90 <xTaskIncrementTick+0x144>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f040 808e 	bne.w	8007b7c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a60:	4b4c      	ldr	r3, [pc, #304]	; (8007b94 <xTaskIncrementTick+0x148>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a68:	4a4a      	ldr	r2, [pc, #296]	; (8007b94 <xTaskIncrementTick+0x148>)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d120      	bne.n	8007ab6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a74:	4b48      	ldr	r3, [pc, #288]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	603b      	str	r3, [r7, #0]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <xTaskIncrementTick+0x46>
 8007a94:	4b40      	ldr	r3, [pc, #256]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	4b40      	ldr	r3, [pc, #256]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a3e      	ldr	r2, [pc, #248]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	4a3e      	ldr	r2, [pc, #248]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	4b3d      	ldr	r3, [pc, #244]	; (8007ba0 <xTaskIncrementTick+0x154>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	4a3c      	ldr	r2, [pc, #240]	; (8007ba0 <xTaskIncrementTick+0x154>)
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	f000 fa9f 	bl	8007ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ab6:	4b3b      	ldr	r3, [pc, #236]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d348      	bcc.n	8007b52 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ac0:	4b35      	ldr	r3, [pc, #212]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aca:	4b36      	ldr	r3, [pc, #216]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad0:	601a      	str	r2, [r3, #0]
					break;
 8007ad2:	e03e      	b.n	8007b52 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad4:	4b30      	ldr	r3, [pc, #192]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d203      	bcs.n	8007af4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aec:	4a2d      	ldr	r2, [pc, #180]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007af2:	e02e      	b.n	8007b52 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff f8aa 	bl	8006c52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3318      	adds	r3, #24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff f8a1 	bl	8006c52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	2201      	movs	r2, #1
 8007b16:	409a      	lsls	r2, r3
 8007b18:	4b23      	ldr	r3, [pc, #140]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	4a22      	ldr	r2, [pc, #136]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4a1f      	ldr	r2, [pc, #124]	; (8007bac <xTaskIncrementTick+0x160>)
 8007b30:	441a      	add	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f7ff f82d 	bl	8006b98 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b42:	4b1b      	ldr	r3, [pc, #108]	; (8007bb0 <xTaskIncrementTick+0x164>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d3b9      	bcc.n	8007ac0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b50:	e7b6      	b.n	8007ac0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b52:	4b17      	ldr	r3, [pc, #92]	; (8007bb0 <xTaskIncrementTick+0x164>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b58:	4914      	ldr	r1, [pc, #80]	; (8007bac <xTaskIncrementTick+0x160>)
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d901      	bls.n	8007b6e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b6e:	4b11      	ldr	r3, [pc, #68]	; (8007bb4 <xTaskIncrementTick+0x168>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d007      	beq.n	8007b86 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b76:	2301      	movs	r3, #1
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	e004      	b.n	8007b86 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b7c:	4b0e      	ldr	r3, [pc, #56]	; (8007bb8 <xTaskIncrementTick+0x16c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	4a0d      	ldr	r2, [pc, #52]	; (8007bb8 <xTaskIncrementTick+0x16c>)
 8007b84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b86:	697b      	ldr	r3, [r7, #20]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20002278 	.word	0x20002278
 8007b94:	20002254 	.word	0x20002254
 8007b98:	20002208 	.word	0x20002208
 8007b9c:	2000220c 	.word	0x2000220c
 8007ba0:	20002268 	.word	0x20002268
 8007ba4:	20002270 	.word	0x20002270
 8007ba8:	20002258 	.word	0x20002258
 8007bac:	20002154 	.word	0x20002154
 8007bb0:	20002150 	.word	0x20002150
 8007bb4:	20002264 	.word	0x20002264
 8007bb8:	20002260 	.word	0x20002260

08007bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bc2:	4b27      	ldr	r3, [pc, #156]	; (8007c60 <vTaskSwitchContext+0xa4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bca:	4b26      	ldr	r3, [pc, #152]	; (8007c64 <vTaskSwitchContext+0xa8>)
 8007bcc:	2201      	movs	r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bd0:	e03f      	b.n	8007c52 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007bd2:	4b24      	ldr	r3, [pc, #144]	; (8007c64 <vTaskSwitchContext+0xa8>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd8:	4b23      	ldr	r3, [pc, #140]	; (8007c68 <vTaskSwitchContext+0xac>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	fab3 f383 	clz	r3, r3
 8007be4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007be6:	7afb      	ldrb	r3, [r7, #11]
 8007be8:	f1c3 031f 	rsb	r3, r3, #31
 8007bec:	617b      	str	r3, [r7, #20]
 8007bee:	491f      	ldr	r1, [pc, #124]	; (8007c6c <vTaskSwitchContext+0xb0>)
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10a      	bne.n	8007c18 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	607b      	str	r3, [r7, #4]
}
 8007c14:	bf00      	nop
 8007c16:	e7fe      	b.n	8007c16 <vTaskSwitchContext+0x5a>
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4a12      	ldr	r2, [pc, #72]	; (8007c6c <vTaskSwitchContext+0xb0>)
 8007c24:	4413      	add	r3, r2
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	3308      	adds	r3, #8
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d104      	bne.n	8007c48 <vTaskSwitchContext+0x8c>
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	605a      	str	r2, [r3, #4]
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	4a08      	ldr	r2, [pc, #32]	; (8007c70 <vTaskSwitchContext+0xb4>)
 8007c50:	6013      	str	r3, [r2, #0]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20002278 	.word	0x20002278
 8007c64:	20002264 	.word	0x20002264
 8007c68:	20002258 	.word	0x20002258
 8007c6c:	20002154 	.word	0x20002154
 8007c70:	20002150 	.word	0x20002150

08007c74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	60fb      	str	r3, [r7, #12]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c9a:	4b07      	ldr	r3, [pc, #28]	; (8007cb8 <vTaskPlaceOnEventList+0x44>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3318      	adds	r3, #24
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fe ff9c 	bl	8006be0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ca8:	2101      	movs	r1, #1
 8007caa:	6838      	ldr	r0, [r7, #0]
 8007cac:	f000 fb7e 	bl	80083ac <prvAddCurrentTaskToDelayedList>
}
 8007cb0:	bf00      	nop
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20002150 	.word	0x20002150

08007cbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	60fb      	str	r3, [r7, #12]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	3318      	adds	r3, #24
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe ffb0 	bl	8006c52 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <xTaskRemoveFromEventList+0xac>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d11c      	bne.n	8007d34 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe ffa7 	bl	8006c52 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	2201      	movs	r2, #1
 8007d0a:	409a      	lsls	r2, r3
 8007d0c:	4b17      	ldr	r3, [pc, #92]	; (8007d6c <xTaskRemoveFromEventList+0xb0>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	4a16      	ldr	r2, [pc, #88]	; (8007d6c <xTaskRemoveFromEventList+0xb0>)
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4a13      	ldr	r2, [pc, #76]	; (8007d70 <xTaskRemoveFromEventList+0xb4>)
 8007d24:	441a      	add	r2, r3
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	f7fe ff33 	bl	8006b98 <vListInsertEnd>
 8007d32:	e005      	b.n	8007d40 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	3318      	adds	r3, #24
 8007d38:	4619      	mov	r1, r3
 8007d3a:	480e      	ldr	r0, [pc, #56]	; (8007d74 <xTaskRemoveFromEventList+0xb8>)
 8007d3c:	f7fe ff2c 	bl	8006b98 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d44:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <xTaskRemoveFromEventList+0xbc>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d905      	bls.n	8007d5a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d52:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <xTaskRemoveFromEventList+0xc0>)
 8007d54:	2201      	movs	r2, #1
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	e001      	b.n	8007d5e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d5e:	697b      	ldr	r3, [r7, #20]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	20002278 	.word	0x20002278
 8007d6c:	20002258 	.word	0x20002258
 8007d70:	20002154 	.word	0x20002154
 8007d74:	20002210 	.word	0x20002210
 8007d78:	20002150 	.word	0x20002150
 8007d7c:	20002264 	.word	0x20002264

08007d80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d88:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <vTaskInternalSetTimeOutState+0x24>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <vTaskInternalSetTimeOutState+0x28>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	605a      	str	r2, [r3, #4]
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	20002268 	.word	0x20002268
 8007da8:	20002254 	.word	0x20002254

08007dac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	613b      	str	r3, [r7, #16]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	60fb      	str	r3, [r7, #12]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007dee:	f000 fc71 	bl	80086d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007df2:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <xTaskCheckForTimeOut+0xbc>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0a:	d102      	bne.n	8007e12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61fb      	str	r3, [r7, #28]
 8007e10:	e023      	b.n	8007e5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	4b15      	ldr	r3, [pc, #84]	; (8007e6c <xTaskCheckForTimeOut+0xc0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d007      	beq.n	8007e2e <xTaskCheckForTimeOut+0x82>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d302      	bcc.n	8007e2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	61fb      	str	r3, [r7, #28]
 8007e2c:	e015      	b.n	8007e5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d20b      	bcs.n	8007e50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff ff9b 	bl	8007d80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	e004      	b.n	8007e5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e56:	2301      	movs	r3, #1
 8007e58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e5a:	f000 fc6b 	bl	8008734 <vPortExitCritical>

	return xReturn;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3720      	adds	r7, #32
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20002254 	.word	0x20002254
 8007e6c:	20002268 	.word	0x20002268

08007e70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e74:	4b03      	ldr	r3, [pc, #12]	; (8007e84 <vTaskMissedYield+0x14>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
}
 8007e7a:	bf00      	nop
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	20002264 	.word	0x20002264

08007e88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e90:	f000 f852 	bl	8007f38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e94:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <prvIdleTask+0x28>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d9f9      	bls.n	8007e90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e9c:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <prvIdleTask+0x2c>)
 8007e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007eac:	e7f0      	b.n	8007e90 <prvIdleTask+0x8>
 8007eae:	bf00      	nop
 8007eb0:	20002154 	.word	0x20002154
 8007eb4:	e000ed04 	.word	0xe000ed04

08007eb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	e00c      	b.n	8007ede <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4a12      	ldr	r2, [pc, #72]	; (8007f18 <prvInitialiseTaskLists+0x60>)
 8007ed0:	4413      	add	r3, r2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fe33 	bl	8006b3e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3301      	adds	r3, #1
 8007edc:	607b      	str	r3, [r7, #4]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b06      	cmp	r3, #6
 8007ee2:	d9ef      	bls.n	8007ec4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ee4:	480d      	ldr	r0, [pc, #52]	; (8007f1c <prvInitialiseTaskLists+0x64>)
 8007ee6:	f7fe fe2a 	bl	8006b3e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007eea:	480d      	ldr	r0, [pc, #52]	; (8007f20 <prvInitialiseTaskLists+0x68>)
 8007eec:	f7fe fe27 	bl	8006b3e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ef0:	480c      	ldr	r0, [pc, #48]	; (8007f24 <prvInitialiseTaskLists+0x6c>)
 8007ef2:	f7fe fe24 	bl	8006b3e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ef6:	480c      	ldr	r0, [pc, #48]	; (8007f28 <prvInitialiseTaskLists+0x70>)
 8007ef8:	f7fe fe21 	bl	8006b3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007efc:	480b      	ldr	r0, [pc, #44]	; (8007f2c <prvInitialiseTaskLists+0x74>)
 8007efe:	f7fe fe1e 	bl	8006b3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f02:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <prvInitialiseTaskLists+0x78>)
 8007f04:	4a05      	ldr	r2, [pc, #20]	; (8007f1c <prvInitialiseTaskLists+0x64>)
 8007f06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f08:	4b0a      	ldr	r3, [pc, #40]	; (8007f34 <prvInitialiseTaskLists+0x7c>)
 8007f0a:	4a05      	ldr	r2, [pc, #20]	; (8007f20 <prvInitialiseTaskLists+0x68>)
 8007f0c:	601a      	str	r2, [r3, #0]
}
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20002154 	.word	0x20002154
 8007f1c:	200021e0 	.word	0x200021e0
 8007f20:	200021f4 	.word	0x200021f4
 8007f24:	20002210 	.word	0x20002210
 8007f28:	20002224 	.word	0x20002224
 8007f2c:	2000223c 	.word	0x2000223c
 8007f30:	20002208 	.word	0x20002208
 8007f34:	2000220c 	.word	0x2000220c

08007f38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f3e:	e019      	b.n	8007f74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f40:	f000 fbc8 	bl	80086d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f44:	4b10      	ldr	r3, [pc, #64]	; (8007f88 <prvCheckTasksWaitingTermination+0x50>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe fe7e 	bl	8006c52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f56:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <prvCheckTasksWaitingTermination+0x54>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	4a0b      	ldr	r2, [pc, #44]	; (8007f8c <prvCheckTasksWaitingTermination+0x54>)
 8007f5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f60:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <prvCheckTasksWaitingTermination+0x58>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	4a0a      	ldr	r2, [pc, #40]	; (8007f90 <prvCheckTasksWaitingTermination+0x58>)
 8007f68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f6a:	f000 fbe3 	bl	8008734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f810 	bl	8007f94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f74:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <prvCheckTasksWaitingTermination+0x58>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e1      	bne.n	8007f40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f7c:	bf00      	nop
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20002224 	.word	0x20002224
 8007f8c:	20002250 	.word	0x20002250
 8007f90:	20002238 	.word	0x20002238

08007f94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d108      	bne.n	8007fb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fd40 	bl	8008a30 <vPortFree>
				vPortFree( pxTCB );
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fd3d 	bl	8008a30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fb6:	e018      	b.n	8007fea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d103      	bne.n	8007fca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fd34 	bl	8008a30 <vPortFree>
	}
 8007fc8:	e00f      	b.n	8007fea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d00a      	beq.n	8007fea <prvDeleteTCB+0x56>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	60fb      	str	r3, [r7, #12]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <prvDeleteTCB+0x54>
	}
 8007fea:	bf00      	nop
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	; (800802c <prvResetNextTaskUnblockTime+0x38>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d104      	bne.n	800800e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <prvResetNextTaskUnblockTime+0x3c>)
 8008006:	f04f 32ff 	mov.w	r2, #4294967295
 800800a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800800c:	e008      	b.n	8008020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800800e:	4b07      	ldr	r3, [pc, #28]	; (800802c <prvResetNextTaskUnblockTime+0x38>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	4a04      	ldr	r2, [pc, #16]	; (8008030 <prvResetNextTaskUnblockTime+0x3c>)
 800801e:	6013      	str	r3, [r2, #0]
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	20002208 	.word	0x20002208
 8008030:	20002270 	.word	0x20002270

08008034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800803a:	4b0b      	ldr	r3, [pc, #44]	; (8008068 <xTaskGetSchedulerState+0x34>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008042:	2301      	movs	r3, #1
 8008044:	607b      	str	r3, [r7, #4]
 8008046:	e008      	b.n	800805a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008048:	4b08      	ldr	r3, [pc, #32]	; (800806c <xTaskGetSchedulerState+0x38>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008050:	2302      	movs	r3, #2
 8008052:	607b      	str	r3, [r7, #4]
 8008054:	e001      	b.n	800805a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008056:	2300      	movs	r3, #0
 8008058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800805a:	687b      	ldr	r3, [r7, #4]
	}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	2000225c 	.word	0x2000225c
 800806c:	20002278 	.word	0x20002278

08008070 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d05e      	beq.n	8008144 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808a:	4b31      	ldr	r3, [pc, #196]	; (8008150 <xTaskPriorityInherit+0xe0>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	429a      	cmp	r2, r3
 8008092:	d24e      	bcs.n	8008132 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	db06      	blt.n	80080aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809c:	4b2c      	ldr	r3, [pc, #176]	; (8008150 <xTaskPriorityInherit+0xe0>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	f1c3 0207 	rsb	r2, r3, #7
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	6959      	ldr	r1, [r3, #20]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4a26      	ldr	r2, [pc, #152]	; (8008154 <xTaskPriorityInherit+0xe4>)
 80080bc:	4413      	add	r3, r2
 80080be:	4299      	cmp	r1, r3
 80080c0:	d12f      	bne.n	8008122 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	3304      	adds	r3, #4
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe fdc3 	bl	8006c52 <uxListRemove>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d6:	2201      	movs	r2, #1
 80080d8:	fa02 f303 	lsl.w	r3, r2, r3
 80080dc:	43da      	mvns	r2, r3
 80080de:	4b1e      	ldr	r3, [pc, #120]	; (8008158 <xTaskPriorityInherit+0xe8>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4013      	ands	r3, r2
 80080e4:	4a1c      	ldr	r2, [pc, #112]	; (8008158 <xTaskPriorityInherit+0xe8>)
 80080e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080e8:	4b19      	ldr	r3, [pc, #100]	; (8008150 <xTaskPriorityInherit+0xe0>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	2201      	movs	r2, #1
 80080f8:	409a      	lsls	r2, r3
 80080fa:	4b17      	ldr	r3, [pc, #92]	; (8008158 <xTaskPriorityInherit+0xe8>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4313      	orrs	r3, r2
 8008100:	4a15      	ldr	r2, [pc, #84]	; (8008158 <xTaskPriorityInherit+0xe8>)
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4a10      	ldr	r2, [pc, #64]	; (8008154 <xTaskPriorityInherit+0xe4>)
 8008112:	441a      	add	r2, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	3304      	adds	r3, #4
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fe fd3c 	bl	8006b98 <vListInsertEnd>
 8008120:	e004      	b.n	800812c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008122:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <xTaskPriorityInherit+0xe0>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800812c:	2301      	movs	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	e008      	b.n	8008144 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008136:	4b06      	ldr	r3, [pc, #24]	; (8008150 <xTaskPriorityInherit+0xe0>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	429a      	cmp	r2, r3
 800813e:	d201      	bcs.n	8008144 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008140:	2301      	movs	r3, #1
 8008142:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008144:	68fb      	ldr	r3, [r7, #12]
	}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20002150 	.word	0x20002150
 8008154:	20002154 	.word	0x20002154
 8008158:	20002258 	.word	0x20002258

0800815c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d06e      	beq.n	8008250 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008172:	4b3a      	ldr	r3, [pc, #232]	; (800825c <xTaskPriorityDisinherit+0x100>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	429a      	cmp	r2, r3
 800817a:	d00a      	beq.n	8008192 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	60fb      	str	r3, [r7, #12]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	60bb      	str	r3, [r7, #8]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b4:	1e5a      	subs	r2, r3, #1
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d044      	beq.n	8008250 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d140      	bne.n	8008250 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	3304      	adds	r3, #4
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fd3d 	bl	8006c52 <uxListRemove>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d115      	bne.n	800820a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e2:	491f      	ldr	r1, [pc, #124]	; (8008260 <xTaskPriorityDisinherit+0x104>)
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10a      	bne.n	800820a <xTaskPriorityDisinherit+0xae>
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	2201      	movs	r2, #1
 80081fa:	fa02 f303 	lsl.w	r3, r2, r3
 80081fe:	43da      	mvns	r2, r3
 8008200:	4b18      	ldr	r3, [pc, #96]	; (8008264 <xTaskPriorityDisinherit+0x108>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4013      	ands	r3, r2
 8008206:	4a17      	ldr	r2, [pc, #92]	; (8008264 <xTaskPriorityDisinherit+0x108>)
 8008208:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	f1c3 0207 	rsb	r2, r3, #7
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	2201      	movs	r2, #1
 8008224:	409a      	lsls	r2, r3
 8008226:	4b0f      	ldr	r3, [pc, #60]	; (8008264 <xTaskPriorityDisinherit+0x108>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4313      	orrs	r3, r2
 800822c:	4a0d      	ldr	r2, [pc, #52]	; (8008264 <xTaskPriorityDisinherit+0x108>)
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008234:	4613      	mov	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4a08      	ldr	r2, [pc, #32]	; (8008260 <xTaskPriorityDisinherit+0x104>)
 800823e:	441a      	add	r2, r3
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	3304      	adds	r3, #4
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f7fe fca6 	bl	8006b98 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008250:	697b      	ldr	r3, [r7, #20]
	}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20002150 	.word	0x20002150
 8008260:	20002154 	.word	0x20002154
 8008264:	20002258 	.word	0x20002258

08008268 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008276:	2301      	movs	r3, #1
 8008278:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d077      	beq.n	8008370 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	60fb      	str	r3, [r7, #12]
}
 800829a:	bf00      	nop
 800829c:	e7fe      	b.n	800829c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d902      	bls.n	80082ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	61fb      	str	r3, [r7, #28]
 80082ac:	e002      	b.n	80082b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	69fa      	ldr	r2, [r7, #28]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d058      	beq.n	8008370 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d153      	bne.n	8008370 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082c8:	4b2b      	ldr	r3, [pc, #172]	; (8008378 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d10a      	bne.n	80082e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	60bb      	str	r3, [r7, #8]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	69fa      	ldr	r2, [r7, #28]
 80082f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	db04      	blt.n	8008306 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	f1c3 0207 	rsb	r2, r3, #7
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	6959      	ldr	r1, [r3, #20]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4a19      	ldr	r2, [pc, #100]	; (800837c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008316:	4413      	add	r3, r2
 8008318:	4299      	cmp	r1, r3
 800831a:	d129      	bne.n	8008370 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	3304      	adds	r3, #4
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe fc96 	bl	8006c52 <uxListRemove>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	2201      	movs	r2, #1
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
 8008336:	43da      	mvns	r2, r3
 8008338:	4b11      	ldr	r3, [pc, #68]	; (8008380 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4013      	ands	r3, r2
 800833e:	4a10      	ldr	r2, [pc, #64]	; (8008380 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008340:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	2201      	movs	r2, #1
 8008348:	409a      	lsls	r2, r3
 800834a:	4b0d      	ldr	r3, [pc, #52]	; (8008380 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4313      	orrs	r3, r2
 8008350:	4a0b      	ldr	r2, [pc, #44]	; (8008380 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008358:	4613      	mov	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4a06      	ldr	r2, [pc, #24]	; (800837c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008362:	441a      	add	r2, r3
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	3304      	adds	r3, #4
 8008368:	4619      	mov	r1, r3
 800836a:	4610      	mov	r0, r2
 800836c:	f7fe fc14 	bl	8006b98 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008370:	bf00      	nop
 8008372:	3720      	adds	r7, #32
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	20002150 	.word	0x20002150
 800837c:	20002154 	.word	0x20002154
 8008380:	20002258 	.word	0x20002258

08008384 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008388:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008396:	3201      	adds	r2, #1
 8008398:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800839a:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800839c:	681b      	ldr	r3, [r3, #0]
	}
 800839e:	4618      	mov	r0, r3
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	20002150 	.word	0x20002150

080083ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083b6:	4b29      	ldr	r3, [pc, #164]	; (800845c <prvAddCurrentTaskToDelayedList+0xb0>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083bc:	4b28      	ldr	r3, [pc, #160]	; (8008460 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3304      	adds	r3, #4
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fc45 	bl	8006c52 <uxListRemove>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10b      	bne.n	80083e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80083ce:	4b24      	ldr	r3, [pc, #144]	; (8008460 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d4:	2201      	movs	r2, #1
 80083d6:	fa02 f303 	lsl.w	r3, r2, r3
 80083da:	43da      	mvns	r2, r3
 80083dc:	4b21      	ldr	r3, [pc, #132]	; (8008464 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4013      	ands	r3, r2
 80083e2:	4a20      	ldr	r2, [pc, #128]	; (8008464 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d10a      	bne.n	8008404 <prvAddCurrentTaskToDelayedList+0x58>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d007      	beq.n	8008404 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083f4:	4b1a      	ldr	r3, [pc, #104]	; (8008460 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3304      	adds	r3, #4
 80083fa:	4619      	mov	r1, r3
 80083fc:	481a      	ldr	r0, [pc, #104]	; (8008468 <prvAddCurrentTaskToDelayedList+0xbc>)
 80083fe:	f7fe fbcb 	bl	8006b98 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008402:	e026      	b.n	8008452 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4413      	add	r3, r2
 800840a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800840c:	4b14      	ldr	r3, [pc, #80]	; (8008460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	429a      	cmp	r2, r3
 800841a:	d209      	bcs.n	8008430 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800841c:	4b13      	ldr	r3, [pc, #76]	; (800846c <prvAddCurrentTaskToDelayedList+0xc0>)
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4b0f      	ldr	r3, [pc, #60]	; (8008460 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3304      	adds	r3, #4
 8008426:	4619      	mov	r1, r3
 8008428:	4610      	mov	r0, r2
 800842a:	f7fe fbd9 	bl	8006be0 <vListInsert>
}
 800842e:	e010      	b.n	8008452 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008430:	4b0f      	ldr	r3, [pc, #60]	; (8008470 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3304      	adds	r3, #4
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f7fe fbcf 	bl	8006be0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008442:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	429a      	cmp	r2, r3
 800844a:	d202      	bcs.n	8008452 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800844c:	4a09      	ldr	r2, [pc, #36]	; (8008474 <prvAddCurrentTaskToDelayedList+0xc8>)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6013      	str	r3, [r2, #0]
}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20002254 	.word	0x20002254
 8008460:	20002150 	.word	0x20002150
 8008464:	20002258 	.word	0x20002258
 8008468:	2000223c 	.word	0x2000223c
 800846c:	2000220c 	.word	0x2000220c
 8008470:	20002208 	.word	0x20002208
 8008474:	20002270 	.word	0x20002270

08008478 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3b04      	subs	r3, #4
 8008488:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3b04      	subs	r3, #4
 8008496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f023 0201 	bic.w	r2, r3, #1
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3b04      	subs	r3, #4
 80084a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084a8:	4a0c      	ldr	r2, [pc, #48]	; (80084dc <pxPortInitialiseStack+0x64>)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3b14      	subs	r3, #20
 80084b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3b04      	subs	r3, #4
 80084be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f06f 0202 	mvn.w	r2, #2
 80084c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3b20      	subs	r3, #32
 80084cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084ce:	68fb      	ldr	r3, [r7, #12]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	080084e1 	.word	0x080084e1

080084e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084ea:	4b12      	ldr	r3, [pc, #72]	; (8008534 <prvTaskExitError+0x54>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f2:	d00a      	beq.n	800850a <prvTaskExitError+0x2a>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	60fb      	str	r3, [r7, #12]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <prvTaskExitError+0x28>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	60bb      	str	r3, [r7, #8]
}
 800851c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800851e:	bf00      	nop
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0fc      	beq.n	8008520 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008526:	bf00      	nop
 8008528:	bf00      	nop
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	200002e8 	.word	0x200002e8
	...

08008540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <pxCurrentTCBConst2>)
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	6808      	ldr	r0, [r1, #0]
 8008546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	f380 8809 	msr	PSP, r0
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8811 	msr	BASEPRI, r0
 800855a:	4770      	bx	lr
 800855c:	f3af 8000 	nop.w

08008560 <pxCurrentTCBConst2>:
 8008560:	20002150 	.word	0x20002150
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008568:	4808      	ldr	r0, [pc, #32]	; (800858c <prvPortStartFirstTask+0x24>)
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	6800      	ldr	r0, [r0, #0]
 800856e:	f380 8808 	msr	MSP, r0
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8814 	msr	CONTROL, r0
 800857a:	b662      	cpsie	i
 800857c:	b661      	cpsie	f
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	df00      	svc	0
 8008588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800858a:	bf00      	nop
 800858c:	e000ed08 	.word	0xe000ed08

08008590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008596:	4b46      	ldr	r3, [pc, #280]	; (80086b0 <xPortStartScheduler+0x120>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a46      	ldr	r2, [pc, #280]	; (80086b4 <xPortStartScheduler+0x124>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10a      	bne.n	80085b6 <xPortStartScheduler+0x26>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085b6:	4b3e      	ldr	r3, [pc, #248]	; (80086b0 <xPortStartScheduler+0x120>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a3f      	ldr	r2, [pc, #252]	; (80086b8 <xPortStartScheduler+0x128>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10a      	bne.n	80085d6 <xPortStartScheduler+0x46>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	60fb      	str	r3, [r7, #12]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085d6:	4b39      	ldr	r3, [pc, #228]	; (80086bc <xPortStartScheduler+0x12c>)
 80085d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	22ff      	movs	r2, #255	; 0xff
 80085e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	4b31      	ldr	r3, [pc, #196]	; (80086c0 <xPortStartScheduler+0x130>)
 80085fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085fe:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <xPortStartScheduler+0x134>)
 8008600:	2207      	movs	r2, #7
 8008602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008604:	e009      	b.n	800861a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008606:	4b2f      	ldr	r3, [pc, #188]	; (80086c4 <xPortStartScheduler+0x134>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3b01      	subs	r3, #1
 800860c:	4a2d      	ldr	r2, [pc, #180]	; (80086c4 <xPortStartScheduler+0x134>)
 800860e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	b2db      	uxtb	r3, r3
 8008618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008622:	2b80      	cmp	r3, #128	; 0x80
 8008624:	d0ef      	beq.n	8008606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008626:	4b27      	ldr	r3, [pc, #156]	; (80086c4 <xPortStartScheduler+0x134>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f1c3 0307 	rsb	r3, r3, #7
 800862e:	2b04      	cmp	r3, #4
 8008630:	d00a      	beq.n	8008648 <xPortStartScheduler+0xb8>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	60bb      	str	r3, [r7, #8]
}
 8008644:	bf00      	nop
 8008646:	e7fe      	b.n	8008646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008648:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <xPortStartScheduler+0x134>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <xPortStartScheduler+0x134>)
 8008650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008652:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <xPortStartScheduler+0x134>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800865a:	4a1a      	ldr	r2, [pc, #104]	; (80086c4 <xPortStartScheduler+0x134>)
 800865c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008666:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <xPortStartScheduler+0x138>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <xPortStartScheduler+0x138>)
 800866c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <xPortStartScheduler+0x138>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a14      	ldr	r2, [pc, #80]	; (80086c8 <xPortStartScheduler+0x138>)
 8008678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800867c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800867e:	f000 f8dd 	bl	800883c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008682:	4b12      	ldr	r3, [pc, #72]	; (80086cc <xPortStartScheduler+0x13c>)
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008688:	f000 f8fc 	bl	8008884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800868c:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <xPortStartScheduler+0x140>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a0f      	ldr	r2, [pc, #60]	; (80086d0 <xPortStartScheduler+0x140>)
 8008692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008698:	f7ff ff66 	bl	8008568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800869c:	f7ff fa8e 	bl	8007bbc <vTaskSwitchContext>
	prvTaskExitError();
 80086a0:	f7ff ff1e 	bl	80084e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	e000ed00 	.word	0xe000ed00
 80086b4:	410fc271 	.word	0x410fc271
 80086b8:	410fc270 	.word	0x410fc270
 80086bc:	e000e400 	.word	0xe000e400
 80086c0:	2000227c 	.word	0x2000227c
 80086c4:	20002280 	.word	0x20002280
 80086c8:	e000ed20 	.word	0xe000ed20
 80086cc:	200002e8 	.word	0x200002e8
 80086d0:	e000ef34 	.word	0xe000ef34

080086d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	607b      	str	r3, [r7, #4]
}
 80086ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086ee:	4b0f      	ldr	r3, [pc, #60]	; (800872c <vPortEnterCritical+0x58>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	4a0d      	ldr	r2, [pc, #52]	; (800872c <vPortEnterCritical+0x58>)
 80086f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086f8:	4b0c      	ldr	r3, [pc, #48]	; (800872c <vPortEnterCritical+0x58>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d10f      	bne.n	8008720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <vPortEnterCritical+0x5c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <vPortEnterCritical+0x4c>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	603b      	str	r3, [r7, #0]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <vPortEnterCritical+0x4a>
	}
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	200002e8 	.word	0x200002e8
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800873a:	4b12      	ldr	r3, [pc, #72]	; (8008784 <vPortExitCritical+0x50>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <vPortExitCritical+0x24>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	607b      	str	r3, [r7, #4]
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008758:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <vPortExitCritical+0x50>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3b01      	subs	r3, #1
 800875e:	4a09      	ldr	r2, [pc, #36]	; (8008784 <vPortExitCritical+0x50>)
 8008760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008762:	4b08      	ldr	r3, [pc, #32]	; (8008784 <vPortExitCritical+0x50>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d105      	bne.n	8008776 <vPortExitCritical+0x42>
 800876a:	2300      	movs	r3, #0
 800876c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	200002e8 	.word	0x200002e8
	...

08008790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008790:	f3ef 8009 	mrs	r0, PSP
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <pxCurrentTCBConst>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	f01e 0f10 	tst.w	lr, #16
 80087a0:	bf08      	it	eq
 80087a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087aa:	6010      	str	r0, [r2, #0]
 80087ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087b4:	f380 8811 	msr	BASEPRI, r0
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f7ff f9fc 	bl	8007bbc <vTaskSwitchContext>
 80087c4:	f04f 0000 	mov.w	r0, #0
 80087c8:	f380 8811 	msr	BASEPRI, r0
 80087cc:	bc09      	pop	{r0, r3}
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	6808      	ldr	r0, [r1, #0]
 80087d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d6:	f01e 0f10 	tst.w	lr, #16
 80087da:	bf08      	it	eq
 80087dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087e0:	f380 8809 	msr	PSP, r0
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w

080087f0 <pxCurrentTCBConst>:
 80087f0:	20002150 	.word	0x20002150
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008812:	f7ff f91b 	bl	8007a4c <xTaskIncrementTick>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881c:	4b06      	ldr	r3, [pc, #24]	; (8008838 <xPortSysTickHandler+0x40>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f383 8811 	msr	BASEPRI, r3
}
 800882e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008840:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008846:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <vPortSetupTimerInterrupt+0x38>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800884c:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <vPortSetupTimerInterrupt+0x3c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <vPortSetupTimerInterrupt+0x40>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	099b      	lsrs	r3, r3, #6
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <vPortSetupTimerInterrupt+0x44>)
 800885a:	3b01      	subs	r3, #1
 800885c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800885e:	4b04      	ldr	r3, [pc, #16]	; (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008860:	2207      	movs	r2, #7
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	e000e010 	.word	0xe000e010
 8008874:	e000e018 	.word	0xe000e018
 8008878:	20000018 	.word	0x20000018
 800887c:	10624dd3 	.word	0x10624dd3
 8008880:	e000e014 	.word	0xe000e014

08008884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008894 <vPortEnableVFP+0x10>
 8008888:	6801      	ldr	r1, [r0, #0]
 800888a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800888e:	6001      	str	r1, [r0, #0]
 8008890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008892:	bf00      	nop
 8008894:	e000ed88 	.word	0xe000ed88

08008898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08a      	sub	sp, #40	; 0x28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088a4:	f7ff f828 	bl	80078f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088a8:	4b5b      	ldr	r3, [pc, #364]	; (8008a18 <pvPortMalloc+0x180>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088b0:	f000 f920 	bl	8008af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088b4:	4b59      	ldr	r3, [pc, #356]	; (8008a1c <pvPortMalloc+0x184>)
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4013      	ands	r3, r2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f040 8093 	bne.w	80089e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01d      	beq.n	8008904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80088c8:	2208      	movs	r2, #8
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4413      	add	r3, r2
 80088ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f003 0307 	and.w	r3, r3, #7
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d014      	beq.n	8008904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f023 0307 	bic.w	r3, r3, #7
 80088e0:	3308      	adds	r3, #8
 80088e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00a      	beq.n	8008904 <pvPortMalloc+0x6c>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	617b      	str	r3, [r7, #20]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d06e      	beq.n	80089e8 <pvPortMalloc+0x150>
 800890a:	4b45      	ldr	r3, [pc, #276]	; (8008a20 <pvPortMalloc+0x188>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	429a      	cmp	r2, r3
 8008912:	d869      	bhi.n	80089e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008914:	4b43      	ldr	r3, [pc, #268]	; (8008a24 <pvPortMalloc+0x18c>)
 8008916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008918:	4b42      	ldr	r3, [pc, #264]	; (8008a24 <pvPortMalloc+0x18c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800891e:	e004      	b.n	800892a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d903      	bls.n	800893c <pvPortMalloc+0xa4>
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1f1      	bne.n	8008920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800893c:	4b36      	ldr	r3, [pc, #216]	; (8008a18 <pvPortMalloc+0x180>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008942:	429a      	cmp	r2, r3
 8008944:	d050      	beq.n	80089e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2208      	movs	r2, #8
 800894c:	4413      	add	r3, r2
 800894e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	1ad2      	subs	r2, r2, r3
 8008960:	2308      	movs	r3, #8
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	429a      	cmp	r2, r3
 8008966:	d91f      	bls.n	80089a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4413      	add	r3, r2
 800896e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <pvPortMalloc+0xf8>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	613b      	str	r3, [r7, #16]
}
 800898c:	bf00      	nop
 800898e:	e7fe      	b.n	800898e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	1ad2      	subs	r2, r2, r3
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089a2:	69b8      	ldr	r0, [r7, #24]
 80089a4:	f000 f908 	bl	8008bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089a8:	4b1d      	ldr	r3, [pc, #116]	; (8008a20 <pvPortMalloc+0x188>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	4a1b      	ldr	r2, [pc, #108]	; (8008a20 <pvPortMalloc+0x188>)
 80089b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089b6:	4b1a      	ldr	r3, [pc, #104]	; (8008a20 <pvPortMalloc+0x188>)
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <pvPortMalloc+0x190>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d203      	bcs.n	80089ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089c2:	4b17      	ldr	r3, [pc, #92]	; (8008a20 <pvPortMalloc+0x188>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a18      	ldr	r2, [pc, #96]	; (8008a28 <pvPortMalloc+0x190>)
 80089c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <pvPortMalloc+0x184>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	431a      	orrs	r2, r3
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80089de:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <pvPortMalloc+0x194>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3301      	adds	r3, #1
 80089e4:	4a11      	ldr	r2, [pc, #68]	; (8008a2c <pvPortMalloc+0x194>)
 80089e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089e8:	f7fe ff94 	bl	8007914 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <pvPortMalloc+0x174>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	60fb      	str	r3, [r7, #12]
}
 8008a08:	bf00      	nop
 8008a0a:	e7fe      	b.n	8008a0a <pvPortMalloc+0x172>
	return pvReturn;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3728      	adds	r7, #40	; 0x28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20005e8c 	.word	0x20005e8c
 8008a1c:	20005ea0 	.word	0x20005ea0
 8008a20:	20005e90 	.word	0x20005e90
 8008a24:	20005e84 	.word	0x20005e84
 8008a28:	20005e94 	.word	0x20005e94
 8008a2c:	20005e98 	.word	0x20005e98

08008a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d04d      	beq.n	8008ade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a42:	2308      	movs	r3, #8
 8008a44:	425b      	negs	r3, r3
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4413      	add	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	4b24      	ldr	r3, [pc, #144]	; (8008ae8 <vPortFree+0xb8>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10a      	bne.n	8008a74 <vPortFree+0x44>
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	60fb      	str	r3, [r7, #12]
}
 8008a70:	bf00      	nop
 8008a72:	e7fe      	b.n	8008a72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00a      	beq.n	8008a92 <vPortFree+0x62>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	60bb      	str	r3, [r7, #8]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	4b14      	ldr	r3, [pc, #80]	; (8008ae8 <vPortFree+0xb8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d01e      	beq.n	8008ade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d11a      	bne.n	8008ade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <vPortFree+0xb8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	43db      	mvns	r3, r3
 8008ab2:	401a      	ands	r2, r3
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ab8:	f7fe ff1e 	bl	80078f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <vPortFree+0xbc>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	4a09      	ldr	r2, [pc, #36]	; (8008aec <vPortFree+0xbc>)
 8008ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008aca:	6938      	ldr	r0, [r7, #16]
 8008acc:	f000 f874 	bl	8008bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ad0:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <vPortFree+0xc0>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	4a06      	ldr	r2, [pc, #24]	; (8008af0 <vPortFree+0xc0>)
 8008ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ada:	f7fe ff1b 	bl	8007914 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ade:	bf00      	nop
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20005ea0 	.word	0x20005ea0
 8008aec:	20005e90 	.word	0x20005e90
 8008af0:	20005e9c 	.word	0x20005e9c

08008af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008afa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b00:	4b27      	ldr	r3, [pc, #156]	; (8008ba0 <prvHeapInit+0xac>)
 8008b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00c      	beq.n	8008b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3307      	adds	r3, #7
 8008b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 0307 	bic.w	r3, r3, #7
 8008b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	4a1f      	ldr	r2, [pc, #124]	; (8008ba0 <prvHeapInit+0xac>)
 8008b24:	4413      	add	r3, r2
 8008b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ba4 <prvHeapInit+0xb0>)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b32:	4b1c      	ldr	r3, [pc, #112]	; (8008ba4 <prvHeapInit+0xb0>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b40:	2208      	movs	r2, #8
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	1a9b      	subs	r3, r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 0307 	bic.w	r3, r3, #7
 8008b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4a15      	ldr	r2, [pc, #84]	; (8008ba8 <prvHeapInit+0xb4>)
 8008b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b56:	4b14      	ldr	r3, [pc, #80]	; (8008ba8 <prvHeapInit+0xb4>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b5e:	4b12      	ldr	r3, [pc, #72]	; (8008ba8 <prvHeapInit+0xb4>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	1ad2      	subs	r2, r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b74:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <prvHeapInit+0xb4>)
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <prvHeapInit+0xb8>)
 8008b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	4a09      	ldr	r2, [pc, #36]	; (8008bb0 <prvHeapInit+0xbc>)
 8008b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b8c:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <prvHeapInit+0xc0>)
 8008b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b92:	601a      	str	r2, [r3, #0]
}
 8008b94:	bf00      	nop
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20002284 	.word	0x20002284
 8008ba4:	20005e84 	.word	0x20005e84
 8008ba8:	20005e8c 	.word	0x20005e8c
 8008bac:	20005e94 	.word	0x20005e94
 8008bb0:	20005e90 	.word	0x20005e90
 8008bb4:	20005ea0 	.word	0x20005ea0

08008bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bc0:	4b28      	ldr	r3, [pc, #160]	; (8008c64 <prvInsertBlockIntoFreeList+0xac>)
 8008bc2:	60fb      	str	r3, [r7, #12]
 8008bc4:	e002      	b.n	8008bcc <prvInsertBlockIntoFreeList+0x14>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d8f7      	bhi.n	8008bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	4413      	add	r3, r2
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d108      	bne.n	8008bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	441a      	add	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	441a      	add	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d118      	bne.n	8008c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <prvInsertBlockIntoFreeList+0xb0>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d00d      	beq.n	8008c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	441a      	add	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	e008      	b.n	8008c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c36:	4b0c      	ldr	r3, [pc, #48]	; (8008c68 <prvInsertBlockIntoFreeList+0xb0>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	e003      	b.n	8008c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d002      	beq.n	8008c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c56:	bf00      	nop
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20005e84 	.word	0x20005e84
 8008c68:	20005e8c 	.word	0x20005e8c

08008c6c <__errno>:
 8008c6c:	4b01      	ldr	r3, [pc, #4]	; (8008c74 <__errno+0x8>)
 8008c6e:	6818      	ldr	r0, [r3, #0]
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	200002ec 	.word	0x200002ec

08008c78 <__sflush_r>:
 8008c78:	898a      	ldrh	r2, [r1, #12]
 8008c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7e:	4605      	mov	r5, r0
 8008c80:	0710      	lsls	r0, r2, #28
 8008c82:	460c      	mov	r4, r1
 8008c84:	d458      	bmi.n	8008d38 <__sflush_r+0xc0>
 8008c86:	684b      	ldr	r3, [r1, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dc05      	bgt.n	8008c98 <__sflush_r+0x20>
 8008c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	dc02      	bgt.n	8008c98 <__sflush_r+0x20>
 8008c92:	2000      	movs	r0, #0
 8008c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c9a:	2e00      	cmp	r6, #0
 8008c9c:	d0f9      	beq.n	8008c92 <__sflush_r+0x1a>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ca4:	682f      	ldr	r7, [r5, #0]
 8008ca6:	602b      	str	r3, [r5, #0]
 8008ca8:	d032      	beq.n	8008d10 <__sflush_r+0x98>
 8008caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	075a      	lsls	r2, r3, #29
 8008cb0:	d505      	bpl.n	8008cbe <__sflush_r+0x46>
 8008cb2:	6863      	ldr	r3, [r4, #4]
 8008cb4:	1ac0      	subs	r0, r0, r3
 8008cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cb8:	b10b      	cbz	r3, 8008cbe <__sflush_r+0x46>
 8008cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cbc:	1ac0      	subs	r0, r0, r3
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cc4:	6a21      	ldr	r1, [r4, #32]
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	47b0      	blx	r6
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	d106      	bne.n	8008cde <__sflush_r+0x66>
 8008cd0:	6829      	ldr	r1, [r5, #0]
 8008cd2:	291d      	cmp	r1, #29
 8008cd4:	d82c      	bhi.n	8008d30 <__sflush_r+0xb8>
 8008cd6:	4a2a      	ldr	r2, [pc, #168]	; (8008d80 <__sflush_r+0x108>)
 8008cd8:	40ca      	lsrs	r2, r1
 8008cda:	07d6      	lsls	r6, r2, #31
 8008cdc:	d528      	bpl.n	8008d30 <__sflush_r+0xb8>
 8008cde:	2200      	movs	r2, #0
 8008ce0:	6062      	str	r2, [r4, #4]
 8008ce2:	04d9      	lsls	r1, r3, #19
 8008ce4:	6922      	ldr	r2, [r4, #16]
 8008ce6:	6022      	str	r2, [r4, #0]
 8008ce8:	d504      	bpl.n	8008cf4 <__sflush_r+0x7c>
 8008cea:	1c42      	adds	r2, r0, #1
 8008cec:	d101      	bne.n	8008cf2 <__sflush_r+0x7a>
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	b903      	cbnz	r3, 8008cf4 <__sflush_r+0x7c>
 8008cf2:	6560      	str	r0, [r4, #84]	; 0x54
 8008cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cf6:	602f      	str	r7, [r5, #0]
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	d0ca      	beq.n	8008c92 <__sflush_r+0x1a>
 8008cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d00:	4299      	cmp	r1, r3
 8008d02:	d002      	beq.n	8008d0a <__sflush_r+0x92>
 8008d04:	4628      	mov	r0, r5
 8008d06:	f000 f9cf 	bl	80090a8 <_free_r>
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008d0e:	e7c1      	b.n	8008c94 <__sflush_r+0x1c>
 8008d10:	6a21      	ldr	r1, [r4, #32]
 8008d12:	2301      	movs	r3, #1
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b0      	blx	r6
 8008d18:	1c41      	adds	r1, r0, #1
 8008d1a:	d1c7      	bne.n	8008cac <__sflush_r+0x34>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0c4      	beq.n	8008cac <__sflush_r+0x34>
 8008d22:	2b1d      	cmp	r3, #29
 8008d24:	d001      	beq.n	8008d2a <__sflush_r+0xb2>
 8008d26:	2b16      	cmp	r3, #22
 8008d28:	d101      	bne.n	8008d2e <__sflush_r+0xb6>
 8008d2a:	602f      	str	r7, [r5, #0]
 8008d2c:	e7b1      	b.n	8008c92 <__sflush_r+0x1a>
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d34:	81a3      	strh	r3, [r4, #12]
 8008d36:	e7ad      	b.n	8008c94 <__sflush_r+0x1c>
 8008d38:	690f      	ldr	r7, [r1, #16]
 8008d3a:	2f00      	cmp	r7, #0
 8008d3c:	d0a9      	beq.n	8008c92 <__sflush_r+0x1a>
 8008d3e:	0793      	lsls	r3, r2, #30
 8008d40:	680e      	ldr	r6, [r1, #0]
 8008d42:	bf08      	it	eq
 8008d44:	694b      	ldreq	r3, [r1, #20]
 8008d46:	600f      	str	r7, [r1, #0]
 8008d48:	bf18      	it	ne
 8008d4a:	2300      	movne	r3, #0
 8008d4c:	eba6 0807 	sub.w	r8, r6, r7
 8008d50:	608b      	str	r3, [r1, #8]
 8008d52:	f1b8 0f00 	cmp.w	r8, #0
 8008d56:	dd9c      	ble.n	8008c92 <__sflush_r+0x1a>
 8008d58:	6a21      	ldr	r1, [r4, #32]
 8008d5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d5c:	4643      	mov	r3, r8
 8008d5e:	463a      	mov	r2, r7
 8008d60:	4628      	mov	r0, r5
 8008d62:	47b0      	blx	r6
 8008d64:	2800      	cmp	r0, #0
 8008d66:	dc06      	bgt.n	8008d76 <__sflush_r+0xfe>
 8008d68:	89a3      	ldrh	r3, [r4, #12]
 8008d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d6e:	81a3      	strh	r3, [r4, #12]
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	e78e      	b.n	8008c94 <__sflush_r+0x1c>
 8008d76:	4407      	add	r7, r0
 8008d78:	eba8 0800 	sub.w	r8, r8, r0
 8008d7c:	e7e9      	b.n	8008d52 <__sflush_r+0xda>
 8008d7e:	bf00      	nop
 8008d80:	20400001 	.word	0x20400001

08008d84 <_fflush_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	690b      	ldr	r3, [r1, #16]
 8008d88:	4605      	mov	r5, r0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	b913      	cbnz	r3, 8008d94 <_fflush_r+0x10>
 8008d8e:	2500      	movs	r5, #0
 8008d90:	4628      	mov	r0, r5
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	b118      	cbz	r0, 8008d9e <_fflush_r+0x1a>
 8008d96:	6983      	ldr	r3, [r0, #24]
 8008d98:	b90b      	cbnz	r3, 8008d9e <_fflush_r+0x1a>
 8008d9a:	f000 f899 	bl	8008ed0 <__sinit>
 8008d9e:	4b14      	ldr	r3, [pc, #80]	; (8008df0 <_fflush_r+0x6c>)
 8008da0:	429c      	cmp	r4, r3
 8008da2:	d11b      	bne.n	8008ddc <_fflush_r+0x58>
 8008da4:	686c      	ldr	r4, [r5, #4]
 8008da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0ef      	beq.n	8008d8e <_fflush_r+0xa>
 8008dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008db0:	07d0      	lsls	r0, r2, #31
 8008db2:	d404      	bmi.n	8008dbe <_fflush_r+0x3a>
 8008db4:	0599      	lsls	r1, r3, #22
 8008db6:	d402      	bmi.n	8008dbe <_fflush_r+0x3a>
 8008db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dba:	f000 f94c 	bl	8009056 <__retarget_lock_acquire_recursive>
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	f7ff ff59 	bl	8008c78 <__sflush_r>
 8008dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dc8:	07da      	lsls	r2, r3, #31
 8008dca:	4605      	mov	r5, r0
 8008dcc:	d4e0      	bmi.n	8008d90 <_fflush_r+0xc>
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	059b      	lsls	r3, r3, #22
 8008dd2:	d4dd      	bmi.n	8008d90 <_fflush_r+0xc>
 8008dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dd6:	f000 f93f 	bl	8009058 <__retarget_lock_release_recursive>
 8008dda:	e7d9      	b.n	8008d90 <_fflush_r+0xc>
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <_fflush_r+0x70>)
 8008dde:	429c      	cmp	r4, r3
 8008de0:	d101      	bne.n	8008de6 <_fflush_r+0x62>
 8008de2:	68ac      	ldr	r4, [r5, #8]
 8008de4:	e7df      	b.n	8008da6 <_fflush_r+0x22>
 8008de6:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <_fflush_r+0x74>)
 8008de8:	429c      	cmp	r4, r3
 8008dea:	bf08      	it	eq
 8008dec:	68ec      	ldreq	r4, [r5, #12]
 8008dee:	e7da      	b.n	8008da6 <_fflush_r+0x22>
 8008df0:	0800d734 	.word	0x0800d734
 8008df4:	0800d754 	.word	0x0800d754
 8008df8:	0800d714 	.word	0x0800d714

08008dfc <fflush>:
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	b920      	cbnz	r0, 8008e0a <fflush+0xe>
 8008e00:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <fflush+0x18>)
 8008e02:	4905      	ldr	r1, [pc, #20]	; (8008e18 <fflush+0x1c>)
 8008e04:	6818      	ldr	r0, [r3, #0]
 8008e06:	f000 b8e1 	b.w	8008fcc <_fwalk_reent>
 8008e0a:	4b04      	ldr	r3, [pc, #16]	; (8008e1c <fflush+0x20>)
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	f7ff bfb9 	b.w	8008d84 <_fflush_r>
 8008e12:	bf00      	nop
 8008e14:	0800d774 	.word	0x0800d774
 8008e18:	08008d85 	.word	0x08008d85
 8008e1c:	200002ec 	.word	0x200002ec

08008e20 <std>:
 8008e20:	2300      	movs	r3, #0
 8008e22:	b510      	push	{r4, lr}
 8008e24:	4604      	mov	r4, r0
 8008e26:	e9c0 3300 	strd	r3, r3, [r0]
 8008e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e2e:	6083      	str	r3, [r0, #8]
 8008e30:	8181      	strh	r1, [r0, #12]
 8008e32:	6643      	str	r3, [r0, #100]	; 0x64
 8008e34:	81c2      	strh	r2, [r0, #14]
 8008e36:	6183      	str	r3, [r0, #24]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	2208      	movs	r2, #8
 8008e3c:	305c      	adds	r0, #92	; 0x5c
 8008e3e:	f000 f92b 	bl	8009098 <memset>
 8008e42:	4b05      	ldr	r3, [pc, #20]	; (8008e58 <std+0x38>)
 8008e44:	6263      	str	r3, [r4, #36]	; 0x24
 8008e46:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <std+0x3c>)
 8008e48:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e4a:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <std+0x40>)
 8008e4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e4e:	4b05      	ldr	r3, [pc, #20]	; (8008e64 <std+0x44>)
 8008e50:	6224      	str	r4, [r4, #32]
 8008e52:	6323      	str	r3, [r4, #48]	; 0x30
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	bf00      	nop
 8008e58:	08009c99 	.word	0x08009c99
 8008e5c:	08009cbb 	.word	0x08009cbb
 8008e60:	08009cf3 	.word	0x08009cf3
 8008e64:	08009d17 	.word	0x08009d17

08008e68 <_cleanup_r>:
 8008e68:	4901      	ldr	r1, [pc, #4]	; (8008e70 <_cleanup_r+0x8>)
 8008e6a:	f000 b8af 	b.w	8008fcc <_fwalk_reent>
 8008e6e:	bf00      	nop
 8008e70:	08008d85 	.word	0x08008d85

08008e74 <__sfmoreglue>:
 8008e74:	b570      	push	{r4, r5, r6, lr}
 8008e76:	2268      	movs	r2, #104	; 0x68
 8008e78:	1e4d      	subs	r5, r1, #1
 8008e7a:	4355      	muls	r5, r2
 8008e7c:	460e      	mov	r6, r1
 8008e7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e82:	f000 f97d 	bl	8009180 <_malloc_r>
 8008e86:	4604      	mov	r4, r0
 8008e88:	b140      	cbz	r0, 8008e9c <__sfmoreglue+0x28>
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	e9c0 1600 	strd	r1, r6, [r0]
 8008e90:	300c      	adds	r0, #12
 8008e92:	60a0      	str	r0, [r4, #8]
 8008e94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e98:	f000 f8fe 	bl	8009098 <memset>
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}

08008ea0 <__sfp_lock_acquire>:
 8008ea0:	4801      	ldr	r0, [pc, #4]	; (8008ea8 <__sfp_lock_acquire+0x8>)
 8008ea2:	f000 b8d8 	b.w	8009056 <__retarget_lock_acquire_recursive>
 8008ea6:	bf00      	nop
 8008ea8:	20005ea5 	.word	0x20005ea5

08008eac <__sfp_lock_release>:
 8008eac:	4801      	ldr	r0, [pc, #4]	; (8008eb4 <__sfp_lock_release+0x8>)
 8008eae:	f000 b8d3 	b.w	8009058 <__retarget_lock_release_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	20005ea5 	.word	0x20005ea5

08008eb8 <__sinit_lock_acquire>:
 8008eb8:	4801      	ldr	r0, [pc, #4]	; (8008ec0 <__sinit_lock_acquire+0x8>)
 8008eba:	f000 b8cc 	b.w	8009056 <__retarget_lock_acquire_recursive>
 8008ebe:	bf00      	nop
 8008ec0:	20005ea6 	.word	0x20005ea6

08008ec4 <__sinit_lock_release>:
 8008ec4:	4801      	ldr	r0, [pc, #4]	; (8008ecc <__sinit_lock_release+0x8>)
 8008ec6:	f000 b8c7 	b.w	8009058 <__retarget_lock_release_recursive>
 8008eca:	bf00      	nop
 8008ecc:	20005ea6 	.word	0x20005ea6

08008ed0 <__sinit>:
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	f7ff fff0 	bl	8008eb8 <__sinit_lock_acquire>
 8008ed8:	69a3      	ldr	r3, [r4, #24]
 8008eda:	b11b      	cbz	r3, 8008ee4 <__sinit+0x14>
 8008edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee0:	f7ff bff0 	b.w	8008ec4 <__sinit_lock_release>
 8008ee4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ee8:	6523      	str	r3, [r4, #80]	; 0x50
 8008eea:	4b13      	ldr	r3, [pc, #76]	; (8008f38 <__sinit+0x68>)
 8008eec:	4a13      	ldr	r2, [pc, #76]	; (8008f3c <__sinit+0x6c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ef2:	42a3      	cmp	r3, r4
 8008ef4:	bf04      	itt	eq
 8008ef6:	2301      	moveq	r3, #1
 8008ef8:	61a3      	streq	r3, [r4, #24]
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 f820 	bl	8008f40 <__sfp>
 8008f00:	6060      	str	r0, [r4, #4]
 8008f02:	4620      	mov	r0, r4
 8008f04:	f000 f81c 	bl	8008f40 <__sfp>
 8008f08:	60a0      	str	r0, [r4, #8]
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 f818 	bl	8008f40 <__sfp>
 8008f10:	2200      	movs	r2, #0
 8008f12:	60e0      	str	r0, [r4, #12]
 8008f14:	2104      	movs	r1, #4
 8008f16:	6860      	ldr	r0, [r4, #4]
 8008f18:	f7ff ff82 	bl	8008e20 <std>
 8008f1c:	68a0      	ldr	r0, [r4, #8]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	2109      	movs	r1, #9
 8008f22:	f7ff ff7d 	bl	8008e20 <std>
 8008f26:	68e0      	ldr	r0, [r4, #12]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	2112      	movs	r1, #18
 8008f2c:	f7ff ff78 	bl	8008e20 <std>
 8008f30:	2301      	movs	r3, #1
 8008f32:	61a3      	str	r3, [r4, #24]
 8008f34:	e7d2      	b.n	8008edc <__sinit+0xc>
 8008f36:	bf00      	nop
 8008f38:	0800d774 	.word	0x0800d774
 8008f3c:	08008e69 	.word	0x08008e69

08008f40 <__sfp>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	4607      	mov	r7, r0
 8008f44:	f7ff ffac 	bl	8008ea0 <__sfp_lock_acquire>
 8008f48:	4b1e      	ldr	r3, [pc, #120]	; (8008fc4 <__sfp+0x84>)
 8008f4a:	681e      	ldr	r6, [r3, #0]
 8008f4c:	69b3      	ldr	r3, [r6, #24]
 8008f4e:	b913      	cbnz	r3, 8008f56 <__sfp+0x16>
 8008f50:	4630      	mov	r0, r6
 8008f52:	f7ff ffbd 	bl	8008ed0 <__sinit>
 8008f56:	3648      	adds	r6, #72	; 0x48
 8008f58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	d503      	bpl.n	8008f68 <__sfp+0x28>
 8008f60:	6833      	ldr	r3, [r6, #0]
 8008f62:	b30b      	cbz	r3, 8008fa8 <__sfp+0x68>
 8008f64:	6836      	ldr	r6, [r6, #0]
 8008f66:	e7f7      	b.n	8008f58 <__sfp+0x18>
 8008f68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f6c:	b9d5      	cbnz	r5, 8008fa4 <__sfp+0x64>
 8008f6e:	4b16      	ldr	r3, [pc, #88]	; (8008fc8 <__sfp+0x88>)
 8008f70:	60e3      	str	r3, [r4, #12]
 8008f72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f76:	6665      	str	r5, [r4, #100]	; 0x64
 8008f78:	f000 f86c 	bl	8009054 <__retarget_lock_init_recursive>
 8008f7c:	f7ff ff96 	bl	8008eac <__sfp_lock_release>
 8008f80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f88:	6025      	str	r5, [r4, #0]
 8008f8a:	61a5      	str	r5, [r4, #24]
 8008f8c:	2208      	movs	r2, #8
 8008f8e:	4629      	mov	r1, r5
 8008f90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f94:	f000 f880 	bl	8009098 <memset>
 8008f98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa4:	3468      	adds	r4, #104	; 0x68
 8008fa6:	e7d9      	b.n	8008f5c <__sfp+0x1c>
 8008fa8:	2104      	movs	r1, #4
 8008faa:	4638      	mov	r0, r7
 8008fac:	f7ff ff62 	bl	8008e74 <__sfmoreglue>
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	6030      	str	r0, [r6, #0]
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d1d5      	bne.n	8008f64 <__sfp+0x24>
 8008fb8:	f7ff ff78 	bl	8008eac <__sfp_lock_release>
 8008fbc:	230c      	movs	r3, #12
 8008fbe:	603b      	str	r3, [r7, #0]
 8008fc0:	e7ee      	b.n	8008fa0 <__sfp+0x60>
 8008fc2:	bf00      	nop
 8008fc4:	0800d774 	.word	0x0800d774
 8008fc8:	ffff0001 	.word	0xffff0001

08008fcc <_fwalk_reent>:
 8008fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	4688      	mov	r8, r1
 8008fd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fd8:	2700      	movs	r7, #0
 8008fda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fde:	f1b9 0901 	subs.w	r9, r9, #1
 8008fe2:	d505      	bpl.n	8008ff0 <_fwalk_reent+0x24>
 8008fe4:	6824      	ldr	r4, [r4, #0]
 8008fe6:	2c00      	cmp	r4, #0
 8008fe8:	d1f7      	bne.n	8008fda <_fwalk_reent+0xe>
 8008fea:	4638      	mov	r0, r7
 8008fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff0:	89ab      	ldrh	r3, [r5, #12]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d907      	bls.n	8009006 <_fwalk_reent+0x3a>
 8008ff6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	d003      	beq.n	8009006 <_fwalk_reent+0x3a>
 8008ffe:	4629      	mov	r1, r5
 8009000:	4630      	mov	r0, r6
 8009002:	47c0      	blx	r8
 8009004:	4307      	orrs	r7, r0
 8009006:	3568      	adds	r5, #104	; 0x68
 8009008:	e7e9      	b.n	8008fde <_fwalk_reent+0x12>
	...

0800900c <__libc_init_array>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	4d0d      	ldr	r5, [pc, #52]	; (8009044 <__libc_init_array+0x38>)
 8009010:	4c0d      	ldr	r4, [pc, #52]	; (8009048 <__libc_init_array+0x3c>)
 8009012:	1b64      	subs	r4, r4, r5
 8009014:	10a4      	asrs	r4, r4, #2
 8009016:	2600      	movs	r6, #0
 8009018:	42a6      	cmp	r6, r4
 800901a:	d109      	bne.n	8009030 <__libc_init_array+0x24>
 800901c:	4d0b      	ldr	r5, [pc, #44]	; (800904c <__libc_init_array+0x40>)
 800901e:	4c0c      	ldr	r4, [pc, #48]	; (8009050 <__libc_init_array+0x44>)
 8009020:	f004 f9fc 	bl	800d41c <_init>
 8009024:	1b64      	subs	r4, r4, r5
 8009026:	10a4      	asrs	r4, r4, #2
 8009028:	2600      	movs	r6, #0
 800902a:	42a6      	cmp	r6, r4
 800902c:	d105      	bne.n	800903a <__libc_init_array+0x2e>
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	f855 3b04 	ldr.w	r3, [r5], #4
 8009034:	4798      	blx	r3
 8009036:	3601      	adds	r6, #1
 8009038:	e7ee      	b.n	8009018 <__libc_init_array+0xc>
 800903a:	f855 3b04 	ldr.w	r3, [r5], #4
 800903e:	4798      	blx	r3
 8009040:	3601      	adds	r6, #1
 8009042:	e7f2      	b.n	800902a <__libc_init_array+0x1e>
 8009044:	0800dabc 	.word	0x0800dabc
 8009048:	0800dabc 	.word	0x0800dabc
 800904c:	0800dabc 	.word	0x0800dabc
 8009050:	0800dac0 	.word	0x0800dac0

08009054 <__retarget_lock_init_recursive>:
 8009054:	4770      	bx	lr

08009056 <__retarget_lock_acquire_recursive>:
 8009056:	4770      	bx	lr

08009058 <__retarget_lock_release_recursive>:
 8009058:	4770      	bx	lr
	...

0800905c <malloc>:
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <malloc+0xc>)
 800905e:	4601      	mov	r1, r0
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	f000 b88d 	b.w	8009180 <_malloc_r>
 8009066:	bf00      	nop
 8009068:	200002ec 	.word	0x200002ec

0800906c <free>:
 800906c:	4b02      	ldr	r3, [pc, #8]	; (8009078 <free+0xc>)
 800906e:	4601      	mov	r1, r0
 8009070:	6818      	ldr	r0, [r3, #0]
 8009072:	f000 b819 	b.w	80090a8 <_free_r>
 8009076:	bf00      	nop
 8009078:	200002ec 	.word	0x200002ec

0800907c <memcpy>:
 800907c:	440a      	add	r2, r1
 800907e:	4291      	cmp	r1, r2
 8009080:	f100 33ff 	add.w	r3, r0, #4294967295
 8009084:	d100      	bne.n	8009088 <memcpy+0xc>
 8009086:	4770      	bx	lr
 8009088:	b510      	push	{r4, lr}
 800908a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800908e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009092:	4291      	cmp	r1, r2
 8009094:	d1f9      	bne.n	800908a <memcpy+0xe>
 8009096:	bd10      	pop	{r4, pc}

08009098 <memset>:
 8009098:	4402      	add	r2, r0
 800909a:	4603      	mov	r3, r0
 800909c:	4293      	cmp	r3, r2
 800909e:	d100      	bne.n	80090a2 <memset+0xa>
 80090a0:	4770      	bx	lr
 80090a2:	f803 1b01 	strb.w	r1, [r3], #1
 80090a6:	e7f9      	b.n	800909c <memset+0x4>

080090a8 <_free_r>:
 80090a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090aa:	2900      	cmp	r1, #0
 80090ac:	d044      	beq.n	8009138 <_free_r+0x90>
 80090ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b2:	9001      	str	r0, [sp, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f1a1 0404 	sub.w	r4, r1, #4
 80090ba:	bfb8      	it	lt
 80090bc:	18e4      	addlt	r4, r4, r3
 80090be:	f002 ffd7 	bl	800c070 <__malloc_lock>
 80090c2:	4a1e      	ldr	r2, [pc, #120]	; (800913c <_free_r+0x94>)
 80090c4:	9801      	ldr	r0, [sp, #4]
 80090c6:	6813      	ldr	r3, [r2, #0]
 80090c8:	b933      	cbnz	r3, 80090d8 <_free_r+0x30>
 80090ca:	6063      	str	r3, [r4, #4]
 80090cc:	6014      	str	r4, [r2, #0]
 80090ce:	b003      	add	sp, #12
 80090d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090d4:	f002 bfd2 	b.w	800c07c <__malloc_unlock>
 80090d8:	42a3      	cmp	r3, r4
 80090da:	d908      	bls.n	80090ee <_free_r+0x46>
 80090dc:	6825      	ldr	r5, [r4, #0]
 80090de:	1961      	adds	r1, r4, r5
 80090e0:	428b      	cmp	r3, r1
 80090e2:	bf01      	itttt	eq
 80090e4:	6819      	ldreq	r1, [r3, #0]
 80090e6:	685b      	ldreq	r3, [r3, #4]
 80090e8:	1949      	addeq	r1, r1, r5
 80090ea:	6021      	streq	r1, [r4, #0]
 80090ec:	e7ed      	b.n	80090ca <_free_r+0x22>
 80090ee:	461a      	mov	r2, r3
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	b10b      	cbz	r3, 80090f8 <_free_r+0x50>
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	d9fa      	bls.n	80090ee <_free_r+0x46>
 80090f8:	6811      	ldr	r1, [r2, #0]
 80090fa:	1855      	adds	r5, r2, r1
 80090fc:	42a5      	cmp	r5, r4
 80090fe:	d10b      	bne.n	8009118 <_free_r+0x70>
 8009100:	6824      	ldr	r4, [r4, #0]
 8009102:	4421      	add	r1, r4
 8009104:	1854      	adds	r4, r2, r1
 8009106:	42a3      	cmp	r3, r4
 8009108:	6011      	str	r1, [r2, #0]
 800910a:	d1e0      	bne.n	80090ce <_free_r+0x26>
 800910c:	681c      	ldr	r4, [r3, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	6053      	str	r3, [r2, #4]
 8009112:	4421      	add	r1, r4
 8009114:	6011      	str	r1, [r2, #0]
 8009116:	e7da      	b.n	80090ce <_free_r+0x26>
 8009118:	d902      	bls.n	8009120 <_free_r+0x78>
 800911a:	230c      	movs	r3, #12
 800911c:	6003      	str	r3, [r0, #0]
 800911e:	e7d6      	b.n	80090ce <_free_r+0x26>
 8009120:	6825      	ldr	r5, [r4, #0]
 8009122:	1961      	adds	r1, r4, r5
 8009124:	428b      	cmp	r3, r1
 8009126:	bf04      	itt	eq
 8009128:	6819      	ldreq	r1, [r3, #0]
 800912a:	685b      	ldreq	r3, [r3, #4]
 800912c:	6063      	str	r3, [r4, #4]
 800912e:	bf04      	itt	eq
 8009130:	1949      	addeq	r1, r1, r5
 8009132:	6021      	streq	r1, [r4, #0]
 8009134:	6054      	str	r4, [r2, #4]
 8009136:	e7ca      	b.n	80090ce <_free_r+0x26>
 8009138:	b003      	add	sp, #12
 800913a:	bd30      	pop	{r4, r5, pc}
 800913c:	20005ea8 	.word	0x20005ea8

08009140 <sbrk_aligned>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	4e0e      	ldr	r6, [pc, #56]	; (800917c <sbrk_aligned+0x3c>)
 8009144:	460c      	mov	r4, r1
 8009146:	6831      	ldr	r1, [r6, #0]
 8009148:	4605      	mov	r5, r0
 800914a:	b911      	cbnz	r1, 8009152 <sbrk_aligned+0x12>
 800914c:	f000 fd74 	bl	8009c38 <_sbrk_r>
 8009150:	6030      	str	r0, [r6, #0]
 8009152:	4621      	mov	r1, r4
 8009154:	4628      	mov	r0, r5
 8009156:	f000 fd6f 	bl	8009c38 <_sbrk_r>
 800915a:	1c43      	adds	r3, r0, #1
 800915c:	d00a      	beq.n	8009174 <sbrk_aligned+0x34>
 800915e:	1cc4      	adds	r4, r0, #3
 8009160:	f024 0403 	bic.w	r4, r4, #3
 8009164:	42a0      	cmp	r0, r4
 8009166:	d007      	beq.n	8009178 <sbrk_aligned+0x38>
 8009168:	1a21      	subs	r1, r4, r0
 800916a:	4628      	mov	r0, r5
 800916c:	f000 fd64 	bl	8009c38 <_sbrk_r>
 8009170:	3001      	adds	r0, #1
 8009172:	d101      	bne.n	8009178 <sbrk_aligned+0x38>
 8009174:	f04f 34ff 	mov.w	r4, #4294967295
 8009178:	4620      	mov	r0, r4
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	20005eac 	.word	0x20005eac

08009180 <_malloc_r>:
 8009180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009184:	1ccd      	adds	r5, r1, #3
 8009186:	f025 0503 	bic.w	r5, r5, #3
 800918a:	3508      	adds	r5, #8
 800918c:	2d0c      	cmp	r5, #12
 800918e:	bf38      	it	cc
 8009190:	250c      	movcc	r5, #12
 8009192:	2d00      	cmp	r5, #0
 8009194:	4607      	mov	r7, r0
 8009196:	db01      	blt.n	800919c <_malloc_r+0x1c>
 8009198:	42a9      	cmp	r1, r5
 800919a:	d905      	bls.n	80091a8 <_malloc_r+0x28>
 800919c:	230c      	movs	r3, #12
 800919e:	603b      	str	r3, [r7, #0]
 80091a0:	2600      	movs	r6, #0
 80091a2:	4630      	mov	r0, r6
 80091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a8:	4e2e      	ldr	r6, [pc, #184]	; (8009264 <_malloc_r+0xe4>)
 80091aa:	f002 ff61 	bl	800c070 <__malloc_lock>
 80091ae:	6833      	ldr	r3, [r6, #0]
 80091b0:	461c      	mov	r4, r3
 80091b2:	bb34      	cbnz	r4, 8009202 <_malloc_r+0x82>
 80091b4:	4629      	mov	r1, r5
 80091b6:	4638      	mov	r0, r7
 80091b8:	f7ff ffc2 	bl	8009140 <sbrk_aligned>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	4604      	mov	r4, r0
 80091c0:	d14d      	bne.n	800925e <_malloc_r+0xde>
 80091c2:	6834      	ldr	r4, [r6, #0]
 80091c4:	4626      	mov	r6, r4
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	d140      	bne.n	800924c <_malloc_r+0xcc>
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	4631      	mov	r1, r6
 80091ce:	4638      	mov	r0, r7
 80091d0:	eb04 0803 	add.w	r8, r4, r3
 80091d4:	f000 fd30 	bl	8009c38 <_sbrk_r>
 80091d8:	4580      	cmp	r8, r0
 80091da:	d13a      	bne.n	8009252 <_malloc_r+0xd2>
 80091dc:	6821      	ldr	r1, [r4, #0]
 80091de:	3503      	adds	r5, #3
 80091e0:	1a6d      	subs	r5, r5, r1
 80091e2:	f025 0503 	bic.w	r5, r5, #3
 80091e6:	3508      	adds	r5, #8
 80091e8:	2d0c      	cmp	r5, #12
 80091ea:	bf38      	it	cc
 80091ec:	250c      	movcc	r5, #12
 80091ee:	4629      	mov	r1, r5
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff ffa5 	bl	8009140 <sbrk_aligned>
 80091f6:	3001      	adds	r0, #1
 80091f8:	d02b      	beq.n	8009252 <_malloc_r+0xd2>
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	442b      	add	r3, r5
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	e00e      	b.n	8009220 <_malloc_r+0xa0>
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	1b52      	subs	r2, r2, r5
 8009206:	d41e      	bmi.n	8009246 <_malloc_r+0xc6>
 8009208:	2a0b      	cmp	r2, #11
 800920a:	d916      	bls.n	800923a <_malloc_r+0xba>
 800920c:	1961      	adds	r1, r4, r5
 800920e:	42a3      	cmp	r3, r4
 8009210:	6025      	str	r5, [r4, #0]
 8009212:	bf18      	it	ne
 8009214:	6059      	strne	r1, [r3, #4]
 8009216:	6863      	ldr	r3, [r4, #4]
 8009218:	bf08      	it	eq
 800921a:	6031      	streq	r1, [r6, #0]
 800921c:	5162      	str	r2, [r4, r5]
 800921e:	604b      	str	r3, [r1, #4]
 8009220:	4638      	mov	r0, r7
 8009222:	f104 060b 	add.w	r6, r4, #11
 8009226:	f002 ff29 	bl	800c07c <__malloc_unlock>
 800922a:	f026 0607 	bic.w	r6, r6, #7
 800922e:	1d23      	adds	r3, r4, #4
 8009230:	1af2      	subs	r2, r6, r3
 8009232:	d0b6      	beq.n	80091a2 <_malloc_r+0x22>
 8009234:	1b9b      	subs	r3, r3, r6
 8009236:	50a3      	str	r3, [r4, r2]
 8009238:	e7b3      	b.n	80091a2 <_malloc_r+0x22>
 800923a:	6862      	ldr	r2, [r4, #4]
 800923c:	42a3      	cmp	r3, r4
 800923e:	bf0c      	ite	eq
 8009240:	6032      	streq	r2, [r6, #0]
 8009242:	605a      	strne	r2, [r3, #4]
 8009244:	e7ec      	b.n	8009220 <_malloc_r+0xa0>
 8009246:	4623      	mov	r3, r4
 8009248:	6864      	ldr	r4, [r4, #4]
 800924a:	e7b2      	b.n	80091b2 <_malloc_r+0x32>
 800924c:	4634      	mov	r4, r6
 800924e:	6876      	ldr	r6, [r6, #4]
 8009250:	e7b9      	b.n	80091c6 <_malloc_r+0x46>
 8009252:	230c      	movs	r3, #12
 8009254:	603b      	str	r3, [r7, #0]
 8009256:	4638      	mov	r0, r7
 8009258:	f002 ff10 	bl	800c07c <__malloc_unlock>
 800925c:	e7a1      	b.n	80091a2 <_malloc_r+0x22>
 800925e:	6025      	str	r5, [r4, #0]
 8009260:	e7de      	b.n	8009220 <_malloc_r+0xa0>
 8009262:	bf00      	nop
 8009264:	20005ea8 	.word	0x20005ea8

08009268 <__cvt>:
 8009268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	ec55 4b10 	vmov	r4, r5, d0
 8009270:	2d00      	cmp	r5, #0
 8009272:	460e      	mov	r6, r1
 8009274:	4619      	mov	r1, r3
 8009276:	462b      	mov	r3, r5
 8009278:	bfbb      	ittet	lt
 800927a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800927e:	461d      	movlt	r5, r3
 8009280:	2300      	movge	r3, #0
 8009282:	232d      	movlt	r3, #45	; 0x2d
 8009284:	700b      	strb	r3, [r1, #0]
 8009286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009288:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800928c:	4691      	mov	r9, r2
 800928e:	f023 0820 	bic.w	r8, r3, #32
 8009292:	bfbc      	itt	lt
 8009294:	4622      	movlt	r2, r4
 8009296:	4614      	movlt	r4, r2
 8009298:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800929c:	d005      	beq.n	80092aa <__cvt+0x42>
 800929e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092a2:	d100      	bne.n	80092a6 <__cvt+0x3e>
 80092a4:	3601      	adds	r6, #1
 80092a6:	2102      	movs	r1, #2
 80092a8:	e000      	b.n	80092ac <__cvt+0x44>
 80092aa:	2103      	movs	r1, #3
 80092ac:	ab03      	add	r3, sp, #12
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	ab02      	add	r3, sp, #8
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	ec45 4b10 	vmov	d0, r4, r5
 80092b8:	4653      	mov	r3, sl
 80092ba:	4632      	mov	r2, r6
 80092bc:	f001 fcec 	bl	800ac98 <_dtoa_r>
 80092c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092c4:	4607      	mov	r7, r0
 80092c6:	d102      	bne.n	80092ce <__cvt+0x66>
 80092c8:	f019 0f01 	tst.w	r9, #1
 80092cc:	d022      	beq.n	8009314 <__cvt+0xac>
 80092ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092d2:	eb07 0906 	add.w	r9, r7, r6
 80092d6:	d110      	bne.n	80092fa <__cvt+0x92>
 80092d8:	783b      	ldrb	r3, [r7, #0]
 80092da:	2b30      	cmp	r3, #48	; 0x30
 80092dc:	d10a      	bne.n	80092f4 <__cvt+0x8c>
 80092de:	2200      	movs	r2, #0
 80092e0:	2300      	movs	r3, #0
 80092e2:	4620      	mov	r0, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7f7 fc07 	bl	8000af8 <__aeabi_dcmpeq>
 80092ea:	b918      	cbnz	r0, 80092f4 <__cvt+0x8c>
 80092ec:	f1c6 0601 	rsb	r6, r6, #1
 80092f0:	f8ca 6000 	str.w	r6, [sl]
 80092f4:	f8da 3000 	ldr.w	r3, [sl]
 80092f8:	4499      	add	r9, r3
 80092fa:	2200      	movs	r2, #0
 80092fc:	2300      	movs	r3, #0
 80092fe:	4620      	mov	r0, r4
 8009300:	4629      	mov	r1, r5
 8009302:	f7f7 fbf9 	bl	8000af8 <__aeabi_dcmpeq>
 8009306:	b108      	cbz	r0, 800930c <__cvt+0xa4>
 8009308:	f8cd 900c 	str.w	r9, [sp, #12]
 800930c:	2230      	movs	r2, #48	; 0x30
 800930e:	9b03      	ldr	r3, [sp, #12]
 8009310:	454b      	cmp	r3, r9
 8009312:	d307      	bcc.n	8009324 <__cvt+0xbc>
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009318:	1bdb      	subs	r3, r3, r7
 800931a:	4638      	mov	r0, r7
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	b004      	add	sp, #16
 8009320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009324:	1c59      	adds	r1, r3, #1
 8009326:	9103      	str	r1, [sp, #12]
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	e7f0      	b.n	800930e <__cvt+0xa6>

0800932c <__exponent>:
 800932c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800932e:	4603      	mov	r3, r0
 8009330:	2900      	cmp	r1, #0
 8009332:	bfb8      	it	lt
 8009334:	4249      	neglt	r1, r1
 8009336:	f803 2b02 	strb.w	r2, [r3], #2
 800933a:	bfb4      	ite	lt
 800933c:	222d      	movlt	r2, #45	; 0x2d
 800933e:	222b      	movge	r2, #43	; 0x2b
 8009340:	2909      	cmp	r1, #9
 8009342:	7042      	strb	r2, [r0, #1]
 8009344:	dd2a      	ble.n	800939c <__exponent+0x70>
 8009346:	f10d 0407 	add.w	r4, sp, #7
 800934a:	46a4      	mov	ip, r4
 800934c:	270a      	movs	r7, #10
 800934e:	46a6      	mov	lr, r4
 8009350:	460a      	mov	r2, r1
 8009352:	fb91 f6f7 	sdiv	r6, r1, r7
 8009356:	fb07 1516 	mls	r5, r7, r6, r1
 800935a:	3530      	adds	r5, #48	; 0x30
 800935c:	2a63      	cmp	r2, #99	; 0x63
 800935e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009362:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009366:	4631      	mov	r1, r6
 8009368:	dcf1      	bgt.n	800934e <__exponent+0x22>
 800936a:	3130      	adds	r1, #48	; 0x30
 800936c:	f1ae 0502 	sub.w	r5, lr, #2
 8009370:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009374:	1c44      	adds	r4, r0, #1
 8009376:	4629      	mov	r1, r5
 8009378:	4561      	cmp	r1, ip
 800937a:	d30a      	bcc.n	8009392 <__exponent+0x66>
 800937c:	f10d 0209 	add.w	r2, sp, #9
 8009380:	eba2 020e 	sub.w	r2, r2, lr
 8009384:	4565      	cmp	r5, ip
 8009386:	bf88      	it	hi
 8009388:	2200      	movhi	r2, #0
 800938a:	4413      	add	r3, r2
 800938c:	1a18      	subs	r0, r3, r0
 800938e:	b003      	add	sp, #12
 8009390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009396:	f804 2f01 	strb.w	r2, [r4, #1]!
 800939a:	e7ed      	b.n	8009378 <__exponent+0x4c>
 800939c:	2330      	movs	r3, #48	; 0x30
 800939e:	3130      	adds	r1, #48	; 0x30
 80093a0:	7083      	strb	r3, [r0, #2]
 80093a2:	70c1      	strb	r1, [r0, #3]
 80093a4:	1d03      	adds	r3, r0, #4
 80093a6:	e7f1      	b.n	800938c <__exponent+0x60>

080093a8 <_printf_float>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	ed2d 8b02 	vpush	{d8}
 80093b0:	b08d      	sub	sp, #52	; 0x34
 80093b2:	460c      	mov	r4, r1
 80093b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093b8:	4616      	mov	r6, r2
 80093ba:	461f      	mov	r7, r3
 80093bc:	4605      	mov	r5, r0
 80093be:	f002 fdc9 	bl	800bf54 <_localeconv_r>
 80093c2:	f8d0 a000 	ldr.w	sl, [r0]
 80093c6:	4650      	mov	r0, sl
 80093c8:	f7f6 ff14 	bl	80001f4 <strlen>
 80093cc:	2300      	movs	r3, #0
 80093ce:	930a      	str	r3, [sp, #40]	; 0x28
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	9305      	str	r3, [sp, #20]
 80093d4:	f8d8 3000 	ldr.w	r3, [r8]
 80093d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093dc:	3307      	adds	r3, #7
 80093de:	f023 0307 	bic.w	r3, r3, #7
 80093e2:	f103 0208 	add.w	r2, r3, #8
 80093e6:	f8c8 2000 	str.w	r2, [r8]
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093fa:	9307      	str	r3, [sp, #28]
 80093fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009400:	ee08 0a10 	vmov	s16, r0
 8009404:	4b9f      	ldr	r3, [pc, #636]	; (8009684 <_printf_float+0x2dc>)
 8009406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800940a:	f04f 32ff 	mov.w	r2, #4294967295
 800940e:	f7f7 fba5 	bl	8000b5c <__aeabi_dcmpun>
 8009412:	bb88      	cbnz	r0, 8009478 <_printf_float+0xd0>
 8009414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009418:	4b9a      	ldr	r3, [pc, #616]	; (8009684 <_printf_float+0x2dc>)
 800941a:	f04f 32ff 	mov.w	r2, #4294967295
 800941e:	f7f7 fb7f 	bl	8000b20 <__aeabi_dcmple>
 8009422:	bb48      	cbnz	r0, 8009478 <_printf_float+0xd0>
 8009424:	2200      	movs	r2, #0
 8009426:	2300      	movs	r3, #0
 8009428:	4640      	mov	r0, r8
 800942a:	4649      	mov	r1, r9
 800942c:	f7f7 fb6e 	bl	8000b0c <__aeabi_dcmplt>
 8009430:	b110      	cbz	r0, 8009438 <_printf_float+0x90>
 8009432:	232d      	movs	r3, #45	; 0x2d
 8009434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009438:	4b93      	ldr	r3, [pc, #588]	; (8009688 <_printf_float+0x2e0>)
 800943a:	4894      	ldr	r0, [pc, #592]	; (800968c <_printf_float+0x2e4>)
 800943c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009440:	bf94      	ite	ls
 8009442:	4698      	movls	r8, r3
 8009444:	4680      	movhi	r8, r0
 8009446:	2303      	movs	r3, #3
 8009448:	6123      	str	r3, [r4, #16]
 800944a:	9b05      	ldr	r3, [sp, #20]
 800944c:	f023 0204 	bic.w	r2, r3, #4
 8009450:	6022      	str	r2, [r4, #0]
 8009452:	f04f 0900 	mov.w	r9, #0
 8009456:	9700      	str	r7, [sp, #0]
 8009458:	4633      	mov	r3, r6
 800945a:	aa0b      	add	r2, sp, #44	; 0x2c
 800945c:	4621      	mov	r1, r4
 800945e:	4628      	mov	r0, r5
 8009460:	f000 f9d8 	bl	8009814 <_printf_common>
 8009464:	3001      	adds	r0, #1
 8009466:	f040 8090 	bne.w	800958a <_printf_float+0x1e2>
 800946a:	f04f 30ff 	mov.w	r0, #4294967295
 800946e:	b00d      	add	sp, #52	; 0x34
 8009470:	ecbd 8b02 	vpop	{d8}
 8009474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009478:	4642      	mov	r2, r8
 800947a:	464b      	mov	r3, r9
 800947c:	4640      	mov	r0, r8
 800947e:	4649      	mov	r1, r9
 8009480:	f7f7 fb6c 	bl	8000b5c <__aeabi_dcmpun>
 8009484:	b140      	cbz	r0, 8009498 <_printf_float+0xf0>
 8009486:	464b      	mov	r3, r9
 8009488:	2b00      	cmp	r3, #0
 800948a:	bfbc      	itt	lt
 800948c:	232d      	movlt	r3, #45	; 0x2d
 800948e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009492:	487f      	ldr	r0, [pc, #508]	; (8009690 <_printf_float+0x2e8>)
 8009494:	4b7f      	ldr	r3, [pc, #508]	; (8009694 <_printf_float+0x2ec>)
 8009496:	e7d1      	b.n	800943c <_printf_float+0x94>
 8009498:	6863      	ldr	r3, [r4, #4]
 800949a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800949e:	9206      	str	r2, [sp, #24]
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	d13f      	bne.n	8009524 <_printf_float+0x17c>
 80094a4:	2306      	movs	r3, #6
 80094a6:	6063      	str	r3, [r4, #4]
 80094a8:	9b05      	ldr	r3, [sp, #20]
 80094aa:	6861      	ldr	r1, [r4, #4]
 80094ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094b0:	2300      	movs	r3, #0
 80094b2:	9303      	str	r3, [sp, #12]
 80094b4:	ab0a      	add	r3, sp, #40	; 0x28
 80094b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80094ba:	ab09      	add	r3, sp, #36	; 0x24
 80094bc:	ec49 8b10 	vmov	d0, r8, r9
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	6022      	str	r2, [r4, #0]
 80094c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094c8:	4628      	mov	r0, r5
 80094ca:	f7ff fecd 	bl	8009268 <__cvt>
 80094ce:	9b06      	ldr	r3, [sp, #24]
 80094d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094d2:	2b47      	cmp	r3, #71	; 0x47
 80094d4:	4680      	mov	r8, r0
 80094d6:	d108      	bne.n	80094ea <_printf_float+0x142>
 80094d8:	1cc8      	adds	r0, r1, #3
 80094da:	db02      	blt.n	80094e2 <_printf_float+0x13a>
 80094dc:	6863      	ldr	r3, [r4, #4]
 80094de:	4299      	cmp	r1, r3
 80094e0:	dd41      	ble.n	8009566 <_printf_float+0x1be>
 80094e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80094e6:	fa5f fb8b 	uxtb.w	fp, fp
 80094ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094ee:	d820      	bhi.n	8009532 <_printf_float+0x18a>
 80094f0:	3901      	subs	r1, #1
 80094f2:	465a      	mov	r2, fp
 80094f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094f8:	9109      	str	r1, [sp, #36]	; 0x24
 80094fa:	f7ff ff17 	bl	800932c <__exponent>
 80094fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009500:	1813      	adds	r3, r2, r0
 8009502:	2a01      	cmp	r2, #1
 8009504:	4681      	mov	r9, r0
 8009506:	6123      	str	r3, [r4, #16]
 8009508:	dc02      	bgt.n	8009510 <_printf_float+0x168>
 800950a:	6822      	ldr	r2, [r4, #0]
 800950c:	07d2      	lsls	r2, r2, #31
 800950e:	d501      	bpl.n	8009514 <_printf_float+0x16c>
 8009510:	3301      	adds	r3, #1
 8009512:	6123      	str	r3, [r4, #16]
 8009514:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009518:	2b00      	cmp	r3, #0
 800951a:	d09c      	beq.n	8009456 <_printf_float+0xae>
 800951c:	232d      	movs	r3, #45	; 0x2d
 800951e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009522:	e798      	b.n	8009456 <_printf_float+0xae>
 8009524:	9a06      	ldr	r2, [sp, #24]
 8009526:	2a47      	cmp	r2, #71	; 0x47
 8009528:	d1be      	bne.n	80094a8 <_printf_float+0x100>
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1bc      	bne.n	80094a8 <_printf_float+0x100>
 800952e:	2301      	movs	r3, #1
 8009530:	e7b9      	b.n	80094a6 <_printf_float+0xfe>
 8009532:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009536:	d118      	bne.n	800956a <_printf_float+0x1c2>
 8009538:	2900      	cmp	r1, #0
 800953a:	6863      	ldr	r3, [r4, #4]
 800953c:	dd0b      	ble.n	8009556 <_printf_float+0x1ae>
 800953e:	6121      	str	r1, [r4, #16]
 8009540:	b913      	cbnz	r3, 8009548 <_printf_float+0x1a0>
 8009542:	6822      	ldr	r2, [r4, #0]
 8009544:	07d0      	lsls	r0, r2, #31
 8009546:	d502      	bpl.n	800954e <_printf_float+0x1a6>
 8009548:	3301      	adds	r3, #1
 800954a:	440b      	add	r3, r1
 800954c:	6123      	str	r3, [r4, #16]
 800954e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009550:	f04f 0900 	mov.w	r9, #0
 8009554:	e7de      	b.n	8009514 <_printf_float+0x16c>
 8009556:	b913      	cbnz	r3, 800955e <_printf_float+0x1b6>
 8009558:	6822      	ldr	r2, [r4, #0]
 800955a:	07d2      	lsls	r2, r2, #31
 800955c:	d501      	bpl.n	8009562 <_printf_float+0x1ba>
 800955e:	3302      	adds	r3, #2
 8009560:	e7f4      	b.n	800954c <_printf_float+0x1a4>
 8009562:	2301      	movs	r3, #1
 8009564:	e7f2      	b.n	800954c <_printf_float+0x1a4>
 8009566:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800956a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956c:	4299      	cmp	r1, r3
 800956e:	db05      	blt.n	800957c <_printf_float+0x1d4>
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	6121      	str	r1, [r4, #16]
 8009574:	07d8      	lsls	r0, r3, #31
 8009576:	d5ea      	bpl.n	800954e <_printf_float+0x1a6>
 8009578:	1c4b      	adds	r3, r1, #1
 800957a:	e7e7      	b.n	800954c <_printf_float+0x1a4>
 800957c:	2900      	cmp	r1, #0
 800957e:	bfd4      	ite	le
 8009580:	f1c1 0202 	rsble	r2, r1, #2
 8009584:	2201      	movgt	r2, #1
 8009586:	4413      	add	r3, r2
 8009588:	e7e0      	b.n	800954c <_printf_float+0x1a4>
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	055a      	lsls	r2, r3, #21
 800958e:	d407      	bmi.n	80095a0 <_printf_float+0x1f8>
 8009590:	6923      	ldr	r3, [r4, #16]
 8009592:	4642      	mov	r2, r8
 8009594:	4631      	mov	r1, r6
 8009596:	4628      	mov	r0, r5
 8009598:	47b8      	blx	r7
 800959a:	3001      	adds	r0, #1
 800959c:	d12c      	bne.n	80095f8 <_printf_float+0x250>
 800959e:	e764      	b.n	800946a <_printf_float+0xc2>
 80095a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095a4:	f240 80e0 	bls.w	8009768 <_printf_float+0x3c0>
 80095a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095ac:	2200      	movs	r2, #0
 80095ae:	2300      	movs	r3, #0
 80095b0:	f7f7 faa2 	bl	8000af8 <__aeabi_dcmpeq>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d034      	beq.n	8009622 <_printf_float+0x27a>
 80095b8:	4a37      	ldr	r2, [pc, #220]	; (8009698 <_printf_float+0x2f0>)
 80095ba:	2301      	movs	r3, #1
 80095bc:	4631      	mov	r1, r6
 80095be:	4628      	mov	r0, r5
 80095c0:	47b8      	blx	r7
 80095c2:	3001      	adds	r0, #1
 80095c4:	f43f af51 	beq.w	800946a <_printf_float+0xc2>
 80095c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095cc:	429a      	cmp	r2, r3
 80095ce:	db02      	blt.n	80095d6 <_printf_float+0x22e>
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	07d8      	lsls	r0, r3, #31
 80095d4:	d510      	bpl.n	80095f8 <_printf_float+0x250>
 80095d6:	ee18 3a10 	vmov	r3, s16
 80095da:	4652      	mov	r2, sl
 80095dc:	4631      	mov	r1, r6
 80095de:	4628      	mov	r0, r5
 80095e0:	47b8      	blx	r7
 80095e2:	3001      	adds	r0, #1
 80095e4:	f43f af41 	beq.w	800946a <_printf_float+0xc2>
 80095e8:	f04f 0800 	mov.w	r8, #0
 80095ec:	f104 091a 	add.w	r9, r4, #26
 80095f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f2:	3b01      	subs	r3, #1
 80095f4:	4543      	cmp	r3, r8
 80095f6:	dc09      	bgt.n	800960c <_printf_float+0x264>
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	079b      	lsls	r3, r3, #30
 80095fc:	f100 8105 	bmi.w	800980a <_printf_float+0x462>
 8009600:	68e0      	ldr	r0, [r4, #12]
 8009602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009604:	4298      	cmp	r0, r3
 8009606:	bfb8      	it	lt
 8009608:	4618      	movlt	r0, r3
 800960a:	e730      	b.n	800946e <_printf_float+0xc6>
 800960c:	2301      	movs	r3, #1
 800960e:	464a      	mov	r2, r9
 8009610:	4631      	mov	r1, r6
 8009612:	4628      	mov	r0, r5
 8009614:	47b8      	blx	r7
 8009616:	3001      	adds	r0, #1
 8009618:	f43f af27 	beq.w	800946a <_printf_float+0xc2>
 800961c:	f108 0801 	add.w	r8, r8, #1
 8009620:	e7e6      	b.n	80095f0 <_printf_float+0x248>
 8009622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009624:	2b00      	cmp	r3, #0
 8009626:	dc39      	bgt.n	800969c <_printf_float+0x2f4>
 8009628:	4a1b      	ldr	r2, [pc, #108]	; (8009698 <_printf_float+0x2f0>)
 800962a:	2301      	movs	r3, #1
 800962c:	4631      	mov	r1, r6
 800962e:	4628      	mov	r0, r5
 8009630:	47b8      	blx	r7
 8009632:	3001      	adds	r0, #1
 8009634:	f43f af19 	beq.w	800946a <_printf_float+0xc2>
 8009638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800963c:	4313      	orrs	r3, r2
 800963e:	d102      	bne.n	8009646 <_printf_float+0x29e>
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	07d9      	lsls	r1, r3, #31
 8009644:	d5d8      	bpl.n	80095f8 <_printf_float+0x250>
 8009646:	ee18 3a10 	vmov	r3, s16
 800964a:	4652      	mov	r2, sl
 800964c:	4631      	mov	r1, r6
 800964e:	4628      	mov	r0, r5
 8009650:	47b8      	blx	r7
 8009652:	3001      	adds	r0, #1
 8009654:	f43f af09 	beq.w	800946a <_printf_float+0xc2>
 8009658:	f04f 0900 	mov.w	r9, #0
 800965c:	f104 0a1a 	add.w	sl, r4, #26
 8009660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009662:	425b      	negs	r3, r3
 8009664:	454b      	cmp	r3, r9
 8009666:	dc01      	bgt.n	800966c <_printf_float+0x2c4>
 8009668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800966a:	e792      	b.n	8009592 <_printf_float+0x1ea>
 800966c:	2301      	movs	r3, #1
 800966e:	4652      	mov	r2, sl
 8009670:	4631      	mov	r1, r6
 8009672:	4628      	mov	r0, r5
 8009674:	47b8      	blx	r7
 8009676:	3001      	adds	r0, #1
 8009678:	f43f aef7 	beq.w	800946a <_printf_float+0xc2>
 800967c:	f109 0901 	add.w	r9, r9, #1
 8009680:	e7ee      	b.n	8009660 <_printf_float+0x2b8>
 8009682:	bf00      	nop
 8009684:	7fefffff 	.word	0x7fefffff
 8009688:	0800d778 	.word	0x0800d778
 800968c:	0800d77c 	.word	0x0800d77c
 8009690:	0800d784 	.word	0x0800d784
 8009694:	0800d780 	.word	0x0800d780
 8009698:	0800d788 	.word	0x0800d788
 800969c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800969e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096a0:	429a      	cmp	r2, r3
 80096a2:	bfa8      	it	ge
 80096a4:	461a      	movge	r2, r3
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	4691      	mov	r9, r2
 80096aa:	dc37      	bgt.n	800971c <_printf_float+0x374>
 80096ac:	f04f 0b00 	mov.w	fp, #0
 80096b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096b4:	f104 021a 	add.w	r2, r4, #26
 80096b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096ba:	9305      	str	r3, [sp, #20]
 80096bc:	eba3 0309 	sub.w	r3, r3, r9
 80096c0:	455b      	cmp	r3, fp
 80096c2:	dc33      	bgt.n	800972c <_printf_float+0x384>
 80096c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096c8:	429a      	cmp	r2, r3
 80096ca:	db3b      	blt.n	8009744 <_printf_float+0x39c>
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	07da      	lsls	r2, r3, #31
 80096d0:	d438      	bmi.n	8009744 <_printf_float+0x39c>
 80096d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d4:	9a05      	ldr	r2, [sp, #20]
 80096d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096d8:	1a9a      	subs	r2, r3, r2
 80096da:	eba3 0901 	sub.w	r9, r3, r1
 80096de:	4591      	cmp	r9, r2
 80096e0:	bfa8      	it	ge
 80096e2:	4691      	movge	r9, r2
 80096e4:	f1b9 0f00 	cmp.w	r9, #0
 80096e8:	dc35      	bgt.n	8009756 <_printf_float+0x3ae>
 80096ea:	f04f 0800 	mov.w	r8, #0
 80096ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096f2:	f104 0a1a 	add.w	sl, r4, #26
 80096f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096fa:	1a9b      	subs	r3, r3, r2
 80096fc:	eba3 0309 	sub.w	r3, r3, r9
 8009700:	4543      	cmp	r3, r8
 8009702:	f77f af79 	ble.w	80095f8 <_printf_float+0x250>
 8009706:	2301      	movs	r3, #1
 8009708:	4652      	mov	r2, sl
 800970a:	4631      	mov	r1, r6
 800970c:	4628      	mov	r0, r5
 800970e:	47b8      	blx	r7
 8009710:	3001      	adds	r0, #1
 8009712:	f43f aeaa 	beq.w	800946a <_printf_float+0xc2>
 8009716:	f108 0801 	add.w	r8, r8, #1
 800971a:	e7ec      	b.n	80096f6 <_printf_float+0x34e>
 800971c:	4613      	mov	r3, r2
 800971e:	4631      	mov	r1, r6
 8009720:	4642      	mov	r2, r8
 8009722:	4628      	mov	r0, r5
 8009724:	47b8      	blx	r7
 8009726:	3001      	adds	r0, #1
 8009728:	d1c0      	bne.n	80096ac <_printf_float+0x304>
 800972a:	e69e      	b.n	800946a <_printf_float+0xc2>
 800972c:	2301      	movs	r3, #1
 800972e:	4631      	mov	r1, r6
 8009730:	4628      	mov	r0, r5
 8009732:	9205      	str	r2, [sp, #20]
 8009734:	47b8      	blx	r7
 8009736:	3001      	adds	r0, #1
 8009738:	f43f ae97 	beq.w	800946a <_printf_float+0xc2>
 800973c:	9a05      	ldr	r2, [sp, #20]
 800973e:	f10b 0b01 	add.w	fp, fp, #1
 8009742:	e7b9      	b.n	80096b8 <_printf_float+0x310>
 8009744:	ee18 3a10 	vmov	r3, s16
 8009748:	4652      	mov	r2, sl
 800974a:	4631      	mov	r1, r6
 800974c:	4628      	mov	r0, r5
 800974e:	47b8      	blx	r7
 8009750:	3001      	adds	r0, #1
 8009752:	d1be      	bne.n	80096d2 <_printf_float+0x32a>
 8009754:	e689      	b.n	800946a <_printf_float+0xc2>
 8009756:	9a05      	ldr	r2, [sp, #20]
 8009758:	464b      	mov	r3, r9
 800975a:	4442      	add	r2, r8
 800975c:	4631      	mov	r1, r6
 800975e:	4628      	mov	r0, r5
 8009760:	47b8      	blx	r7
 8009762:	3001      	adds	r0, #1
 8009764:	d1c1      	bne.n	80096ea <_printf_float+0x342>
 8009766:	e680      	b.n	800946a <_printf_float+0xc2>
 8009768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800976a:	2a01      	cmp	r2, #1
 800976c:	dc01      	bgt.n	8009772 <_printf_float+0x3ca>
 800976e:	07db      	lsls	r3, r3, #31
 8009770:	d538      	bpl.n	80097e4 <_printf_float+0x43c>
 8009772:	2301      	movs	r3, #1
 8009774:	4642      	mov	r2, r8
 8009776:	4631      	mov	r1, r6
 8009778:	4628      	mov	r0, r5
 800977a:	47b8      	blx	r7
 800977c:	3001      	adds	r0, #1
 800977e:	f43f ae74 	beq.w	800946a <_printf_float+0xc2>
 8009782:	ee18 3a10 	vmov	r3, s16
 8009786:	4652      	mov	r2, sl
 8009788:	4631      	mov	r1, r6
 800978a:	4628      	mov	r0, r5
 800978c:	47b8      	blx	r7
 800978e:	3001      	adds	r0, #1
 8009790:	f43f ae6b 	beq.w	800946a <_printf_float+0xc2>
 8009794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009798:	2200      	movs	r2, #0
 800979a:	2300      	movs	r3, #0
 800979c:	f7f7 f9ac 	bl	8000af8 <__aeabi_dcmpeq>
 80097a0:	b9d8      	cbnz	r0, 80097da <_printf_float+0x432>
 80097a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a4:	f108 0201 	add.w	r2, r8, #1
 80097a8:	3b01      	subs	r3, #1
 80097aa:	4631      	mov	r1, r6
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b8      	blx	r7
 80097b0:	3001      	adds	r0, #1
 80097b2:	d10e      	bne.n	80097d2 <_printf_float+0x42a>
 80097b4:	e659      	b.n	800946a <_printf_float+0xc2>
 80097b6:	2301      	movs	r3, #1
 80097b8:	4652      	mov	r2, sl
 80097ba:	4631      	mov	r1, r6
 80097bc:	4628      	mov	r0, r5
 80097be:	47b8      	blx	r7
 80097c0:	3001      	adds	r0, #1
 80097c2:	f43f ae52 	beq.w	800946a <_printf_float+0xc2>
 80097c6:	f108 0801 	add.w	r8, r8, #1
 80097ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097cc:	3b01      	subs	r3, #1
 80097ce:	4543      	cmp	r3, r8
 80097d0:	dcf1      	bgt.n	80097b6 <_printf_float+0x40e>
 80097d2:	464b      	mov	r3, r9
 80097d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097d8:	e6dc      	b.n	8009594 <_printf_float+0x1ec>
 80097da:	f04f 0800 	mov.w	r8, #0
 80097de:	f104 0a1a 	add.w	sl, r4, #26
 80097e2:	e7f2      	b.n	80097ca <_printf_float+0x422>
 80097e4:	2301      	movs	r3, #1
 80097e6:	4642      	mov	r2, r8
 80097e8:	e7df      	b.n	80097aa <_printf_float+0x402>
 80097ea:	2301      	movs	r3, #1
 80097ec:	464a      	mov	r2, r9
 80097ee:	4631      	mov	r1, r6
 80097f0:	4628      	mov	r0, r5
 80097f2:	47b8      	blx	r7
 80097f4:	3001      	adds	r0, #1
 80097f6:	f43f ae38 	beq.w	800946a <_printf_float+0xc2>
 80097fa:	f108 0801 	add.w	r8, r8, #1
 80097fe:	68e3      	ldr	r3, [r4, #12]
 8009800:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009802:	1a5b      	subs	r3, r3, r1
 8009804:	4543      	cmp	r3, r8
 8009806:	dcf0      	bgt.n	80097ea <_printf_float+0x442>
 8009808:	e6fa      	b.n	8009600 <_printf_float+0x258>
 800980a:	f04f 0800 	mov.w	r8, #0
 800980e:	f104 0919 	add.w	r9, r4, #25
 8009812:	e7f4      	b.n	80097fe <_printf_float+0x456>

08009814 <_printf_common>:
 8009814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009818:	4616      	mov	r6, r2
 800981a:	4699      	mov	r9, r3
 800981c:	688a      	ldr	r2, [r1, #8]
 800981e:	690b      	ldr	r3, [r1, #16]
 8009820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009824:	4293      	cmp	r3, r2
 8009826:	bfb8      	it	lt
 8009828:	4613      	movlt	r3, r2
 800982a:	6033      	str	r3, [r6, #0]
 800982c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009830:	4607      	mov	r7, r0
 8009832:	460c      	mov	r4, r1
 8009834:	b10a      	cbz	r2, 800983a <_printf_common+0x26>
 8009836:	3301      	adds	r3, #1
 8009838:	6033      	str	r3, [r6, #0]
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	0699      	lsls	r1, r3, #26
 800983e:	bf42      	ittt	mi
 8009840:	6833      	ldrmi	r3, [r6, #0]
 8009842:	3302      	addmi	r3, #2
 8009844:	6033      	strmi	r3, [r6, #0]
 8009846:	6825      	ldr	r5, [r4, #0]
 8009848:	f015 0506 	ands.w	r5, r5, #6
 800984c:	d106      	bne.n	800985c <_printf_common+0x48>
 800984e:	f104 0a19 	add.w	sl, r4, #25
 8009852:	68e3      	ldr	r3, [r4, #12]
 8009854:	6832      	ldr	r2, [r6, #0]
 8009856:	1a9b      	subs	r3, r3, r2
 8009858:	42ab      	cmp	r3, r5
 800985a:	dc26      	bgt.n	80098aa <_printf_common+0x96>
 800985c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009860:	1e13      	subs	r3, r2, #0
 8009862:	6822      	ldr	r2, [r4, #0]
 8009864:	bf18      	it	ne
 8009866:	2301      	movne	r3, #1
 8009868:	0692      	lsls	r2, r2, #26
 800986a:	d42b      	bmi.n	80098c4 <_printf_common+0xb0>
 800986c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009870:	4649      	mov	r1, r9
 8009872:	4638      	mov	r0, r7
 8009874:	47c0      	blx	r8
 8009876:	3001      	adds	r0, #1
 8009878:	d01e      	beq.n	80098b8 <_printf_common+0xa4>
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	68e5      	ldr	r5, [r4, #12]
 800987e:	6832      	ldr	r2, [r6, #0]
 8009880:	f003 0306 	and.w	r3, r3, #6
 8009884:	2b04      	cmp	r3, #4
 8009886:	bf08      	it	eq
 8009888:	1aad      	subeq	r5, r5, r2
 800988a:	68a3      	ldr	r3, [r4, #8]
 800988c:	6922      	ldr	r2, [r4, #16]
 800988e:	bf0c      	ite	eq
 8009890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009894:	2500      	movne	r5, #0
 8009896:	4293      	cmp	r3, r2
 8009898:	bfc4      	itt	gt
 800989a:	1a9b      	subgt	r3, r3, r2
 800989c:	18ed      	addgt	r5, r5, r3
 800989e:	2600      	movs	r6, #0
 80098a0:	341a      	adds	r4, #26
 80098a2:	42b5      	cmp	r5, r6
 80098a4:	d11a      	bne.n	80098dc <_printf_common+0xc8>
 80098a6:	2000      	movs	r0, #0
 80098a8:	e008      	b.n	80098bc <_printf_common+0xa8>
 80098aa:	2301      	movs	r3, #1
 80098ac:	4652      	mov	r2, sl
 80098ae:	4649      	mov	r1, r9
 80098b0:	4638      	mov	r0, r7
 80098b2:	47c0      	blx	r8
 80098b4:	3001      	adds	r0, #1
 80098b6:	d103      	bne.n	80098c0 <_printf_common+0xac>
 80098b8:	f04f 30ff 	mov.w	r0, #4294967295
 80098bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c0:	3501      	adds	r5, #1
 80098c2:	e7c6      	b.n	8009852 <_printf_common+0x3e>
 80098c4:	18e1      	adds	r1, r4, r3
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	2030      	movs	r0, #48	; 0x30
 80098ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098ce:	4422      	add	r2, r4
 80098d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098d8:	3302      	adds	r3, #2
 80098da:	e7c7      	b.n	800986c <_printf_common+0x58>
 80098dc:	2301      	movs	r3, #1
 80098de:	4622      	mov	r2, r4
 80098e0:	4649      	mov	r1, r9
 80098e2:	4638      	mov	r0, r7
 80098e4:	47c0      	blx	r8
 80098e6:	3001      	adds	r0, #1
 80098e8:	d0e6      	beq.n	80098b8 <_printf_common+0xa4>
 80098ea:	3601      	adds	r6, #1
 80098ec:	e7d9      	b.n	80098a2 <_printf_common+0x8e>
	...

080098f0 <_printf_i>:
 80098f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	7e0f      	ldrb	r7, [r1, #24]
 80098f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098f8:	2f78      	cmp	r7, #120	; 0x78
 80098fa:	4691      	mov	r9, r2
 80098fc:	4680      	mov	r8, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	469a      	mov	sl, r3
 8009902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009906:	d807      	bhi.n	8009918 <_printf_i+0x28>
 8009908:	2f62      	cmp	r7, #98	; 0x62
 800990a:	d80a      	bhi.n	8009922 <_printf_i+0x32>
 800990c:	2f00      	cmp	r7, #0
 800990e:	f000 80d8 	beq.w	8009ac2 <_printf_i+0x1d2>
 8009912:	2f58      	cmp	r7, #88	; 0x58
 8009914:	f000 80a3 	beq.w	8009a5e <_printf_i+0x16e>
 8009918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800991c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009920:	e03a      	b.n	8009998 <_printf_i+0xa8>
 8009922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009926:	2b15      	cmp	r3, #21
 8009928:	d8f6      	bhi.n	8009918 <_printf_i+0x28>
 800992a:	a101      	add	r1, pc, #4	; (adr r1, 8009930 <_printf_i+0x40>)
 800992c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009930:	08009989 	.word	0x08009989
 8009934:	0800999d 	.word	0x0800999d
 8009938:	08009919 	.word	0x08009919
 800993c:	08009919 	.word	0x08009919
 8009940:	08009919 	.word	0x08009919
 8009944:	08009919 	.word	0x08009919
 8009948:	0800999d 	.word	0x0800999d
 800994c:	08009919 	.word	0x08009919
 8009950:	08009919 	.word	0x08009919
 8009954:	08009919 	.word	0x08009919
 8009958:	08009919 	.word	0x08009919
 800995c:	08009aa9 	.word	0x08009aa9
 8009960:	080099cd 	.word	0x080099cd
 8009964:	08009a8b 	.word	0x08009a8b
 8009968:	08009919 	.word	0x08009919
 800996c:	08009919 	.word	0x08009919
 8009970:	08009acb 	.word	0x08009acb
 8009974:	08009919 	.word	0x08009919
 8009978:	080099cd 	.word	0x080099cd
 800997c:	08009919 	.word	0x08009919
 8009980:	08009919 	.word	0x08009919
 8009984:	08009a93 	.word	0x08009a93
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	1d1a      	adds	r2, r3, #4
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	602a      	str	r2, [r5, #0]
 8009990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009998:	2301      	movs	r3, #1
 800999a:	e0a3      	b.n	8009ae4 <_printf_i+0x1f4>
 800999c:	6820      	ldr	r0, [r4, #0]
 800999e:	6829      	ldr	r1, [r5, #0]
 80099a0:	0606      	lsls	r6, r0, #24
 80099a2:	f101 0304 	add.w	r3, r1, #4
 80099a6:	d50a      	bpl.n	80099be <_printf_i+0xce>
 80099a8:	680e      	ldr	r6, [r1, #0]
 80099aa:	602b      	str	r3, [r5, #0]
 80099ac:	2e00      	cmp	r6, #0
 80099ae:	da03      	bge.n	80099b8 <_printf_i+0xc8>
 80099b0:	232d      	movs	r3, #45	; 0x2d
 80099b2:	4276      	negs	r6, r6
 80099b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099b8:	485e      	ldr	r0, [pc, #376]	; (8009b34 <_printf_i+0x244>)
 80099ba:	230a      	movs	r3, #10
 80099bc:	e019      	b.n	80099f2 <_printf_i+0x102>
 80099be:	680e      	ldr	r6, [r1, #0]
 80099c0:	602b      	str	r3, [r5, #0]
 80099c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099c6:	bf18      	it	ne
 80099c8:	b236      	sxthne	r6, r6
 80099ca:	e7ef      	b.n	80099ac <_printf_i+0xbc>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	6820      	ldr	r0, [r4, #0]
 80099d0:	1d19      	adds	r1, r3, #4
 80099d2:	6029      	str	r1, [r5, #0]
 80099d4:	0601      	lsls	r1, r0, #24
 80099d6:	d501      	bpl.n	80099dc <_printf_i+0xec>
 80099d8:	681e      	ldr	r6, [r3, #0]
 80099da:	e002      	b.n	80099e2 <_printf_i+0xf2>
 80099dc:	0646      	lsls	r6, r0, #25
 80099de:	d5fb      	bpl.n	80099d8 <_printf_i+0xe8>
 80099e0:	881e      	ldrh	r6, [r3, #0]
 80099e2:	4854      	ldr	r0, [pc, #336]	; (8009b34 <_printf_i+0x244>)
 80099e4:	2f6f      	cmp	r7, #111	; 0x6f
 80099e6:	bf0c      	ite	eq
 80099e8:	2308      	moveq	r3, #8
 80099ea:	230a      	movne	r3, #10
 80099ec:	2100      	movs	r1, #0
 80099ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099f2:	6865      	ldr	r5, [r4, #4]
 80099f4:	60a5      	str	r5, [r4, #8]
 80099f6:	2d00      	cmp	r5, #0
 80099f8:	bfa2      	ittt	ge
 80099fa:	6821      	ldrge	r1, [r4, #0]
 80099fc:	f021 0104 	bicge.w	r1, r1, #4
 8009a00:	6021      	strge	r1, [r4, #0]
 8009a02:	b90e      	cbnz	r6, 8009a08 <_printf_i+0x118>
 8009a04:	2d00      	cmp	r5, #0
 8009a06:	d04d      	beq.n	8009aa4 <_printf_i+0x1b4>
 8009a08:	4615      	mov	r5, r2
 8009a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8009a12:	5dc7      	ldrb	r7, [r0, r7]
 8009a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a18:	4637      	mov	r7, r6
 8009a1a:	42bb      	cmp	r3, r7
 8009a1c:	460e      	mov	r6, r1
 8009a1e:	d9f4      	bls.n	8009a0a <_printf_i+0x11a>
 8009a20:	2b08      	cmp	r3, #8
 8009a22:	d10b      	bne.n	8009a3c <_printf_i+0x14c>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	07de      	lsls	r6, r3, #31
 8009a28:	d508      	bpl.n	8009a3c <_printf_i+0x14c>
 8009a2a:	6923      	ldr	r3, [r4, #16]
 8009a2c:	6861      	ldr	r1, [r4, #4]
 8009a2e:	4299      	cmp	r1, r3
 8009a30:	bfde      	ittt	le
 8009a32:	2330      	movle	r3, #48	; 0x30
 8009a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a3c:	1b52      	subs	r2, r2, r5
 8009a3e:	6122      	str	r2, [r4, #16]
 8009a40:	f8cd a000 	str.w	sl, [sp]
 8009a44:	464b      	mov	r3, r9
 8009a46:	aa03      	add	r2, sp, #12
 8009a48:	4621      	mov	r1, r4
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	f7ff fee2 	bl	8009814 <_printf_common>
 8009a50:	3001      	adds	r0, #1
 8009a52:	d14c      	bne.n	8009aee <_printf_i+0x1fe>
 8009a54:	f04f 30ff 	mov.w	r0, #4294967295
 8009a58:	b004      	add	sp, #16
 8009a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5e:	4835      	ldr	r0, [pc, #212]	; (8009b34 <_printf_i+0x244>)
 8009a60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a64:	6829      	ldr	r1, [r5, #0]
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a6c:	6029      	str	r1, [r5, #0]
 8009a6e:	061d      	lsls	r5, r3, #24
 8009a70:	d514      	bpl.n	8009a9c <_printf_i+0x1ac>
 8009a72:	07df      	lsls	r7, r3, #31
 8009a74:	bf44      	itt	mi
 8009a76:	f043 0320 	orrmi.w	r3, r3, #32
 8009a7a:	6023      	strmi	r3, [r4, #0]
 8009a7c:	b91e      	cbnz	r6, 8009a86 <_printf_i+0x196>
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	f023 0320 	bic.w	r3, r3, #32
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	2310      	movs	r3, #16
 8009a88:	e7b0      	b.n	80099ec <_printf_i+0xfc>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	f043 0320 	orr.w	r3, r3, #32
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	2378      	movs	r3, #120	; 0x78
 8009a94:	4828      	ldr	r0, [pc, #160]	; (8009b38 <_printf_i+0x248>)
 8009a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a9a:	e7e3      	b.n	8009a64 <_printf_i+0x174>
 8009a9c:	0659      	lsls	r1, r3, #25
 8009a9e:	bf48      	it	mi
 8009aa0:	b2b6      	uxthmi	r6, r6
 8009aa2:	e7e6      	b.n	8009a72 <_printf_i+0x182>
 8009aa4:	4615      	mov	r5, r2
 8009aa6:	e7bb      	b.n	8009a20 <_printf_i+0x130>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	6826      	ldr	r6, [r4, #0]
 8009aac:	6961      	ldr	r1, [r4, #20]
 8009aae:	1d18      	adds	r0, r3, #4
 8009ab0:	6028      	str	r0, [r5, #0]
 8009ab2:	0635      	lsls	r5, r6, #24
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	d501      	bpl.n	8009abc <_printf_i+0x1cc>
 8009ab8:	6019      	str	r1, [r3, #0]
 8009aba:	e002      	b.n	8009ac2 <_printf_i+0x1d2>
 8009abc:	0670      	lsls	r0, r6, #25
 8009abe:	d5fb      	bpl.n	8009ab8 <_printf_i+0x1c8>
 8009ac0:	8019      	strh	r1, [r3, #0]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	6123      	str	r3, [r4, #16]
 8009ac6:	4615      	mov	r5, r2
 8009ac8:	e7ba      	b.n	8009a40 <_printf_i+0x150>
 8009aca:	682b      	ldr	r3, [r5, #0]
 8009acc:	1d1a      	adds	r2, r3, #4
 8009ace:	602a      	str	r2, [r5, #0]
 8009ad0:	681d      	ldr	r5, [r3, #0]
 8009ad2:	6862      	ldr	r2, [r4, #4]
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f7f6 fb9a 	bl	8000210 <memchr>
 8009adc:	b108      	cbz	r0, 8009ae2 <_printf_i+0x1f2>
 8009ade:	1b40      	subs	r0, r0, r5
 8009ae0:	6060      	str	r0, [r4, #4]
 8009ae2:	6863      	ldr	r3, [r4, #4]
 8009ae4:	6123      	str	r3, [r4, #16]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aec:	e7a8      	b.n	8009a40 <_printf_i+0x150>
 8009aee:	6923      	ldr	r3, [r4, #16]
 8009af0:	462a      	mov	r2, r5
 8009af2:	4649      	mov	r1, r9
 8009af4:	4640      	mov	r0, r8
 8009af6:	47d0      	blx	sl
 8009af8:	3001      	adds	r0, #1
 8009afa:	d0ab      	beq.n	8009a54 <_printf_i+0x164>
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	079b      	lsls	r3, r3, #30
 8009b00:	d413      	bmi.n	8009b2a <_printf_i+0x23a>
 8009b02:	68e0      	ldr	r0, [r4, #12]
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	4298      	cmp	r0, r3
 8009b08:	bfb8      	it	lt
 8009b0a:	4618      	movlt	r0, r3
 8009b0c:	e7a4      	b.n	8009a58 <_printf_i+0x168>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	4632      	mov	r2, r6
 8009b12:	4649      	mov	r1, r9
 8009b14:	4640      	mov	r0, r8
 8009b16:	47d0      	blx	sl
 8009b18:	3001      	adds	r0, #1
 8009b1a:	d09b      	beq.n	8009a54 <_printf_i+0x164>
 8009b1c:	3501      	adds	r5, #1
 8009b1e:	68e3      	ldr	r3, [r4, #12]
 8009b20:	9903      	ldr	r1, [sp, #12]
 8009b22:	1a5b      	subs	r3, r3, r1
 8009b24:	42ab      	cmp	r3, r5
 8009b26:	dcf2      	bgt.n	8009b0e <_printf_i+0x21e>
 8009b28:	e7eb      	b.n	8009b02 <_printf_i+0x212>
 8009b2a:	2500      	movs	r5, #0
 8009b2c:	f104 0619 	add.w	r6, r4, #25
 8009b30:	e7f5      	b.n	8009b1e <_printf_i+0x22e>
 8009b32:	bf00      	nop
 8009b34:	0800d78a 	.word	0x0800d78a
 8009b38:	0800d79b 	.word	0x0800d79b

08009b3c <_puts_r>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	460e      	mov	r6, r1
 8009b40:	4605      	mov	r5, r0
 8009b42:	b118      	cbz	r0, 8009b4c <_puts_r+0x10>
 8009b44:	6983      	ldr	r3, [r0, #24]
 8009b46:	b90b      	cbnz	r3, 8009b4c <_puts_r+0x10>
 8009b48:	f7ff f9c2 	bl	8008ed0 <__sinit>
 8009b4c:	69ab      	ldr	r3, [r5, #24]
 8009b4e:	68ac      	ldr	r4, [r5, #8]
 8009b50:	b913      	cbnz	r3, 8009b58 <_puts_r+0x1c>
 8009b52:	4628      	mov	r0, r5
 8009b54:	f7ff f9bc 	bl	8008ed0 <__sinit>
 8009b58:	4b2c      	ldr	r3, [pc, #176]	; (8009c0c <_puts_r+0xd0>)
 8009b5a:	429c      	cmp	r4, r3
 8009b5c:	d120      	bne.n	8009ba0 <_puts_r+0x64>
 8009b5e:	686c      	ldr	r4, [r5, #4]
 8009b60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b62:	07db      	lsls	r3, r3, #31
 8009b64:	d405      	bmi.n	8009b72 <_puts_r+0x36>
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	0598      	lsls	r0, r3, #22
 8009b6a:	d402      	bmi.n	8009b72 <_puts_r+0x36>
 8009b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b6e:	f7ff fa72 	bl	8009056 <__retarget_lock_acquire_recursive>
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	0719      	lsls	r1, r3, #28
 8009b76:	d51d      	bpl.n	8009bb4 <_puts_r+0x78>
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	b1db      	cbz	r3, 8009bb4 <_puts_r+0x78>
 8009b7c:	3e01      	subs	r6, #1
 8009b7e:	68a3      	ldr	r3, [r4, #8]
 8009b80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b84:	3b01      	subs	r3, #1
 8009b86:	60a3      	str	r3, [r4, #8]
 8009b88:	bb39      	cbnz	r1, 8009bda <_puts_r+0x9e>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	da38      	bge.n	8009c00 <_puts_r+0xc4>
 8009b8e:	4622      	mov	r2, r4
 8009b90:	210a      	movs	r1, #10
 8009b92:	4628      	mov	r0, r5
 8009b94:	f000 ff12 	bl	800a9bc <__swbuf_r>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d011      	beq.n	8009bc0 <_puts_r+0x84>
 8009b9c:	250a      	movs	r5, #10
 8009b9e:	e011      	b.n	8009bc4 <_puts_r+0x88>
 8009ba0:	4b1b      	ldr	r3, [pc, #108]	; (8009c10 <_puts_r+0xd4>)
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	d101      	bne.n	8009baa <_puts_r+0x6e>
 8009ba6:	68ac      	ldr	r4, [r5, #8]
 8009ba8:	e7da      	b.n	8009b60 <_puts_r+0x24>
 8009baa:	4b1a      	ldr	r3, [pc, #104]	; (8009c14 <_puts_r+0xd8>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	bf08      	it	eq
 8009bb0:	68ec      	ldreq	r4, [r5, #12]
 8009bb2:	e7d5      	b.n	8009b60 <_puts_r+0x24>
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f000 ff64 	bl	800aa84 <__swsetup_r>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d0dd      	beq.n	8009b7c <_puts_r+0x40>
 8009bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8009bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bc6:	07da      	lsls	r2, r3, #31
 8009bc8:	d405      	bmi.n	8009bd6 <_puts_r+0x9a>
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	059b      	lsls	r3, r3, #22
 8009bce:	d402      	bmi.n	8009bd6 <_puts_r+0x9a>
 8009bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bd2:	f7ff fa41 	bl	8009058 <__retarget_lock_release_recursive>
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	da04      	bge.n	8009be8 <_puts_r+0xac>
 8009bde:	69a2      	ldr	r2, [r4, #24]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	dc06      	bgt.n	8009bf2 <_puts_r+0xb6>
 8009be4:	290a      	cmp	r1, #10
 8009be6:	d004      	beq.n	8009bf2 <_puts_r+0xb6>
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	1c5a      	adds	r2, r3, #1
 8009bec:	6022      	str	r2, [r4, #0]
 8009bee:	7019      	strb	r1, [r3, #0]
 8009bf0:	e7c5      	b.n	8009b7e <_puts_r+0x42>
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f000 fee1 	bl	800a9bc <__swbuf_r>
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	d1bf      	bne.n	8009b7e <_puts_r+0x42>
 8009bfe:	e7df      	b.n	8009bc0 <_puts_r+0x84>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	250a      	movs	r5, #10
 8009c04:	1c5a      	adds	r2, r3, #1
 8009c06:	6022      	str	r2, [r4, #0]
 8009c08:	701d      	strb	r5, [r3, #0]
 8009c0a:	e7db      	b.n	8009bc4 <_puts_r+0x88>
 8009c0c:	0800d734 	.word	0x0800d734
 8009c10:	0800d754 	.word	0x0800d754
 8009c14:	0800d714 	.word	0x0800d714

08009c18 <puts>:
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <puts+0xc>)
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	6818      	ldr	r0, [r3, #0]
 8009c1e:	f7ff bf8d 	b.w	8009b3c <_puts_r>
 8009c22:	bf00      	nop
 8009c24:	200002ec 	.word	0x200002ec

08009c28 <realloc>:
 8009c28:	4b02      	ldr	r3, [pc, #8]	; (8009c34 <realloc+0xc>)
 8009c2a:	460a      	mov	r2, r1
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	f002 bf01 	b.w	800ca36 <_realloc_r>
 8009c34:	200002ec 	.word	0x200002ec

08009c38 <_sbrk_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d06      	ldr	r5, [pc, #24]	; (8009c54 <_sbrk_r+0x1c>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	f7f9 f914 	bl	8002e70 <_sbrk>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d102      	bne.n	8009c52 <_sbrk_r+0x1a>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	b103      	cbz	r3, 8009c52 <_sbrk_r+0x1a>
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	20005eb0 	.word	0x20005eb0

08009c58 <siprintf>:
 8009c58:	b40e      	push	{r1, r2, r3}
 8009c5a:	b500      	push	{lr}
 8009c5c:	b09c      	sub	sp, #112	; 0x70
 8009c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c60:	9002      	str	r0, [sp, #8]
 8009c62:	9006      	str	r0, [sp, #24]
 8009c64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c68:	4809      	ldr	r0, [pc, #36]	; (8009c90 <siprintf+0x38>)
 8009c6a:	9107      	str	r1, [sp, #28]
 8009c6c:	9104      	str	r1, [sp, #16]
 8009c6e:	4909      	ldr	r1, [pc, #36]	; (8009c94 <siprintf+0x3c>)
 8009c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c74:	9105      	str	r1, [sp, #20]
 8009c76:	6800      	ldr	r0, [r0, #0]
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	a902      	add	r1, sp, #8
 8009c7c:	f002 ff66 	bl	800cb4c <_svfiprintf_r>
 8009c80:	9b02      	ldr	r3, [sp, #8]
 8009c82:	2200      	movs	r2, #0
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	b01c      	add	sp, #112	; 0x70
 8009c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c8c:	b003      	add	sp, #12
 8009c8e:	4770      	bx	lr
 8009c90:	200002ec 	.word	0x200002ec
 8009c94:	ffff0208 	.word	0xffff0208

08009c98 <__sread>:
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca0:	f003 f9ae 	bl	800d000 <_read_r>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	bfab      	itete	ge
 8009ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009caa:	89a3      	ldrhlt	r3, [r4, #12]
 8009cac:	181b      	addge	r3, r3, r0
 8009cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cb2:	bfac      	ite	ge
 8009cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cb6:	81a3      	strhlt	r3, [r4, #12]
 8009cb8:	bd10      	pop	{r4, pc}

08009cba <__swrite>:
 8009cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbe:	461f      	mov	r7, r3
 8009cc0:	898b      	ldrh	r3, [r1, #12]
 8009cc2:	05db      	lsls	r3, r3, #23
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	4616      	mov	r6, r2
 8009cca:	d505      	bpl.n	8009cd8 <__swrite+0x1e>
 8009ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f002 f942 	bl	800bf5c <_lseek_r>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	4628      	mov	r0, r5
 8009cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cee:	f000 beb7 	b.w	800aa60 <_write_r>

08009cf2 <__sseek>:
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfa:	f002 f92f 	bl	800bf5c <_lseek_r>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	bf15      	itete	ne
 8009d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d0e:	81a3      	strheq	r3, [r4, #12]
 8009d10:	bf18      	it	ne
 8009d12:	81a3      	strhne	r3, [r4, #12]
 8009d14:	bd10      	pop	{r4, pc}

08009d16 <__sclose>:
 8009d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1a:	f000 bf21 	b.w	800ab60 <_close_r>

08009d1e <strchr>:
 8009d1e:	b2c9      	uxtb	r1, r1
 8009d20:	4603      	mov	r3, r0
 8009d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d26:	b11a      	cbz	r2, 8009d30 <strchr+0x12>
 8009d28:	428a      	cmp	r2, r1
 8009d2a:	d1f9      	bne.n	8009d20 <strchr+0x2>
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	4770      	bx	lr
 8009d30:	2900      	cmp	r1, #0
 8009d32:	bf18      	it	ne
 8009d34:	2300      	movne	r3, #0
 8009d36:	e7f9      	b.n	8009d2c <strchr+0xe>

08009d38 <strncmp>:
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	b17a      	cbz	r2, 8009d5c <strncmp+0x24>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	3901      	subs	r1, #1
 8009d40:	1884      	adds	r4, r0, r2
 8009d42:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d4a:	4290      	cmp	r0, r2
 8009d4c:	d101      	bne.n	8009d52 <strncmp+0x1a>
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	d101      	bne.n	8009d56 <strncmp+0x1e>
 8009d52:	1a80      	subs	r0, r0, r2
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d1f3      	bne.n	8009d42 <strncmp+0xa>
 8009d5a:	e7fa      	b.n	8009d52 <strncmp+0x1a>
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	e7f9      	b.n	8009d54 <strncmp+0x1c>

08009d60 <sulp>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	4604      	mov	r4, r0
 8009d64:	460d      	mov	r5, r1
 8009d66:	ec45 4b10 	vmov	d0, r4, r5
 8009d6a:	4616      	mov	r6, r2
 8009d6c:	f002 fcfe 	bl	800c76c <__ulp>
 8009d70:	ec51 0b10 	vmov	r0, r1, d0
 8009d74:	b17e      	cbz	r6, 8009d96 <sulp+0x36>
 8009d76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	dd09      	ble.n	8009d96 <sulp+0x36>
 8009d82:	051b      	lsls	r3, r3, #20
 8009d84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009d88:	2400      	movs	r4, #0
 8009d8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009d8e:	4622      	mov	r2, r4
 8009d90:	462b      	mov	r3, r5
 8009d92:	f7f6 fc49 	bl	8000628 <__aeabi_dmul>
 8009d96:	bd70      	pop	{r4, r5, r6, pc}

08009d98 <_strtod_l>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	ed2d 8b02 	vpush	{d8}
 8009da0:	b09d      	sub	sp, #116	; 0x74
 8009da2:	461f      	mov	r7, r3
 8009da4:	2300      	movs	r3, #0
 8009da6:	9318      	str	r3, [sp, #96]	; 0x60
 8009da8:	4ba2      	ldr	r3, [pc, #648]	; (800a034 <_strtod_l+0x29c>)
 8009daa:	9213      	str	r2, [sp, #76]	; 0x4c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	9305      	str	r3, [sp, #20]
 8009db0:	4604      	mov	r4, r0
 8009db2:	4618      	mov	r0, r3
 8009db4:	4688      	mov	r8, r1
 8009db6:	f7f6 fa1d 	bl	80001f4 <strlen>
 8009dba:	f04f 0a00 	mov.w	sl, #0
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	f04f 0b00 	mov.w	fp, #0
 8009dc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dca:	781a      	ldrb	r2, [r3, #0]
 8009dcc:	2a2b      	cmp	r2, #43	; 0x2b
 8009dce:	d04e      	beq.n	8009e6e <_strtod_l+0xd6>
 8009dd0:	d83b      	bhi.n	8009e4a <_strtod_l+0xb2>
 8009dd2:	2a0d      	cmp	r2, #13
 8009dd4:	d834      	bhi.n	8009e40 <_strtod_l+0xa8>
 8009dd6:	2a08      	cmp	r2, #8
 8009dd8:	d834      	bhi.n	8009e44 <_strtod_l+0xac>
 8009dda:	2a00      	cmp	r2, #0
 8009ddc:	d03e      	beq.n	8009e5c <_strtod_l+0xc4>
 8009dde:	2300      	movs	r3, #0
 8009de0:	930a      	str	r3, [sp, #40]	; 0x28
 8009de2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009de4:	7833      	ldrb	r3, [r6, #0]
 8009de6:	2b30      	cmp	r3, #48	; 0x30
 8009de8:	f040 80b0 	bne.w	8009f4c <_strtod_l+0x1b4>
 8009dec:	7873      	ldrb	r3, [r6, #1]
 8009dee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009df2:	2b58      	cmp	r3, #88	; 0x58
 8009df4:	d168      	bne.n	8009ec8 <_strtod_l+0x130>
 8009df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df8:	9301      	str	r3, [sp, #4]
 8009dfa:	ab18      	add	r3, sp, #96	; 0x60
 8009dfc:	9702      	str	r7, [sp, #8]
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	4a8d      	ldr	r2, [pc, #564]	; (800a038 <_strtod_l+0x2a0>)
 8009e02:	ab19      	add	r3, sp, #100	; 0x64
 8009e04:	a917      	add	r1, sp, #92	; 0x5c
 8009e06:	4620      	mov	r0, r4
 8009e08:	f001 fd9c 	bl	800b944 <__gethex>
 8009e0c:	f010 0707 	ands.w	r7, r0, #7
 8009e10:	4605      	mov	r5, r0
 8009e12:	d005      	beq.n	8009e20 <_strtod_l+0x88>
 8009e14:	2f06      	cmp	r7, #6
 8009e16:	d12c      	bne.n	8009e72 <_strtod_l+0xda>
 8009e18:	3601      	adds	r6, #1
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	9617      	str	r6, [sp, #92]	; 0x5c
 8009e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f040 8590 	bne.w	800a948 <_strtod_l+0xbb0>
 8009e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e2a:	b1eb      	cbz	r3, 8009e68 <_strtod_l+0xd0>
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e32:	ec43 2b10 	vmov	d0, r2, r3
 8009e36:	b01d      	add	sp, #116	; 0x74
 8009e38:	ecbd 8b02 	vpop	{d8}
 8009e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e40:	2a20      	cmp	r2, #32
 8009e42:	d1cc      	bne.n	8009dde <_strtod_l+0x46>
 8009e44:	3301      	adds	r3, #1
 8009e46:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e48:	e7be      	b.n	8009dc8 <_strtod_l+0x30>
 8009e4a:	2a2d      	cmp	r2, #45	; 0x2d
 8009e4c:	d1c7      	bne.n	8009dde <_strtod_l+0x46>
 8009e4e:	2201      	movs	r2, #1
 8009e50:	920a      	str	r2, [sp, #40]	; 0x28
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1c2      	bne.n	8009de2 <_strtod_l+0x4a>
 8009e5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e5e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f040 856e 	bne.w	800a944 <_strtod_l+0xbac>
 8009e68:	4652      	mov	r2, sl
 8009e6a:	465b      	mov	r3, fp
 8009e6c:	e7e1      	b.n	8009e32 <_strtod_l+0x9a>
 8009e6e:	2200      	movs	r2, #0
 8009e70:	e7ee      	b.n	8009e50 <_strtod_l+0xb8>
 8009e72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e74:	b13a      	cbz	r2, 8009e86 <_strtod_l+0xee>
 8009e76:	2135      	movs	r1, #53	; 0x35
 8009e78:	a81a      	add	r0, sp, #104	; 0x68
 8009e7a:	f002 fd82 	bl	800c982 <__copybits>
 8009e7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e80:	4620      	mov	r0, r4
 8009e82:	f002 f941 	bl	800c108 <_Bfree>
 8009e86:	3f01      	subs	r7, #1
 8009e88:	2f04      	cmp	r7, #4
 8009e8a:	d806      	bhi.n	8009e9a <_strtod_l+0x102>
 8009e8c:	e8df f007 	tbb	[pc, r7]
 8009e90:	1714030a 	.word	0x1714030a
 8009e94:	0a          	.byte	0x0a
 8009e95:	00          	.byte	0x00
 8009e96:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009e9a:	0728      	lsls	r0, r5, #28
 8009e9c:	d5c0      	bpl.n	8009e20 <_strtod_l+0x88>
 8009e9e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009ea2:	e7bd      	b.n	8009e20 <_strtod_l+0x88>
 8009ea4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009ea8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009eaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009eae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009eb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009eb6:	e7f0      	b.n	8009e9a <_strtod_l+0x102>
 8009eb8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a03c <_strtod_l+0x2a4>
 8009ebc:	e7ed      	b.n	8009e9a <_strtod_l+0x102>
 8009ebe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009ec2:	f04f 3aff 	mov.w	sl, #4294967295
 8009ec6:	e7e8      	b.n	8009e9a <_strtod_l+0x102>
 8009ec8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ece:	785b      	ldrb	r3, [r3, #1]
 8009ed0:	2b30      	cmp	r3, #48	; 0x30
 8009ed2:	d0f9      	beq.n	8009ec8 <_strtod_l+0x130>
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0a3      	beq.n	8009e20 <_strtod_l+0x88>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	f04f 0900 	mov.w	r9, #0
 8009ede:	9304      	str	r3, [sp, #16]
 8009ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ee2:	9308      	str	r3, [sp, #32]
 8009ee4:	f8cd 901c 	str.w	r9, [sp, #28]
 8009ee8:	464f      	mov	r7, r9
 8009eea:	220a      	movs	r2, #10
 8009eec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009eee:	7806      	ldrb	r6, [r0, #0]
 8009ef0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009ef4:	b2d9      	uxtb	r1, r3
 8009ef6:	2909      	cmp	r1, #9
 8009ef8:	d92a      	bls.n	8009f50 <_strtod_l+0x1b8>
 8009efa:	9905      	ldr	r1, [sp, #20]
 8009efc:	462a      	mov	r2, r5
 8009efe:	f7ff ff1b 	bl	8009d38 <strncmp>
 8009f02:	b398      	cbz	r0, 8009f6c <_strtod_l+0x1d4>
 8009f04:	2000      	movs	r0, #0
 8009f06:	4632      	mov	r2, r6
 8009f08:	463d      	mov	r5, r7
 8009f0a:	9005      	str	r0, [sp, #20]
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2a65      	cmp	r2, #101	; 0x65
 8009f10:	d001      	beq.n	8009f16 <_strtod_l+0x17e>
 8009f12:	2a45      	cmp	r2, #69	; 0x45
 8009f14:	d118      	bne.n	8009f48 <_strtod_l+0x1b0>
 8009f16:	b91d      	cbnz	r5, 8009f20 <_strtod_l+0x188>
 8009f18:	9a04      	ldr	r2, [sp, #16]
 8009f1a:	4302      	orrs	r2, r0
 8009f1c:	d09e      	beq.n	8009e5c <_strtod_l+0xc4>
 8009f1e:	2500      	movs	r5, #0
 8009f20:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009f24:	f108 0201 	add.w	r2, r8, #1
 8009f28:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f2a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009f2e:	2a2b      	cmp	r2, #43	; 0x2b
 8009f30:	d075      	beq.n	800a01e <_strtod_l+0x286>
 8009f32:	2a2d      	cmp	r2, #45	; 0x2d
 8009f34:	d07b      	beq.n	800a02e <_strtod_l+0x296>
 8009f36:	f04f 0c00 	mov.w	ip, #0
 8009f3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009f3e:	2909      	cmp	r1, #9
 8009f40:	f240 8082 	bls.w	800a048 <_strtod_l+0x2b0>
 8009f44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009f48:	2600      	movs	r6, #0
 8009f4a:	e09d      	b.n	800a088 <_strtod_l+0x2f0>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e7c4      	b.n	8009eda <_strtod_l+0x142>
 8009f50:	2f08      	cmp	r7, #8
 8009f52:	bfd8      	it	le
 8009f54:	9907      	ldrle	r1, [sp, #28]
 8009f56:	f100 0001 	add.w	r0, r0, #1
 8009f5a:	bfda      	itte	le
 8009f5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f60:	9307      	strle	r3, [sp, #28]
 8009f62:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009f66:	3701      	adds	r7, #1
 8009f68:	9017      	str	r0, [sp, #92]	; 0x5c
 8009f6a:	e7bf      	b.n	8009eec <_strtod_l+0x154>
 8009f6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f6e:	195a      	adds	r2, r3, r5
 8009f70:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f72:	5d5a      	ldrb	r2, [r3, r5]
 8009f74:	2f00      	cmp	r7, #0
 8009f76:	d037      	beq.n	8009fe8 <_strtod_l+0x250>
 8009f78:	9005      	str	r0, [sp, #20]
 8009f7a:	463d      	mov	r5, r7
 8009f7c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009f80:	2b09      	cmp	r3, #9
 8009f82:	d912      	bls.n	8009faa <_strtod_l+0x212>
 8009f84:	2301      	movs	r3, #1
 8009f86:	e7c2      	b.n	8009f0e <_strtod_l+0x176>
 8009f88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f8e:	785a      	ldrb	r2, [r3, #1]
 8009f90:	3001      	adds	r0, #1
 8009f92:	2a30      	cmp	r2, #48	; 0x30
 8009f94:	d0f8      	beq.n	8009f88 <_strtod_l+0x1f0>
 8009f96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009f9a:	2b08      	cmp	r3, #8
 8009f9c:	f200 84d9 	bhi.w	800a952 <_strtod_l+0xbba>
 8009fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fa2:	9005      	str	r0, [sp, #20]
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	9308      	str	r3, [sp, #32]
 8009fa8:	4605      	mov	r5, r0
 8009faa:	3a30      	subs	r2, #48	; 0x30
 8009fac:	f100 0301 	add.w	r3, r0, #1
 8009fb0:	d014      	beq.n	8009fdc <_strtod_l+0x244>
 8009fb2:	9905      	ldr	r1, [sp, #20]
 8009fb4:	4419      	add	r1, r3
 8009fb6:	9105      	str	r1, [sp, #20]
 8009fb8:	462b      	mov	r3, r5
 8009fba:	eb00 0e05 	add.w	lr, r0, r5
 8009fbe:	210a      	movs	r1, #10
 8009fc0:	4573      	cmp	r3, lr
 8009fc2:	d113      	bne.n	8009fec <_strtod_l+0x254>
 8009fc4:	182b      	adds	r3, r5, r0
 8009fc6:	2b08      	cmp	r3, #8
 8009fc8:	f105 0501 	add.w	r5, r5, #1
 8009fcc:	4405      	add	r5, r0
 8009fce:	dc1c      	bgt.n	800a00a <_strtod_l+0x272>
 8009fd0:	9907      	ldr	r1, [sp, #28]
 8009fd2:	230a      	movs	r3, #10
 8009fd4:	fb03 2301 	mla	r3, r3, r1, r2
 8009fd8:	9307      	str	r3, [sp, #28]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009fde:	1c51      	adds	r1, r2, #1
 8009fe0:	9117      	str	r1, [sp, #92]	; 0x5c
 8009fe2:	7852      	ldrb	r2, [r2, #1]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	e7c9      	b.n	8009f7c <_strtod_l+0x1e4>
 8009fe8:	4638      	mov	r0, r7
 8009fea:	e7d2      	b.n	8009f92 <_strtod_l+0x1fa>
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	dc04      	bgt.n	8009ffa <_strtod_l+0x262>
 8009ff0:	9e07      	ldr	r6, [sp, #28]
 8009ff2:	434e      	muls	r6, r1
 8009ff4:	9607      	str	r6, [sp, #28]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	e7e2      	b.n	8009fc0 <_strtod_l+0x228>
 8009ffa:	f103 0c01 	add.w	ip, r3, #1
 8009ffe:	f1bc 0f10 	cmp.w	ip, #16
 800a002:	bfd8      	it	le
 800a004:	fb01 f909 	mulle.w	r9, r1, r9
 800a008:	e7f5      	b.n	8009ff6 <_strtod_l+0x25e>
 800a00a:	2d10      	cmp	r5, #16
 800a00c:	bfdc      	itt	le
 800a00e:	230a      	movle	r3, #10
 800a010:	fb03 2909 	mlale	r9, r3, r9, r2
 800a014:	e7e1      	b.n	8009fda <_strtod_l+0x242>
 800a016:	2300      	movs	r3, #0
 800a018:	9305      	str	r3, [sp, #20]
 800a01a:	2301      	movs	r3, #1
 800a01c:	e77c      	b.n	8009f18 <_strtod_l+0x180>
 800a01e:	f04f 0c00 	mov.w	ip, #0
 800a022:	f108 0202 	add.w	r2, r8, #2
 800a026:	9217      	str	r2, [sp, #92]	; 0x5c
 800a028:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a02c:	e785      	b.n	8009f3a <_strtod_l+0x1a2>
 800a02e:	f04f 0c01 	mov.w	ip, #1
 800a032:	e7f6      	b.n	800a022 <_strtod_l+0x28a>
 800a034:	0800d8f8 	.word	0x0800d8f8
 800a038:	0800d7ac 	.word	0x0800d7ac
 800a03c:	7ff00000 	.word	0x7ff00000
 800a040:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a042:	1c51      	adds	r1, r2, #1
 800a044:	9117      	str	r1, [sp, #92]	; 0x5c
 800a046:	7852      	ldrb	r2, [r2, #1]
 800a048:	2a30      	cmp	r2, #48	; 0x30
 800a04a:	d0f9      	beq.n	800a040 <_strtod_l+0x2a8>
 800a04c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a050:	2908      	cmp	r1, #8
 800a052:	f63f af79 	bhi.w	8009f48 <_strtod_l+0x1b0>
 800a056:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a05a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a05c:	9206      	str	r2, [sp, #24]
 800a05e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a060:	1c51      	adds	r1, r2, #1
 800a062:	9117      	str	r1, [sp, #92]	; 0x5c
 800a064:	7852      	ldrb	r2, [r2, #1]
 800a066:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a06a:	2e09      	cmp	r6, #9
 800a06c:	d937      	bls.n	800a0de <_strtod_l+0x346>
 800a06e:	9e06      	ldr	r6, [sp, #24]
 800a070:	1b89      	subs	r1, r1, r6
 800a072:	2908      	cmp	r1, #8
 800a074:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a078:	dc02      	bgt.n	800a080 <_strtod_l+0x2e8>
 800a07a:	4576      	cmp	r6, lr
 800a07c:	bfa8      	it	ge
 800a07e:	4676      	movge	r6, lr
 800a080:	f1bc 0f00 	cmp.w	ip, #0
 800a084:	d000      	beq.n	800a088 <_strtod_l+0x2f0>
 800a086:	4276      	negs	r6, r6
 800a088:	2d00      	cmp	r5, #0
 800a08a:	d14d      	bne.n	800a128 <_strtod_l+0x390>
 800a08c:	9904      	ldr	r1, [sp, #16]
 800a08e:	4301      	orrs	r1, r0
 800a090:	f47f aec6 	bne.w	8009e20 <_strtod_l+0x88>
 800a094:	2b00      	cmp	r3, #0
 800a096:	f47f aee1 	bne.w	8009e5c <_strtod_l+0xc4>
 800a09a:	2a69      	cmp	r2, #105	; 0x69
 800a09c:	d027      	beq.n	800a0ee <_strtod_l+0x356>
 800a09e:	dc24      	bgt.n	800a0ea <_strtod_l+0x352>
 800a0a0:	2a49      	cmp	r2, #73	; 0x49
 800a0a2:	d024      	beq.n	800a0ee <_strtod_l+0x356>
 800a0a4:	2a4e      	cmp	r2, #78	; 0x4e
 800a0a6:	f47f aed9 	bne.w	8009e5c <_strtod_l+0xc4>
 800a0aa:	499f      	ldr	r1, [pc, #636]	; (800a328 <_strtod_l+0x590>)
 800a0ac:	a817      	add	r0, sp, #92	; 0x5c
 800a0ae:	f001 fea1 	bl	800bdf4 <__match>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	f43f aed2 	beq.w	8009e5c <_strtod_l+0xc4>
 800a0b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b28      	cmp	r3, #40	; 0x28
 800a0be:	d12d      	bne.n	800a11c <_strtod_l+0x384>
 800a0c0:	499a      	ldr	r1, [pc, #616]	; (800a32c <_strtod_l+0x594>)
 800a0c2:	aa1a      	add	r2, sp, #104	; 0x68
 800a0c4:	a817      	add	r0, sp, #92	; 0x5c
 800a0c6:	f001 fea9 	bl	800be1c <__hexnan>
 800a0ca:	2805      	cmp	r0, #5
 800a0cc:	d126      	bne.n	800a11c <_strtod_l+0x384>
 800a0ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a0d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a0d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a0dc:	e6a0      	b.n	8009e20 <_strtod_l+0x88>
 800a0de:	210a      	movs	r1, #10
 800a0e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a0e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a0e8:	e7b9      	b.n	800a05e <_strtod_l+0x2c6>
 800a0ea:	2a6e      	cmp	r2, #110	; 0x6e
 800a0ec:	e7db      	b.n	800a0a6 <_strtod_l+0x30e>
 800a0ee:	4990      	ldr	r1, [pc, #576]	; (800a330 <_strtod_l+0x598>)
 800a0f0:	a817      	add	r0, sp, #92	; 0x5c
 800a0f2:	f001 fe7f 	bl	800bdf4 <__match>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f43f aeb0 	beq.w	8009e5c <_strtod_l+0xc4>
 800a0fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0fe:	498d      	ldr	r1, [pc, #564]	; (800a334 <_strtod_l+0x59c>)
 800a100:	3b01      	subs	r3, #1
 800a102:	a817      	add	r0, sp, #92	; 0x5c
 800a104:	9317      	str	r3, [sp, #92]	; 0x5c
 800a106:	f001 fe75 	bl	800bdf4 <__match>
 800a10a:	b910      	cbnz	r0, 800a112 <_strtod_l+0x37a>
 800a10c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a10e:	3301      	adds	r3, #1
 800a110:	9317      	str	r3, [sp, #92]	; 0x5c
 800a112:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a344 <_strtod_l+0x5ac>
 800a116:	f04f 0a00 	mov.w	sl, #0
 800a11a:	e681      	b.n	8009e20 <_strtod_l+0x88>
 800a11c:	4886      	ldr	r0, [pc, #536]	; (800a338 <_strtod_l+0x5a0>)
 800a11e:	f002 ff83 	bl	800d028 <nan>
 800a122:	ec5b ab10 	vmov	sl, fp, d0
 800a126:	e67b      	b.n	8009e20 <_strtod_l+0x88>
 800a128:	9b05      	ldr	r3, [sp, #20]
 800a12a:	9807      	ldr	r0, [sp, #28]
 800a12c:	1af3      	subs	r3, r6, r3
 800a12e:	2f00      	cmp	r7, #0
 800a130:	bf08      	it	eq
 800a132:	462f      	moveq	r7, r5
 800a134:	2d10      	cmp	r5, #16
 800a136:	9306      	str	r3, [sp, #24]
 800a138:	46a8      	mov	r8, r5
 800a13a:	bfa8      	it	ge
 800a13c:	f04f 0810 	movge.w	r8, #16
 800a140:	f7f6 f9f8 	bl	8000534 <__aeabi_ui2d>
 800a144:	2d09      	cmp	r5, #9
 800a146:	4682      	mov	sl, r0
 800a148:	468b      	mov	fp, r1
 800a14a:	dd13      	ble.n	800a174 <_strtod_l+0x3dc>
 800a14c:	4b7b      	ldr	r3, [pc, #492]	; (800a33c <_strtod_l+0x5a4>)
 800a14e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a152:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a156:	f7f6 fa67 	bl	8000628 <__aeabi_dmul>
 800a15a:	4682      	mov	sl, r0
 800a15c:	4648      	mov	r0, r9
 800a15e:	468b      	mov	fp, r1
 800a160:	f7f6 f9e8 	bl	8000534 <__aeabi_ui2d>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	4650      	mov	r0, sl
 800a16a:	4659      	mov	r1, fp
 800a16c:	f7f6 f8a6 	bl	80002bc <__adddf3>
 800a170:	4682      	mov	sl, r0
 800a172:	468b      	mov	fp, r1
 800a174:	2d0f      	cmp	r5, #15
 800a176:	dc38      	bgt.n	800a1ea <_strtod_l+0x452>
 800a178:	9b06      	ldr	r3, [sp, #24]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f43f ae50 	beq.w	8009e20 <_strtod_l+0x88>
 800a180:	dd24      	ble.n	800a1cc <_strtod_l+0x434>
 800a182:	2b16      	cmp	r3, #22
 800a184:	dc0b      	bgt.n	800a19e <_strtod_l+0x406>
 800a186:	496d      	ldr	r1, [pc, #436]	; (800a33c <_strtod_l+0x5a4>)
 800a188:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a190:	4652      	mov	r2, sl
 800a192:	465b      	mov	r3, fp
 800a194:	f7f6 fa48 	bl	8000628 <__aeabi_dmul>
 800a198:	4682      	mov	sl, r0
 800a19a:	468b      	mov	fp, r1
 800a19c:	e640      	b.n	8009e20 <_strtod_l+0x88>
 800a19e:	9a06      	ldr	r2, [sp, #24]
 800a1a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	db20      	blt.n	800a1ea <_strtod_l+0x452>
 800a1a8:	4c64      	ldr	r4, [pc, #400]	; (800a33c <_strtod_l+0x5a4>)
 800a1aa:	f1c5 050f 	rsb	r5, r5, #15
 800a1ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a1b2:	4652      	mov	r2, sl
 800a1b4:	465b      	mov	r3, fp
 800a1b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ba:	f7f6 fa35 	bl	8000628 <__aeabi_dmul>
 800a1be:	9b06      	ldr	r3, [sp, #24]
 800a1c0:	1b5d      	subs	r5, r3, r5
 800a1c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a1c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a1ca:	e7e3      	b.n	800a194 <_strtod_l+0x3fc>
 800a1cc:	9b06      	ldr	r3, [sp, #24]
 800a1ce:	3316      	adds	r3, #22
 800a1d0:	db0b      	blt.n	800a1ea <_strtod_l+0x452>
 800a1d2:	9b05      	ldr	r3, [sp, #20]
 800a1d4:	1b9e      	subs	r6, r3, r6
 800a1d6:	4b59      	ldr	r3, [pc, #356]	; (800a33c <_strtod_l+0x5a4>)
 800a1d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a1dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1e0:	4650      	mov	r0, sl
 800a1e2:	4659      	mov	r1, fp
 800a1e4:	f7f6 fb4a 	bl	800087c <__aeabi_ddiv>
 800a1e8:	e7d6      	b.n	800a198 <_strtod_l+0x400>
 800a1ea:	9b06      	ldr	r3, [sp, #24]
 800a1ec:	eba5 0808 	sub.w	r8, r5, r8
 800a1f0:	4498      	add	r8, r3
 800a1f2:	f1b8 0f00 	cmp.w	r8, #0
 800a1f6:	dd74      	ble.n	800a2e2 <_strtod_l+0x54a>
 800a1f8:	f018 030f 	ands.w	r3, r8, #15
 800a1fc:	d00a      	beq.n	800a214 <_strtod_l+0x47c>
 800a1fe:	494f      	ldr	r1, [pc, #316]	; (800a33c <_strtod_l+0x5a4>)
 800a200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a204:	4652      	mov	r2, sl
 800a206:	465b      	mov	r3, fp
 800a208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a20c:	f7f6 fa0c 	bl	8000628 <__aeabi_dmul>
 800a210:	4682      	mov	sl, r0
 800a212:	468b      	mov	fp, r1
 800a214:	f038 080f 	bics.w	r8, r8, #15
 800a218:	d04f      	beq.n	800a2ba <_strtod_l+0x522>
 800a21a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a21e:	dd22      	ble.n	800a266 <_strtod_l+0x4ce>
 800a220:	2500      	movs	r5, #0
 800a222:	462e      	mov	r6, r5
 800a224:	9507      	str	r5, [sp, #28]
 800a226:	9505      	str	r5, [sp, #20]
 800a228:	2322      	movs	r3, #34	; 0x22
 800a22a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a344 <_strtod_l+0x5ac>
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	f04f 0a00 	mov.w	sl, #0
 800a234:	9b07      	ldr	r3, [sp, #28]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f43f adf2 	beq.w	8009e20 <_strtod_l+0x88>
 800a23c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a23e:	4620      	mov	r0, r4
 800a240:	f001 ff62 	bl	800c108 <_Bfree>
 800a244:	9905      	ldr	r1, [sp, #20]
 800a246:	4620      	mov	r0, r4
 800a248:	f001 ff5e 	bl	800c108 <_Bfree>
 800a24c:	4631      	mov	r1, r6
 800a24e:	4620      	mov	r0, r4
 800a250:	f001 ff5a 	bl	800c108 <_Bfree>
 800a254:	9907      	ldr	r1, [sp, #28]
 800a256:	4620      	mov	r0, r4
 800a258:	f001 ff56 	bl	800c108 <_Bfree>
 800a25c:	4629      	mov	r1, r5
 800a25e:	4620      	mov	r0, r4
 800a260:	f001 ff52 	bl	800c108 <_Bfree>
 800a264:	e5dc      	b.n	8009e20 <_strtod_l+0x88>
 800a266:	4b36      	ldr	r3, [pc, #216]	; (800a340 <_strtod_l+0x5a8>)
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	2300      	movs	r3, #0
 800a26c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a270:	4650      	mov	r0, sl
 800a272:	4659      	mov	r1, fp
 800a274:	4699      	mov	r9, r3
 800a276:	f1b8 0f01 	cmp.w	r8, #1
 800a27a:	dc21      	bgt.n	800a2c0 <_strtod_l+0x528>
 800a27c:	b10b      	cbz	r3, 800a282 <_strtod_l+0x4ea>
 800a27e:	4682      	mov	sl, r0
 800a280:	468b      	mov	fp, r1
 800a282:	4b2f      	ldr	r3, [pc, #188]	; (800a340 <_strtod_l+0x5a8>)
 800a284:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a288:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a28c:	4652      	mov	r2, sl
 800a28e:	465b      	mov	r3, fp
 800a290:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a294:	f7f6 f9c8 	bl	8000628 <__aeabi_dmul>
 800a298:	4b2a      	ldr	r3, [pc, #168]	; (800a344 <_strtod_l+0x5ac>)
 800a29a:	460a      	mov	r2, r1
 800a29c:	400b      	ands	r3, r1
 800a29e:	492a      	ldr	r1, [pc, #168]	; (800a348 <_strtod_l+0x5b0>)
 800a2a0:	428b      	cmp	r3, r1
 800a2a2:	4682      	mov	sl, r0
 800a2a4:	d8bc      	bhi.n	800a220 <_strtod_l+0x488>
 800a2a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a2aa:	428b      	cmp	r3, r1
 800a2ac:	bf86      	itte	hi
 800a2ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a34c <_strtod_l+0x5b4>
 800a2b2:	f04f 3aff 	movhi.w	sl, #4294967295
 800a2b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9304      	str	r3, [sp, #16]
 800a2be:	e084      	b.n	800a3ca <_strtod_l+0x632>
 800a2c0:	f018 0f01 	tst.w	r8, #1
 800a2c4:	d005      	beq.n	800a2d2 <_strtod_l+0x53a>
 800a2c6:	9b04      	ldr	r3, [sp, #16]
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f7f6 f9ac 	bl	8000628 <__aeabi_dmul>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	9a04      	ldr	r2, [sp, #16]
 800a2d4:	3208      	adds	r2, #8
 800a2d6:	f109 0901 	add.w	r9, r9, #1
 800a2da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a2de:	9204      	str	r2, [sp, #16]
 800a2e0:	e7c9      	b.n	800a276 <_strtod_l+0x4de>
 800a2e2:	d0ea      	beq.n	800a2ba <_strtod_l+0x522>
 800a2e4:	f1c8 0800 	rsb	r8, r8, #0
 800a2e8:	f018 020f 	ands.w	r2, r8, #15
 800a2ec:	d00a      	beq.n	800a304 <_strtod_l+0x56c>
 800a2ee:	4b13      	ldr	r3, [pc, #76]	; (800a33c <_strtod_l+0x5a4>)
 800a2f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2f4:	4650      	mov	r0, sl
 800a2f6:	4659      	mov	r1, fp
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f6 fabe 	bl	800087c <__aeabi_ddiv>
 800a300:	4682      	mov	sl, r0
 800a302:	468b      	mov	fp, r1
 800a304:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a308:	d0d7      	beq.n	800a2ba <_strtod_l+0x522>
 800a30a:	f1b8 0f1f 	cmp.w	r8, #31
 800a30e:	dd1f      	ble.n	800a350 <_strtod_l+0x5b8>
 800a310:	2500      	movs	r5, #0
 800a312:	462e      	mov	r6, r5
 800a314:	9507      	str	r5, [sp, #28]
 800a316:	9505      	str	r5, [sp, #20]
 800a318:	2322      	movs	r3, #34	; 0x22
 800a31a:	f04f 0a00 	mov.w	sl, #0
 800a31e:	f04f 0b00 	mov.w	fp, #0
 800a322:	6023      	str	r3, [r4, #0]
 800a324:	e786      	b.n	800a234 <_strtod_l+0x49c>
 800a326:	bf00      	nop
 800a328:	0800d785 	.word	0x0800d785
 800a32c:	0800d7c0 	.word	0x0800d7c0
 800a330:	0800d77d 	.word	0x0800d77d
 800a334:	0800d803 	.word	0x0800d803
 800a338:	0800dab0 	.word	0x0800dab0
 800a33c:	0800d990 	.word	0x0800d990
 800a340:	0800d968 	.word	0x0800d968
 800a344:	7ff00000 	.word	0x7ff00000
 800a348:	7ca00000 	.word	0x7ca00000
 800a34c:	7fefffff 	.word	0x7fefffff
 800a350:	f018 0310 	ands.w	r3, r8, #16
 800a354:	bf18      	it	ne
 800a356:	236a      	movne	r3, #106	; 0x6a
 800a358:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a708 <_strtod_l+0x970>
 800a35c:	9304      	str	r3, [sp, #16]
 800a35e:	4650      	mov	r0, sl
 800a360:	4659      	mov	r1, fp
 800a362:	2300      	movs	r3, #0
 800a364:	f018 0f01 	tst.w	r8, #1
 800a368:	d004      	beq.n	800a374 <_strtod_l+0x5dc>
 800a36a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a36e:	f7f6 f95b 	bl	8000628 <__aeabi_dmul>
 800a372:	2301      	movs	r3, #1
 800a374:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a378:	f109 0908 	add.w	r9, r9, #8
 800a37c:	d1f2      	bne.n	800a364 <_strtod_l+0x5cc>
 800a37e:	b10b      	cbz	r3, 800a384 <_strtod_l+0x5ec>
 800a380:	4682      	mov	sl, r0
 800a382:	468b      	mov	fp, r1
 800a384:	9b04      	ldr	r3, [sp, #16]
 800a386:	b1c3      	cbz	r3, 800a3ba <_strtod_l+0x622>
 800a388:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a38c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a390:	2b00      	cmp	r3, #0
 800a392:	4659      	mov	r1, fp
 800a394:	dd11      	ble.n	800a3ba <_strtod_l+0x622>
 800a396:	2b1f      	cmp	r3, #31
 800a398:	f340 8124 	ble.w	800a5e4 <_strtod_l+0x84c>
 800a39c:	2b34      	cmp	r3, #52	; 0x34
 800a39e:	bfde      	ittt	le
 800a3a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a3a4:	f04f 33ff 	movle.w	r3, #4294967295
 800a3a8:	fa03 f202 	lslle.w	r2, r3, r2
 800a3ac:	f04f 0a00 	mov.w	sl, #0
 800a3b0:	bfcc      	ite	gt
 800a3b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a3b6:	ea02 0b01 	andle.w	fp, r2, r1
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4650      	mov	r0, sl
 800a3c0:	4659      	mov	r1, fp
 800a3c2:	f7f6 fb99 	bl	8000af8 <__aeabi_dcmpeq>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d1a2      	bne.n	800a310 <_strtod_l+0x578>
 800a3ca:	9b07      	ldr	r3, [sp, #28]
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	9908      	ldr	r1, [sp, #32]
 800a3d0:	462b      	mov	r3, r5
 800a3d2:	463a      	mov	r2, r7
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f001 feff 	bl	800c1d8 <__s2b>
 800a3da:	9007      	str	r0, [sp, #28]
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	f43f af1f 	beq.w	800a220 <_strtod_l+0x488>
 800a3e2:	9b05      	ldr	r3, [sp, #20]
 800a3e4:	1b9e      	subs	r6, r3, r6
 800a3e6:	9b06      	ldr	r3, [sp, #24]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	bfb4      	ite	lt
 800a3ec:	4633      	movlt	r3, r6
 800a3ee:	2300      	movge	r3, #0
 800a3f0:	930c      	str	r3, [sp, #48]	; 0x30
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	2500      	movs	r5, #0
 800a3f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a3fa:	9312      	str	r3, [sp, #72]	; 0x48
 800a3fc:	462e      	mov	r6, r5
 800a3fe:	9b07      	ldr	r3, [sp, #28]
 800a400:	4620      	mov	r0, r4
 800a402:	6859      	ldr	r1, [r3, #4]
 800a404:	f001 fe40 	bl	800c088 <_Balloc>
 800a408:	9005      	str	r0, [sp, #20]
 800a40a:	2800      	cmp	r0, #0
 800a40c:	f43f af0c 	beq.w	800a228 <_strtod_l+0x490>
 800a410:	9b07      	ldr	r3, [sp, #28]
 800a412:	691a      	ldr	r2, [r3, #16]
 800a414:	3202      	adds	r2, #2
 800a416:	f103 010c 	add.w	r1, r3, #12
 800a41a:	0092      	lsls	r2, r2, #2
 800a41c:	300c      	adds	r0, #12
 800a41e:	f7fe fe2d 	bl	800907c <memcpy>
 800a422:	ec4b ab10 	vmov	d0, sl, fp
 800a426:	aa1a      	add	r2, sp, #104	; 0x68
 800a428:	a919      	add	r1, sp, #100	; 0x64
 800a42a:	4620      	mov	r0, r4
 800a42c:	f002 fa1a 	bl	800c864 <__d2b>
 800a430:	ec4b ab18 	vmov	d8, sl, fp
 800a434:	9018      	str	r0, [sp, #96]	; 0x60
 800a436:	2800      	cmp	r0, #0
 800a438:	f43f aef6 	beq.w	800a228 <_strtod_l+0x490>
 800a43c:	2101      	movs	r1, #1
 800a43e:	4620      	mov	r0, r4
 800a440:	f001 ff64 	bl	800c30c <__i2b>
 800a444:	4606      	mov	r6, r0
 800a446:	2800      	cmp	r0, #0
 800a448:	f43f aeee 	beq.w	800a228 <_strtod_l+0x490>
 800a44c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a44e:	9904      	ldr	r1, [sp, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	bfab      	itete	ge
 800a454:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a456:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a458:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a45a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a45e:	bfac      	ite	ge
 800a460:	eb03 0902 	addge.w	r9, r3, r2
 800a464:	1ad7      	sublt	r7, r2, r3
 800a466:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a468:	eba3 0801 	sub.w	r8, r3, r1
 800a46c:	4490      	add	r8, r2
 800a46e:	4ba1      	ldr	r3, [pc, #644]	; (800a6f4 <_strtod_l+0x95c>)
 800a470:	f108 38ff 	add.w	r8, r8, #4294967295
 800a474:	4598      	cmp	r8, r3
 800a476:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a47a:	f280 80c7 	bge.w	800a60c <_strtod_l+0x874>
 800a47e:	eba3 0308 	sub.w	r3, r3, r8
 800a482:	2b1f      	cmp	r3, #31
 800a484:	eba2 0203 	sub.w	r2, r2, r3
 800a488:	f04f 0101 	mov.w	r1, #1
 800a48c:	f300 80b1 	bgt.w	800a5f2 <_strtod_l+0x85a>
 800a490:	fa01 f303 	lsl.w	r3, r1, r3
 800a494:	930d      	str	r3, [sp, #52]	; 0x34
 800a496:	2300      	movs	r3, #0
 800a498:	9308      	str	r3, [sp, #32]
 800a49a:	eb09 0802 	add.w	r8, r9, r2
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	45c1      	cmp	r9, r8
 800a4a2:	4417      	add	r7, r2
 800a4a4:	441f      	add	r7, r3
 800a4a6:	464b      	mov	r3, r9
 800a4a8:	bfa8      	it	ge
 800a4aa:	4643      	movge	r3, r8
 800a4ac:	42bb      	cmp	r3, r7
 800a4ae:	bfa8      	it	ge
 800a4b0:	463b      	movge	r3, r7
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	bfc2      	ittt	gt
 800a4b6:	eba8 0803 	subgt.w	r8, r8, r3
 800a4ba:	1aff      	subgt	r7, r7, r3
 800a4bc:	eba9 0903 	subgt.w	r9, r9, r3
 800a4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dd17      	ble.n	800a4f6 <_strtod_l+0x75e>
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f001 ffde 	bl	800c48c <__pow5mult>
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	f43f aea8 	beq.w	800a228 <_strtod_l+0x490>
 800a4d8:	4601      	mov	r1, r0
 800a4da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f001 ff2b 	bl	800c338 <__multiply>
 800a4e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f43f ae9f 	beq.w	800a228 <_strtod_l+0x490>
 800a4ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f001 fe0b 	bl	800c108 <_Bfree>
 800a4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f4:	9318      	str	r3, [sp, #96]	; 0x60
 800a4f6:	f1b8 0f00 	cmp.w	r8, #0
 800a4fa:	f300 808c 	bgt.w	800a616 <_strtod_l+0x87e>
 800a4fe:	9b06      	ldr	r3, [sp, #24]
 800a500:	2b00      	cmp	r3, #0
 800a502:	dd08      	ble.n	800a516 <_strtod_l+0x77e>
 800a504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a506:	9905      	ldr	r1, [sp, #20]
 800a508:	4620      	mov	r0, r4
 800a50a:	f001 ffbf 	bl	800c48c <__pow5mult>
 800a50e:	9005      	str	r0, [sp, #20]
 800a510:	2800      	cmp	r0, #0
 800a512:	f43f ae89 	beq.w	800a228 <_strtod_l+0x490>
 800a516:	2f00      	cmp	r7, #0
 800a518:	dd08      	ble.n	800a52c <_strtod_l+0x794>
 800a51a:	9905      	ldr	r1, [sp, #20]
 800a51c:	463a      	mov	r2, r7
 800a51e:	4620      	mov	r0, r4
 800a520:	f002 f80e 	bl	800c540 <__lshift>
 800a524:	9005      	str	r0, [sp, #20]
 800a526:	2800      	cmp	r0, #0
 800a528:	f43f ae7e 	beq.w	800a228 <_strtod_l+0x490>
 800a52c:	f1b9 0f00 	cmp.w	r9, #0
 800a530:	dd08      	ble.n	800a544 <_strtod_l+0x7ac>
 800a532:	4631      	mov	r1, r6
 800a534:	464a      	mov	r2, r9
 800a536:	4620      	mov	r0, r4
 800a538:	f002 f802 	bl	800c540 <__lshift>
 800a53c:	4606      	mov	r6, r0
 800a53e:	2800      	cmp	r0, #0
 800a540:	f43f ae72 	beq.w	800a228 <_strtod_l+0x490>
 800a544:	9a05      	ldr	r2, [sp, #20]
 800a546:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a548:	4620      	mov	r0, r4
 800a54a:	f002 f885 	bl	800c658 <__mdiff>
 800a54e:	4605      	mov	r5, r0
 800a550:	2800      	cmp	r0, #0
 800a552:	f43f ae69 	beq.w	800a228 <_strtod_l+0x490>
 800a556:	68c3      	ldr	r3, [r0, #12]
 800a558:	930b      	str	r3, [sp, #44]	; 0x2c
 800a55a:	2300      	movs	r3, #0
 800a55c:	60c3      	str	r3, [r0, #12]
 800a55e:	4631      	mov	r1, r6
 800a560:	f002 f85e 	bl	800c620 <__mcmp>
 800a564:	2800      	cmp	r0, #0
 800a566:	da60      	bge.n	800a62a <_strtod_l+0x892>
 800a568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a56a:	ea53 030a 	orrs.w	r3, r3, sl
 800a56e:	f040 8082 	bne.w	800a676 <_strtod_l+0x8de>
 800a572:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a576:	2b00      	cmp	r3, #0
 800a578:	d17d      	bne.n	800a676 <_strtod_l+0x8de>
 800a57a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a57e:	0d1b      	lsrs	r3, r3, #20
 800a580:	051b      	lsls	r3, r3, #20
 800a582:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a586:	d976      	bls.n	800a676 <_strtod_l+0x8de>
 800a588:	696b      	ldr	r3, [r5, #20]
 800a58a:	b913      	cbnz	r3, 800a592 <_strtod_l+0x7fa>
 800a58c:	692b      	ldr	r3, [r5, #16]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	dd71      	ble.n	800a676 <_strtod_l+0x8de>
 800a592:	4629      	mov	r1, r5
 800a594:	2201      	movs	r2, #1
 800a596:	4620      	mov	r0, r4
 800a598:	f001 ffd2 	bl	800c540 <__lshift>
 800a59c:	4631      	mov	r1, r6
 800a59e:	4605      	mov	r5, r0
 800a5a0:	f002 f83e 	bl	800c620 <__mcmp>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	dd66      	ble.n	800a676 <_strtod_l+0x8de>
 800a5a8:	9904      	ldr	r1, [sp, #16]
 800a5aa:	4a53      	ldr	r2, [pc, #332]	; (800a6f8 <_strtod_l+0x960>)
 800a5ac:	465b      	mov	r3, fp
 800a5ae:	2900      	cmp	r1, #0
 800a5b0:	f000 8081 	beq.w	800a6b6 <_strtod_l+0x91e>
 800a5b4:	ea02 010b 	and.w	r1, r2, fp
 800a5b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a5bc:	dc7b      	bgt.n	800a6b6 <_strtod_l+0x91e>
 800a5be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a5c2:	f77f aea9 	ble.w	800a318 <_strtod_l+0x580>
 800a5c6:	4b4d      	ldr	r3, [pc, #308]	; (800a6fc <_strtod_l+0x964>)
 800a5c8:	4650      	mov	r0, sl
 800a5ca:	4659      	mov	r1, fp
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f7f6 f82b 	bl	8000628 <__aeabi_dmul>
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4303      	orrs	r3, r0
 800a5d6:	bf08      	it	eq
 800a5d8:	2322      	moveq	r3, #34	; 0x22
 800a5da:	4682      	mov	sl, r0
 800a5dc:	468b      	mov	fp, r1
 800a5de:	bf08      	it	eq
 800a5e0:	6023      	streq	r3, [r4, #0]
 800a5e2:	e62b      	b.n	800a23c <_strtod_l+0x4a4>
 800a5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ec:	ea03 0a0a 	and.w	sl, r3, sl
 800a5f0:	e6e3      	b.n	800a3ba <_strtod_l+0x622>
 800a5f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a5f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a5fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a5fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a602:	fa01 f308 	lsl.w	r3, r1, r8
 800a606:	9308      	str	r3, [sp, #32]
 800a608:	910d      	str	r1, [sp, #52]	; 0x34
 800a60a:	e746      	b.n	800a49a <_strtod_l+0x702>
 800a60c:	2300      	movs	r3, #0
 800a60e:	9308      	str	r3, [sp, #32]
 800a610:	2301      	movs	r3, #1
 800a612:	930d      	str	r3, [sp, #52]	; 0x34
 800a614:	e741      	b.n	800a49a <_strtod_l+0x702>
 800a616:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a618:	4642      	mov	r2, r8
 800a61a:	4620      	mov	r0, r4
 800a61c:	f001 ff90 	bl	800c540 <__lshift>
 800a620:	9018      	str	r0, [sp, #96]	; 0x60
 800a622:	2800      	cmp	r0, #0
 800a624:	f47f af6b 	bne.w	800a4fe <_strtod_l+0x766>
 800a628:	e5fe      	b.n	800a228 <_strtod_l+0x490>
 800a62a:	465f      	mov	r7, fp
 800a62c:	d16e      	bne.n	800a70c <_strtod_l+0x974>
 800a62e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a634:	b342      	cbz	r2, 800a688 <_strtod_l+0x8f0>
 800a636:	4a32      	ldr	r2, [pc, #200]	; (800a700 <_strtod_l+0x968>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d128      	bne.n	800a68e <_strtod_l+0x8f6>
 800a63c:	9b04      	ldr	r3, [sp, #16]
 800a63e:	4651      	mov	r1, sl
 800a640:	b1eb      	cbz	r3, 800a67e <_strtod_l+0x8e6>
 800a642:	4b2d      	ldr	r3, [pc, #180]	; (800a6f8 <_strtod_l+0x960>)
 800a644:	403b      	ands	r3, r7
 800a646:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a64a:	f04f 32ff 	mov.w	r2, #4294967295
 800a64e:	d819      	bhi.n	800a684 <_strtod_l+0x8ec>
 800a650:	0d1b      	lsrs	r3, r3, #20
 800a652:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a656:	fa02 f303 	lsl.w	r3, r2, r3
 800a65a:	4299      	cmp	r1, r3
 800a65c:	d117      	bne.n	800a68e <_strtod_l+0x8f6>
 800a65e:	4b29      	ldr	r3, [pc, #164]	; (800a704 <_strtod_l+0x96c>)
 800a660:	429f      	cmp	r7, r3
 800a662:	d102      	bne.n	800a66a <_strtod_l+0x8d2>
 800a664:	3101      	adds	r1, #1
 800a666:	f43f addf 	beq.w	800a228 <_strtod_l+0x490>
 800a66a:	4b23      	ldr	r3, [pc, #140]	; (800a6f8 <_strtod_l+0x960>)
 800a66c:	403b      	ands	r3, r7
 800a66e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a672:	f04f 0a00 	mov.w	sl, #0
 800a676:	9b04      	ldr	r3, [sp, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1a4      	bne.n	800a5c6 <_strtod_l+0x82e>
 800a67c:	e5de      	b.n	800a23c <_strtod_l+0x4a4>
 800a67e:	f04f 33ff 	mov.w	r3, #4294967295
 800a682:	e7ea      	b.n	800a65a <_strtod_l+0x8c2>
 800a684:	4613      	mov	r3, r2
 800a686:	e7e8      	b.n	800a65a <_strtod_l+0x8c2>
 800a688:	ea53 030a 	orrs.w	r3, r3, sl
 800a68c:	d08c      	beq.n	800a5a8 <_strtod_l+0x810>
 800a68e:	9b08      	ldr	r3, [sp, #32]
 800a690:	b1db      	cbz	r3, 800a6ca <_strtod_l+0x932>
 800a692:	423b      	tst	r3, r7
 800a694:	d0ef      	beq.n	800a676 <_strtod_l+0x8de>
 800a696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a698:	9a04      	ldr	r2, [sp, #16]
 800a69a:	4650      	mov	r0, sl
 800a69c:	4659      	mov	r1, fp
 800a69e:	b1c3      	cbz	r3, 800a6d2 <_strtod_l+0x93a>
 800a6a0:	f7ff fb5e 	bl	8009d60 <sulp>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	ec51 0b18 	vmov	r0, r1, d8
 800a6ac:	f7f5 fe06 	bl	80002bc <__adddf3>
 800a6b0:	4682      	mov	sl, r0
 800a6b2:	468b      	mov	fp, r1
 800a6b4:	e7df      	b.n	800a676 <_strtod_l+0x8de>
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a6bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6c4:	f04f 3aff 	mov.w	sl, #4294967295
 800a6c8:	e7d5      	b.n	800a676 <_strtod_l+0x8de>
 800a6ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6cc:	ea13 0f0a 	tst.w	r3, sl
 800a6d0:	e7e0      	b.n	800a694 <_strtod_l+0x8fc>
 800a6d2:	f7ff fb45 	bl	8009d60 <sulp>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	ec51 0b18 	vmov	r0, r1, d8
 800a6de:	f7f5 fdeb 	bl	80002b8 <__aeabi_dsub>
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	4682      	mov	sl, r0
 800a6e8:	468b      	mov	fp, r1
 800a6ea:	f7f6 fa05 	bl	8000af8 <__aeabi_dcmpeq>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d0c1      	beq.n	800a676 <_strtod_l+0x8de>
 800a6f2:	e611      	b.n	800a318 <_strtod_l+0x580>
 800a6f4:	fffffc02 	.word	0xfffffc02
 800a6f8:	7ff00000 	.word	0x7ff00000
 800a6fc:	39500000 	.word	0x39500000
 800a700:	000fffff 	.word	0x000fffff
 800a704:	7fefffff 	.word	0x7fefffff
 800a708:	0800d7d8 	.word	0x0800d7d8
 800a70c:	4631      	mov	r1, r6
 800a70e:	4628      	mov	r0, r5
 800a710:	f002 f904 	bl	800c91c <__ratio>
 800a714:	ec59 8b10 	vmov	r8, r9, d0
 800a718:	ee10 0a10 	vmov	r0, s0
 800a71c:	2200      	movs	r2, #0
 800a71e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a722:	4649      	mov	r1, r9
 800a724:	f7f6 f9fc 	bl	8000b20 <__aeabi_dcmple>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d07a      	beq.n	800a822 <_strtod_l+0xa8a>
 800a72c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d04a      	beq.n	800a7c8 <_strtod_l+0xa30>
 800a732:	4b95      	ldr	r3, [pc, #596]	; (800a988 <_strtod_l+0xbf0>)
 800a734:	2200      	movs	r2, #0
 800a736:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a73a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a988 <_strtod_l+0xbf0>
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	4b92      	ldr	r3, [pc, #584]	; (800a98c <_strtod_l+0xbf4>)
 800a744:	403b      	ands	r3, r7
 800a746:	930d      	str	r3, [sp, #52]	; 0x34
 800a748:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a74a:	4b91      	ldr	r3, [pc, #580]	; (800a990 <_strtod_l+0xbf8>)
 800a74c:	429a      	cmp	r2, r3
 800a74e:	f040 80b0 	bne.w	800a8b2 <_strtod_l+0xb1a>
 800a752:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a756:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a75a:	ec4b ab10 	vmov	d0, sl, fp
 800a75e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a762:	f002 f803 	bl	800c76c <__ulp>
 800a766:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a76a:	ec53 2b10 	vmov	r2, r3, d0
 800a76e:	f7f5 ff5b 	bl	8000628 <__aeabi_dmul>
 800a772:	4652      	mov	r2, sl
 800a774:	465b      	mov	r3, fp
 800a776:	f7f5 fda1 	bl	80002bc <__adddf3>
 800a77a:	460b      	mov	r3, r1
 800a77c:	4983      	ldr	r1, [pc, #524]	; (800a98c <_strtod_l+0xbf4>)
 800a77e:	4a85      	ldr	r2, [pc, #532]	; (800a994 <_strtod_l+0xbfc>)
 800a780:	4019      	ands	r1, r3
 800a782:	4291      	cmp	r1, r2
 800a784:	4682      	mov	sl, r0
 800a786:	d960      	bls.n	800a84a <_strtod_l+0xab2>
 800a788:	ee18 3a90 	vmov	r3, s17
 800a78c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a790:	4293      	cmp	r3, r2
 800a792:	d104      	bne.n	800a79e <_strtod_l+0xa06>
 800a794:	ee18 3a10 	vmov	r3, s16
 800a798:	3301      	adds	r3, #1
 800a79a:	f43f ad45 	beq.w	800a228 <_strtod_l+0x490>
 800a79e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a9a0 <_strtod_l+0xc08>
 800a7a2:	f04f 3aff 	mov.w	sl, #4294967295
 800a7a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f001 fcad 	bl	800c108 <_Bfree>
 800a7ae:	9905      	ldr	r1, [sp, #20]
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f001 fca9 	bl	800c108 <_Bfree>
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f001 fca5 	bl	800c108 <_Bfree>
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f001 fca1 	bl	800c108 <_Bfree>
 800a7c6:	e61a      	b.n	800a3fe <_strtod_l+0x666>
 800a7c8:	f1ba 0f00 	cmp.w	sl, #0
 800a7cc:	d11b      	bne.n	800a806 <_strtod_l+0xa6e>
 800a7ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7d2:	b9f3      	cbnz	r3, 800a812 <_strtod_l+0xa7a>
 800a7d4:	4b6c      	ldr	r3, [pc, #432]	; (800a988 <_strtod_l+0xbf0>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4640      	mov	r0, r8
 800a7da:	4649      	mov	r1, r9
 800a7dc:	f7f6 f996 	bl	8000b0c <__aeabi_dcmplt>
 800a7e0:	b9d0      	cbnz	r0, 800a818 <_strtod_l+0xa80>
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	4b6c      	ldr	r3, [pc, #432]	; (800a998 <_strtod_l+0xc00>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f7f5 ff1d 	bl	8000628 <__aeabi_dmul>
 800a7ee:	4680      	mov	r8, r0
 800a7f0:	4689      	mov	r9, r1
 800a7f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a7f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a7fa:	9315      	str	r3, [sp, #84]	; 0x54
 800a7fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a800:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a804:	e79d      	b.n	800a742 <_strtod_l+0x9aa>
 800a806:	f1ba 0f01 	cmp.w	sl, #1
 800a80a:	d102      	bne.n	800a812 <_strtod_l+0xa7a>
 800a80c:	2f00      	cmp	r7, #0
 800a80e:	f43f ad83 	beq.w	800a318 <_strtod_l+0x580>
 800a812:	4b62      	ldr	r3, [pc, #392]	; (800a99c <_strtod_l+0xc04>)
 800a814:	2200      	movs	r2, #0
 800a816:	e78e      	b.n	800a736 <_strtod_l+0x99e>
 800a818:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a998 <_strtod_l+0xc00>
 800a81c:	f04f 0800 	mov.w	r8, #0
 800a820:	e7e7      	b.n	800a7f2 <_strtod_l+0xa5a>
 800a822:	4b5d      	ldr	r3, [pc, #372]	; (800a998 <_strtod_l+0xc00>)
 800a824:	4640      	mov	r0, r8
 800a826:	4649      	mov	r1, r9
 800a828:	2200      	movs	r2, #0
 800a82a:	f7f5 fefd 	bl	8000628 <__aeabi_dmul>
 800a82e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a830:	4680      	mov	r8, r0
 800a832:	4689      	mov	r9, r1
 800a834:	b933      	cbnz	r3, 800a844 <_strtod_l+0xaac>
 800a836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a83a:	900e      	str	r0, [sp, #56]	; 0x38
 800a83c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a83e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a842:	e7dd      	b.n	800a800 <_strtod_l+0xa68>
 800a844:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a848:	e7f9      	b.n	800a83e <_strtod_l+0xaa6>
 800a84a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a84e:	9b04      	ldr	r3, [sp, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1a8      	bne.n	800a7a6 <_strtod_l+0xa0e>
 800a854:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a85a:	0d1b      	lsrs	r3, r3, #20
 800a85c:	051b      	lsls	r3, r3, #20
 800a85e:	429a      	cmp	r2, r3
 800a860:	d1a1      	bne.n	800a7a6 <_strtod_l+0xa0e>
 800a862:	4640      	mov	r0, r8
 800a864:	4649      	mov	r1, r9
 800a866:	f7f6 f9ef 	bl	8000c48 <__aeabi_d2lz>
 800a86a:	f7f5 feaf 	bl	80005cc <__aeabi_l2d>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4640      	mov	r0, r8
 800a874:	4649      	mov	r1, r9
 800a876:	f7f5 fd1f 	bl	80002b8 <__aeabi_dsub>
 800a87a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a87c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a880:	ea43 030a 	orr.w	r3, r3, sl
 800a884:	4313      	orrs	r3, r2
 800a886:	4680      	mov	r8, r0
 800a888:	4689      	mov	r9, r1
 800a88a:	d055      	beq.n	800a938 <_strtod_l+0xba0>
 800a88c:	a336      	add	r3, pc, #216	; (adr r3, 800a968 <_strtod_l+0xbd0>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	f7f6 f93b 	bl	8000b0c <__aeabi_dcmplt>
 800a896:	2800      	cmp	r0, #0
 800a898:	f47f acd0 	bne.w	800a23c <_strtod_l+0x4a4>
 800a89c:	a334      	add	r3, pc, #208	; (adr r3, 800a970 <_strtod_l+0xbd8>)
 800a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	f7f6 f94f 	bl	8000b48 <__aeabi_dcmpgt>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	f43f af7b 	beq.w	800a7a6 <_strtod_l+0xa0e>
 800a8b0:	e4c4      	b.n	800a23c <_strtod_l+0x4a4>
 800a8b2:	9b04      	ldr	r3, [sp, #16]
 800a8b4:	b333      	cbz	r3, 800a904 <_strtod_l+0xb6c>
 800a8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a8bc:	d822      	bhi.n	800a904 <_strtod_l+0xb6c>
 800a8be:	a32e      	add	r3, pc, #184	; (adr r3, 800a978 <_strtod_l+0xbe0>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	4640      	mov	r0, r8
 800a8c6:	4649      	mov	r1, r9
 800a8c8:	f7f6 f92a 	bl	8000b20 <__aeabi_dcmple>
 800a8cc:	b1a0      	cbz	r0, 800a8f8 <_strtod_l+0xb60>
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	f7f6 f981 	bl	8000bd8 <__aeabi_d2uiz>
 800a8d6:	2801      	cmp	r0, #1
 800a8d8:	bf38      	it	cc
 800a8da:	2001      	movcc	r0, #1
 800a8dc:	f7f5 fe2a 	bl	8000534 <__aeabi_ui2d>
 800a8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8e2:	4680      	mov	r8, r0
 800a8e4:	4689      	mov	r9, r1
 800a8e6:	bb23      	cbnz	r3, 800a932 <_strtod_l+0xb9a>
 800a8e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8ec:	9010      	str	r0, [sp, #64]	; 0x40
 800a8ee:	9311      	str	r3, [sp, #68]	; 0x44
 800a8f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a900:	1a9b      	subs	r3, r3, r2
 800a902:	9309      	str	r3, [sp, #36]	; 0x24
 800a904:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a908:	eeb0 0a48 	vmov.f32	s0, s16
 800a90c:	eef0 0a68 	vmov.f32	s1, s17
 800a910:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a914:	f001 ff2a 	bl	800c76c <__ulp>
 800a918:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a91c:	ec53 2b10 	vmov	r2, r3, d0
 800a920:	f7f5 fe82 	bl	8000628 <__aeabi_dmul>
 800a924:	ec53 2b18 	vmov	r2, r3, d8
 800a928:	f7f5 fcc8 	bl	80002bc <__adddf3>
 800a92c:	4682      	mov	sl, r0
 800a92e:	468b      	mov	fp, r1
 800a930:	e78d      	b.n	800a84e <_strtod_l+0xab6>
 800a932:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a936:	e7db      	b.n	800a8f0 <_strtod_l+0xb58>
 800a938:	a311      	add	r3, pc, #68	; (adr r3, 800a980 <_strtod_l+0xbe8>)
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	f7f6 f8e5 	bl	8000b0c <__aeabi_dcmplt>
 800a942:	e7b2      	b.n	800a8aa <_strtod_l+0xb12>
 800a944:	2300      	movs	r3, #0
 800a946:	930a      	str	r3, [sp, #40]	; 0x28
 800a948:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a94a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	f7ff ba6b 	b.w	8009e28 <_strtod_l+0x90>
 800a952:	2a65      	cmp	r2, #101	; 0x65
 800a954:	f43f ab5f 	beq.w	800a016 <_strtod_l+0x27e>
 800a958:	2a45      	cmp	r2, #69	; 0x45
 800a95a:	f43f ab5c 	beq.w	800a016 <_strtod_l+0x27e>
 800a95e:	2301      	movs	r3, #1
 800a960:	f7ff bb94 	b.w	800a08c <_strtod_l+0x2f4>
 800a964:	f3af 8000 	nop.w
 800a968:	94a03595 	.word	0x94a03595
 800a96c:	3fdfffff 	.word	0x3fdfffff
 800a970:	35afe535 	.word	0x35afe535
 800a974:	3fe00000 	.word	0x3fe00000
 800a978:	ffc00000 	.word	0xffc00000
 800a97c:	41dfffff 	.word	0x41dfffff
 800a980:	94a03595 	.word	0x94a03595
 800a984:	3fcfffff 	.word	0x3fcfffff
 800a988:	3ff00000 	.word	0x3ff00000
 800a98c:	7ff00000 	.word	0x7ff00000
 800a990:	7fe00000 	.word	0x7fe00000
 800a994:	7c9fffff 	.word	0x7c9fffff
 800a998:	3fe00000 	.word	0x3fe00000
 800a99c:	bff00000 	.word	0xbff00000
 800a9a0:	7fefffff 	.word	0x7fefffff

0800a9a4 <strtod>:
 800a9a4:	460a      	mov	r2, r1
 800a9a6:	4601      	mov	r1, r0
 800a9a8:	4802      	ldr	r0, [pc, #8]	; (800a9b4 <strtod+0x10>)
 800a9aa:	4b03      	ldr	r3, [pc, #12]	; (800a9b8 <strtod+0x14>)
 800a9ac:	6800      	ldr	r0, [r0, #0]
 800a9ae:	f7ff b9f3 	b.w	8009d98 <_strtod_l>
 800a9b2:	bf00      	nop
 800a9b4:	200002ec 	.word	0x200002ec
 800a9b8:	20000354 	.word	0x20000354

0800a9bc <__swbuf_r>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	460e      	mov	r6, r1
 800a9c0:	4614      	mov	r4, r2
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	b118      	cbz	r0, 800a9ce <__swbuf_r+0x12>
 800a9c6:	6983      	ldr	r3, [r0, #24]
 800a9c8:	b90b      	cbnz	r3, 800a9ce <__swbuf_r+0x12>
 800a9ca:	f7fe fa81 	bl	8008ed0 <__sinit>
 800a9ce:	4b21      	ldr	r3, [pc, #132]	; (800aa54 <__swbuf_r+0x98>)
 800a9d0:	429c      	cmp	r4, r3
 800a9d2:	d12b      	bne.n	800aa2c <__swbuf_r+0x70>
 800a9d4:	686c      	ldr	r4, [r5, #4]
 800a9d6:	69a3      	ldr	r3, [r4, #24]
 800a9d8:	60a3      	str	r3, [r4, #8]
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	071a      	lsls	r2, r3, #28
 800a9de:	d52f      	bpl.n	800aa40 <__swbuf_r+0x84>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	b36b      	cbz	r3, 800aa40 <__swbuf_r+0x84>
 800a9e4:	6923      	ldr	r3, [r4, #16]
 800a9e6:	6820      	ldr	r0, [r4, #0]
 800a9e8:	1ac0      	subs	r0, r0, r3
 800a9ea:	6963      	ldr	r3, [r4, #20]
 800a9ec:	b2f6      	uxtb	r6, r6
 800a9ee:	4283      	cmp	r3, r0
 800a9f0:	4637      	mov	r7, r6
 800a9f2:	dc04      	bgt.n	800a9fe <__swbuf_r+0x42>
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f7fe f9c4 	bl	8008d84 <_fflush_r>
 800a9fc:	bb30      	cbnz	r0, 800aa4c <__swbuf_r+0x90>
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	60a3      	str	r3, [r4, #8]
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	1c5a      	adds	r2, r3, #1
 800aa08:	6022      	str	r2, [r4, #0]
 800aa0a:	701e      	strb	r6, [r3, #0]
 800aa0c:	6963      	ldr	r3, [r4, #20]
 800aa0e:	3001      	adds	r0, #1
 800aa10:	4283      	cmp	r3, r0
 800aa12:	d004      	beq.n	800aa1e <__swbuf_r+0x62>
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	07db      	lsls	r3, r3, #31
 800aa18:	d506      	bpl.n	800aa28 <__swbuf_r+0x6c>
 800aa1a:	2e0a      	cmp	r6, #10
 800aa1c:	d104      	bne.n	800aa28 <__swbuf_r+0x6c>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4628      	mov	r0, r5
 800aa22:	f7fe f9af 	bl	8008d84 <_fflush_r>
 800aa26:	b988      	cbnz	r0, 800aa4c <__swbuf_r+0x90>
 800aa28:	4638      	mov	r0, r7
 800aa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <__swbuf_r+0x9c>)
 800aa2e:	429c      	cmp	r4, r3
 800aa30:	d101      	bne.n	800aa36 <__swbuf_r+0x7a>
 800aa32:	68ac      	ldr	r4, [r5, #8]
 800aa34:	e7cf      	b.n	800a9d6 <__swbuf_r+0x1a>
 800aa36:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <__swbuf_r+0xa0>)
 800aa38:	429c      	cmp	r4, r3
 800aa3a:	bf08      	it	eq
 800aa3c:	68ec      	ldreq	r4, [r5, #12]
 800aa3e:	e7ca      	b.n	800a9d6 <__swbuf_r+0x1a>
 800aa40:	4621      	mov	r1, r4
 800aa42:	4628      	mov	r0, r5
 800aa44:	f000 f81e 	bl	800aa84 <__swsetup_r>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d0cb      	beq.n	800a9e4 <__swbuf_r+0x28>
 800aa4c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa50:	e7ea      	b.n	800aa28 <__swbuf_r+0x6c>
 800aa52:	bf00      	nop
 800aa54:	0800d734 	.word	0x0800d734
 800aa58:	0800d754 	.word	0x0800d754
 800aa5c:	0800d714 	.word	0x0800d714

0800aa60 <_write_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d07      	ldr	r5, [pc, #28]	; (800aa80 <_write_r+0x20>)
 800aa64:	4604      	mov	r4, r0
 800aa66:	4608      	mov	r0, r1
 800aa68:	4611      	mov	r1, r2
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	602a      	str	r2, [r5, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f7f9 f84a 	bl	8003b08 <_write>
 800aa74:	1c43      	adds	r3, r0, #1
 800aa76:	d102      	bne.n	800aa7e <_write_r+0x1e>
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	b103      	cbz	r3, 800aa7e <_write_r+0x1e>
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	20005eb0 	.word	0x20005eb0

0800aa84 <__swsetup_r>:
 800aa84:	4b32      	ldr	r3, [pc, #200]	; (800ab50 <__swsetup_r+0xcc>)
 800aa86:	b570      	push	{r4, r5, r6, lr}
 800aa88:	681d      	ldr	r5, [r3, #0]
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	b125      	cbz	r5, 800aa9a <__swsetup_r+0x16>
 800aa90:	69ab      	ldr	r3, [r5, #24]
 800aa92:	b913      	cbnz	r3, 800aa9a <__swsetup_r+0x16>
 800aa94:	4628      	mov	r0, r5
 800aa96:	f7fe fa1b 	bl	8008ed0 <__sinit>
 800aa9a:	4b2e      	ldr	r3, [pc, #184]	; (800ab54 <__swsetup_r+0xd0>)
 800aa9c:	429c      	cmp	r4, r3
 800aa9e:	d10f      	bne.n	800aac0 <__swsetup_r+0x3c>
 800aaa0:	686c      	ldr	r4, [r5, #4]
 800aaa2:	89a3      	ldrh	r3, [r4, #12]
 800aaa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaa8:	0719      	lsls	r1, r3, #28
 800aaaa:	d42c      	bmi.n	800ab06 <__swsetup_r+0x82>
 800aaac:	06dd      	lsls	r5, r3, #27
 800aaae:	d411      	bmi.n	800aad4 <__swsetup_r+0x50>
 800aab0:	2309      	movs	r3, #9
 800aab2:	6033      	str	r3, [r6, #0]
 800aab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aab8:	81a3      	strh	r3, [r4, #12]
 800aaba:	f04f 30ff 	mov.w	r0, #4294967295
 800aabe:	e03e      	b.n	800ab3e <__swsetup_r+0xba>
 800aac0:	4b25      	ldr	r3, [pc, #148]	; (800ab58 <__swsetup_r+0xd4>)
 800aac2:	429c      	cmp	r4, r3
 800aac4:	d101      	bne.n	800aaca <__swsetup_r+0x46>
 800aac6:	68ac      	ldr	r4, [r5, #8]
 800aac8:	e7eb      	b.n	800aaa2 <__swsetup_r+0x1e>
 800aaca:	4b24      	ldr	r3, [pc, #144]	; (800ab5c <__swsetup_r+0xd8>)
 800aacc:	429c      	cmp	r4, r3
 800aace:	bf08      	it	eq
 800aad0:	68ec      	ldreq	r4, [r5, #12]
 800aad2:	e7e6      	b.n	800aaa2 <__swsetup_r+0x1e>
 800aad4:	0758      	lsls	r0, r3, #29
 800aad6:	d512      	bpl.n	800aafe <__swsetup_r+0x7a>
 800aad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aada:	b141      	cbz	r1, 800aaee <__swsetup_r+0x6a>
 800aadc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aae0:	4299      	cmp	r1, r3
 800aae2:	d002      	beq.n	800aaea <__swsetup_r+0x66>
 800aae4:	4630      	mov	r0, r6
 800aae6:	f7fe fadf 	bl	80090a8 <_free_r>
 800aaea:	2300      	movs	r3, #0
 800aaec:	6363      	str	r3, [r4, #52]	; 0x34
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaf4:	81a3      	strh	r3, [r4, #12]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	6063      	str	r3, [r4, #4]
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	f043 0308 	orr.w	r3, r3, #8
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	6923      	ldr	r3, [r4, #16]
 800ab08:	b94b      	cbnz	r3, 800ab1e <__swsetup_r+0x9a>
 800ab0a:	89a3      	ldrh	r3, [r4, #12]
 800ab0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab14:	d003      	beq.n	800ab1e <__swsetup_r+0x9a>
 800ab16:	4621      	mov	r1, r4
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f001 fa57 	bl	800bfcc <__smakebuf_r>
 800ab1e:	89a0      	ldrh	r0, [r4, #12]
 800ab20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab24:	f010 0301 	ands.w	r3, r0, #1
 800ab28:	d00a      	beq.n	800ab40 <__swsetup_r+0xbc>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60a3      	str	r3, [r4, #8]
 800ab2e:	6963      	ldr	r3, [r4, #20]
 800ab30:	425b      	negs	r3, r3
 800ab32:	61a3      	str	r3, [r4, #24]
 800ab34:	6923      	ldr	r3, [r4, #16]
 800ab36:	b943      	cbnz	r3, 800ab4a <__swsetup_r+0xc6>
 800ab38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab3c:	d1ba      	bne.n	800aab4 <__swsetup_r+0x30>
 800ab3e:	bd70      	pop	{r4, r5, r6, pc}
 800ab40:	0781      	lsls	r1, r0, #30
 800ab42:	bf58      	it	pl
 800ab44:	6963      	ldrpl	r3, [r4, #20]
 800ab46:	60a3      	str	r3, [r4, #8]
 800ab48:	e7f4      	b.n	800ab34 <__swsetup_r+0xb0>
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	e7f7      	b.n	800ab3e <__swsetup_r+0xba>
 800ab4e:	bf00      	nop
 800ab50:	200002ec 	.word	0x200002ec
 800ab54:	0800d734 	.word	0x0800d734
 800ab58:	0800d754 	.word	0x0800d754
 800ab5c:	0800d714 	.word	0x0800d714

0800ab60 <_close_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d06      	ldr	r5, [pc, #24]	; (800ab7c <_close_r+0x1c>)
 800ab64:	2300      	movs	r3, #0
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7f8 f94b 	bl	8002e06 <_close>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_close_r+0x1a>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_close_r+0x1a>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	20005eb0 	.word	0x20005eb0

0800ab80 <quorem>:
 800ab80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	6903      	ldr	r3, [r0, #16]
 800ab86:	690c      	ldr	r4, [r1, #16]
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	f2c0 8081 	blt.w	800ac92 <quorem+0x112>
 800ab90:	3c01      	subs	r4, #1
 800ab92:	f101 0814 	add.w	r8, r1, #20
 800ab96:	f100 0514 	add.w	r5, r0, #20
 800ab9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aba8:	3301      	adds	r3, #1
 800abaa:	429a      	cmp	r2, r3
 800abac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800abb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abb4:	fbb2 f6f3 	udiv	r6, r2, r3
 800abb8:	d331      	bcc.n	800ac1e <quorem+0x9e>
 800abba:	f04f 0e00 	mov.w	lr, #0
 800abbe:	4640      	mov	r0, r8
 800abc0:	46ac      	mov	ip, r5
 800abc2:	46f2      	mov	sl, lr
 800abc4:	f850 2b04 	ldr.w	r2, [r0], #4
 800abc8:	b293      	uxth	r3, r2
 800abca:	fb06 e303 	mla	r3, r6, r3, lr
 800abce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	ebaa 0303 	sub.w	r3, sl, r3
 800abd8:	f8dc a000 	ldr.w	sl, [ip]
 800abdc:	0c12      	lsrs	r2, r2, #16
 800abde:	fa13 f38a 	uxtah	r3, r3, sl
 800abe2:	fb06 e202 	mla	r2, r6, r2, lr
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	9b00      	ldr	r3, [sp, #0]
 800abea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abee:	b292      	uxth	r2, r2
 800abf0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abf8:	f8bd 3000 	ldrh.w	r3, [sp]
 800abfc:	4581      	cmp	r9, r0
 800abfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac02:	f84c 3b04 	str.w	r3, [ip], #4
 800ac06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac0a:	d2db      	bcs.n	800abc4 <quorem+0x44>
 800ac0c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac10:	b92b      	cbnz	r3, 800ac1e <quorem+0x9e>
 800ac12:	9b01      	ldr	r3, [sp, #4]
 800ac14:	3b04      	subs	r3, #4
 800ac16:	429d      	cmp	r5, r3
 800ac18:	461a      	mov	r2, r3
 800ac1a:	d32e      	bcc.n	800ac7a <quorem+0xfa>
 800ac1c:	613c      	str	r4, [r7, #16]
 800ac1e:	4638      	mov	r0, r7
 800ac20:	f001 fcfe 	bl	800c620 <__mcmp>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	db24      	blt.n	800ac72 <quorem+0xf2>
 800ac28:	3601      	adds	r6, #1
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f04f 0c00 	mov.w	ip, #0
 800ac30:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac34:	f8d0 e000 	ldr.w	lr, [r0]
 800ac38:	b293      	uxth	r3, r2
 800ac3a:	ebac 0303 	sub.w	r3, ip, r3
 800ac3e:	0c12      	lsrs	r2, r2, #16
 800ac40:	fa13 f38e 	uxtah	r3, r3, lr
 800ac44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac52:	45c1      	cmp	r9, r8
 800ac54:	f840 3b04 	str.w	r3, [r0], #4
 800ac58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac5c:	d2e8      	bcs.n	800ac30 <quorem+0xb0>
 800ac5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac66:	b922      	cbnz	r2, 800ac72 <quorem+0xf2>
 800ac68:	3b04      	subs	r3, #4
 800ac6a:	429d      	cmp	r5, r3
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	d30a      	bcc.n	800ac86 <quorem+0x106>
 800ac70:	613c      	str	r4, [r7, #16]
 800ac72:	4630      	mov	r0, r6
 800ac74:	b003      	add	sp, #12
 800ac76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7a:	6812      	ldr	r2, [r2, #0]
 800ac7c:	3b04      	subs	r3, #4
 800ac7e:	2a00      	cmp	r2, #0
 800ac80:	d1cc      	bne.n	800ac1c <quorem+0x9c>
 800ac82:	3c01      	subs	r4, #1
 800ac84:	e7c7      	b.n	800ac16 <quorem+0x96>
 800ac86:	6812      	ldr	r2, [r2, #0]
 800ac88:	3b04      	subs	r3, #4
 800ac8a:	2a00      	cmp	r2, #0
 800ac8c:	d1f0      	bne.n	800ac70 <quorem+0xf0>
 800ac8e:	3c01      	subs	r4, #1
 800ac90:	e7eb      	b.n	800ac6a <quorem+0xea>
 800ac92:	2000      	movs	r0, #0
 800ac94:	e7ee      	b.n	800ac74 <quorem+0xf4>
	...

0800ac98 <_dtoa_r>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	ed2d 8b04 	vpush	{d8-d9}
 800aca0:	ec57 6b10 	vmov	r6, r7, d0
 800aca4:	b093      	sub	sp, #76	; 0x4c
 800aca6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aca8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800acac:	9106      	str	r1, [sp, #24]
 800acae:	ee10 aa10 	vmov	sl, s0
 800acb2:	4604      	mov	r4, r0
 800acb4:	9209      	str	r2, [sp, #36]	; 0x24
 800acb6:	930c      	str	r3, [sp, #48]	; 0x30
 800acb8:	46bb      	mov	fp, r7
 800acba:	b975      	cbnz	r5, 800acda <_dtoa_r+0x42>
 800acbc:	2010      	movs	r0, #16
 800acbe:	f7fe f9cd 	bl	800905c <malloc>
 800acc2:	4602      	mov	r2, r0
 800acc4:	6260      	str	r0, [r4, #36]	; 0x24
 800acc6:	b920      	cbnz	r0, 800acd2 <_dtoa_r+0x3a>
 800acc8:	4ba7      	ldr	r3, [pc, #668]	; (800af68 <_dtoa_r+0x2d0>)
 800acca:	21ea      	movs	r1, #234	; 0xea
 800accc:	48a7      	ldr	r0, [pc, #668]	; (800af6c <_dtoa_r+0x2d4>)
 800acce:	f002 f9c7 	bl	800d060 <__assert_func>
 800acd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acd6:	6005      	str	r5, [r0, #0]
 800acd8:	60c5      	str	r5, [r0, #12]
 800acda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acdc:	6819      	ldr	r1, [r3, #0]
 800acde:	b151      	cbz	r1, 800acf6 <_dtoa_r+0x5e>
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	604a      	str	r2, [r1, #4]
 800ace4:	2301      	movs	r3, #1
 800ace6:	4093      	lsls	r3, r2
 800ace8:	608b      	str	r3, [r1, #8]
 800acea:	4620      	mov	r0, r4
 800acec:	f001 fa0c 	bl	800c108 <_Bfree>
 800acf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	1e3b      	subs	r3, r7, #0
 800acf8:	bfaa      	itet	ge
 800acfa:	2300      	movge	r3, #0
 800acfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ad00:	f8c8 3000 	strge.w	r3, [r8]
 800ad04:	4b9a      	ldr	r3, [pc, #616]	; (800af70 <_dtoa_r+0x2d8>)
 800ad06:	bfbc      	itt	lt
 800ad08:	2201      	movlt	r2, #1
 800ad0a:	f8c8 2000 	strlt.w	r2, [r8]
 800ad0e:	ea33 030b 	bics.w	r3, r3, fp
 800ad12:	d11b      	bne.n	800ad4c <_dtoa_r+0xb4>
 800ad14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad16:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad20:	4333      	orrs	r3, r6
 800ad22:	f000 8592 	beq.w	800b84a <_dtoa_r+0xbb2>
 800ad26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad28:	b963      	cbnz	r3, 800ad44 <_dtoa_r+0xac>
 800ad2a:	4b92      	ldr	r3, [pc, #584]	; (800af74 <_dtoa_r+0x2dc>)
 800ad2c:	e022      	b.n	800ad74 <_dtoa_r+0xdc>
 800ad2e:	4b92      	ldr	r3, [pc, #584]	; (800af78 <_dtoa_r+0x2e0>)
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	3308      	adds	r3, #8
 800ad34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	9801      	ldr	r0, [sp, #4]
 800ad3a:	b013      	add	sp, #76	; 0x4c
 800ad3c:	ecbd 8b04 	vpop	{d8-d9}
 800ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	4b8b      	ldr	r3, [pc, #556]	; (800af74 <_dtoa_r+0x2dc>)
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	3303      	adds	r3, #3
 800ad4a:	e7f3      	b.n	800ad34 <_dtoa_r+0x9c>
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	2300      	movs	r3, #0
 800ad50:	4650      	mov	r0, sl
 800ad52:	4659      	mov	r1, fp
 800ad54:	f7f5 fed0 	bl	8000af8 <__aeabi_dcmpeq>
 800ad58:	ec4b ab19 	vmov	d9, sl, fp
 800ad5c:	4680      	mov	r8, r0
 800ad5e:	b158      	cbz	r0, 800ad78 <_dtoa_r+0xe0>
 800ad60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad62:	2301      	movs	r3, #1
 800ad64:	6013      	str	r3, [r2, #0]
 800ad66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f000 856b 	beq.w	800b844 <_dtoa_r+0xbac>
 800ad6e:	4883      	ldr	r0, [pc, #524]	; (800af7c <_dtoa_r+0x2e4>)
 800ad70:	6018      	str	r0, [r3, #0]
 800ad72:	1e43      	subs	r3, r0, #1
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	e7df      	b.n	800ad38 <_dtoa_r+0xa0>
 800ad78:	ec4b ab10 	vmov	d0, sl, fp
 800ad7c:	aa10      	add	r2, sp, #64	; 0x40
 800ad7e:	a911      	add	r1, sp, #68	; 0x44
 800ad80:	4620      	mov	r0, r4
 800ad82:	f001 fd6f 	bl	800c864 <__d2b>
 800ad86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ad8a:	ee08 0a10 	vmov	s16, r0
 800ad8e:	2d00      	cmp	r5, #0
 800ad90:	f000 8084 	beq.w	800ae9c <_dtoa_r+0x204>
 800ad94:	ee19 3a90 	vmov	r3, s19
 800ad98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ada0:	4656      	mov	r6, sl
 800ada2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ada6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800adaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800adae:	4b74      	ldr	r3, [pc, #464]	; (800af80 <_dtoa_r+0x2e8>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	4630      	mov	r0, r6
 800adb4:	4639      	mov	r1, r7
 800adb6:	f7f5 fa7f 	bl	80002b8 <__aeabi_dsub>
 800adba:	a365      	add	r3, pc, #404	; (adr r3, 800af50 <_dtoa_r+0x2b8>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	f7f5 fc32 	bl	8000628 <__aeabi_dmul>
 800adc4:	a364      	add	r3, pc, #400	; (adr r3, 800af58 <_dtoa_r+0x2c0>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	f7f5 fa77 	bl	80002bc <__adddf3>
 800adce:	4606      	mov	r6, r0
 800add0:	4628      	mov	r0, r5
 800add2:	460f      	mov	r7, r1
 800add4:	f7f5 fbbe 	bl	8000554 <__aeabi_i2d>
 800add8:	a361      	add	r3, pc, #388	; (adr r3, 800af60 <_dtoa_r+0x2c8>)
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	f7f5 fc23 	bl	8000628 <__aeabi_dmul>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	4630      	mov	r0, r6
 800ade8:	4639      	mov	r1, r7
 800adea:	f7f5 fa67 	bl	80002bc <__adddf3>
 800adee:	4606      	mov	r6, r0
 800adf0:	460f      	mov	r7, r1
 800adf2:	f7f5 fec9 	bl	8000b88 <__aeabi_d2iz>
 800adf6:	2200      	movs	r2, #0
 800adf8:	9000      	str	r0, [sp, #0]
 800adfa:	2300      	movs	r3, #0
 800adfc:	4630      	mov	r0, r6
 800adfe:	4639      	mov	r1, r7
 800ae00:	f7f5 fe84 	bl	8000b0c <__aeabi_dcmplt>
 800ae04:	b150      	cbz	r0, 800ae1c <_dtoa_r+0x184>
 800ae06:	9800      	ldr	r0, [sp, #0]
 800ae08:	f7f5 fba4 	bl	8000554 <__aeabi_i2d>
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	463b      	mov	r3, r7
 800ae10:	f7f5 fe72 	bl	8000af8 <__aeabi_dcmpeq>
 800ae14:	b910      	cbnz	r0, 800ae1c <_dtoa_r+0x184>
 800ae16:	9b00      	ldr	r3, [sp, #0]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	9b00      	ldr	r3, [sp, #0]
 800ae1e:	2b16      	cmp	r3, #22
 800ae20:	d85a      	bhi.n	800aed8 <_dtoa_r+0x240>
 800ae22:	9a00      	ldr	r2, [sp, #0]
 800ae24:	4b57      	ldr	r3, [pc, #348]	; (800af84 <_dtoa_r+0x2ec>)
 800ae26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	ec51 0b19 	vmov	r0, r1, d9
 800ae32:	f7f5 fe6b 	bl	8000b0c <__aeabi_dcmplt>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d050      	beq.n	800aedc <_dtoa_r+0x244>
 800ae3a:	9b00      	ldr	r3, [sp, #0]
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	2300      	movs	r3, #0
 800ae42:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae46:	1b5d      	subs	r5, r3, r5
 800ae48:	1e6b      	subs	r3, r5, #1
 800ae4a:	9305      	str	r3, [sp, #20]
 800ae4c:	bf45      	ittet	mi
 800ae4e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ae52:	9304      	strmi	r3, [sp, #16]
 800ae54:	2300      	movpl	r3, #0
 800ae56:	2300      	movmi	r3, #0
 800ae58:	bf4c      	ite	mi
 800ae5a:	9305      	strmi	r3, [sp, #20]
 800ae5c:	9304      	strpl	r3, [sp, #16]
 800ae5e:	9b00      	ldr	r3, [sp, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	db3d      	blt.n	800aee0 <_dtoa_r+0x248>
 800ae64:	9b05      	ldr	r3, [sp, #20]
 800ae66:	9a00      	ldr	r2, [sp, #0]
 800ae68:	920a      	str	r2, [sp, #40]	; 0x28
 800ae6a:	4413      	add	r3, r2
 800ae6c:	9305      	str	r3, [sp, #20]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	9307      	str	r3, [sp, #28]
 800ae72:	9b06      	ldr	r3, [sp, #24]
 800ae74:	2b09      	cmp	r3, #9
 800ae76:	f200 8089 	bhi.w	800af8c <_dtoa_r+0x2f4>
 800ae7a:	2b05      	cmp	r3, #5
 800ae7c:	bfc4      	itt	gt
 800ae7e:	3b04      	subgt	r3, #4
 800ae80:	9306      	strgt	r3, [sp, #24]
 800ae82:	9b06      	ldr	r3, [sp, #24]
 800ae84:	f1a3 0302 	sub.w	r3, r3, #2
 800ae88:	bfcc      	ite	gt
 800ae8a:	2500      	movgt	r5, #0
 800ae8c:	2501      	movle	r5, #1
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	f200 8087 	bhi.w	800afa2 <_dtoa_r+0x30a>
 800ae94:	e8df f003 	tbb	[pc, r3]
 800ae98:	59383a2d 	.word	0x59383a2d
 800ae9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aea0:	441d      	add	r5, r3
 800aea2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aea6:	2b20      	cmp	r3, #32
 800aea8:	bfc1      	itttt	gt
 800aeaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aeae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aeb2:	fa0b f303 	lslgt.w	r3, fp, r3
 800aeb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aeba:	bfda      	itte	le
 800aebc:	f1c3 0320 	rsble	r3, r3, #32
 800aec0:	fa06 f003 	lslle.w	r0, r6, r3
 800aec4:	4318      	orrgt	r0, r3
 800aec6:	f7f5 fb35 	bl	8000534 <__aeabi_ui2d>
 800aeca:	2301      	movs	r3, #1
 800aecc:	4606      	mov	r6, r0
 800aece:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aed2:	3d01      	subs	r5, #1
 800aed4:	930e      	str	r3, [sp, #56]	; 0x38
 800aed6:	e76a      	b.n	800adae <_dtoa_r+0x116>
 800aed8:	2301      	movs	r3, #1
 800aeda:	e7b2      	b.n	800ae42 <_dtoa_r+0x1aa>
 800aedc:	900b      	str	r0, [sp, #44]	; 0x2c
 800aede:	e7b1      	b.n	800ae44 <_dtoa_r+0x1ac>
 800aee0:	9b04      	ldr	r3, [sp, #16]
 800aee2:	9a00      	ldr	r2, [sp, #0]
 800aee4:	1a9b      	subs	r3, r3, r2
 800aee6:	9304      	str	r3, [sp, #16]
 800aee8:	4253      	negs	r3, r2
 800aeea:	9307      	str	r3, [sp, #28]
 800aeec:	2300      	movs	r3, #0
 800aeee:	930a      	str	r3, [sp, #40]	; 0x28
 800aef0:	e7bf      	b.n	800ae72 <_dtoa_r+0x1da>
 800aef2:	2300      	movs	r3, #0
 800aef4:	9308      	str	r3, [sp, #32]
 800aef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	dc55      	bgt.n	800afa8 <_dtoa_r+0x310>
 800aefc:	2301      	movs	r3, #1
 800aefe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af02:	461a      	mov	r2, r3
 800af04:	9209      	str	r2, [sp, #36]	; 0x24
 800af06:	e00c      	b.n	800af22 <_dtoa_r+0x28a>
 800af08:	2301      	movs	r3, #1
 800af0a:	e7f3      	b.n	800aef4 <_dtoa_r+0x25c>
 800af0c:	2300      	movs	r3, #0
 800af0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af10:	9308      	str	r3, [sp, #32]
 800af12:	9b00      	ldr	r3, [sp, #0]
 800af14:	4413      	add	r3, r2
 800af16:	9302      	str	r3, [sp, #8]
 800af18:	3301      	adds	r3, #1
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	9303      	str	r3, [sp, #12]
 800af1e:	bfb8      	it	lt
 800af20:	2301      	movlt	r3, #1
 800af22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af24:	2200      	movs	r2, #0
 800af26:	6042      	str	r2, [r0, #4]
 800af28:	2204      	movs	r2, #4
 800af2a:	f102 0614 	add.w	r6, r2, #20
 800af2e:	429e      	cmp	r6, r3
 800af30:	6841      	ldr	r1, [r0, #4]
 800af32:	d93d      	bls.n	800afb0 <_dtoa_r+0x318>
 800af34:	4620      	mov	r0, r4
 800af36:	f001 f8a7 	bl	800c088 <_Balloc>
 800af3a:	9001      	str	r0, [sp, #4]
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d13b      	bne.n	800afb8 <_dtoa_r+0x320>
 800af40:	4b11      	ldr	r3, [pc, #68]	; (800af88 <_dtoa_r+0x2f0>)
 800af42:	4602      	mov	r2, r0
 800af44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af48:	e6c0      	b.n	800accc <_dtoa_r+0x34>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e7df      	b.n	800af0e <_dtoa_r+0x276>
 800af4e:	bf00      	nop
 800af50:	636f4361 	.word	0x636f4361
 800af54:	3fd287a7 	.word	0x3fd287a7
 800af58:	8b60c8b3 	.word	0x8b60c8b3
 800af5c:	3fc68a28 	.word	0x3fc68a28
 800af60:	509f79fb 	.word	0x509f79fb
 800af64:	3fd34413 	.word	0x3fd34413
 800af68:	0800d80d 	.word	0x0800d80d
 800af6c:	0800d824 	.word	0x0800d824
 800af70:	7ff00000 	.word	0x7ff00000
 800af74:	0800d809 	.word	0x0800d809
 800af78:	0800d800 	.word	0x0800d800
 800af7c:	0800d789 	.word	0x0800d789
 800af80:	3ff80000 	.word	0x3ff80000
 800af84:	0800d990 	.word	0x0800d990
 800af88:	0800d87f 	.word	0x0800d87f
 800af8c:	2501      	movs	r5, #1
 800af8e:	2300      	movs	r3, #0
 800af90:	9306      	str	r3, [sp, #24]
 800af92:	9508      	str	r5, [sp, #32]
 800af94:	f04f 33ff 	mov.w	r3, #4294967295
 800af98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af9c:	2200      	movs	r2, #0
 800af9e:	2312      	movs	r3, #18
 800afa0:	e7b0      	b.n	800af04 <_dtoa_r+0x26c>
 800afa2:	2301      	movs	r3, #1
 800afa4:	9308      	str	r3, [sp, #32]
 800afa6:	e7f5      	b.n	800af94 <_dtoa_r+0x2fc>
 800afa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800afae:	e7b8      	b.n	800af22 <_dtoa_r+0x28a>
 800afb0:	3101      	adds	r1, #1
 800afb2:	6041      	str	r1, [r0, #4]
 800afb4:	0052      	lsls	r2, r2, #1
 800afb6:	e7b8      	b.n	800af2a <_dtoa_r+0x292>
 800afb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afba:	9a01      	ldr	r2, [sp, #4]
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	9b03      	ldr	r3, [sp, #12]
 800afc0:	2b0e      	cmp	r3, #14
 800afc2:	f200 809d 	bhi.w	800b100 <_dtoa_r+0x468>
 800afc6:	2d00      	cmp	r5, #0
 800afc8:	f000 809a 	beq.w	800b100 <_dtoa_r+0x468>
 800afcc:	9b00      	ldr	r3, [sp, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	dd32      	ble.n	800b038 <_dtoa_r+0x3a0>
 800afd2:	4ab7      	ldr	r2, [pc, #732]	; (800b2b0 <_dtoa_r+0x618>)
 800afd4:	f003 030f 	and.w	r3, r3, #15
 800afd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800afdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afe0:	9b00      	ldr	r3, [sp, #0]
 800afe2:	05d8      	lsls	r0, r3, #23
 800afe4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800afe8:	d516      	bpl.n	800b018 <_dtoa_r+0x380>
 800afea:	4bb2      	ldr	r3, [pc, #712]	; (800b2b4 <_dtoa_r+0x61c>)
 800afec:	ec51 0b19 	vmov	r0, r1, d9
 800aff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aff4:	f7f5 fc42 	bl	800087c <__aeabi_ddiv>
 800aff8:	f007 070f 	and.w	r7, r7, #15
 800affc:	4682      	mov	sl, r0
 800affe:	468b      	mov	fp, r1
 800b000:	2503      	movs	r5, #3
 800b002:	4eac      	ldr	r6, [pc, #688]	; (800b2b4 <_dtoa_r+0x61c>)
 800b004:	b957      	cbnz	r7, 800b01c <_dtoa_r+0x384>
 800b006:	4642      	mov	r2, r8
 800b008:	464b      	mov	r3, r9
 800b00a:	4650      	mov	r0, sl
 800b00c:	4659      	mov	r1, fp
 800b00e:	f7f5 fc35 	bl	800087c <__aeabi_ddiv>
 800b012:	4682      	mov	sl, r0
 800b014:	468b      	mov	fp, r1
 800b016:	e028      	b.n	800b06a <_dtoa_r+0x3d2>
 800b018:	2502      	movs	r5, #2
 800b01a:	e7f2      	b.n	800b002 <_dtoa_r+0x36a>
 800b01c:	07f9      	lsls	r1, r7, #31
 800b01e:	d508      	bpl.n	800b032 <_dtoa_r+0x39a>
 800b020:	4640      	mov	r0, r8
 800b022:	4649      	mov	r1, r9
 800b024:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b028:	f7f5 fafe 	bl	8000628 <__aeabi_dmul>
 800b02c:	3501      	adds	r5, #1
 800b02e:	4680      	mov	r8, r0
 800b030:	4689      	mov	r9, r1
 800b032:	107f      	asrs	r7, r7, #1
 800b034:	3608      	adds	r6, #8
 800b036:	e7e5      	b.n	800b004 <_dtoa_r+0x36c>
 800b038:	f000 809b 	beq.w	800b172 <_dtoa_r+0x4da>
 800b03c:	9b00      	ldr	r3, [sp, #0]
 800b03e:	4f9d      	ldr	r7, [pc, #628]	; (800b2b4 <_dtoa_r+0x61c>)
 800b040:	425e      	negs	r6, r3
 800b042:	4b9b      	ldr	r3, [pc, #620]	; (800b2b0 <_dtoa_r+0x618>)
 800b044:	f006 020f 	and.w	r2, r6, #15
 800b048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b050:	ec51 0b19 	vmov	r0, r1, d9
 800b054:	f7f5 fae8 	bl	8000628 <__aeabi_dmul>
 800b058:	1136      	asrs	r6, r6, #4
 800b05a:	4682      	mov	sl, r0
 800b05c:	468b      	mov	fp, r1
 800b05e:	2300      	movs	r3, #0
 800b060:	2502      	movs	r5, #2
 800b062:	2e00      	cmp	r6, #0
 800b064:	d17a      	bne.n	800b15c <_dtoa_r+0x4c4>
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1d3      	bne.n	800b012 <_dtoa_r+0x37a>
 800b06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f000 8082 	beq.w	800b176 <_dtoa_r+0x4de>
 800b072:	4b91      	ldr	r3, [pc, #580]	; (800b2b8 <_dtoa_r+0x620>)
 800b074:	2200      	movs	r2, #0
 800b076:	4650      	mov	r0, sl
 800b078:	4659      	mov	r1, fp
 800b07a:	f7f5 fd47 	bl	8000b0c <__aeabi_dcmplt>
 800b07e:	2800      	cmp	r0, #0
 800b080:	d079      	beq.n	800b176 <_dtoa_r+0x4de>
 800b082:	9b03      	ldr	r3, [sp, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d076      	beq.n	800b176 <_dtoa_r+0x4de>
 800b088:	9b02      	ldr	r3, [sp, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	dd36      	ble.n	800b0fc <_dtoa_r+0x464>
 800b08e:	9b00      	ldr	r3, [sp, #0]
 800b090:	4650      	mov	r0, sl
 800b092:	4659      	mov	r1, fp
 800b094:	1e5f      	subs	r7, r3, #1
 800b096:	2200      	movs	r2, #0
 800b098:	4b88      	ldr	r3, [pc, #544]	; (800b2bc <_dtoa_r+0x624>)
 800b09a:	f7f5 fac5 	bl	8000628 <__aeabi_dmul>
 800b09e:	9e02      	ldr	r6, [sp, #8]
 800b0a0:	4682      	mov	sl, r0
 800b0a2:	468b      	mov	fp, r1
 800b0a4:	3501      	adds	r5, #1
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	f7f5 fa54 	bl	8000554 <__aeabi_i2d>
 800b0ac:	4652      	mov	r2, sl
 800b0ae:	465b      	mov	r3, fp
 800b0b0:	f7f5 faba 	bl	8000628 <__aeabi_dmul>
 800b0b4:	4b82      	ldr	r3, [pc, #520]	; (800b2c0 <_dtoa_r+0x628>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f7f5 f900 	bl	80002bc <__adddf3>
 800b0bc:	46d0      	mov	r8, sl
 800b0be:	46d9      	mov	r9, fp
 800b0c0:	4682      	mov	sl, r0
 800b0c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b0c6:	2e00      	cmp	r6, #0
 800b0c8:	d158      	bne.n	800b17c <_dtoa_r+0x4e4>
 800b0ca:	4b7e      	ldr	r3, [pc, #504]	; (800b2c4 <_dtoa_r+0x62c>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	f7f5 f8f1 	bl	80002b8 <__aeabi_dsub>
 800b0d6:	4652      	mov	r2, sl
 800b0d8:	465b      	mov	r3, fp
 800b0da:	4680      	mov	r8, r0
 800b0dc:	4689      	mov	r9, r1
 800b0de:	f7f5 fd33 	bl	8000b48 <__aeabi_dcmpgt>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	f040 8295 	bne.w	800b612 <_dtoa_r+0x97a>
 800b0e8:	4652      	mov	r2, sl
 800b0ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	f7f5 fd0b 	bl	8000b0c <__aeabi_dcmplt>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f040 8289 	bne.w	800b60e <_dtoa_r+0x976>
 800b0fc:	ec5b ab19 	vmov	sl, fp, d9
 800b100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b102:	2b00      	cmp	r3, #0
 800b104:	f2c0 8148 	blt.w	800b398 <_dtoa_r+0x700>
 800b108:	9a00      	ldr	r2, [sp, #0]
 800b10a:	2a0e      	cmp	r2, #14
 800b10c:	f300 8144 	bgt.w	800b398 <_dtoa_r+0x700>
 800b110:	4b67      	ldr	r3, [pc, #412]	; (800b2b0 <_dtoa_r+0x618>)
 800b112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b116:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f280 80d5 	bge.w	800b2cc <_dtoa_r+0x634>
 800b122:	9b03      	ldr	r3, [sp, #12]
 800b124:	2b00      	cmp	r3, #0
 800b126:	f300 80d1 	bgt.w	800b2cc <_dtoa_r+0x634>
 800b12a:	f040 826f 	bne.w	800b60c <_dtoa_r+0x974>
 800b12e:	4b65      	ldr	r3, [pc, #404]	; (800b2c4 <_dtoa_r+0x62c>)
 800b130:	2200      	movs	r2, #0
 800b132:	4640      	mov	r0, r8
 800b134:	4649      	mov	r1, r9
 800b136:	f7f5 fa77 	bl	8000628 <__aeabi_dmul>
 800b13a:	4652      	mov	r2, sl
 800b13c:	465b      	mov	r3, fp
 800b13e:	f7f5 fcf9 	bl	8000b34 <__aeabi_dcmpge>
 800b142:	9e03      	ldr	r6, [sp, #12]
 800b144:	4637      	mov	r7, r6
 800b146:	2800      	cmp	r0, #0
 800b148:	f040 8245 	bne.w	800b5d6 <_dtoa_r+0x93e>
 800b14c:	9d01      	ldr	r5, [sp, #4]
 800b14e:	2331      	movs	r3, #49	; 0x31
 800b150:	f805 3b01 	strb.w	r3, [r5], #1
 800b154:	9b00      	ldr	r3, [sp, #0]
 800b156:	3301      	adds	r3, #1
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	e240      	b.n	800b5de <_dtoa_r+0x946>
 800b15c:	07f2      	lsls	r2, r6, #31
 800b15e:	d505      	bpl.n	800b16c <_dtoa_r+0x4d4>
 800b160:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b164:	f7f5 fa60 	bl	8000628 <__aeabi_dmul>
 800b168:	3501      	adds	r5, #1
 800b16a:	2301      	movs	r3, #1
 800b16c:	1076      	asrs	r6, r6, #1
 800b16e:	3708      	adds	r7, #8
 800b170:	e777      	b.n	800b062 <_dtoa_r+0x3ca>
 800b172:	2502      	movs	r5, #2
 800b174:	e779      	b.n	800b06a <_dtoa_r+0x3d2>
 800b176:	9f00      	ldr	r7, [sp, #0]
 800b178:	9e03      	ldr	r6, [sp, #12]
 800b17a:	e794      	b.n	800b0a6 <_dtoa_r+0x40e>
 800b17c:	9901      	ldr	r1, [sp, #4]
 800b17e:	4b4c      	ldr	r3, [pc, #304]	; (800b2b0 <_dtoa_r+0x618>)
 800b180:	4431      	add	r1, r6
 800b182:	910d      	str	r1, [sp, #52]	; 0x34
 800b184:	9908      	ldr	r1, [sp, #32]
 800b186:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b18a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b18e:	2900      	cmp	r1, #0
 800b190:	d043      	beq.n	800b21a <_dtoa_r+0x582>
 800b192:	494d      	ldr	r1, [pc, #308]	; (800b2c8 <_dtoa_r+0x630>)
 800b194:	2000      	movs	r0, #0
 800b196:	f7f5 fb71 	bl	800087c <__aeabi_ddiv>
 800b19a:	4652      	mov	r2, sl
 800b19c:	465b      	mov	r3, fp
 800b19e:	f7f5 f88b 	bl	80002b8 <__aeabi_dsub>
 800b1a2:	9d01      	ldr	r5, [sp, #4]
 800b1a4:	4682      	mov	sl, r0
 800b1a6:	468b      	mov	fp, r1
 800b1a8:	4649      	mov	r1, r9
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	f7f5 fcec 	bl	8000b88 <__aeabi_d2iz>
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	f7f5 f9cf 	bl	8000554 <__aeabi_i2d>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	4649      	mov	r1, r9
 800b1be:	f7f5 f87b 	bl	80002b8 <__aeabi_dsub>
 800b1c2:	3630      	adds	r6, #48	; 0x30
 800b1c4:	f805 6b01 	strb.w	r6, [r5], #1
 800b1c8:	4652      	mov	r2, sl
 800b1ca:	465b      	mov	r3, fp
 800b1cc:	4680      	mov	r8, r0
 800b1ce:	4689      	mov	r9, r1
 800b1d0:	f7f5 fc9c 	bl	8000b0c <__aeabi_dcmplt>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	d163      	bne.n	800b2a0 <_dtoa_r+0x608>
 800b1d8:	4642      	mov	r2, r8
 800b1da:	464b      	mov	r3, r9
 800b1dc:	4936      	ldr	r1, [pc, #216]	; (800b2b8 <_dtoa_r+0x620>)
 800b1de:	2000      	movs	r0, #0
 800b1e0:	f7f5 f86a 	bl	80002b8 <__aeabi_dsub>
 800b1e4:	4652      	mov	r2, sl
 800b1e6:	465b      	mov	r3, fp
 800b1e8:	f7f5 fc90 	bl	8000b0c <__aeabi_dcmplt>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f040 80b5 	bne.w	800b35c <_dtoa_r+0x6c4>
 800b1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1f4:	429d      	cmp	r5, r3
 800b1f6:	d081      	beq.n	800b0fc <_dtoa_r+0x464>
 800b1f8:	4b30      	ldr	r3, [pc, #192]	; (800b2bc <_dtoa_r+0x624>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	4650      	mov	r0, sl
 800b1fe:	4659      	mov	r1, fp
 800b200:	f7f5 fa12 	bl	8000628 <__aeabi_dmul>
 800b204:	4b2d      	ldr	r3, [pc, #180]	; (800b2bc <_dtoa_r+0x624>)
 800b206:	4682      	mov	sl, r0
 800b208:	468b      	mov	fp, r1
 800b20a:	4640      	mov	r0, r8
 800b20c:	4649      	mov	r1, r9
 800b20e:	2200      	movs	r2, #0
 800b210:	f7f5 fa0a 	bl	8000628 <__aeabi_dmul>
 800b214:	4680      	mov	r8, r0
 800b216:	4689      	mov	r9, r1
 800b218:	e7c6      	b.n	800b1a8 <_dtoa_r+0x510>
 800b21a:	4650      	mov	r0, sl
 800b21c:	4659      	mov	r1, fp
 800b21e:	f7f5 fa03 	bl	8000628 <__aeabi_dmul>
 800b222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b224:	9d01      	ldr	r5, [sp, #4]
 800b226:	930f      	str	r3, [sp, #60]	; 0x3c
 800b228:	4682      	mov	sl, r0
 800b22a:	468b      	mov	fp, r1
 800b22c:	4649      	mov	r1, r9
 800b22e:	4640      	mov	r0, r8
 800b230:	f7f5 fcaa 	bl	8000b88 <__aeabi_d2iz>
 800b234:	4606      	mov	r6, r0
 800b236:	f7f5 f98d 	bl	8000554 <__aeabi_i2d>
 800b23a:	3630      	adds	r6, #48	; 0x30
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4640      	mov	r0, r8
 800b242:	4649      	mov	r1, r9
 800b244:	f7f5 f838 	bl	80002b8 <__aeabi_dsub>
 800b248:	f805 6b01 	strb.w	r6, [r5], #1
 800b24c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b24e:	429d      	cmp	r5, r3
 800b250:	4680      	mov	r8, r0
 800b252:	4689      	mov	r9, r1
 800b254:	f04f 0200 	mov.w	r2, #0
 800b258:	d124      	bne.n	800b2a4 <_dtoa_r+0x60c>
 800b25a:	4b1b      	ldr	r3, [pc, #108]	; (800b2c8 <_dtoa_r+0x630>)
 800b25c:	4650      	mov	r0, sl
 800b25e:	4659      	mov	r1, fp
 800b260:	f7f5 f82c 	bl	80002bc <__adddf3>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	4640      	mov	r0, r8
 800b26a:	4649      	mov	r1, r9
 800b26c:	f7f5 fc6c 	bl	8000b48 <__aeabi_dcmpgt>
 800b270:	2800      	cmp	r0, #0
 800b272:	d173      	bne.n	800b35c <_dtoa_r+0x6c4>
 800b274:	4652      	mov	r2, sl
 800b276:	465b      	mov	r3, fp
 800b278:	4913      	ldr	r1, [pc, #76]	; (800b2c8 <_dtoa_r+0x630>)
 800b27a:	2000      	movs	r0, #0
 800b27c:	f7f5 f81c 	bl	80002b8 <__aeabi_dsub>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4640      	mov	r0, r8
 800b286:	4649      	mov	r1, r9
 800b288:	f7f5 fc40 	bl	8000b0c <__aeabi_dcmplt>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	f43f af35 	beq.w	800b0fc <_dtoa_r+0x464>
 800b292:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b294:	1e6b      	subs	r3, r5, #1
 800b296:	930f      	str	r3, [sp, #60]	; 0x3c
 800b298:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b29c:	2b30      	cmp	r3, #48	; 0x30
 800b29e:	d0f8      	beq.n	800b292 <_dtoa_r+0x5fa>
 800b2a0:	9700      	str	r7, [sp, #0]
 800b2a2:	e049      	b.n	800b338 <_dtoa_r+0x6a0>
 800b2a4:	4b05      	ldr	r3, [pc, #20]	; (800b2bc <_dtoa_r+0x624>)
 800b2a6:	f7f5 f9bf 	bl	8000628 <__aeabi_dmul>
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	4689      	mov	r9, r1
 800b2ae:	e7bd      	b.n	800b22c <_dtoa_r+0x594>
 800b2b0:	0800d990 	.word	0x0800d990
 800b2b4:	0800d968 	.word	0x0800d968
 800b2b8:	3ff00000 	.word	0x3ff00000
 800b2bc:	40240000 	.word	0x40240000
 800b2c0:	401c0000 	.word	0x401c0000
 800b2c4:	40140000 	.word	0x40140000
 800b2c8:	3fe00000 	.word	0x3fe00000
 800b2cc:	9d01      	ldr	r5, [sp, #4]
 800b2ce:	4656      	mov	r6, sl
 800b2d0:	465f      	mov	r7, fp
 800b2d2:	4642      	mov	r2, r8
 800b2d4:	464b      	mov	r3, r9
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	4639      	mov	r1, r7
 800b2da:	f7f5 facf 	bl	800087c <__aeabi_ddiv>
 800b2de:	f7f5 fc53 	bl	8000b88 <__aeabi_d2iz>
 800b2e2:	4682      	mov	sl, r0
 800b2e4:	f7f5 f936 	bl	8000554 <__aeabi_i2d>
 800b2e8:	4642      	mov	r2, r8
 800b2ea:	464b      	mov	r3, r9
 800b2ec:	f7f5 f99c 	bl	8000628 <__aeabi_dmul>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	4639      	mov	r1, r7
 800b2f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b2fc:	f7f4 ffdc 	bl	80002b8 <__aeabi_dsub>
 800b300:	f805 6b01 	strb.w	r6, [r5], #1
 800b304:	9e01      	ldr	r6, [sp, #4]
 800b306:	9f03      	ldr	r7, [sp, #12]
 800b308:	1bae      	subs	r6, r5, r6
 800b30a:	42b7      	cmp	r7, r6
 800b30c:	4602      	mov	r2, r0
 800b30e:	460b      	mov	r3, r1
 800b310:	d135      	bne.n	800b37e <_dtoa_r+0x6e6>
 800b312:	f7f4 ffd3 	bl	80002bc <__adddf3>
 800b316:	4642      	mov	r2, r8
 800b318:	464b      	mov	r3, r9
 800b31a:	4606      	mov	r6, r0
 800b31c:	460f      	mov	r7, r1
 800b31e:	f7f5 fc13 	bl	8000b48 <__aeabi_dcmpgt>
 800b322:	b9d0      	cbnz	r0, 800b35a <_dtoa_r+0x6c2>
 800b324:	4642      	mov	r2, r8
 800b326:	464b      	mov	r3, r9
 800b328:	4630      	mov	r0, r6
 800b32a:	4639      	mov	r1, r7
 800b32c:	f7f5 fbe4 	bl	8000af8 <__aeabi_dcmpeq>
 800b330:	b110      	cbz	r0, 800b338 <_dtoa_r+0x6a0>
 800b332:	f01a 0f01 	tst.w	sl, #1
 800b336:	d110      	bne.n	800b35a <_dtoa_r+0x6c2>
 800b338:	4620      	mov	r0, r4
 800b33a:	ee18 1a10 	vmov	r1, s16
 800b33e:	f000 fee3 	bl	800c108 <_Bfree>
 800b342:	2300      	movs	r3, #0
 800b344:	9800      	ldr	r0, [sp, #0]
 800b346:	702b      	strb	r3, [r5, #0]
 800b348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b34a:	3001      	adds	r0, #1
 800b34c:	6018      	str	r0, [r3, #0]
 800b34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b350:	2b00      	cmp	r3, #0
 800b352:	f43f acf1 	beq.w	800ad38 <_dtoa_r+0xa0>
 800b356:	601d      	str	r5, [r3, #0]
 800b358:	e4ee      	b.n	800ad38 <_dtoa_r+0xa0>
 800b35a:	9f00      	ldr	r7, [sp, #0]
 800b35c:	462b      	mov	r3, r5
 800b35e:	461d      	mov	r5, r3
 800b360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b364:	2a39      	cmp	r2, #57	; 0x39
 800b366:	d106      	bne.n	800b376 <_dtoa_r+0x6de>
 800b368:	9a01      	ldr	r2, [sp, #4]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d1f7      	bne.n	800b35e <_dtoa_r+0x6c6>
 800b36e:	9901      	ldr	r1, [sp, #4]
 800b370:	2230      	movs	r2, #48	; 0x30
 800b372:	3701      	adds	r7, #1
 800b374:	700a      	strb	r2, [r1, #0]
 800b376:	781a      	ldrb	r2, [r3, #0]
 800b378:	3201      	adds	r2, #1
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	e790      	b.n	800b2a0 <_dtoa_r+0x608>
 800b37e:	4ba6      	ldr	r3, [pc, #664]	; (800b618 <_dtoa_r+0x980>)
 800b380:	2200      	movs	r2, #0
 800b382:	f7f5 f951 	bl	8000628 <__aeabi_dmul>
 800b386:	2200      	movs	r2, #0
 800b388:	2300      	movs	r3, #0
 800b38a:	4606      	mov	r6, r0
 800b38c:	460f      	mov	r7, r1
 800b38e:	f7f5 fbb3 	bl	8000af8 <__aeabi_dcmpeq>
 800b392:	2800      	cmp	r0, #0
 800b394:	d09d      	beq.n	800b2d2 <_dtoa_r+0x63a>
 800b396:	e7cf      	b.n	800b338 <_dtoa_r+0x6a0>
 800b398:	9a08      	ldr	r2, [sp, #32]
 800b39a:	2a00      	cmp	r2, #0
 800b39c:	f000 80d7 	beq.w	800b54e <_dtoa_r+0x8b6>
 800b3a0:	9a06      	ldr	r2, [sp, #24]
 800b3a2:	2a01      	cmp	r2, #1
 800b3a4:	f300 80ba 	bgt.w	800b51c <_dtoa_r+0x884>
 800b3a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3aa:	2a00      	cmp	r2, #0
 800b3ac:	f000 80b2 	beq.w	800b514 <_dtoa_r+0x87c>
 800b3b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b3b4:	9e07      	ldr	r6, [sp, #28]
 800b3b6:	9d04      	ldr	r5, [sp, #16]
 800b3b8:	9a04      	ldr	r2, [sp, #16]
 800b3ba:	441a      	add	r2, r3
 800b3bc:	9204      	str	r2, [sp, #16]
 800b3be:	9a05      	ldr	r2, [sp, #20]
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	441a      	add	r2, r3
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	9205      	str	r2, [sp, #20]
 800b3c8:	f000 ffa0 	bl	800c30c <__i2b>
 800b3cc:	4607      	mov	r7, r0
 800b3ce:	2d00      	cmp	r5, #0
 800b3d0:	dd0c      	ble.n	800b3ec <_dtoa_r+0x754>
 800b3d2:	9b05      	ldr	r3, [sp, #20]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dd09      	ble.n	800b3ec <_dtoa_r+0x754>
 800b3d8:	42ab      	cmp	r3, r5
 800b3da:	9a04      	ldr	r2, [sp, #16]
 800b3dc:	bfa8      	it	ge
 800b3de:	462b      	movge	r3, r5
 800b3e0:	1ad2      	subs	r2, r2, r3
 800b3e2:	9204      	str	r2, [sp, #16]
 800b3e4:	9a05      	ldr	r2, [sp, #20]
 800b3e6:	1aed      	subs	r5, r5, r3
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	9305      	str	r3, [sp, #20]
 800b3ec:	9b07      	ldr	r3, [sp, #28]
 800b3ee:	b31b      	cbz	r3, 800b438 <_dtoa_r+0x7a0>
 800b3f0:	9b08      	ldr	r3, [sp, #32]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 80af 	beq.w	800b556 <_dtoa_r+0x8be>
 800b3f8:	2e00      	cmp	r6, #0
 800b3fa:	dd13      	ble.n	800b424 <_dtoa_r+0x78c>
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	4632      	mov	r2, r6
 800b400:	4620      	mov	r0, r4
 800b402:	f001 f843 	bl	800c48c <__pow5mult>
 800b406:	ee18 2a10 	vmov	r2, s16
 800b40a:	4601      	mov	r1, r0
 800b40c:	4607      	mov	r7, r0
 800b40e:	4620      	mov	r0, r4
 800b410:	f000 ff92 	bl	800c338 <__multiply>
 800b414:	ee18 1a10 	vmov	r1, s16
 800b418:	4680      	mov	r8, r0
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 fe74 	bl	800c108 <_Bfree>
 800b420:	ee08 8a10 	vmov	s16, r8
 800b424:	9b07      	ldr	r3, [sp, #28]
 800b426:	1b9a      	subs	r2, r3, r6
 800b428:	d006      	beq.n	800b438 <_dtoa_r+0x7a0>
 800b42a:	ee18 1a10 	vmov	r1, s16
 800b42e:	4620      	mov	r0, r4
 800b430:	f001 f82c 	bl	800c48c <__pow5mult>
 800b434:	ee08 0a10 	vmov	s16, r0
 800b438:	2101      	movs	r1, #1
 800b43a:	4620      	mov	r0, r4
 800b43c:	f000 ff66 	bl	800c30c <__i2b>
 800b440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b442:	2b00      	cmp	r3, #0
 800b444:	4606      	mov	r6, r0
 800b446:	f340 8088 	ble.w	800b55a <_dtoa_r+0x8c2>
 800b44a:	461a      	mov	r2, r3
 800b44c:	4601      	mov	r1, r0
 800b44e:	4620      	mov	r0, r4
 800b450:	f001 f81c 	bl	800c48c <__pow5mult>
 800b454:	9b06      	ldr	r3, [sp, #24]
 800b456:	2b01      	cmp	r3, #1
 800b458:	4606      	mov	r6, r0
 800b45a:	f340 8081 	ble.w	800b560 <_dtoa_r+0x8c8>
 800b45e:	f04f 0800 	mov.w	r8, #0
 800b462:	6933      	ldr	r3, [r6, #16]
 800b464:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b468:	6918      	ldr	r0, [r3, #16]
 800b46a:	f000 feff 	bl	800c26c <__hi0bits>
 800b46e:	f1c0 0020 	rsb	r0, r0, #32
 800b472:	9b05      	ldr	r3, [sp, #20]
 800b474:	4418      	add	r0, r3
 800b476:	f010 001f 	ands.w	r0, r0, #31
 800b47a:	f000 8092 	beq.w	800b5a2 <_dtoa_r+0x90a>
 800b47e:	f1c0 0320 	rsb	r3, r0, #32
 800b482:	2b04      	cmp	r3, #4
 800b484:	f340 808a 	ble.w	800b59c <_dtoa_r+0x904>
 800b488:	f1c0 001c 	rsb	r0, r0, #28
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	4403      	add	r3, r0
 800b490:	9304      	str	r3, [sp, #16]
 800b492:	9b05      	ldr	r3, [sp, #20]
 800b494:	4403      	add	r3, r0
 800b496:	4405      	add	r5, r0
 800b498:	9305      	str	r3, [sp, #20]
 800b49a:	9b04      	ldr	r3, [sp, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	dd07      	ble.n	800b4b0 <_dtoa_r+0x818>
 800b4a0:	ee18 1a10 	vmov	r1, s16
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f001 f84a 	bl	800c540 <__lshift>
 800b4ac:	ee08 0a10 	vmov	s16, r0
 800b4b0:	9b05      	ldr	r3, [sp, #20]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	dd05      	ble.n	800b4c2 <_dtoa_r+0x82a>
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f001 f840 	bl	800c540 <__lshift>
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d06e      	beq.n	800b5a6 <_dtoa_r+0x90e>
 800b4c8:	ee18 0a10 	vmov	r0, s16
 800b4cc:	4631      	mov	r1, r6
 800b4ce:	f001 f8a7 	bl	800c620 <__mcmp>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	da67      	bge.n	800b5a6 <_dtoa_r+0x90e>
 800b4d6:	9b00      	ldr	r3, [sp, #0]
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	ee18 1a10 	vmov	r1, s16
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	220a      	movs	r2, #10
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f000 fe31 	bl	800c14c <__multadd>
 800b4ea:	9b08      	ldr	r3, [sp, #32]
 800b4ec:	ee08 0a10 	vmov	s16, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 81b1 	beq.w	800b858 <_dtoa_r+0xbc0>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	220a      	movs	r2, #10
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f000 fe25 	bl	800c14c <__multadd>
 800b502:	9b02      	ldr	r3, [sp, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	4607      	mov	r7, r0
 800b508:	f300 808e 	bgt.w	800b628 <_dtoa_r+0x990>
 800b50c:	9b06      	ldr	r3, [sp, #24]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	dc51      	bgt.n	800b5b6 <_dtoa_r+0x91e>
 800b512:	e089      	b.n	800b628 <_dtoa_r+0x990>
 800b514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b51a:	e74b      	b.n	800b3b4 <_dtoa_r+0x71c>
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	1e5e      	subs	r6, r3, #1
 800b520:	9b07      	ldr	r3, [sp, #28]
 800b522:	42b3      	cmp	r3, r6
 800b524:	bfbf      	itttt	lt
 800b526:	9b07      	ldrlt	r3, [sp, #28]
 800b528:	9607      	strlt	r6, [sp, #28]
 800b52a:	1af2      	sublt	r2, r6, r3
 800b52c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b52e:	bfb6      	itet	lt
 800b530:	189b      	addlt	r3, r3, r2
 800b532:	1b9e      	subge	r6, r3, r6
 800b534:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	bfb8      	it	lt
 800b53a:	2600      	movlt	r6, #0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	bfb7      	itett	lt
 800b540:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b544:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b548:	1a9d      	sublt	r5, r3, r2
 800b54a:	2300      	movlt	r3, #0
 800b54c:	e734      	b.n	800b3b8 <_dtoa_r+0x720>
 800b54e:	9e07      	ldr	r6, [sp, #28]
 800b550:	9d04      	ldr	r5, [sp, #16]
 800b552:	9f08      	ldr	r7, [sp, #32]
 800b554:	e73b      	b.n	800b3ce <_dtoa_r+0x736>
 800b556:	9a07      	ldr	r2, [sp, #28]
 800b558:	e767      	b.n	800b42a <_dtoa_r+0x792>
 800b55a:	9b06      	ldr	r3, [sp, #24]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	dc18      	bgt.n	800b592 <_dtoa_r+0x8fa>
 800b560:	f1ba 0f00 	cmp.w	sl, #0
 800b564:	d115      	bne.n	800b592 <_dtoa_r+0x8fa>
 800b566:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b56a:	b993      	cbnz	r3, 800b592 <_dtoa_r+0x8fa>
 800b56c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b570:	0d1b      	lsrs	r3, r3, #20
 800b572:	051b      	lsls	r3, r3, #20
 800b574:	b183      	cbz	r3, 800b598 <_dtoa_r+0x900>
 800b576:	9b04      	ldr	r3, [sp, #16]
 800b578:	3301      	adds	r3, #1
 800b57a:	9304      	str	r3, [sp, #16]
 800b57c:	9b05      	ldr	r3, [sp, #20]
 800b57e:	3301      	adds	r3, #1
 800b580:	9305      	str	r3, [sp, #20]
 800b582:	f04f 0801 	mov.w	r8, #1
 800b586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f47f af6a 	bne.w	800b462 <_dtoa_r+0x7ca>
 800b58e:	2001      	movs	r0, #1
 800b590:	e76f      	b.n	800b472 <_dtoa_r+0x7da>
 800b592:	f04f 0800 	mov.w	r8, #0
 800b596:	e7f6      	b.n	800b586 <_dtoa_r+0x8ee>
 800b598:	4698      	mov	r8, r3
 800b59a:	e7f4      	b.n	800b586 <_dtoa_r+0x8ee>
 800b59c:	f43f af7d 	beq.w	800b49a <_dtoa_r+0x802>
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	301c      	adds	r0, #28
 800b5a4:	e772      	b.n	800b48c <_dtoa_r+0x7f4>
 800b5a6:	9b03      	ldr	r3, [sp, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	dc37      	bgt.n	800b61c <_dtoa_r+0x984>
 800b5ac:	9b06      	ldr	r3, [sp, #24]
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	dd34      	ble.n	800b61c <_dtoa_r+0x984>
 800b5b2:	9b03      	ldr	r3, [sp, #12]
 800b5b4:	9302      	str	r3, [sp, #8]
 800b5b6:	9b02      	ldr	r3, [sp, #8]
 800b5b8:	b96b      	cbnz	r3, 800b5d6 <_dtoa_r+0x93e>
 800b5ba:	4631      	mov	r1, r6
 800b5bc:	2205      	movs	r2, #5
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f000 fdc4 	bl	800c14c <__multadd>
 800b5c4:	4601      	mov	r1, r0
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	ee18 0a10 	vmov	r0, s16
 800b5cc:	f001 f828 	bl	800c620 <__mcmp>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	f73f adbb 	bgt.w	800b14c <_dtoa_r+0x4b4>
 800b5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d8:	9d01      	ldr	r5, [sp, #4]
 800b5da:	43db      	mvns	r3, r3
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	f04f 0800 	mov.w	r8, #0
 800b5e2:	4631      	mov	r1, r6
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f000 fd8f 	bl	800c108 <_Bfree>
 800b5ea:	2f00      	cmp	r7, #0
 800b5ec:	f43f aea4 	beq.w	800b338 <_dtoa_r+0x6a0>
 800b5f0:	f1b8 0f00 	cmp.w	r8, #0
 800b5f4:	d005      	beq.n	800b602 <_dtoa_r+0x96a>
 800b5f6:	45b8      	cmp	r8, r7
 800b5f8:	d003      	beq.n	800b602 <_dtoa_r+0x96a>
 800b5fa:	4641      	mov	r1, r8
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f000 fd83 	bl	800c108 <_Bfree>
 800b602:	4639      	mov	r1, r7
 800b604:	4620      	mov	r0, r4
 800b606:	f000 fd7f 	bl	800c108 <_Bfree>
 800b60a:	e695      	b.n	800b338 <_dtoa_r+0x6a0>
 800b60c:	2600      	movs	r6, #0
 800b60e:	4637      	mov	r7, r6
 800b610:	e7e1      	b.n	800b5d6 <_dtoa_r+0x93e>
 800b612:	9700      	str	r7, [sp, #0]
 800b614:	4637      	mov	r7, r6
 800b616:	e599      	b.n	800b14c <_dtoa_r+0x4b4>
 800b618:	40240000 	.word	0x40240000
 800b61c:	9b08      	ldr	r3, [sp, #32]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 80ca 	beq.w	800b7b8 <_dtoa_r+0xb20>
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	9302      	str	r3, [sp, #8]
 800b628:	2d00      	cmp	r5, #0
 800b62a:	dd05      	ble.n	800b638 <_dtoa_r+0x9a0>
 800b62c:	4639      	mov	r1, r7
 800b62e:	462a      	mov	r2, r5
 800b630:	4620      	mov	r0, r4
 800b632:	f000 ff85 	bl	800c540 <__lshift>
 800b636:	4607      	mov	r7, r0
 800b638:	f1b8 0f00 	cmp.w	r8, #0
 800b63c:	d05b      	beq.n	800b6f6 <_dtoa_r+0xa5e>
 800b63e:	6879      	ldr	r1, [r7, #4]
 800b640:	4620      	mov	r0, r4
 800b642:	f000 fd21 	bl	800c088 <_Balloc>
 800b646:	4605      	mov	r5, r0
 800b648:	b928      	cbnz	r0, 800b656 <_dtoa_r+0x9be>
 800b64a:	4b87      	ldr	r3, [pc, #540]	; (800b868 <_dtoa_r+0xbd0>)
 800b64c:	4602      	mov	r2, r0
 800b64e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b652:	f7ff bb3b 	b.w	800accc <_dtoa_r+0x34>
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	3202      	adds	r2, #2
 800b65a:	0092      	lsls	r2, r2, #2
 800b65c:	f107 010c 	add.w	r1, r7, #12
 800b660:	300c      	adds	r0, #12
 800b662:	f7fd fd0b 	bl	800907c <memcpy>
 800b666:	2201      	movs	r2, #1
 800b668:	4629      	mov	r1, r5
 800b66a:	4620      	mov	r0, r4
 800b66c:	f000 ff68 	bl	800c540 <__lshift>
 800b670:	9b01      	ldr	r3, [sp, #4]
 800b672:	f103 0901 	add.w	r9, r3, #1
 800b676:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b67a:	4413      	add	r3, r2
 800b67c:	9305      	str	r3, [sp, #20]
 800b67e:	f00a 0301 	and.w	r3, sl, #1
 800b682:	46b8      	mov	r8, r7
 800b684:	9304      	str	r3, [sp, #16]
 800b686:	4607      	mov	r7, r0
 800b688:	4631      	mov	r1, r6
 800b68a:	ee18 0a10 	vmov	r0, s16
 800b68e:	f7ff fa77 	bl	800ab80 <quorem>
 800b692:	4641      	mov	r1, r8
 800b694:	9002      	str	r0, [sp, #8]
 800b696:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b69a:	ee18 0a10 	vmov	r0, s16
 800b69e:	f000 ffbf 	bl	800c620 <__mcmp>
 800b6a2:	463a      	mov	r2, r7
 800b6a4:	9003      	str	r0, [sp, #12]
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 ffd5 	bl	800c658 <__mdiff>
 800b6ae:	68c2      	ldr	r2, [r0, #12]
 800b6b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	bb02      	cbnz	r2, 800b6fa <_dtoa_r+0xa62>
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	ee18 0a10 	vmov	r0, s16
 800b6be:	f000 ffaf 	bl	800c620 <__mcmp>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	9207      	str	r2, [sp, #28]
 800b6ca:	f000 fd1d 	bl	800c108 <_Bfree>
 800b6ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b6d2:	ea43 0102 	orr.w	r1, r3, r2
 800b6d6:	9b04      	ldr	r3, [sp, #16]
 800b6d8:	430b      	orrs	r3, r1
 800b6da:	464d      	mov	r5, r9
 800b6dc:	d10f      	bne.n	800b6fe <_dtoa_r+0xa66>
 800b6de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6e2:	d02a      	beq.n	800b73a <_dtoa_r+0xaa2>
 800b6e4:	9b03      	ldr	r3, [sp, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	dd02      	ble.n	800b6f0 <_dtoa_r+0xa58>
 800b6ea:	9b02      	ldr	r3, [sp, #8]
 800b6ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b6f0:	f88b a000 	strb.w	sl, [fp]
 800b6f4:	e775      	b.n	800b5e2 <_dtoa_r+0x94a>
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	e7ba      	b.n	800b670 <_dtoa_r+0x9d8>
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	e7e2      	b.n	800b6c4 <_dtoa_r+0xa2c>
 800b6fe:	9b03      	ldr	r3, [sp, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	db04      	blt.n	800b70e <_dtoa_r+0xa76>
 800b704:	9906      	ldr	r1, [sp, #24]
 800b706:	430b      	orrs	r3, r1
 800b708:	9904      	ldr	r1, [sp, #16]
 800b70a:	430b      	orrs	r3, r1
 800b70c:	d122      	bne.n	800b754 <_dtoa_r+0xabc>
 800b70e:	2a00      	cmp	r2, #0
 800b710:	ddee      	ble.n	800b6f0 <_dtoa_r+0xa58>
 800b712:	ee18 1a10 	vmov	r1, s16
 800b716:	2201      	movs	r2, #1
 800b718:	4620      	mov	r0, r4
 800b71a:	f000 ff11 	bl	800c540 <__lshift>
 800b71e:	4631      	mov	r1, r6
 800b720:	ee08 0a10 	vmov	s16, r0
 800b724:	f000 ff7c 	bl	800c620 <__mcmp>
 800b728:	2800      	cmp	r0, #0
 800b72a:	dc03      	bgt.n	800b734 <_dtoa_r+0xa9c>
 800b72c:	d1e0      	bne.n	800b6f0 <_dtoa_r+0xa58>
 800b72e:	f01a 0f01 	tst.w	sl, #1
 800b732:	d0dd      	beq.n	800b6f0 <_dtoa_r+0xa58>
 800b734:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b738:	d1d7      	bne.n	800b6ea <_dtoa_r+0xa52>
 800b73a:	2339      	movs	r3, #57	; 0x39
 800b73c:	f88b 3000 	strb.w	r3, [fp]
 800b740:	462b      	mov	r3, r5
 800b742:	461d      	mov	r5, r3
 800b744:	3b01      	subs	r3, #1
 800b746:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b74a:	2a39      	cmp	r2, #57	; 0x39
 800b74c:	d071      	beq.n	800b832 <_dtoa_r+0xb9a>
 800b74e:	3201      	adds	r2, #1
 800b750:	701a      	strb	r2, [r3, #0]
 800b752:	e746      	b.n	800b5e2 <_dtoa_r+0x94a>
 800b754:	2a00      	cmp	r2, #0
 800b756:	dd07      	ble.n	800b768 <_dtoa_r+0xad0>
 800b758:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b75c:	d0ed      	beq.n	800b73a <_dtoa_r+0xaa2>
 800b75e:	f10a 0301 	add.w	r3, sl, #1
 800b762:	f88b 3000 	strb.w	r3, [fp]
 800b766:	e73c      	b.n	800b5e2 <_dtoa_r+0x94a>
 800b768:	9b05      	ldr	r3, [sp, #20]
 800b76a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b76e:	4599      	cmp	r9, r3
 800b770:	d047      	beq.n	800b802 <_dtoa_r+0xb6a>
 800b772:	ee18 1a10 	vmov	r1, s16
 800b776:	2300      	movs	r3, #0
 800b778:	220a      	movs	r2, #10
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 fce6 	bl	800c14c <__multadd>
 800b780:	45b8      	cmp	r8, r7
 800b782:	ee08 0a10 	vmov	s16, r0
 800b786:	f04f 0300 	mov.w	r3, #0
 800b78a:	f04f 020a 	mov.w	r2, #10
 800b78e:	4641      	mov	r1, r8
 800b790:	4620      	mov	r0, r4
 800b792:	d106      	bne.n	800b7a2 <_dtoa_r+0xb0a>
 800b794:	f000 fcda 	bl	800c14c <__multadd>
 800b798:	4680      	mov	r8, r0
 800b79a:	4607      	mov	r7, r0
 800b79c:	f109 0901 	add.w	r9, r9, #1
 800b7a0:	e772      	b.n	800b688 <_dtoa_r+0x9f0>
 800b7a2:	f000 fcd3 	bl	800c14c <__multadd>
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	4680      	mov	r8, r0
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	220a      	movs	r2, #10
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f000 fccc 	bl	800c14c <__multadd>
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	e7f1      	b.n	800b79c <_dtoa_r+0xb04>
 800b7b8:	9b03      	ldr	r3, [sp, #12]
 800b7ba:	9302      	str	r3, [sp, #8]
 800b7bc:	9d01      	ldr	r5, [sp, #4]
 800b7be:	ee18 0a10 	vmov	r0, s16
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	f7ff f9dc 	bl	800ab80 <quorem>
 800b7c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7cc:	9b01      	ldr	r3, [sp, #4]
 800b7ce:	f805 ab01 	strb.w	sl, [r5], #1
 800b7d2:	1aea      	subs	r2, r5, r3
 800b7d4:	9b02      	ldr	r3, [sp, #8]
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	dd09      	ble.n	800b7ee <_dtoa_r+0xb56>
 800b7da:	ee18 1a10 	vmov	r1, s16
 800b7de:	2300      	movs	r3, #0
 800b7e0:	220a      	movs	r2, #10
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fcb2 	bl	800c14c <__multadd>
 800b7e8:	ee08 0a10 	vmov	s16, r0
 800b7ec:	e7e7      	b.n	800b7be <_dtoa_r+0xb26>
 800b7ee:	9b02      	ldr	r3, [sp, #8]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	bfc8      	it	gt
 800b7f4:	461d      	movgt	r5, r3
 800b7f6:	9b01      	ldr	r3, [sp, #4]
 800b7f8:	bfd8      	it	le
 800b7fa:	2501      	movle	r5, #1
 800b7fc:	441d      	add	r5, r3
 800b7fe:	f04f 0800 	mov.w	r8, #0
 800b802:	ee18 1a10 	vmov	r1, s16
 800b806:	2201      	movs	r2, #1
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 fe99 	bl	800c540 <__lshift>
 800b80e:	4631      	mov	r1, r6
 800b810:	ee08 0a10 	vmov	s16, r0
 800b814:	f000 ff04 	bl	800c620 <__mcmp>
 800b818:	2800      	cmp	r0, #0
 800b81a:	dc91      	bgt.n	800b740 <_dtoa_r+0xaa8>
 800b81c:	d102      	bne.n	800b824 <_dtoa_r+0xb8c>
 800b81e:	f01a 0f01 	tst.w	sl, #1
 800b822:	d18d      	bne.n	800b740 <_dtoa_r+0xaa8>
 800b824:	462b      	mov	r3, r5
 800b826:	461d      	mov	r5, r3
 800b828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b82c:	2a30      	cmp	r2, #48	; 0x30
 800b82e:	d0fa      	beq.n	800b826 <_dtoa_r+0xb8e>
 800b830:	e6d7      	b.n	800b5e2 <_dtoa_r+0x94a>
 800b832:	9a01      	ldr	r2, [sp, #4]
 800b834:	429a      	cmp	r2, r3
 800b836:	d184      	bne.n	800b742 <_dtoa_r+0xaaa>
 800b838:	9b00      	ldr	r3, [sp, #0]
 800b83a:	3301      	adds	r3, #1
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	2331      	movs	r3, #49	; 0x31
 800b840:	7013      	strb	r3, [r2, #0]
 800b842:	e6ce      	b.n	800b5e2 <_dtoa_r+0x94a>
 800b844:	4b09      	ldr	r3, [pc, #36]	; (800b86c <_dtoa_r+0xbd4>)
 800b846:	f7ff ba95 	b.w	800ad74 <_dtoa_r+0xdc>
 800b84a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f47f aa6e 	bne.w	800ad2e <_dtoa_r+0x96>
 800b852:	4b07      	ldr	r3, [pc, #28]	; (800b870 <_dtoa_r+0xbd8>)
 800b854:	f7ff ba8e 	b.w	800ad74 <_dtoa_r+0xdc>
 800b858:	9b02      	ldr	r3, [sp, #8]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	dcae      	bgt.n	800b7bc <_dtoa_r+0xb24>
 800b85e:	9b06      	ldr	r3, [sp, #24]
 800b860:	2b02      	cmp	r3, #2
 800b862:	f73f aea8 	bgt.w	800b5b6 <_dtoa_r+0x91e>
 800b866:	e7a9      	b.n	800b7bc <_dtoa_r+0xb24>
 800b868:	0800d87f 	.word	0x0800d87f
 800b86c:	0800d788 	.word	0x0800d788
 800b870:	0800d800 	.word	0x0800d800

0800b874 <rshift>:
 800b874:	6903      	ldr	r3, [r0, #16]
 800b876:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b87a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b87e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b882:	f100 0414 	add.w	r4, r0, #20
 800b886:	dd45      	ble.n	800b914 <rshift+0xa0>
 800b888:	f011 011f 	ands.w	r1, r1, #31
 800b88c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b890:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b894:	d10c      	bne.n	800b8b0 <rshift+0x3c>
 800b896:	f100 0710 	add.w	r7, r0, #16
 800b89a:	4629      	mov	r1, r5
 800b89c:	42b1      	cmp	r1, r6
 800b89e:	d334      	bcc.n	800b90a <rshift+0x96>
 800b8a0:	1a9b      	subs	r3, r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	1eea      	subs	r2, r5, #3
 800b8a6:	4296      	cmp	r6, r2
 800b8a8:	bf38      	it	cc
 800b8aa:	2300      	movcc	r3, #0
 800b8ac:	4423      	add	r3, r4
 800b8ae:	e015      	b.n	800b8dc <rshift+0x68>
 800b8b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b8b4:	f1c1 0820 	rsb	r8, r1, #32
 800b8b8:	40cf      	lsrs	r7, r1
 800b8ba:	f105 0e04 	add.w	lr, r5, #4
 800b8be:	46a1      	mov	r9, r4
 800b8c0:	4576      	cmp	r6, lr
 800b8c2:	46f4      	mov	ip, lr
 800b8c4:	d815      	bhi.n	800b8f2 <rshift+0x7e>
 800b8c6:	1a9a      	subs	r2, r3, r2
 800b8c8:	0092      	lsls	r2, r2, #2
 800b8ca:	3a04      	subs	r2, #4
 800b8cc:	3501      	adds	r5, #1
 800b8ce:	42ae      	cmp	r6, r5
 800b8d0:	bf38      	it	cc
 800b8d2:	2200      	movcc	r2, #0
 800b8d4:	18a3      	adds	r3, r4, r2
 800b8d6:	50a7      	str	r7, [r4, r2]
 800b8d8:	b107      	cbz	r7, 800b8dc <rshift+0x68>
 800b8da:	3304      	adds	r3, #4
 800b8dc:	1b1a      	subs	r2, r3, r4
 800b8de:	42a3      	cmp	r3, r4
 800b8e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b8e4:	bf08      	it	eq
 800b8e6:	2300      	moveq	r3, #0
 800b8e8:	6102      	str	r2, [r0, #16]
 800b8ea:	bf08      	it	eq
 800b8ec:	6143      	streq	r3, [r0, #20]
 800b8ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8f2:	f8dc c000 	ldr.w	ip, [ip]
 800b8f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b8fa:	ea4c 0707 	orr.w	r7, ip, r7
 800b8fe:	f849 7b04 	str.w	r7, [r9], #4
 800b902:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b906:	40cf      	lsrs	r7, r1
 800b908:	e7da      	b.n	800b8c0 <rshift+0x4c>
 800b90a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b90e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b912:	e7c3      	b.n	800b89c <rshift+0x28>
 800b914:	4623      	mov	r3, r4
 800b916:	e7e1      	b.n	800b8dc <rshift+0x68>

0800b918 <__hexdig_fun>:
 800b918:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b91c:	2b09      	cmp	r3, #9
 800b91e:	d802      	bhi.n	800b926 <__hexdig_fun+0xe>
 800b920:	3820      	subs	r0, #32
 800b922:	b2c0      	uxtb	r0, r0
 800b924:	4770      	bx	lr
 800b926:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b92a:	2b05      	cmp	r3, #5
 800b92c:	d801      	bhi.n	800b932 <__hexdig_fun+0x1a>
 800b92e:	3847      	subs	r0, #71	; 0x47
 800b930:	e7f7      	b.n	800b922 <__hexdig_fun+0xa>
 800b932:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b936:	2b05      	cmp	r3, #5
 800b938:	d801      	bhi.n	800b93e <__hexdig_fun+0x26>
 800b93a:	3827      	subs	r0, #39	; 0x27
 800b93c:	e7f1      	b.n	800b922 <__hexdig_fun+0xa>
 800b93e:	2000      	movs	r0, #0
 800b940:	4770      	bx	lr
	...

0800b944 <__gethex>:
 800b944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	ed2d 8b02 	vpush	{d8}
 800b94c:	b089      	sub	sp, #36	; 0x24
 800b94e:	ee08 0a10 	vmov	s16, r0
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	4bb4      	ldr	r3, [pc, #720]	; (800bc28 <__gethex+0x2e4>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	9301      	str	r3, [sp, #4]
 800b95a:	4618      	mov	r0, r3
 800b95c:	468b      	mov	fp, r1
 800b95e:	4690      	mov	r8, r2
 800b960:	f7f4 fc48 	bl	80001f4 <strlen>
 800b964:	9b01      	ldr	r3, [sp, #4]
 800b966:	f8db 2000 	ldr.w	r2, [fp]
 800b96a:	4403      	add	r3, r0
 800b96c:	4682      	mov	sl, r0
 800b96e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b972:	9305      	str	r3, [sp, #20]
 800b974:	1c93      	adds	r3, r2, #2
 800b976:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b97a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b97e:	32fe      	adds	r2, #254	; 0xfe
 800b980:	18d1      	adds	r1, r2, r3
 800b982:	461f      	mov	r7, r3
 800b984:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b988:	9100      	str	r1, [sp, #0]
 800b98a:	2830      	cmp	r0, #48	; 0x30
 800b98c:	d0f8      	beq.n	800b980 <__gethex+0x3c>
 800b98e:	f7ff ffc3 	bl	800b918 <__hexdig_fun>
 800b992:	4604      	mov	r4, r0
 800b994:	2800      	cmp	r0, #0
 800b996:	d13a      	bne.n	800ba0e <__gethex+0xca>
 800b998:	9901      	ldr	r1, [sp, #4]
 800b99a:	4652      	mov	r2, sl
 800b99c:	4638      	mov	r0, r7
 800b99e:	f7fe f9cb 	bl	8009d38 <strncmp>
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d168      	bne.n	800ba7a <__gethex+0x136>
 800b9a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b9ac:	eb07 060a 	add.w	r6, r7, sl
 800b9b0:	f7ff ffb2 	bl	800b918 <__hexdig_fun>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d062      	beq.n	800ba7e <__gethex+0x13a>
 800b9b8:	4633      	mov	r3, r6
 800b9ba:	7818      	ldrb	r0, [r3, #0]
 800b9bc:	2830      	cmp	r0, #48	; 0x30
 800b9be:	461f      	mov	r7, r3
 800b9c0:	f103 0301 	add.w	r3, r3, #1
 800b9c4:	d0f9      	beq.n	800b9ba <__gethex+0x76>
 800b9c6:	f7ff ffa7 	bl	800b918 <__hexdig_fun>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	fab0 f480 	clz	r4, r0
 800b9d0:	0964      	lsrs	r4, r4, #5
 800b9d2:	4635      	mov	r5, r6
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	463a      	mov	r2, r7
 800b9d8:	4616      	mov	r6, r2
 800b9da:	3201      	adds	r2, #1
 800b9dc:	7830      	ldrb	r0, [r6, #0]
 800b9de:	f7ff ff9b 	bl	800b918 <__hexdig_fun>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d1f8      	bne.n	800b9d8 <__gethex+0x94>
 800b9e6:	9901      	ldr	r1, [sp, #4]
 800b9e8:	4652      	mov	r2, sl
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7fe f9a4 	bl	8009d38 <strncmp>
 800b9f0:	b980      	cbnz	r0, 800ba14 <__gethex+0xd0>
 800b9f2:	b94d      	cbnz	r5, 800ba08 <__gethex+0xc4>
 800b9f4:	eb06 050a 	add.w	r5, r6, sl
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	4616      	mov	r6, r2
 800b9fc:	3201      	adds	r2, #1
 800b9fe:	7830      	ldrb	r0, [r6, #0]
 800ba00:	f7ff ff8a 	bl	800b918 <__hexdig_fun>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d1f8      	bne.n	800b9fa <__gethex+0xb6>
 800ba08:	1bad      	subs	r5, r5, r6
 800ba0a:	00ad      	lsls	r5, r5, #2
 800ba0c:	e004      	b.n	800ba18 <__gethex+0xd4>
 800ba0e:	2400      	movs	r4, #0
 800ba10:	4625      	mov	r5, r4
 800ba12:	e7e0      	b.n	800b9d6 <__gethex+0x92>
 800ba14:	2d00      	cmp	r5, #0
 800ba16:	d1f7      	bne.n	800ba08 <__gethex+0xc4>
 800ba18:	7833      	ldrb	r3, [r6, #0]
 800ba1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba1e:	2b50      	cmp	r3, #80	; 0x50
 800ba20:	d13b      	bne.n	800ba9a <__gethex+0x156>
 800ba22:	7873      	ldrb	r3, [r6, #1]
 800ba24:	2b2b      	cmp	r3, #43	; 0x2b
 800ba26:	d02c      	beq.n	800ba82 <__gethex+0x13e>
 800ba28:	2b2d      	cmp	r3, #45	; 0x2d
 800ba2a:	d02e      	beq.n	800ba8a <__gethex+0x146>
 800ba2c:	1c71      	adds	r1, r6, #1
 800ba2e:	f04f 0900 	mov.w	r9, #0
 800ba32:	7808      	ldrb	r0, [r1, #0]
 800ba34:	f7ff ff70 	bl	800b918 <__hexdig_fun>
 800ba38:	1e43      	subs	r3, r0, #1
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b18      	cmp	r3, #24
 800ba3e:	d82c      	bhi.n	800ba9a <__gethex+0x156>
 800ba40:	f1a0 0210 	sub.w	r2, r0, #16
 800ba44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba48:	f7ff ff66 	bl	800b918 <__hexdig_fun>
 800ba4c:	1e43      	subs	r3, r0, #1
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b18      	cmp	r3, #24
 800ba52:	d91d      	bls.n	800ba90 <__gethex+0x14c>
 800ba54:	f1b9 0f00 	cmp.w	r9, #0
 800ba58:	d000      	beq.n	800ba5c <__gethex+0x118>
 800ba5a:	4252      	negs	r2, r2
 800ba5c:	4415      	add	r5, r2
 800ba5e:	f8cb 1000 	str.w	r1, [fp]
 800ba62:	b1e4      	cbz	r4, 800ba9e <__gethex+0x15a>
 800ba64:	9b00      	ldr	r3, [sp, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	bf14      	ite	ne
 800ba6a:	2700      	movne	r7, #0
 800ba6c:	2706      	moveq	r7, #6
 800ba6e:	4638      	mov	r0, r7
 800ba70:	b009      	add	sp, #36	; 0x24
 800ba72:	ecbd 8b02 	vpop	{d8}
 800ba76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7a:	463e      	mov	r6, r7
 800ba7c:	4625      	mov	r5, r4
 800ba7e:	2401      	movs	r4, #1
 800ba80:	e7ca      	b.n	800ba18 <__gethex+0xd4>
 800ba82:	f04f 0900 	mov.w	r9, #0
 800ba86:	1cb1      	adds	r1, r6, #2
 800ba88:	e7d3      	b.n	800ba32 <__gethex+0xee>
 800ba8a:	f04f 0901 	mov.w	r9, #1
 800ba8e:	e7fa      	b.n	800ba86 <__gethex+0x142>
 800ba90:	230a      	movs	r3, #10
 800ba92:	fb03 0202 	mla	r2, r3, r2, r0
 800ba96:	3a10      	subs	r2, #16
 800ba98:	e7d4      	b.n	800ba44 <__gethex+0x100>
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	e7df      	b.n	800ba5e <__gethex+0x11a>
 800ba9e:	1bf3      	subs	r3, r6, r7
 800baa0:	3b01      	subs	r3, #1
 800baa2:	4621      	mov	r1, r4
 800baa4:	2b07      	cmp	r3, #7
 800baa6:	dc0b      	bgt.n	800bac0 <__gethex+0x17c>
 800baa8:	ee18 0a10 	vmov	r0, s16
 800baac:	f000 faec 	bl	800c088 <_Balloc>
 800bab0:	4604      	mov	r4, r0
 800bab2:	b940      	cbnz	r0, 800bac6 <__gethex+0x182>
 800bab4:	4b5d      	ldr	r3, [pc, #372]	; (800bc2c <__gethex+0x2e8>)
 800bab6:	4602      	mov	r2, r0
 800bab8:	21de      	movs	r1, #222	; 0xde
 800baba:	485d      	ldr	r0, [pc, #372]	; (800bc30 <__gethex+0x2ec>)
 800babc:	f001 fad0 	bl	800d060 <__assert_func>
 800bac0:	3101      	adds	r1, #1
 800bac2:	105b      	asrs	r3, r3, #1
 800bac4:	e7ee      	b.n	800baa4 <__gethex+0x160>
 800bac6:	f100 0914 	add.w	r9, r0, #20
 800baca:	f04f 0b00 	mov.w	fp, #0
 800bace:	f1ca 0301 	rsb	r3, sl, #1
 800bad2:	f8cd 9008 	str.w	r9, [sp, #8]
 800bad6:	f8cd b000 	str.w	fp, [sp]
 800bada:	9306      	str	r3, [sp, #24]
 800badc:	42b7      	cmp	r7, r6
 800bade:	d340      	bcc.n	800bb62 <__gethex+0x21e>
 800bae0:	9802      	ldr	r0, [sp, #8]
 800bae2:	9b00      	ldr	r3, [sp, #0]
 800bae4:	f840 3b04 	str.w	r3, [r0], #4
 800bae8:	eba0 0009 	sub.w	r0, r0, r9
 800baec:	1080      	asrs	r0, r0, #2
 800baee:	0146      	lsls	r6, r0, #5
 800baf0:	6120      	str	r0, [r4, #16]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 fbba 	bl	800c26c <__hi0bits>
 800baf8:	1a30      	subs	r0, r6, r0
 800bafa:	f8d8 6000 	ldr.w	r6, [r8]
 800bafe:	42b0      	cmp	r0, r6
 800bb00:	dd63      	ble.n	800bbca <__gethex+0x286>
 800bb02:	1b87      	subs	r7, r0, r6
 800bb04:	4639      	mov	r1, r7
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 ff5e 	bl	800c9c8 <__any_on>
 800bb0c:	4682      	mov	sl, r0
 800bb0e:	b1a8      	cbz	r0, 800bb3c <__gethex+0x1f8>
 800bb10:	1e7b      	subs	r3, r7, #1
 800bb12:	1159      	asrs	r1, r3, #5
 800bb14:	f003 021f 	and.w	r2, r3, #31
 800bb18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bb1c:	f04f 0a01 	mov.w	sl, #1
 800bb20:	fa0a f202 	lsl.w	r2, sl, r2
 800bb24:	420a      	tst	r2, r1
 800bb26:	d009      	beq.n	800bb3c <__gethex+0x1f8>
 800bb28:	4553      	cmp	r3, sl
 800bb2a:	dd05      	ble.n	800bb38 <__gethex+0x1f4>
 800bb2c:	1eb9      	subs	r1, r7, #2
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f000 ff4a 	bl	800c9c8 <__any_on>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d145      	bne.n	800bbc4 <__gethex+0x280>
 800bb38:	f04f 0a02 	mov.w	sl, #2
 800bb3c:	4639      	mov	r1, r7
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f7ff fe98 	bl	800b874 <rshift>
 800bb44:	443d      	add	r5, r7
 800bb46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb4a:	42ab      	cmp	r3, r5
 800bb4c:	da4c      	bge.n	800bbe8 <__gethex+0x2a4>
 800bb4e:	ee18 0a10 	vmov	r0, s16
 800bb52:	4621      	mov	r1, r4
 800bb54:	f000 fad8 	bl	800c108 <_Bfree>
 800bb58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	6013      	str	r3, [r2, #0]
 800bb5e:	27a3      	movs	r7, #163	; 0xa3
 800bb60:	e785      	b.n	800ba6e <__gethex+0x12a>
 800bb62:	1e73      	subs	r3, r6, #1
 800bb64:	9a05      	ldr	r2, [sp, #20]
 800bb66:	9303      	str	r3, [sp, #12]
 800bb68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d019      	beq.n	800bba4 <__gethex+0x260>
 800bb70:	f1bb 0f20 	cmp.w	fp, #32
 800bb74:	d107      	bne.n	800bb86 <__gethex+0x242>
 800bb76:	9b02      	ldr	r3, [sp, #8]
 800bb78:	9a00      	ldr	r2, [sp, #0]
 800bb7a:	f843 2b04 	str.w	r2, [r3], #4
 800bb7e:	9302      	str	r3, [sp, #8]
 800bb80:	2300      	movs	r3, #0
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	469b      	mov	fp, r3
 800bb86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bb8a:	f7ff fec5 	bl	800b918 <__hexdig_fun>
 800bb8e:	9b00      	ldr	r3, [sp, #0]
 800bb90:	f000 000f 	and.w	r0, r0, #15
 800bb94:	fa00 f00b 	lsl.w	r0, r0, fp
 800bb98:	4303      	orrs	r3, r0
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	f10b 0b04 	add.w	fp, fp, #4
 800bba0:	9b03      	ldr	r3, [sp, #12]
 800bba2:	e00d      	b.n	800bbc0 <__gethex+0x27c>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	9a06      	ldr	r2, [sp, #24]
 800bba8:	4413      	add	r3, r2
 800bbaa:	42bb      	cmp	r3, r7
 800bbac:	d3e0      	bcc.n	800bb70 <__gethex+0x22c>
 800bbae:	4618      	mov	r0, r3
 800bbb0:	9901      	ldr	r1, [sp, #4]
 800bbb2:	9307      	str	r3, [sp, #28]
 800bbb4:	4652      	mov	r2, sl
 800bbb6:	f7fe f8bf 	bl	8009d38 <strncmp>
 800bbba:	9b07      	ldr	r3, [sp, #28]
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d1d7      	bne.n	800bb70 <__gethex+0x22c>
 800bbc0:	461e      	mov	r6, r3
 800bbc2:	e78b      	b.n	800badc <__gethex+0x198>
 800bbc4:	f04f 0a03 	mov.w	sl, #3
 800bbc8:	e7b8      	b.n	800bb3c <__gethex+0x1f8>
 800bbca:	da0a      	bge.n	800bbe2 <__gethex+0x29e>
 800bbcc:	1a37      	subs	r7, r6, r0
 800bbce:	4621      	mov	r1, r4
 800bbd0:	ee18 0a10 	vmov	r0, s16
 800bbd4:	463a      	mov	r2, r7
 800bbd6:	f000 fcb3 	bl	800c540 <__lshift>
 800bbda:	1bed      	subs	r5, r5, r7
 800bbdc:	4604      	mov	r4, r0
 800bbde:	f100 0914 	add.w	r9, r0, #20
 800bbe2:	f04f 0a00 	mov.w	sl, #0
 800bbe6:	e7ae      	b.n	800bb46 <__gethex+0x202>
 800bbe8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bbec:	42a8      	cmp	r0, r5
 800bbee:	dd72      	ble.n	800bcd6 <__gethex+0x392>
 800bbf0:	1b45      	subs	r5, r0, r5
 800bbf2:	42ae      	cmp	r6, r5
 800bbf4:	dc36      	bgt.n	800bc64 <__gethex+0x320>
 800bbf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d02a      	beq.n	800bc54 <__gethex+0x310>
 800bbfe:	2b03      	cmp	r3, #3
 800bc00:	d02c      	beq.n	800bc5c <__gethex+0x318>
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d11c      	bne.n	800bc40 <__gethex+0x2fc>
 800bc06:	42ae      	cmp	r6, r5
 800bc08:	d11a      	bne.n	800bc40 <__gethex+0x2fc>
 800bc0a:	2e01      	cmp	r6, #1
 800bc0c:	d112      	bne.n	800bc34 <__gethex+0x2f0>
 800bc0e:	9a04      	ldr	r2, [sp, #16]
 800bc10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc14:	6013      	str	r3, [r2, #0]
 800bc16:	2301      	movs	r3, #1
 800bc18:	6123      	str	r3, [r4, #16]
 800bc1a:	f8c9 3000 	str.w	r3, [r9]
 800bc1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc20:	2762      	movs	r7, #98	; 0x62
 800bc22:	601c      	str	r4, [r3, #0]
 800bc24:	e723      	b.n	800ba6e <__gethex+0x12a>
 800bc26:	bf00      	nop
 800bc28:	0800d8f8 	.word	0x0800d8f8
 800bc2c:	0800d87f 	.word	0x0800d87f
 800bc30:	0800d890 	.word	0x0800d890
 800bc34:	1e71      	subs	r1, r6, #1
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 fec6 	bl	800c9c8 <__any_on>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d1e6      	bne.n	800bc0e <__gethex+0x2ca>
 800bc40:	ee18 0a10 	vmov	r0, s16
 800bc44:	4621      	mov	r1, r4
 800bc46:	f000 fa5f 	bl	800c108 <_Bfree>
 800bc4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	2750      	movs	r7, #80	; 0x50
 800bc52:	e70c      	b.n	800ba6e <__gethex+0x12a>
 800bc54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1f2      	bne.n	800bc40 <__gethex+0x2fc>
 800bc5a:	e7d8      	b.n	800bc0e <__gethex+0x2ca>
 800bc5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1d5      	bne.n	800bc0e <__gethex+0x2ca>
 800bc62:	e7ed      	b.n	800bc40 <__gethex+0x2fc>
 800bc64:	1e6f      	subs	r7, r5, #1
 800bc66:	f1ba 0f00 	cmp.w	sl, #0
 800bc6a:	d131      	bne.n	800bcd0 <__gethex+0x38c>
 800bc6c:	b127      	cbz	r7, 800bc78 <__gethex+0x334>
 800bc6e:	4639      	mov	r1, r7
 800bc70:	4620      	mov	r0, r4
 800bc72:	f000 fea9 	bl	800c9c8 <__any_on>
 800bc76:	4682      	mov	sl, r0
 800bc78:	117b      	asrs	r3, r7, #5
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bc80:	f007 071f 	and.w	r7, r7, #31
 800bc84:	fa01 f707 	lsl.w	r7, r1, r7
 800bc88:	421f      	tst	r7, r3
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	bf18      	it	ne
 800bc90:	f04a 0a02 	orrne.w	sl, sl, #2
 800bc94:	1b76      	subs	r6, r6, r5
 800bc96:	f7ff fded 	bl	800b874 <rshift>
 800bc9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bc9e:	2702      	movs	r7, #2
 800bca0:	f1ba 0f00 	cmp.w	sl, #0
 800bca4:	d048      	beq.n	800bd38 <__gethex+0x3f4>
 800bca6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d015      	beq.n	800bcda <__gethex+0x396>
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d017      	beq.n	800bce2 <__gethex+0x39e>
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d109      	bne.n	800bcca <__gethex+0x386>
 800bcb6:	f01a 0f02 	tst.w	sl, #2
 800bcba:	d006      	beq.n	800bcca <__gethex+0x386>
 800bcbc:	f8d9 0000 	ldr.w	r0, [r9]
 800bcc0:	ea4a 0a00 	orr.w	sl, sl, r0
 800bcc4:	f01a 0f01 	tst.w	sl, #1
 800bcc8:	d10e      	bne.n	800bce8 <__gethex+0x3a4>
 800bcca:	f047 0710 	orr.w	r7, r7, #16
 800bcce:	e033      	b.n	800bd38 <__gethex+0x3f4>
 800bcd0:	f04f 0a01 	mov.w	sl, #1
 800bcd4:	e7d0      	b.n	800bc78 <__gethex+0x334>
 800bcd6:	2701      	movs	r7, #1
 800bcd8:	e7e2      	b.n	800bca0 <__gethex+0x35c>
 800bcda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcdc:	f1c3 0301 	rsb	r3, r3, #1
 800bce0:	9315      	str	r3, [sp, #84]	; 0x54
 800bce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d0f0      	beq.n	800bcca <__gethex+0x386>
 800bce8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bcec:	f104 0314 	add.w	r3, r4, #20
 800bcf0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bcf4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bcf8:	f04f 0c00 	mov.w	ip, #0
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd02:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bd06:	d01c      	beq.n	800bd42 <__gethex+0x3fe>
 800bd08:	3201      	adds	r2, #1
 800bd0a:	6002      	str	r2, [r0, #0]
 800bd0c:	2f02      	cmp	r7, #2
 800bd0e:	f104 0314 	add.w	r3, r4, #20
 800bd12:	d13f      	bne.n	800bd94 <__gethex+0x450>
 800bd14:	f8d8 2000 	ldr.w	r2, [r8]
 800bd18:	3a01      	subs	r2, #1
 800bd1a:	42b2      	cmp	r2, r6
 800bd1c:	d10a      	bne.n	800bd34 <__gethex+0x3f0>
 800bd1e:	1171      	asrs	r1, r6, #5
 800bd20:	2201      	movs	r2, #1
 800bd22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd26:	f006 061f 	and.w	r6, r6, #31
 800bd2a:	fa02 f606 	lsl.w	r6, r2, r6
 800bd2e:	421e      	tst	r6, r3
 800bd30:	bf18      	it	ne
 800bd32:	4617      	movne	r7, r2
 800bd34:	f047 0720 	orr.w	r7, r7, #32
 800bd38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd3a:	601c      	str	r4, [r3, #0]
 800bd3c:	9b04      	ldr	r3, [sp, #16]
 800bd3e:	601d      	str	r5, [r3, #0]
 800bd40:	e695      	b.n	800ba6e <__gethex+0x12a>
 800bd42:	4299      	cmp	r1, r3
 800bd44:	f843 cc04 	str.w	ip, [r3, #-4]
 800bd48:	d8d8      	bhi.n	800bcfc <__gethex+0x3b8>
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	459b      	cmp	fp, r3
 800bd4e:	db19      	blt.n	800bd84 <__gethex+0x440>
 800bd50:	6861      	ldr	r1, [r4, #4]
 800bd52:	ee18 0a10 	vmov	r0, s16
 800bd56:	3101      	adds	r1, #1
 800bd58:	f000 f996 	bl	800c088 <_Balloc>
 800bd5c:	4681      	mov	r9, r0
 800bd5e:	b918      	cbnz	r0, 800bd68 <__gethex+0x424>
 800bd60:	4b1a      	ldr	r3, [pc, #104]	; (800bdcc <__gethex+0x488>)
 800bd62:	4602      	mov	r2, r0
 800bd64:	2184      	movs	r1, #132	; 0x84
 800bd66:	e6a8      	b.n	800baba <__gethex+0x176>
 800bd68:	6922      	ldr	r2, [r4, #16]
 800bd6a:	3202      	adds	r2, #2
 800bd6c:	f104 010c 	add.w	r1, r4, #12
 800bd70:	0092      	lsls	r2, r2, #2
 800bd72:	300c      	adds	r0, #12
 800bd74:	f7fd f982 	bl	800907c <memcpy>
 800bd78:	4621      	mov	r1, r4
 800bd7a:	ee18 0a10 	vmov	r0, s16
 800bd7e:	f000 f9c3 	bl	800c108 <_Bfree>
 800bd82:	464c      	mov	r4, r9
 800bd84:	6923      	ldr	r3, [r4, #16]
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd8c:	6122      	str	r2, [r4, #16]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	615a      	str	r2, [r3, #20]
 800bd92:	e7bb      	b.n	800bd0c <__gethex+0x3c8>
 800bd94:	6922      	ldr	r2, [r4, #16]
 800bd96:	455a      	cmp	r2, fp
 800bd98:	dd0b      	ble.n	800bdb2 <__gethex+0x46e>
 800bd9a:	2101      	movs	r1, #1
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f7ff fd69 	bl	800b874 <rshift>
 800bda2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bda6:	3501      	adds	r5, #1
 800bda8:	42ab      	cmp	r3, r5
 800bdaa:	f6ff aed0 	blt.w	800bb4e <__gethex+0x20a>
 800bdae:	2701      	movs	r7, #1
 800bdb0:	e7c0      	b.n	800bd34 <__gethex+0x3f0>
 800bdb2:	f016 061f 	ands.w	r6, r6, #31
 800bdb6:	d0fa      	beq.n	800bdae <__gethex+0x46a>
 800bdb8:	4453      	add	r3, sl
 800bdba:	f1c6 0620 	rsb	r6, r6, #32
 800bdbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bdc2:	f000 fa53 	bl	800c26c <__hi0bits>
 800bdc6:	42b0      	cmp	r0, r6
 800bdc8:	dbe7      	blt.n	800bd9a <__gethex+0x456>
 800bdca:	e7f0      	b.n	800bdae <__gethex+0x46a>
 800bdcc:	0800d87f 	.word	0x0800d87f

0800bdd0 <L_shift>:
 800bdd0:	f1c2 0208 	rsb	r2, r2, #8
 800bdd4:	0092      	lsls	r2, r2, #2
 800bdd6:	b570      	push	{r4, r5, r6, lr}
 800bdd8:	f1c2 0620 	rsb	r6, r2, #32
 800bddc:	6843      	ldr	r3, [r0, #4]
 800bdde:	6804      	ldr	r4, [r0, #0]
 800bde0:	fa03 f506 	lsl.w	r5, r3, r6
 800bde4:	432c      	orrs	r4, r5
 800bde6:	40d3      	lsrs	r3, r2
 800bde8:	6004      	str	r4, [r0, #0]
 800bdea:	f840 3f04 	str.w	r3, [r0, #4]!
 800bdee:	4288      	cmp	r0, r1
 800bdf0:	d3f4      	bcc.n	800bddc <L_shift+0xc>
 800bdf2:	bd70      	pop	{r4, r5, r6, pc}

0800bdf4 <__match>:
 800bdf4:	b530      	push	{r4, r5, lr}
 800bdf6:	6803      	ldr	r3, [r0, #0]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdfe:	b914      	cbnz	r4, 800be06 <__match+0x12>
 800be00:	6003      	str	r3, [r0, #0]
 800be02:	2001      	movs	r0, #1
 800be04:	bd30      	pop	{r4, r5, pc}
 800be06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800be0e:	2d19      	cmp	r5, #25
 800be10:	bf98      	it	ls
 800be12:	3220      	addls	r2, #32
 800be14:	42a2      	cmp	r2, r4
 800be16:	d0f0      	beq.n	800bdfa <__match+0x6>
 800be18:	2000      	movs	r0, #0
 800be1a:	e7f3      	b.n	800be04 <__match+0x10>

0800be1c <__hexnan>:
 800be1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be20:	680b      	ldr	r3, [r1, #0]
 800be22:	115e      	asrs	r6, r3, #5
 800be24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be28:	f013 031f 	ands.w	r3, r3, #31
 800be2c:	b087      	sub	sp, #28
 800be2e:	bf18      	it	ne
 800be30:	3604      	addne	r6, #4
 800be32:	2500      	movs	r5, #0
 800be34:	1f37      	subs	r7, r6, #4
 800be36:	4690      	mov	r8, r2
 800be38:	6802      	ldr	r2, [r0, #0]
 800be3a:	9301      	str	r3, [sp, #4]
 800be3c:	4682      	mov	sl, r0
 800be3e:	f846 5c04 	str.w	r5, [r6, #-4]
 800be42:	46b9      	mov	r9, r7
 800be44:	463c      	mov	r4, r7
 800be46:	9502      	str	r5, [sp, #8]
 800be48:	46ab      	mov	fp, r5
 800be4a:	7851      	ldrb	r1, [r2, #1]
 800be4c:	1c53      	adds	r3, r2, #1
 800be4e:	9303      	str	r3, [sp, #12]
 800be50:	b341      	cbz	r1, 800bea4 <__hexnan+0x88>
 800be52:	4608      	mov	r0, r1
 800be54:	9205      	str	r2, [sp, #20]
 800be56:	9104      	str	r1, [sp, #16]
 800be58:	f7ff fd5e 	bl	800b918 <__hexdig_fun>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d14f      	bne.n	800bf00 <__hexnan+0xe4>
 800be60:	9904      	ldr	r1, [sp, #16]
 800be62:	9a05      	ldr	r2, [sp, #20]
 800be64:	2920      	cmp	r1, #32
 800be66:	d818      	bhi.n	800be9a <__hexnan+0x7e>
 800be68:	9b02      	ldr	r3, [sp, #8]
 800be6a:	459b      	cmp	fp, r3
 800be6c:	dd13      	ble.n	800be96 <__hexnan+0x7a>
 800be6e:	454c      	cmp	r4, r9
 800be70:	d206      	bcs.n	800be80 <__hexnan+0x64>
 800be72:	2d07      	cmp	r5, #7
 800be74:	dc04      	bgt.n	800be80 <__hexnan+0x64>
 800be76:	462a      	mov	r2, r5
 800be78:	4649      	mov	r1, r9
 800be7a:	4620      	mov	r0, r4
 800be7c:	f7ff ffa8 	bl	800bdd0 <L_shift>
 800be80:	4544      	cmp	r4, r8
 800be82:	d950      	bls.n	800bf26 <__hexnan+0x10a>
 800be84:	2300      	movs	r3, #0
 800be86:	f1a4 0904 	sub.w	r9, r4, #4
 800be8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800be8e:	f8cd b008 	str.w	fp, [sp, #8]
 800be92:	464c      	mov	r4, r9
 800be94:	461d      	mov	r5, r3
 800be96:	9a03      	ldr	r2, [sp, #12]
 800be98:	e7d7      	b.n	800be4a <__hexnan+0x2e>
 800be9a:	2929      	cmp	r1, #41	; 0x29
 800be9c:	d156      	bne.n	800bf4c <__hexnan+0x130>
 800be9e:	3202      	adds	r2, #2
 800bea0:	f8ca 2000 	str.w	r2, [sl]
 800bea4:	f1bb 0f00 	cmp.w	fp, #0
 800bea8:	d050      	beq.n	800bf4c <__hexnan+0x130>
 800beaa:	454c      	cmp	r4, r9
 800beac:	d206      	bcs.n	800bebc <__hexnan+0xa0>
 800beae:	2d07      	cmp	r5, #7
 800beb0:	dc04      	bgt.n	800bebc <__hexnan+0xa0>
 800beb2:	462a      	mov	r2, r5
 800beb4:	4649      	mov	r1, r9
 800beb6:	4620      	mov	r0, r4
 800beb8:	f7ff ff8a 	bl	800bdd0 <L_shift>
 800bebc:	4544      	cmp	r4, r8
 800bebe:	d934      	bls.n	800bf2a <__hexnan+0x10e>
 800bec0:	f1a8 0204 	sub.w	r2, r8, #4
 800bec4:	4623      	mov	r3, r4
 800bec6:	f853 1b04 	ldr.w	r1, [r3], #4
 800beca:	f842 1f04 	str.w	r1, [r2, #4]!
 800bece:	429f      	cmp	r7, r3
 800bed0:	d2f9      	bcs.n	800bec6 <__hexnan+0xaa>
 800bed2:	1b3b      	subs	r3, r7, r4
 800bed4:	f023 0303 	bic.w	r3, r3, #3
 800bed8:	3304      	adds	r3, #4
 800beda:	3401      	adds	r4, #1
 800bedc:	3e03      	subs	r6, #3
 800bede:	42b4      	cmp	r4, r6
 800bee0:	bf88      	it	hi
 800bee2:	2304      	movhi	r3, #4
 800bee4:	4443      	add	r3, r8
 800bee6:	2200      	movs	r2, #0
 800bee8:	f843 2b04 	str.w	r2, [r3], #4
 800beec:	429f      	cmp	r7, r3
 800beee:	d2fb      	bcs.n	800bee8 <__hexnan+0xcc>
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	b91b      	cbnz	r3, 800befc <__hexnan+0xe0>
 800bef4:	4547      	cmp	r7, r8
 800bef6:	d127      	bne.n	800bf48 <__hexnan+0x12c>
 800bef8:	2301      	movs	r3, #1
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	2005      	movs	r0, #5
 800befe:	e026      	b.n	800bf4e <__hexnan+0x132>
 800bf00:	3501      	adds	r5, #1
 800bf02:	2d08      	cmp	r5, #8
 800bf04:	f10b 0b01 	add.w	fp, fp, #1
 800bf08:	dd06      	ble.n	800bf18 <__hexnan+0xfc>
 800bf0a:	4544      	cmp	r4, r8
 800bf0c:	d9c3      	bls.n	800be96 <__hexnan+0x7a>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf14:	2501      	movs	r5, #1
 800bf16:	3c04      	subs	r4, #4
 800bf18:	6822      	ldr	r2, [r4, #0]
 800bf1a:	f000 000f 	and.w	r0, r0, #15
 800bf1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bf22:	6022      	str	r2, [r4, #0]
 800bf24:	e7b7      	b.n	800be96 <__hexnan+0x7a>
 800bf26:	2508      	movs	r5, #8
 800bf28:	e7b5      	b.n	800be96 <__hexnan+0x7a>
 800bf2a:	9b01      	ldr	r3, [sp, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0df      	beq.n	800bef0 <__hexnan+0xd4>
 800bf30:	f04f 32ff 	mov.w	r2, #4294967295
 800bf34:	f1c3 0320 	rsb	r3, r3, #32
 800bf38:	fa22 f303 	lsr.w	r3, r2, r3
 800bf3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf40:	401a      	ands	r2, r3
 800bf42:	f846 2c04 	str.w	r2, [r6, #-4]
 800bf46:	e7d3      	b.n	800bef0 <__hexnan+0xd4>
 800bf48:	3f04      	subs	r7, #4
 800bf4a:	e7d1      	b.n	800bef0 <__hexnan+0xd4>
 800bf4c:	2004      	movs	r0, #4
 800bf4e:	b007      	add	sp, #28
 800bf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf54 <_localeconv_r>:
 800bf54:	4800      	ldr	r0, [pc, #0]	; (800bf58 <_localeconv_r+0x4>)
 800bf56:	4770      	bx	lr
 800bf58:	20000444 	.word	0x20000444

0800bf5c <_lseek_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	4d07      	ldr	r5, [pc, #28]	; (800bf7c <_lseek_r+0x20>)
 800bf60:	4604      	mov	r4, r0
 800bf62:	4608      	mov	r0, r1
 800bf64:	4611      	mov	r1, r2
 800bf66:	2200      	movs	r2, #0
 800bf68:	602a      	str	r2, [r5, #0]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	f7f6 ff72 	bl	8002e54 <_lseek>
 800bf70:	1c43      	adds	r3, r0, #1
 800bf72:	d102      	bne.n	800bf7a <_lseek_r+0x1e>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	b103      	cbz	r3, 800bf7a <_lseek_r+0x1e>
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	20005eb0 	.word	0x20005eb0

0800bf80 <__swhatbuf_r>:
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	460e      	mov	r6, r1
 800bf84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf88:	2900      	cmp	r1, #0
 800bf8a:	b096      	sub	sp, #88	; 0x58
 800bf8c:	4614      	mov	r4, r2
 800bf8e:	461d      	mov	r5, r3
 800bf90:	da08      	bge.n	800bfa4 <__swhatbuf_r+0x24>
 800bf92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	602a      	str	r2, [r5, #0]
 800bf9a:	061a      	lsls	r2, r3, #24
 800bf9c:	d410      	bmi.n	800bfc0 <__swhatbuf_r+0x40>
 800bf9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfa2:	e00e      	b.n	800bfc2 <__swhatbuf_r+0x42>
 800bfa4:	466a      	mov	r2, sp
 800bfa6:	f001 f88b 	bl	800d0c0 <_fstat_r>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	dbf1      	blt.n	800bf92 <__swhatbuf_r+0x12>
 800bfae:	9a01      	ldr	r2, [sp, #4]
 800bfb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bfb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bfb8:	425a      	negs	r2, r3
 800bfba:	415a      	adcs	r2, r3
 800bfbc:	602a      	str	r2, [r5, #0]
 800bfbe:	e7ee      	b.n	800bf9e <__swhatbuf_r+0x1e>
 800bfc0:	2340      	movs	r3, #64	; 0x40
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	b016      	add	sp, #88	; 0x58
 800bfc8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bfcc <__smakebuf_r>:
 800bfcc:	898b      	ldrh	r3, [r1, #12]
 800bfce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfd0:	079d      	lsls	r5, r3, #30
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	d507      	bpl.n	800bfe8 <__smakebuf_r+0x1c>
 800bfd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	6123      	str	r3, [r4, #16]
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	6163      	str	r3, [r4, #20]
 800bfe4:	b002      	add	sp, #8
 800bfe6:	bd70      	pop	{r4, r5, r6, pc}
 800bfe8:	ab01      	add	r3, sp, #4
 800bfea:	466a      	mov	r2, sp
 800bfec:	f7ff ffc8 	bl	800bf80 <__swhatbuf_r>
 800bff0:	9900      	ldr	r1, [sp, #0]
 800bff2:	4605      	mov	r5, r0
 800bff4:	4630      	mov	r0, r6
 800bff6:	f7fd f8c3 	bl	8009180 <_malloc_r>
 800bffa:	b948      	cbnz	r0, 800c010 <__smakebuf_r+0x44>
 800bffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c000:	059a      	lsls	r2, r3, #22
 800c002:	d4ef      	bmi.n	800bfe4 <__smakebuf_r+0x18>
 800c004:	f023 0303 	bic.w	r3, r3, #3
 800c008:	f043 0302 	orr.w	r3, r3, #2
 800c00c:	81a3      	strh	r3, [r4, #12]
 800c00e:	e7e3      	b.n	800bfd8 <__smakebuf_r+0xc>
 800c010:	4b0d      	ldr	r3, [pc, #52]	; (800c048 <__smakebuf_r+0x7c>)
 800c012:	62b3      	str	r3, [r6, #40]	; 0x28
 800c014:	89a3      	ldrh	r3, [r4, #12]
 800c016:	6020      	str	r0, [r4, #0]
 800c018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c01c:	81a3      	strh	r3, [r4, #12]
 800c01e:	9b00      	ldr	r3, [sp, #0]
 800c020:	6163      	str	r3, [r4, #20]
 800c022:	9b01      	ldr	r3, [sp, #4]
 800c024:	6120      	str	r0, [r4, #16]
 800c026:	b15b      	cbz	r3, 800c040 <__smakebuf_r+0x74>
 800c028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c02c:	4630      	mov	r0, r6
 800c02e:	f001 f859 	bl	800d0e4 <_isatty_r>
 800c032:	b128      	cbz	r0, 800c040 <__smakebuf_r+0x74>
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	f023 0303 	bic.w	r3, r3, #3
 800c03a:	f043 0301 	orr.w	r3, r3, #1
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	89a0      	ldrh	r0, [r4, #12]
 800c042:	4305      	orrs	r5, r0
 800c044:	81a5      	strh	r5, [r4, #12]
 800c046:	e7cd      	b.n	800bfe4 <__smakebuf_r+0x18>
 800c048:	08008e69 	.word	0x08008e69

0800c04c <__ascii_mbtowc>:
 800c04c:	b082      	sub	sp, #8
 800c04e:	b901      	cbnz	r1, 800c052 <__ascii_mbtowc+0x6>
 800c050:	a901      	add	r1, sp, #4
 800c052:	b142      	cbz	r2, 800c066 <__ascii_mbtowc+0x1a>
 800c054:	b14b      	cbz	r3, 800c06a <__ascii_mbtowc+0x1e>
 800c056:	7813      	ldrb	r3, [r2, #0]
 800c058:	600b      	str	r3, [r1, #0]
 800c05a:	7812      	ldrb	r2, [r2, #0]
 800c05c:	1e10      	subs	r0, r2, #0
 800c05e:	bf18      	it	ne
 800c060:	2001      	movne	r0, #1
 800c062:	b002      	add	sp, #8
 800c064:	4770      	bx	lr
 800c066:	4610      	mov	r0, r2
 800c068:	e7fb      	b.n	800c062 <__ascii_mbtowc+0x16>
 800c06a:	f06f 0001 	mvn.w	r0, #1
 800c06e:	e7f8      	b.n	800c062 <__ascii_mbtowc+0x16>

0800c070 <__malloc_lock>:
 800c070:	4801      	ldr	r0, [pc, #4]	; (800c078 <__malloc_lock+0x8>)
 800c072:	f7fc bff0 	b.w	8009056 <__retarget_lock_acquire_recursive>
 800c076:	bf00      	nop
 800c078:	20005ea4 	.word	0x20005ea4

0800c07c <__malloc_unlock>:
 800c07c:	4801      	ldr	r0, [pc, #4]	; (800c084 <__malloc_unlock+0x8>)
 800c07e:	f7fc bfeb 	b.w	8009058 <__retarget_lock_release_recursive>
 800c082:	bf00      	nop
 800c084:	20005ea4 	.word	0x20005ea4

0800c088 <_Balloc>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c08c:	4604      	mov	r4, r0
 800c08e:	460d      	mov	r5, r1
 800c090:	b976      	cbnz	r6, 800c0b0 <_Balloc+0x28>
 800c092:	2010      	movs	r0, #16
 800c094:	f7fc ffe2 	bl	800905c <malloc>
 800c098:	4602      	mov	r2, r0
 800c09a:	6260      	str	r0, [r4, #36]	; 0x24
 800c09c:	b920      	cbnz	r0, 800c0a8 <_Balloc+0x20>
 800c09e:	4b18      	ldr	r3, [pc, #96]	; (800c100 <_Balloc+0x78>)
 800c0a0:	4818      	ldr	r0, [pc, #96]	; (800c104 <_Balloc+0x7c>)
 800c0a2:	2166      	movs	r1, #102	; 0x66
 800c0a4:	f000 ffdc 	bl	800d060 <__assert_func>
 800c0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0ac:	6006      	str	r6, [r0, #0]
 800c0ae:	60c6      	str	r6, [r0, #12]
 800c0b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c0b2:	68f3      	ldr	r3, [r6, #12]
 800c0b4:	b183      	cbz	r3, 800c0d8 <_Balloc+0x50>
 800c0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0be:	b9b8      	cbnz	r0, 800c0f0 <_Balloc+0x68>
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	fa01 f605 	lsl.w	r6, r1, r5
 800c0c6:	1d72      	adds	r2, r6, #5
 800c0c8:	0092      	lsls	r2, r2, #2
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f000 fc9d 	bl	800ca0a <_calloc_r>
 800c0d0:	b160      	cbz	r0, 800c0ec <_Balloc+0x64>
 800c0d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0d6:	e00e      	b.n	800c0f6 <_Balloc+0x6e>
 800c0d8:	2221      	movs	r2, #33	; 0x21
 800c0da:	2104      	movs	r1, #4
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f000 fc94 	bl	800ca0a <_calloc_r>
 800c0e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0e4:	60f0      	str	r0, [r6, #12]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1e4      	bne.n	800c0b6 <_Balloc+0x2e>
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}
 800c0f0:	6802      	ldr	r2, [r0, #0]
 800c0f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0fc:	e7f7      	b.n	800c0ee <_Balloc+0x66>
 800c0fe:	bf00      	nop
 800c100:	0800d80d 	.word	0x0800d80d
 800c104:	0800d90c 	.word	0x0800d90c

0800c108 <_Bfree>:
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c10c:	4605      	mov	r5, r0
 800c10e:	460c      	mov	r4, r1
 800c110:	b976      	cbnz	r6, 800c130 <_Bfree+0x28>
 800c112:	2010      	movs	r0, #16
 800c114:	f7fc ffa2 	bl	800905c <malloc>
 800c118:	4602      	mov	r2, r0
 800c11a:	6268      	str	r0, [r5, #36]	; 0x24
 800c11c:	b920      	cbnz	r0, 800c128 <_Bfree+0x20>
 800c11e:	4b09      	ldr	r3, [pc, #36]	; (800c144 <_Bfree+0x3c>)
 800c120:	4809      	ldr	r0, [pc, #36]	; (800c148 <_Bfree+0x40>)
 800c122:	218a      	movs	r1, #138	; 0x8a
 800c124:	f000 ff9c 	bl	800d060 <__assert_func>
 800c128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c12c:	6006      	str	r6, [r0, #0]
 800c12e:	60c6      	str	r6, [r0, #12]
 800c130:	b13c      	cbz	r4, 800c142 <_Bfree+0x3a>
 800c132:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c134:	6862      	ldr	r2, [r4, #4]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c13c:	6021      	str	r1, [r4, #0]
 800c13e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c142:	bd70      	pop	{r4, r5, r6, pc}
 800c144:	0800d80d 	.word	0x0800d80d
 800c148:	0800d90c 	.word	0x0800d90c

0800c14c <__multadd>:
 800c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c150:	690d      	ldr	r5, [r1, #16]
 800c152:	4607      	mov	r7, r0
 800c154:	460c      	mov	r4, r1
 800c156:	461e      	mov	r6, r3
 800c158:	f101 0c14 	add.w	ip, r1, #20
 800c15c:	2000      	movs	r0, #0
 800c15e:	f8dc 3000 	ldr.w	r3, [ip]
 800c162:	b299      	uxth	r1, r3
 800c164:	fb02 6101 	mla	r1, r2, r1, r6
 800c168:	0c1e      	lsrs	r6, r3, #16
 800c16a:	0c0b      	lsrs	r3, r1, #16
 800c16c:	fb02 3306 	mla	r3, r2, r6, r3
 800c170:	b289      	uxth	r1, r1
 800c172:	3001      	adds	r0, #1
 800c174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c178:	4285      	cmp	r5, r0
 800c17a:	f84c 1b04 	str.w	r1, [ip], #4
 800c17e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c182:	dcec      	bgt.n	800c15e <__multadd+0x12>
 800c184:	b30e      	cbz	r6, 800c1ca <__multadd+0x7e>
 800c186:	68a3      	ldr	r3, [r4, #8]
 800c188:	42ab      	cmp	r3, r5
 800c18a:	dc19      	bgt.n	800c1c0 <__multadd+0x74>
 800c18c:	6861      	ldr	r1, [r4, #4]
 800c18e:	4638      	mov	r0, r7
 800c190:	3101      	adds	r1, #1
 800c192:	f7ff ff79 	bl	800c088 <_Balloc>
 800c196:	4680      	mov	r8, r0
 800c198:	b928      	cbnz	r0, 800c1a6 <__multadd+0x5a>
 800c19a:	4602      	mov	r2, r0
 800c19c:	4b0c      	ldr	r3, [pc, #48]	; (800c1d0 <__multadd+0x84>)
 800c19e:	480d      	ldr	r0, [pc, #52]	; (800c1d4 <__multadd+0x88>)
 800c1a0:	21b5      	movs	r1, #181	; 0xb5
 800c1a2:	f000 ff5d 	bl	800d060 <__assert_func>
 800c1a6:	6922      	ldr	r2, [r4, #16]
 800c1a8:	3202      	adds	r2, #2
 800c1aa:	f104 010c 	add.w	r1, r4, #12
 800c1ae:	0092      	lsls	r2, r2, #2
 800c1b0:	300c      	adds	r0, #12
 800c1b2:	f7fc ff63 	bl	800907c <memcpy>
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	f7ff ffa5 	bl	800c108 <_Bfree>
 800c1be:	4644      	mov	r4, r8
 800c1c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1c4:	3501      	adds	r5, #1
 800c1c6:	615e      	str	r6, [r3, #20]
 800c1c8:	6125      	str	r5, [r4, #16]
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d0:	0800d87f 	.word	0x0800d87f
 800c1d4:	0800d90c 	.word	0x0800d90c

0800c1d8 <__s2b>:
 800c1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1dc:	460c      	mov	r4, r1
 800c1de:	4615      	mov	r5, r2
 800c1e0:	461f      	mov	r7, r3
 800c1e2:	2209      	movs	r2, #9
 800c1e4:	3308      	adds	r3, #8
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	db09      	blt.n	800c208 <__s2b+0x30>
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f7ff ff47 	bl	800c088 <_Balloc>
 800c1fa:	b940      	cbnz	r0, 800c20e <__s2b+0x36>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	4b19      	ldr	r3, [pc, #100]	; (800c264 <__s2b+0x8c>)
 800c200:	4819      	ldr	r0, [pc, #100]	; (800c268 <__s2b+0x90>)
 800c202:	21ce      	movs	r1, #206	; 0xce
 800c204:	f000 ff2c 	bl	800d060 <__assert_func>
 800c208:	0052      	lsls	r2, r2, #1
 800c20a:	3101      	adds	r1, #1
 800c20c:	e7f0      	b.n	800c1f0 <__s2b+0x18>
 800c20e:	9b08      	ldr	r3, [sp, #32]
 800c210:	6143      	str	r3, [r0, #20]
 800c212:	2d09      	cmp	r5, #9
 800c214:	f04f 0301 	mov.w	r3, #1
 800c218:	6103      	str	r3, [r0, #16]
 800c21a:	dd16      	ble.n	800c24a <__s2b+0x72>
 800c21c:	f104 0909 	add.w	r9, r4, #9
 800c220:	46c8      	mov	r8, r9
 800c222:	442c      	add	r4, r5
 800c224:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c228:	4601      	mov	r1, r0
 800c22a:	3b30      	subs	r3, #48	; 0x30
 800c22c:	220a      	movs	r2, #10
 800c22e:	4630      	mov	r0, r6
 800c230:	f7ff ff8c 	bl	800c14c <__multadd>
 800c234:	45a0      	cmp	r8, r4
 800c236:	d1f5      	bne.n	800c224 <__s2b+0x4c>
 800c238:	f1a5 0408 	sub.w	r4, r5, #8
 800c23c:	444c      	add	r4, r9
 800c23e:	1b2d      	subs	r5, r5, r4
 800c240:	1963      	adds	r3, r4, r5
 800c242:	42bb      	cmp	r3, r7
 800c244:	db04      	blt.n	800c250 <__s2b+0x78>
 800c246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c24a:	340a      	adds	r4, #10
 800c24c:	2509      	movs	r5, #9
 800c24e:	e7f6      	b.n	800c23e <__s2b+0x66>
 800c250:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c254:	4601      	mov	r1, r0
 800c256:	3b30      	subs	r3, #48	; 0x30
 800c258:	220a      	movs	r2, #10
 800c25a:	4630      	mov	r0, r6
 800c25c:	f7ff ff76 	bl	800c14c <__multadd>
 800c260:	e7ee      	b.n	800c240 <__s2b+0x68>
 800c262:	bf00      	nop
 800c264:	0800d87f 	.word	0x0800d87f
 800c268:	0800d90c 	.word	0x0800d90c

0800c26c <__hi0bits>:
 800c26c:	0c03      	lsrs	r3, r0, #16
 800c26e:	041b      	lsls	r3, r3, #16
 800c270:	b9d3      	cbnz	r3, 800c2a8 <__hi0bits+0x3c>
 800c272:	0400      	lsls	r0, r0, #16
 800c274:	2310      	movs	r3, #16
 800c276:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c27a:	bf04      	itt	eq
 800c27c:	0200      	lsleq	r0, r0, #8
 800c27e:	3308      	addeq	r3, #8
 800c280:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c284:	bf04      	itt	eq
 800c286:	0100      	lsleq	r0, r0, #4
 800c288:	3304      	addeq	r3, #4
 800c28a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c28e:	bf04      	itt	eq
 800c290:	0080      	lsleq	r0, r0, #2
 800c292:	3302      	addeq	r3, #2
 800c294:	2800      	cmp	r0, #0
 800c296:	db05      	blt.n	800c2a4 <__hi0bits+0x38>
 800c298:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c29c:	f103 0301 	add.w	r3, r3, #1
 800c2a0:	bf08      	it	eq
 800c2a2:	2320      	moveq	r3, #32
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	4770      	bx	lr
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e7e4      	b.n	800c276 <__hi0bits+0xa>

0800c2ac <__lo0bits>:
 800c2ac:	6803      	ldr	r3, [r0, #0]
 800c2ae:	f013 0207 	ands.w	r2, r3, #7
 800c2b2:	4601      	mov	r1, r0
 800c2b4:	d00b      	beq.n	800c2ce <__lo0bits+0x22>
 800c2b6:	07da      	lsls	r2, r3, #31
 800c2b8:	d423      	bmi.n	800c302 <__lo0bits+0x56>
 800c2ba:	0798      	lsls	r0, r3, #30
 800c2bc:	bf49      	itett	mi
 800c2be:	085b      	lsrmi	r3, r3, #1
 800c2c0:	089b      	lsrpl	r3, r3, #2
 800c2c2:	2001      	movmi	r0, #1
 800c2c4:	600b      	strmi	r3, [r1, #0]
 800c2c6:	bf5c      	itt	pl
 800c2c8:	600b      	strpl	r3, [r1, #0]
 800c2ca:	2002      	movpl	r0, #2
 800c2cc:	4770      	bx	lr
 800c2ce:	b298      	uxth	r0, r3
 800c2d0:	b9a8      	cbnz	r0, 800c2fe <__lo0bits+0x52>
 800c2d2:	0c1b      	lsrs	r3, r3, #16
 800c2d4:	2010      	movs	r0, #16
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	b90a      	cbnz	r2, 800c2de <__lo0bits+0x32>
 800c2da:	3008      	adds	r0, #8
 800c2dc:	0a1b      	lsrs	r3, r3, #8
 800c2de:	071a      	lsls	r2, r3, #28
 800c2e0:	bf04      	itt	eq
 800c2e2:	091b      	lsreq	r3, r3, #4
 800c2e4:	3004      	addeq	r0, #4
 800c2e6:	079a      	lsls	r2, r3, #30
 800c2e8:	bf04      	itt	eq
 800c2ea:	089b      	lsreq	r3, r3, #2
 800c2ec:	3002      	addeq	r0, #2
 800c2ee:	07da      	lsls	r2, r3, #31
 800c2f0:	d403      	bmi.n	800c2fa <__lo0bits+0x4e>
 800c2f2:	085b      	lsrs	r3, r3, #1
 800c2f4:	f100 0001 	add.w	r0, r0, #1
 800c2f8:	d005      	beq.n	800c306 <__lo0bits+0x5a>
 800c2fa:	600b      	str	r3, [r1, #0]
 800c2fc:	4770      	bx	lr
 800c2fe:	4610      	mov	r0, r2
 800c300:	e7e9      	b.n	800c2d6 <__lo0bits+0x2a>
 800c302:	2000      	movs	r0, #0
 800c304:	4770      	bx	lr
 800c306:	2020      	movs	r0, #32
 800c308:	4770      	bx	lr
	...

0800c30c <__i2b>:
 800c30c:	b510      	push	{r4, lr}
 800c30e:	460c      	mov	r4, r1
 800c310:	2101      	movs	r1, #1
 800c312:	f7ff feb9 	bl	800c088 <_Balloc>
 800c316:	4602      	mov	r2, r0
 800c318:	b928      	cbnz	r0, 800c326 <__i2b+0x1a>
 800c31a:	4b05      	ldr	r3, [pc, #20]	; (800c330 <__i2b+0x24>)
 800c31c:	4805      	ldr	r0, [pc, #20]	; (800c334 <__i2b+0x28>)
 800c31e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c322:	f000 fe9d 	bl	800d060 <__assert_func>
 800c326:	2301      	movs	r3, #1
 800c328:	6144      	str	r4, [r0, #20]
 800c32a:	6103      	str	r3, [r0, #16]
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	bf00      	nop
 800c330:	0800d87f 	.word	0x0800d87f
 800c334:	0800d90c 	.word	0x0800d90c

0800c338 <__multiply>:
 800c338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33c:	4691      	mov	r9, r2
 800c33e:	690a      	ldr	r2, [r1, #16]
 800c340:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c344:	429a      	cmp	r2, r3
 800c346:	bfb8      	it	lt
 800c348:	460b      	movlt	r3, r1
 800c34a:	460c      	mov	r4, r1
 800c34c:	bfbc      	itt	lt
 800c34e:	464c      	movlt	r4, r9
 800c350:	4699      	movlt	r9, r3
 800c352:	6927      	ldr	r7, [r4, #16]
 800c354:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c358:	68a3      	ldr	r3, [r4, #8]
 800c35a:	6861      	ldr	r1, [r4, #4]
 800c35c:	eb07 060a 	add.w	r6, r7, sl
 800c360:	42b3      	cmp	r3, r6
 800c362:	b085      	sub	sp, #20
 800c364:	bfb8      	it	lt
 800c366:	3101      	addlt	r1, #1
 800c368:	f7ff fe8e 	bl	800c088 <_Balloc>
 800c36c:	b930      	cbnz	r0, 800c37c <__multiply+0x44>
 800c36e:	4602      	mov	r2, r0
 800c370:	4b44      	ldr	r3, [pc, #272]	; (800c484 <__multiply+0x14c>)
 800c372:	4845      	ldr	r0, [pc, #276]	; (800c488 <__multiply+0x150>)
 800c374:	f240 115d 	movw	r1, #349	; 0x15d
 800c378:	f000 fe72 	bl	800d060 <__assert_func>
 800c37c:	f100 0514 	add.w	r5, r0, #20
 800c380:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c384:	462b      	mov	r3, r5
 800c386:	2200      	movs	r2, #0
 800c388:	4543      	cmp	r3, r8
 800c38a:	d321      	bcc.n	800c3d0 <__multiply+0x98>
 800c38c:	f104 0314 	add.w	r3, r4, #20
 800c390:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c394:	f109 0314 	add.w	r3, r9, #20
 800c398:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c39c:	9202      	str	r2, [sp, #8]
 800c39e:	1b3a      	subs	r2, r7, r4
 800c3a0:	3a15      	subs	r2, #21
 800c3a2:	f022 0203 	bic.w	r2, r2, #3
 800c3a6:	3204      	adds	r2, #4
 800c3a8:	f104 0115 	add.w	r1, r4, #21
 800c3ac:	428f      	cmp	r7, r1
 800c3ae:	bf38      	it	cc
 800c3b0:	2204      	movcc	r2, #4
 800c3b2:	9201      	str	r2, [sp, #4]
 800c3b4:	9a02      	ldr	r2, [sp, #8]
 800c3b6:	9303      	str	r3, [sp, #12]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d80c      	bhi.n	800c3d6 <__multiply+0x9e>
 800c3bc:	2e00      	cmp	r6, #0
 800c3be:	dd03      	ble.n	800c3c8 <__multiply+0x90>
 800c3c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d05a      	beq.n	800c47e <__multiply+0x146>
 800c3c8:	6106      	str	r6, [r0, #16]
 800c3ca:	b005      	add	sp, #20
 800c3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d0:	f843 2b04 	str.w	r2, [r3], #4
 800c3d4:	e7d8      	b.n	800c388 <__multiply+0x50>
 800c3d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3da:	f1ba 0f00 	cmp.w	sl, #0
 800c3de:	d024      	beq.n	800c42a <__multiply+0xf2>
 800c3e0:	f104 0e14 	add.w	lr, r4, #20
 800c3e4:	46a9      	mov	r9, r5
 800c3e6:	f04f 0c00 	mov.w	ip, #0
 800c3ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c3ee:	f8d9 1000 	ldr.w	r1, [r9]
 800c3f2:	fa1f fb82 	uxth.w	fp, r2
 800c3f6:	b289      	uxth	r1, r1
 800c3f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c3fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c400:	f8d9 2000 	ldr.w	r2, [r9]
 800c404:	4461      	add	r1, ip
 800c406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c40a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c40e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c412:	b289      	uxth	r1, r1
 800c414:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c418:	4577      	cmp	r7, lr
 800c41a:	f849 1b04 	str.w	r1, [r9], #4
 800c41e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c422:	d8e2      	bhi.n	800c3ea <__multiply+0xb2>
 800c424:	9a01      	ldr	r2, [sp, #4]
 800c426:	f845 c002 	str.w	ip, [r5, r2]
 800c42a:	9a03      	ldr	r2, [sp, #12]
 800c42c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c430:	3304      	adds	r3, #4
 800c432:	f1b9 0f00 	cmp.w	r9, #0
 800c436:	d020      	beq.n	800c47a <__multiply+0x142>
 800c438:	6829      	ldr	r1, [r5, #0]
 800c43a:	f104 0c14 	add.w	ip, r4, #20
 800c43e:	46ae      	mov	lr, r5
 800c440:	f04f 0a00 	mov.w	sl, #0
 800c444:	f8bc b000 	ldrh.w	fp, [ip]
 800c448:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c44c:	fb09 220b 	mla	r2, r9, fp, r2
 800c450:	4492      	add	sl, r2
 800c452:	b289      	uxth	r1, r1
 800c454:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c458:	f84e 1b04 	str.w	r1, [lr], #4
 800c45c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c460:	f8be 1000 	ldrh.w	r1, [lr]
 800c464:	0c12      	lsrs	r2, r2, #16
 800c466:	fb09 1102 	mla	r1, r9, r2, r1
 800c46a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c46e:	4567      	cmp	r7, ip
 800c470:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c474:	d8e6      	bhi.n	800c444 <__multiply+0x10c>
 800c476:	9a01      	ldr	r2, [sp, #4]
 800c478:	50a9      	str	r1, [r5, r2]
 800c47a:	3504      	adds	r5, #4
 800c47c:	e79a      	b.n	800c3b4 <__multiply+0x7c>
 800c47e:	3e01      	subs	r6, #1
 800c480:	e79c      	b.n	800c3bc <__multiply+0x84>
 800c482:	bf00      	nop
 800c484:	0800d87f 	.word	0x0800d87f
 800c488:	0800d90c 	.word	0x0800d90c

0800c48c <__pow5mult>:
 800c48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c490:	4615      	mov	r5, r2
 800c492:	f012 0203 	ands.w	r2, r2, #3
 800c496:	4606      	mov	r6, r0
 800c498:	460f      	mov	r7, r1
 800c49a:	d007      	beq.n	800c4ac <__pow5mult+0x20>
 800c49c:	4c25      	ldr	r4, [pc, #148]	; (800c534 <__pow5mult+0xa8>)
 800c49e:	3a01      	subs	r2, #1
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4a6:	f7ff fe51 	bl	800c14c <__multadd>
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	10ad      	asrs	r5, r5, #2
 800c4ae:	d03d      	beq.n	800c52c <__pow5mult+0xa0>
 800c4b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c4b2:	b97c      	cbnz	r4, 800c4d4 <__pow5mult+0x48>
 800c4b4:	2010      	movs	r0, #16
 800c4b6:	f7fc fdd1 	bl	800905c <malloc>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	6270      	str	r0, [r6, #36]	; 0x24
 800c4be:	b928      	cbnz	r0, 800c4cc <__pow5mult+0x40>
 800c4c0:	4b1d      	ldr	r3, [pc, #116]	; (800c538 <__pow5mult+0xac>)
 800c4c2:	481e      	ldr	r0, [pc, #120]	; (800c53c <__pow5mult+0xb0>)
 800c4c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c4c8:	f000 fdca 	bl	800d060 <__assert_func>
 800c4cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4d0:	6004      	str	r4, [r0, #0]
 800c4d2:	60c4      	str	r4, [r0, #12]
 800c4d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c4d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4dc:	b94c      	cbnz	r4, 800c4f2 <__pow5mult+0x66>
 800c4de:	f240 2171 	movw	r1, #625	; 0x271
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f7ff ff12 	bl	800c30c <__i2b>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	6003      	str	r3, [r0, #0]
 800c4f2:	f04f 0900 	mov.w	r9, #0
 800c4f6:	07eb      	lsls	r3, r5, #31
 800c4f8:	d50a      	bpl.n	800c510 <__pow5mult+0x84>
 800c4fa:	4639      	mov	r1, r7
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	4630      	mov	r0, r6
 800c500:	f7ff ff1a 	bl	800c338 <__multiply>
 800c504:	4639      	mov	r1, r7
 800c506:	4680      	mov	r8, r0
 800c508:	4630      	mov	r0, r6
 800c50a:	f7ff fdfd 	bl	800c108 <_Bfree>
 800c50e:	4647      	mov	r7, r8
 800c510:	106d      	asrs	r5, r5, #1
 800c512:	d00b      	beq.n	800c52c <__pow5mult+0xa0>
 800c514:	6820      	ldr	r0, [r4, #0]
 800c516:	b938      	cbnz	r0, 800c528 <__pow5mult+0x9c>
 800c518:	4622      	mov	r2, r4
 800c51a:	4621      	mov	r1, r4
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7ff ff0b 	bl	800c338 <__multiply>
 800c522:	6020      	str	r0, [r4, #0]
 800c524:	f8c0 9000 	str.w	r9, [r0]
 800c528:	4604      	mov	r4, r0
 800c52a:	e7e4      	b.n	800c4f6 <__pow5mult+0x6a>
 800c52c:	4638      	mov	r0, r7
 800c52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c532:	bf00      	nop
 800c534:	0800da58 	.word	0x0800da58
 800c538:	0800d80d 	.word	0x0800d80d
 800c53c:	0800d90c 	.word	0x0800d90c

0800c540 <__lshift>:
 800c540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c544:	460c      	mov	r4, r1
 800c546:	6849      	ldr	r1, [r1, #4]
 800c548:	6923      	ldr	r3, [r4, #16]
 800c54a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c54e:	68a3      	ldr	r3, [r4, #8]
 800c550:	4607      	mov	r7, r0
 800c552:	4691      	mov	r9, r2
 800c554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c558:	f108 0601 	add.w	r6, r8, #1
 800c55c:	42b3      	cmp	r3, r6
 800c55e:	db0b      	blt.n	800c578 <__lshift+0x38>
 800c560:	4638      	mov	r0, r7
 800c562:	f7ff fd91 	bl	800c088 <_Balloc>
 800c566:	4605      	mov	r5, r0
 800c568:	b948      	cbnz	r0, 800c57e <__lshift+0x3e>
 800c56a:	4602      	mov	r2, r0
 800c56c:	4b2a      	ldr	r3, [pc, #168]	; (800c618 <__lshift+0xd8>)
 800c56e:	482b      	ldr	r0, [pc, #172]	; (800c61c <__lshift+0xdc>)
 800c570:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c574:	f000 fd74 	bl	800d060 <__assert_func>
 800c578:	3101      	adds	r1, #1
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	e7ee      	b.n	800c55c <__lshift+0x1c>
 800c57e:	2300      	movs	r3, #0
 800c580:	f100 0114 	add.w	r1, r0, #20
 800c584:	f100 0210 	add.w	r2, r0, #16
 800c588:	4618      	mov	r0, r3
 800c58a:	4553      	cmp	r3, sl
 800c58c:	db37      	blt.n	800c5fe <__lshift+0xbe>
 800c58e:	6920      	ldr	r0, [r4, #16]
 800c590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c594:	f104 0314 	add.w	r3, r4, #20
 800c598:	f019 091f 	ands.w	r9, r9, #31
 800c59c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c5a4:	d02f      	beq.n	800c606 <__lshift+0xc6>
 800c5a6:	f1c9 0e20 	rsb	lr, r9, #32
 800c5aa:	468a      	mov	sl, r1
 800c5ac:	f04f 0c00 	mov.w	ip, #0
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	fa02 f209 	lsl.w	r2, r2, r9
 800c5b6:	ea42 020c 	orr.w	r2, r2, ip
 800c5ba:	f84a 2b04 	str.w	r2, [sl], #4
 800c5be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5c2:	4298      	cmp	r0, r3
 800c5c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c5c8:	d8f2      	bhi.n	800c5b0 <__lshift+0x70>
 800c5ca:	1b03      	subs	r3, r0, r4
 800c5cc:	3b15      	subs	r3, #21
 800c5ce:	f023 0303 	bic.w	r3, r3, #3
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	f104 0215 	add.w	r2, r4, #21
 800c5d8:	4290      	cmp	r0, r2
 800c5da:	bf38      	it	cc
 800c5dc:	2304      	movcc	r3, #4
 800c5de:	f841 c003 	str.w	ip, [r1, r3]
 800c5e2:	f1bc 0f00 	cmp.w	ip, #0
 800c5e6:	d001      	beq.n	800c5ec <__lshift+0xac>
 800c5e8:	f108 0602 	add.w	r6, r8, #2
 800c5ec:	3e01      	subs	r6, #1
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	612e      	str	r6, [r5, #16]
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	f7ff fd88 	bl	800c108 <_Bfree>
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c602:	3301      	adds	r3, #1
 800c604:	e7c1      	b.n	800c58a <__lshift+0x4a>
 800c606:	3904      	subs	r1, #4
 800c608:	f853 2b04 	ldr.w	r2, [r3], #4
 800c60c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c610:	4298      	cmp	r0, r3
 800c612:	d8f9      	bhi.n	800c608 <__lshift+0xc8>
 800c614:	e7ea      	b.n	800c5ec <__lshift+0xac>
 800c616:	bf00      	nop
 800c618:	0800d87f 	.word	0x0800d87f
 800c61c:	0800d90c 	.word	0x0800d90c

0800c620 <__mcmp>:
 800c620:	b530      	push	{r4, r5, lr}
 800c622:	6902      	ldr	r2, [r0, #16]
 800c624:	690c      	ldr	r4, [r1, #16]
 800c626:	1b12      	subs	r2, r2, r4
 800c628:	d10e      	bne.n	800c648 <__mcmp+0x28>
 800c62a:	f100 0314 	add.w	r3, r0, #20
 800c62e:	3114      	adds	r1, #20
 800c630:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c634:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c638:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c63c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c640:	42a5      	cmp	r5, r4
 800c642:	d003      	beq.n	800c64c <__mcmp+0x2c>
 800c644:	d305      	bcc.n	800c652 <__mcmp+0x32>
 800c646:	2201      	movs	r2, #1
 800c648:	4610      	mov	r0, r2
 800c64a:	bd30      	pop	{r4, r5, pc}
 800c64c:	4283      	cmp	r3, r0
 800c64e:	d3f3      	bcc.n	800c638 <__mcmp+0x18>
 800c650:	e7fa      	b.n	800c648 <__mcmp+0x28>
 800c652:	f04f 32ff 	mov.w	r2, #4294967295
 800c656:	e7f7      	b.n	800c648 <__mcmp+0x28>

0800c658 <__mdiff>:
 800c658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	460c      	mov	r4, r1
 800c65e:	4606      	mov	r6, r0
 800c660:	4611      	mov	r1, r2
 800c662:	4620      	mov	r0, r4
 800c664:	4690      	mov	r8, r2
 800c666:	f7ff ffdb 	bl	800c620 <__mcmp>
 800c66a:	1e05      	subs	r5, r0, #0
 800c66c:	d110      	bne.n	800c690 <__mdiff+0x38>
 800c66e:	4629      	mov	r1, r5
 800c670:	4630      	mov	r0, r6
 800c672:	f7ff fd09 	bl	800c088 <_Balloc>
 800c676:	b930      	cbnz	r0, 800c686 <__mdiff+0x2e>
 800c678:	4b3a      	ldr	r3, [pc, #232]	; (800c764 <__mdiff+0x10c>)
 800c67a:	4602      	mov	r2, r0
 800c67c:	f240 2132 	movw	r1, #562	; 0x232
 800c680:	4839      	ldr	r0, [pc, #228]	; (800c768 <__mdiff+0x110>)
 800c682:	f000 fced 	bl	800d060 <__assert_func>
 800c686:	2301      	movs	r3, #1
 800c688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c68c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c690:	bfa4      	itt	ge
 800c692:	4643      	movge	r3, r8
 800c694:	46a0      	movge	r8, r4
 800c696:	4630      	mov	r0, r6
 800c698:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c69c:	bfa6      	itte	ge
 800c69e:	461c      	movge	r4, r3
 800c6a0:	2500      	movge	r5, #0
 800c6a2:	2501      	movlt	r5, #1
 800c6a4:	f7ff fcf0 	bl	800c088 <_Balloc>
 800c6a8:	b920      	cbnz	r0, 800c6b4 <__mdiff+0x5c>
 800c6aa:	4b2e      	ldr	r3, [pc, #184]	; (800c764 <__mdiff+0x10c>)
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c6b2:	e7e5      	b.n	800c680 <__mdiff+0x28>
 800c6b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c6b8:	6926      	ldr	r6, [r4, #16]
 800c6ba:	60c5      	str	r5, [r0, #12]
 800c6bc:	f104 0914 	add.w	r9, r4, #20
 800c6c0:	f108 0514 	add.w	r5, r8, #20
 800c6c4:	f100 0e14 	add.w	lr, r0, #20
 800c6c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c6cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6d0:	f108 0210 	add.w	r2, r8, #16
 800c6d4:	46f2      	mov	sl, lr
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6e0:	fa1f f883 	uxth.w	r8, r3
 800c6e4:	fa11 f18b 	uxtah	r1, r1, fp
 800c6e8:	0c1b      	lsrs	r3, r3, #16
 800c6ea:	eba1 0808 	sub.w	r8, r1, r8
 800c6ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c6f6:	fa1f f888 	uxth.w	r8, r8
 800c6fa:	1419      	asrs	r1, r3, #16
 800c6fc:	454e      	cmp	r6, r9
 800c6fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c702:	f84a 3b04 	str.w	r3, [sl], #4
 800c706:	d8e7      	bhi.n	800c6d8 <__mdiff+0x80>
 800c708:	1b33      	subs	r3, r6, r4
 800c70a:	3b15      	subs	r3, #21
 800c70c:	f023 0303 	bic.w	r3, r3, #3
 800c710:	3304      	adds	r3, #4
 800c712:	3415      	adds	r4, #21
 800c714:	42a6      	cmp	r6, r4
 800c716:	bf38      	it	cc
 800c718:	2304      	movcc	r3, #4
 800c71a:	441d      	add	r5, r3
 800c71c:	4473      	add	r3, lr
 800c71e:	469e      	mov	lr, r3
 800c720:	462e      	mov	r6, r5
 800c722:	4566      	cmp	r6, ip
 800c724:	d30e      	bcc.n	800c744 <__mdiff+0xec>
 800c726:	f10c 0203 	add.w	r2, ip, #3
 800c72a:	1b52      	subs	r2, r2, r5
 800c72c:	f022 0203 	bic.w	r2, r2, #3
 800c730:	3d03      	subs	r5, #3
 800c732:	45ac      	cmp	ip, r5
 800c734:	bf38      	it	cc
 800c736:	2200      	movcc	r2, #0
 800c738:	441a      	add	r2, r3
 800c73a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c73e:	b17b      	cbz	r3, 800c760 <__mdiff+0x108>
 800c740:	6107      	str	r7, [r0, #16]
 800c742:	e7a3      	b.n	800c68c <__mdiff+0x34>
 800c744:	f856 8b04 	ldr.w	r8, [r6], #4
 800c748:	fa11 f288 	uxtah	r2, r1, r8
 800c74c:	1414      	asrs	r4, r2, #16
 800c74e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c752:	b292      	uxth	r2, r2
 800c754:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c758:	f84e 2b04 	str.w	r2, [lr], #4
 800c75c:	1421      	asrs	r1, r4, #16
 800c75e:	e7e0      	b.n	800c722 <__mdiff+0xca>
 800c760:	3f01      	subs	r7, #1
 800c762:	e7ea      	b.n	800c73a <__mdiff+0xe2>
 800c764:	0800d87f 	.word	0x0800d87f
 800c768:	0800d90c 	.word	0x0800d90c

0800c76c <__ulp>:
 800c76c:	b082      	sub	sp, #8
 800c76e:	ed8d 0b00 	vstr	d0, [sp]
 800c772:	9b01      	ldr	r3, [sp, #4]
 800c774:	4912      	ldr	r1, [pc, #72]	; (800c7c0 <__ulp+0x54>)
 800c776:	4019      	ands	r1, r3
 800c778:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c77c:	2900      	cmp	r1, #0
 800c77e:	dd05      	ble.n	800c78c <__ulp+0x20>
 800c780:	2200      	movs	r2, #0
 800c782:	460b      	mov	r3, r1
 800c784:	ec43 2b10 	vmov	d0, r2, r3
 800c788:	b002      	add	sp, #8
 800c78a:	4770      	bx	lr
 800c78c:	4249      	negs	r1, r1
 800c78e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c792:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c796:	f04f 0200 	mov.w	r2, #0
 800c79a:	f04f 0300 	mov.w	r3, #0
 800c79e:	da04      	bge.n	800c7aa <__ulp+0x3e>
 800c7a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c7a4:	fa41 f300 	asr.w	r3, r1, r0
 800c7a8:	e7ec      	b.n	800c784 <__ulp+0x18>
 800c7aa:	f1a0 0114 	sub.w	r1, r0, #20
 800c7ae:	291e      	cmp	r1, #30
 800c7b0:	bfda      	itte	le
 800c7b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c7b6:	fa20 f101 	lsrle.w	r1, r0, r1
 800c7ba:	2101      	movgt	r1, #1
 800c7bc:	460a      	mov	r2, r1
 800c7be:	e7e1      	b.n	800c784 <__ulp+0x18>
 800c7c0:	7ff00000 	.word	0x7ff00000

0800c7c4 <__b2d>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	6905      	ldr	r5, [r0, #16]
 800c7c8:	f100 0714 	add.w	r7, r0, #20
 800c7cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c7d0:	1f2e      	subs	r6, r5, #4
 800c7d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f7ff fd48 	bl	800c26c <__hi0bits>
 800c7dc:	f1c0 0320 	rsb	r3, r0, #32
 800c7e0:	280a      	cmp	r0, #10
 800c7e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c860 <__b2d+0x9c>
 800c7e6:	600b      	str	r3, [r1, #0]
 800c7e8:	dc14      	bgt.n	800c814 <__b2d+0x50>
 800c7ea:	f1c0 0e0b 	rsb	lr, r0, #11
 800c7ee:	fa24 f10e 	lsr.w	r1, r4, lr
 800c7f2:	42b7      	cmp	r7, r6
 800c7f4:	ea41 030c 	orr.w	r3, r1, ip
 800c7f8:	bf34      	ite	cc
 800c7fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c7fe:	2100      	movcs	r1, #0
 800c800:	3015      	adds	r0, #21
 800c802:	fa04 f000 	lsl.w	r0, r4, r0
 800c806:	fa21 f10e 	lsr.w	r1, r1, lr
 800c80a:	ea40 0201 	orr.w	r2, r0, r1
 800c80e:	ec43 2b10 	vmov	d0, r2, r3
 800c812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c814:	42b7      	cmp	r7, r6
 800c816:	bf3a      	itte	cc
 800c818:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c81c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c820:	2100      	movcs	r1, #0
 800c822:	380b      	subs	r0, #11
 800c824:	d017      	beq.n	800c856 <__b2d+0x92>
 800c826:	f1c0 0c20 	rsb	ip, r0, #32
 800c82a:	fa04 f500 	lsl.w	r5, r4, r0
 800c82e:	42be      	cmp	r6, r7
 800c830:	fa21 f40c 	lsr.w	r4, r1, ip
 800c834:	ea45 0504 	orr.w	r5, r5, r4
 800c838:	bf8c      	ite	hi
 800c83a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c83e:	2400      	movls	r4, #0
 800c840:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c844:	fa01 f000 	lsl.w	r0, r1, r0
 800c848:	fa24 f40c 	lsr.w	r4, r4, ip
 800c84c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c850:	ea40 0204 	orr.w	r2, r0, r4
 800c854:	e7db      	b.n	800c80e <__b2d+0x4a>
 800c856:	ea44 030c 	orr.w	r3, r4, ip
 800c85a:	460a      	mov	r2, r1
 800c85c:	e7d7      	b.n	800c80e <__b2d+0x4a>
 800c85e:	bf00      	nop
 800c860:	3ff00000 	.word	0x3ff00000

0800c864 <__d2b>:
 800c864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c868:	4689      	mov	r9, r1
 800c86a:	2101      	movs	r1, #1
 800c86c:	ec57 6b10 	vmov	r6, r7, d0
 800c870:	4690      	mov	r8, r2
 800c872:	f7ff fc09 	bl	800c088 <_Balloc>
 800c876:	4604      	mov	r4, r0
 800c878:	b930      	cbnz	r0, 800c888 <__d2b+0x24>
 800c87a:	4602      	mov	r2, r0
 800c87c:	4b25      	ldr	r3, [pc, #148]	; (800c914 <__d2b+0xb0>)
 800c87e:	4826      	ldr	r0, [pc, #152]	; (800c918 <__d2b+0xb4>)
 800c880:	f240 310a 	movw	r1, #778	; 0x30a
 800c884:	f000 fbec 	bl	800d060 <__assert_func>
 800c888:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c88c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c890:	bb35      	cbnz	r5, 800c8e0 <__d2b+0x7c>
 800c892:	2e00      	cmp	r6, #0
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	d028      	beq.n	800c8ea <__d2b+0x86>
 800c898:	4668      	mov	r0, sp
 800c89a:	9600      	str	r6, [sp, #0]
 800c89c:	f7ff fd06 	bl	800c2ac <__lo0bits>
 800c8a0:	9900      	ldr	r1, [sp, #0]
 800c8a2:	b300      	cbz	r0, 800c8e6 <__d2b+0x82>
 800c8a4:	9a01      	ldr	r2, [sp, #4]
 800c8a6:	f1c0 0320 	rsb	r3, r0, #32
 800c8aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ae:	430b      	orrs	r3, r1
 800c8b0:	40c2      	lsrs	r2, r0
 800c8b2:	6163      	str	r3, [r4, #20]
 800c8b4:	9201      	str	r2, [sp, #4]
 800c8b6:	9b01      	ldr	r3, [sp, #4]
 800c8b8:	61a3      	str	r3, [r4, #24]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	bf14      	ite	ne
 800c8be:	2202      	movne	r2, #2
 800c8c0:	2201      	moveq	r2, #1
 800c8c2:	6122      	str	r2, [r4, #16]
 800c8c4:	b1d5      	cbz	r5, 800c8fc <__d2b+0x98>
 800c8c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c8ca:	4405      	add	r5, r0
 800c8cc:	f8c9 5000 	str.w	r5, [r9]
 800c8d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c8d4:	f8c8 0000 	str.w	r0, [r8]
 800c8d8:	4620      	mov	r0, r4
 800c8da:	b003      	add	sp, #12
 800c8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8e4:	e7d5      	b.n	800c892 <__d2b+0x2e>
 800c8e6:	6161      	str	r1, [r4, #20]
 800c8e8:	e7e5      	b.n	800c8b6 <__d2b+0x52>
 800c8ea:	a801      	add	r0, sp, #4
 800c8ec:	f7ff fcde 	bl	800c2ac <__lo0bits>
 800c8f0:	9b01      	ldr	r3, [sp, #4]
 800c8f2:	6163      	str	r3, [r4, #20]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	6122      	str	r2, [r4, #16]
 800c8f8:	3020      	adds	r0, #32
 800c8fa:	e7e3      	b.n	800c8c4 <__d2b+0x60>
 800c8fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c900:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c904:	f8c9 0000 	str.w	r0, [r9]
 800c908:	6918      	ldr	r0, [r3, #16]
 800c90a:	f7ff fcaf 	bl	800c26c <__hi0bits>
 800c90e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c912:	e7df      	b.n	800c8d4 <__d2b+0x70>
 800c914:	0800d87f 	.word	0x0800d87f
 800c918:	0800d90c 	.word	0x0800d90c

0800c91c <__ratio>:
 800c91c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c920:	4688      	mov	r8, r1
 800c922:	4669      	mov	r1, sp
 800c924:	4681      	mov	r9, r0
 800c926:	f7ff ff4d 	bl	800c7c4 <__b2d>
 800c92a:	a901      	add	r1, sp, #4
 800c92c:	4640      	mov	r0, r8
 800c92e:	ec55 4b10 	vmov	r4, r5, d0
 800c932:	f7ff ff47 	bl	800c7c4 <__b2d>
 800c936:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c93a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c93e:	eba3 0c02 	sub.w	ip, r3, r2
 800c942:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c946:	1a9b      	subs	r3, r3, r2
 800c948:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c94c:	ec51 0b10 	vmov	r0, r1, d0
 800c950:	2b00      	cmp	r3, #0
 800c952:	bfd6      	itet	le
 800c954:	460a      	movle	r2, r1
 800c956:	462a      	movgt	r2, r5
 800c958:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c95c:	468b      	mov	fp, r1
 800c95e:	462f      	mov	r7, r5
 800c960:	bfd4      	ite	le
 800c962:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c966:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c96a:	4620      	mov	r0, r4
 800c96c:	ee10 2a10 	vmov	r2, s0
 800c970:	465b      	mov	r3, fp
 800c972:	4639      	mov	r1, r7
 800c974:	f7f3 ff82 	bl	800087c <__aeabi_ddiv>
 800c978:	ec41 0b10 	vmov	d0, r0, r1
 800c97c:	b003      	add	sp, #12
 800c97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c982 <__copybits>:
 800c982:	3901      	subs	r1, #1
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	1149      	asrs	r1, r1, #5
 800c988:	6914      	ldr	r4, [r2, #16]
 800c98a:	3101      	adds	r1, #1
 800c98c:	f102 0314 	add.w	r3, r2, #20
 800c990:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c994:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c998:	1f05      	subs	r5, r0, #4
 800c99a:	42a3      	cmp	r3, r4
 800c99c:	d30c      	bcc.n	800c9b8 <__copybits+0x36>
 800c99e:	1aa3      	subs	r3, r4, r2
 800c9a0:	3b11      	subs	r3, #17
 800c9a2:	f023 0303 	bic.w	r3, r3, #3
 800c9a6:	3211      	adds	r2, #17
 800c9a8:	42a2      	cmp	r2, r4
 800c9aa:	bf88      	it	hi
 800c9ac:	2300      	movhi	r3, #0
 800c9ae:	4418      	add	r0, r3
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	4288      	cmp	r0, r1
 800c9b4:	d305      	bcc.n	800c9c2 <__copybits+0x40>
 800c9b6:	bd70      	pop	{r4, r5, r6, pc}
 800c9b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9c0:	e7eb      	b.n	800c99a <__copybits+0x18>
 800c9c2:	f840 3b04 	str.w	r3, [r0], #4
 800c9c6:	e7f4      	b.n	800c9b2 <__copybits+0x30>

0800c9c8 <__any_on>:
 800c9c8:	f100 0214 	add.w	r2, r0, #20
 800c9cc:	6900      	ldr	r0, [r0, #16]
 800c9ce:	114b      	asrs	r3, r1, #5
 800c9d0:	4298      	cmp	r0, r3
 800c9d2:	b510      	push	{r4, lr}
 800c9d4:	db11      	blt.n	800c9fa <__any_on+0x32>
 800c9d6:	dd0a      	ble.n	800c9ee <__any_on+0x26>
 800c9d8:	f011 011f 	ands.w	r1, r1, #31
 800c9dc:	d007      	beq.n	800c9ee <__any_on+0x26>
 800c9de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9e2:	fa24 f001 	lsr.w	r0, r4, r1
 800c9e6:	fa00 f101 	lsl.w	r1, r0, r1
 800c9ea:	428c      	cmp	r4, r1
 800c9ec:	d10b      	bne.n	800ca06 <__any_on+0x3e>
 800c9ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d803      	bhi.n	800c9fe <__any_on+0x36>
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	bd10      	pop	{r4, pc}
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	e7f7      	b.n	800c9ee <__any_on+0x26>
 800c9fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca02:	2900      	cmp	r1, #0
 800ca04:	d0f5      	beq.n	800c9f2 <__any_on+0x2a>
 800ca06:	2001      	movs	r0, #1
 800ca08:	e7f6      	b.n	800c9f8 <__any_on+0x30>

0800ca0a <_calloc_r>:
 800ca0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca0c:	fba1 2402 	umull	r2, r4, r1, r2
 800ca10:	b94c      	cbnz	r4, 800ca26 <_calloc_r+0x1c>
 800ca12:	4611      	mov	r1, r2
 800ca14:	9201      	str	r2, [sp, #4]
 800ca16:	f7fc fbb3 	bl	8009180 <_malloc_r>
 800ca1a:	9a01      	ldr	r2, [sp, #4]
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	b930      	cbnz	r0, 800ca2e <_calloc_r+0x24>
 800ca20:	4628      	mov	r0, r5
 800ca22:	b003      	add	sp, #12
 800ca24:	bd30      	pop	{r4, r5, pc}
 800ca26:	220c      	movs	r2, #12
 800ca28:	6002      	str	r2, [r0, #0]
 800ca2a:	2500      	movs	r5, #0
 800ca2c:	e7f8      	b.n	800ca20 <_calloc_r+0x16>
 800ca2e:	4621      	mov	r1, r4
 800ca30:	f7fc fb32 	bl	8009098 <memset>
 800ca34:	e7f4      	b.n	800ca20 <_calloc_r+0x16>

0800ca36 <_realloc_r>:
 800ca36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3a:	4680      	mov	r8, r0
 800ca3c:	4614      	mov	r4, r2
 800ca3e:	460e      	mov	r6, r1
 800ca40:	b921      	cbnz	r1, 800ca4c <_realloc_r+0x16>
 800ca42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca46:	4611      	mov	r1, r2
 800ca48:	f7fc bb9a 	b.w	8009180 <_malloc_r>
 800ca4c:	b92a      	cbnz	r2, 800ca5a <_realloc_r+0x24>
 800ca4e:	f7fc fb2b 	bl	80090a8 <_free_r>
 800ca52:	4625      	mov	r5, r4
 800ca54:	4628      	mov	r0, r5
 800ca56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5a:	f000 fb6d 	bl	800d138 <_malloc_usable_size_r>
 800ca5e:	4284      	cmp	r4, r0
 800ca60:	4607      	mov	r7, r0
 800ca62:	d802      	bhi.n	800ca6a <_realloc_r+0x34>
 800ca64:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca68:	d812      	bhi.n	800ca90 <_realloc_r+0x5a>
 800ca6a:	4621      	mov	r1, r4
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	f7fc fb87 	bl	8009180 <_malloc_r>
 800ca72:	4605      	mov	r5, r0
 800ca74:	2800      	cmp	r0, #0
 800ca76:	d0ed      	beq.n	800ca54 <_realloc_r+0x1e>
 800ca78:	42bc      	cmp	r4, r7
 800ca7a:	4622      	mov	r2, r4
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	bf28      	it	cs
 800ca80:	463a      	movcs	r2, r7
 800ca82:	f7fc fafb 	bl	800907c <memcpy>
 800ca86:	4631      	mov	r1, r6
 800ca88:	4640      	mov	r0, r8
 800ca8a:	f7fc fb0d 	bl	80090a8 <_free_r>
 800ca8e:	e7e1      	b.n	800ca54 <_realloc_r+0x1e>
 800ca90:	4635      	mov	r5, r6
 800ca92:	e7df      	b.n	800ca54 <_realloc_r+0x1e>

0800ca94 <__ssputs_r>:
 800ca94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca98:	688e      	ldr	r6, [r1, #8]
 800ca9a:	429e      	cmp	r6, r3
 800ca9c:	4682      	mov	sl, r0
 800ca9e:	460c      	mov	r4, r1
 800caa0:	4690      	mov	r8, r2
 800caa2:	461f      	mov	r7, r3
 800caa4:	d838      	bhi.n	800cb18 <__ssputs_r+0x84>
 800caa6:	898a      	ldrh	r2, [r1, #12]
 800caa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800caac:	d032      	beq.n	800cb14 <__ssputs_r+0x80>
 800caae:	6825      	ldr	r5, [r4, #0]
 800cab0:	6909      	ldr	r1, [r1, #16]
 800cab2:	eba5 0901 	sub.w	r9, r5, r1
 800cab6:	6965      	ldr	r5, [r4, #20]
 800cab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cabc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cac0:	3301      	adds	r3, #1
 800cac2:	444b      	add	r3, r9
 800cac4:	106d      	asrs	r5, r5, #1
 800cac6:	429d      	cmp	r5, r3
 800cac8:	bf38      	it	cc
 800caca:	461d      	movcc	r5, r3
 800cacc:	0553      	lsls	r3, r2, #21
 800cace:	d531      	bpl.n	800cb34 <__ssputs_r+0xa0>
 800cad0:	4629      	mov	r1, r5
 800cad2:	f7fc fb55 	bl	8009180 <_malloc_r>
 800cad6:	4606      	mov	r6, r0
 800cad8:	b950      	cbnz	r0, 800caf0 <__ssputs_r+0x5c>
 800cada:	230c      	movs	r3, #12
 800cadc:	f8ca 3000 	str.w	r3, [sl]
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cae6:	81a3      	strh	r3, [r4, #12]
 800cae8:	f04f 30ff 	mov.w	r0, #4294967295
 800caec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf0:	6921      	ldr	r1, [r4, #16]
 800caf2:	464a      	mov	r2, r9
 800caf4:	f7fc fac2 	bl	800907c <memcpy>
 800caf8:	89a3      	ldrh	r3, [r4, #12]
 800cafa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb02:	81a3      	strh	r3, [r4, #12]
 800cb04:	6126      	str	r6, [r4, #16]
 800cb06:	6165      	str	r5, [r4, #20]
 800cb08:	444e      	add	r6, r9
 800cb0a:	eba5 0509 	sub.w	r5, r5, r9
 800cb0e:	6026      	str	r6, [r4, #0]
 800cb10:	60a5      	str	r5, [r4, #8]
 800cb12:	463e      	mov	r6, r7
 800cb14:	42be      	cmp	r6, r7
 800cb16:	d900      	bls.n	800cb1a <__ssputs_r+0x86>
 800cb18:	463e      	mov	r6, r7
 800cb1a:	6820      	ldr	r0, [r4, #0]
 800cb1c:	4632      	mov	r2, r6
 800cb1e:	4641      	mov	r1, r8
 800cb20:	f000 faf0 	bl	800d104 <memmove>
 800cb24:	68a3      	ldr	r3, [r4, #8]
 800cb26:	1b9b      	subs	r3, r3, r6
 800cb28:	60a3      	str	r3, [r4, #8]
 800cb2a:	6823      	ldr	r3, [r4, #0]
 800cb2c:	4433      	add	r3, r6
 800cb2e:	6023      	str	r3, [r4, #0]
 800cb30:	2000      	movs	r0, #0
 800cb32:	e7db      	b.n	800caec <__ssputs_r+0x58>
 800cb34:	462a      	mov	r2, r5
 800cb36:	f7ff ff7e 	bl	800ca36 <_realloc_r>
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d1e1      	bne.n	800cb04 <__ssputs_r+0x70>
 800cb40:	6921      	ldr	r1, [r4, #16]
 800cb42:	4650      	mov	r0, sl
 800cb44:	f7fc fab0 	bl	80090a8 <_free_r>
 800cb48:	e7c7      	b.n	800cada <__ssputs_r+0x46>
	...

0800cb4c <_svfiprintf_r>:
 800cb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb50:	4698      	mov	r8, r3
 800cb52:	898b      	ldrh	r3, [r1, #12]
 800cb54:	061b      	lsls	r3, r3, #24
 800cb56:	b09d      	sub	sp, #116	; 0x74
 800cb58:	4607      	mov	r7, r0
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	4614      	mov	r4, r2
 800cb5e:	d50e      	bpl.n	800cb7e <_svfiprintf_r+0x32>
 800cb60:	690b      	ldr	r3, [r1, #16]
 800cb62:	b963      	cbnz	r3, 800cb7e <_svfiprintf_r+0x32>
 800cb64:	2140      	movs	r1, #64	; 0x40
 800cb66:	f7fc fb0b 	bl	8009180 <_malloc_r>
 800cb6a:	6028      	str	r0, [r5, #0]
 800cb6c:	6128      	str	r0, [r5, #16]
 800cb6e:	b920      	cbnz	r0, 800cb7a <_svfiprintf_r+0x2e>
 800cb70:	230c      	movs	r3, #12
 800cb72:	603b      	str	r3, [r7, #0]
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295
 800cb78:	e0d1      	b.n	800cd1e <_svfiprintf_r+0x1d2>
 800cb7a:	2340      	movs	r3, #64	; 0x40
 800cb7c:	616b      	str	r3, [r5, #20]
 800cb7e:	2300      	movs	r3, #0
 800cb80:	9309      	str	r3, [sp, #36]	; 0x24
 800cb82:	2320      	movs	r3, #32
 800cb84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb88:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb8c:	2330      	movs	r3, #48	; 0x30
 800cb8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd38 <_svfiprintf_r+0x1ec>
 800cb92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb96:	f04f 0901 	mov.w	r9, #1
 800cb9a:	4623      	mov	r3, r4
 800cb9c:	469a      	mov	sl, r3
 800cb9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cba2:	b10a      	cbz	r2, 800cba8 <_svfiprintf_r+0x5c>
 800cba4:	2a25      	cmp	r2, #37	; 0x25
 800cba6:	d1f9      	bne.n	800cb9c <_svfiprintf_r+0x50>
 800cba8:	ebba 0b04 	subs.w	fp, sl, r4
 800cbac:	d00b      	beq.n	800cbc6 <_svfiprintf_r+0x7a>
 800cbae:	465b      	mov	r3, fp
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	f7ff ff6d 	bl	800ca94 <__ssputs_r>
 800cbba:	3001      	adds	r0, #1
 800cbbc:	f000 80aa 	beq.w	800cd14 <_svfiprintf_r+0x1c8>
 800cbc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbc2:	445a      	add	r2, fp
 800cbc4:	9209      	str	r2, [sp, #36]	; 0x24
 800cbc6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f000 80a2 	beq.w	800cd14 <_svfiprintf_r+0x1c8>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbda:	f10a 0a01 	add.w	sl, sl, #1
 800cbde:	9304      	str	r3, [sp, #16]
 800cbe0:	9307      	str	r3, [sp, #28]
 800cbe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbe6:	931a      	str	r3, [sp, #104]	; 0x68
 800cbe8:	4654      	mov	r4, sl
 800cbea:	2205      	movs	r2, #5
 800cbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf0:	4851      	ldr	r0, [pc, #324]	; (800cd38 <_svfiprintf_r+0x1ec>)
 800cbf2:	f7f3 fb0d 	bl	8000210 <memchr>
 800cbf6:	9a04      	ldr	r2, [sp, #16]
 800cbf8:	b9d8      	cbnz	r0, 800cc32 <_svfiprintf_r+0xe6>
 800cbfa:	06d0      	lsls	r0, r2, #27
 800cbfc:	bf44      	itt	mi
 800cbfe:	2320      	movmi	r3, #32
 800cc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc04:	0711      	lsls	r1, r2, #28
 800cc06:	bf44      	itt	mi
 800cc08:	232b      	movmi	r3, #43	; 0x2b
 800cc0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc12:	2b2a      	cmp	r3, #42	; 0x2a
 800cc14:	d015      	beq.n	800cc42 <_svfiprintf_r+0xf6>
 800cc16:	9a07      	ldr	r2, [sp, #28]
 800cc18:	4654      	mov	r4, sl
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	f04f 0c0a 	mov.w	ip, #10
 800cc20:	4621      	mov	r1, r4
 800cc22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc26:	3b30      	subs	r3, #48	; 0x30
 800cc28:	2b09      	cmp	r3, #9
 800cc2a:	d94e      	bls.n	800ccca <_svfiprintf_r+0x17e>
 800cc2c:	b1b0      	cbz	r0, 800cc5c <_svfiprintf_r+0x110>
 800cc2e:	9207      	str	r2, [sp, #28]
 800cc30:	e014      	b.n	800cc5c <_svfiprintf_r+0x110>
 800cc32:	eba0 0308 	sub.w	r3, r0, r8
 800cc36:	fa09 f303 	lsl.w	r3, r9, r3
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	9304      	str	r3, [sp, #16]
 800cc3e:	46a2      	mov	sl, r4
 800cc40:	e7d2      	b.n	800cbe8 <_svfiprintf_r+0x9c>
 800cc42:	9b03      	ldr	r3, [sp, #12]
 800cc44:	1d19      	adds	r1, r3, #4
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	9103      	str	r1, [sp, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	bfbb      	ittet	lt
 800cc4e:	425b      	neglt	r3, r3
 800cc50:	f042 0202 	orrlt.w	r2, r2, #2
 800cc54:	9307      	strge	r3, [sp, #28]
 800cc56:	9307      	strlt	r3, [sp, #28]
 800cc58:	bfb8      	it	lt
 800cc5a:	9204      	strlt	r2, [sp, #16]
 800cc5c:	7823      	ldrb	r3, [r4, #0]
 800cc5e:	2b2e      	cmp	r3, #46	; 0x2e
 800cc60:	d10c      	bne.n	800cc7c <_svfiprintf_r+0x130>
 800cc62:	7863      	ldrb	r3, [r4, #1]
 800cc64:	2b2a      	cmp	r3, #42	; 0x2a
 800cc66:	d135      	bne.n	800ccd4 <_svfiprintf_r+0x188>
 800cc68:	9b03      	ldr	r3, [sp, #12]
 800cc6a:	1d1a      	adds	r2, r3, #4
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	9203      	str	r2, [sp, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	bfb8      	it	lt
 800cc74:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc78:	3402      	adds	r4, #2
 800cc7a:	9305      	str	r3, [sp, #20]
 800cc7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd48 <_svfiprintf_r+0x1fc>
 800cc80:	7821      	ldrb	r1, [r4, #0]
 800cc82:	2203      	movs	r2, #3
 800cc84:	4650      	mov	r0, sl
 800cc86:	f7f3 fac3 	bl	8000210 <memchr>
 800cc8a:	b140      	cbz	r0, 800cc9e <_svfiprintf_r+0x152>
 800cc8c:	2340      	movs	r3, #64	; 0x40
 800cc8e:	eba0 000a 	sub.w	r0, r0, sl
 800cc92:	fa03 f000 	lsl.w	r0, r3, r0
 800cc96:	9b04      	ldr	r3, [sp, #16]
 800cc98:	4303      	orrs	r3, r0
 800cc9a:	3401      	adds	r4, #1
 800cc9c:	9304      	str	r3, [sp, #16]
 800cc9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cca2:	4826      	ldr	r0, [pc, #152]	; (800cd3c <_svfiprintf_r+0x1f0>)
 800cca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cca8:	2206      	movs	r2, #6
 800ccaa:	f7f3 fab1 	bl	8000210 <memchr>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d038      	beq.n	800cd24 <_svfiprintf_r+0x1d8>
 800ccb2:	4b23      	ldr	r3, [pc, #140]	; (800cd40 <_svfiprintf_r+0x1f4>)
 800ccb4:	bb1b      	cbnz	r3, 800ccfe <_svfiprintf_r+0x1b2>
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	3307      	adds	r3, #7
 800ccba:	f023 0307 	bic.w	r3, r3, #7
 800ccbe:	3308      	adds	r3, #8
 800ccc0:	9303      	str	r3, [sp, #12]
 800ccc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc4:	4433      	add	r3, r6
 800ccc6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccc8:	e767      	b.n	800cb9a <_svfiprintf_r+0x4e>
 800ccca:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccce:	460c      	mov	r4, r1
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	e7a5      	b.n	800cc20 <_svfiprintf_r+0xd4>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	3401      	adds	r4, #1
 800ccd8:	9305      	str	r3, [sp, #20]
 800ccda:	4619      	mov	r1, r3
 800ccdc:	f04f 0c0a 	mov.w	ip, #10
 800cce0:	4620      	mov	r0, r4
 800cce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cce6:	3a30      	subs	r2, #48	; 0x30
 800cce8:	2a09      	cmp	r2, #9
 800ccea:	d903      	bls.n	800ccf4 <_svfiprintf_r+0x1a8>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d0c5      	beq.n	800cc7c <_svfiprintf_r+0x130>
 800ccf0:	9105      	str	r1, [sp, #20]
 800ccf2:	e7c3      	b.n	800cc7c <_svfiprintf_r+0x130>
 800ccf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e7f0      	b.n	800cce0 <_svfiprintf_r+0x194>
 800ccfe:	ab03      	add	r3, sp, #12
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	462a      	mov	r2, r5
 800cd04:	4b0f      	ldr	r3, [pc, #60]	; (800cd44 <_svfiprintf_r+0x1f8>)
 800cd06:	a904      	add	r1, sp, #16
 800cd08:	4638      	mov	r0, r7
 800cd0a:	f7fc fb4d 	bl	80093a8 <_printf_float>
 800cd0e:	1c42      	adds	r2, r0, #1
 800cd10:	4606      	mov	r6, r0
 800cd12:	d1d6      	bne.n	800ccc2 <_svfiprintf_r+0x176>
 800cd14:	89ab      	ldrh	r3, [r5, #12]
 800cd16:	065b      	lsls	r3, r3, #25
 800cd18:	f53f af2c 	bmi.w	800cb74 <_svfiprintf_r+0x28>
 800cd1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd1e:	b01d      	add	sp, #116	; 0x74
 800cd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd24:	ab03      	add	r3, sp, #12
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	462a      	mov	r2, r5
 800cd2a:	4b06      	ldr	r3, [pc, #24]	; (800cd44 <_svfiprintf_r+0x1f8>)
 800cd2c:	a904      	add	r1, sp, #16
 800cd2e:	4638      	mov	r0, r7
 800cd30:	f7fc fdde 	bl	80098f0 <_printf_i>
 800cd34:	e7eb      	b.n	800cd0e <_svfiprintf_r+0x1c2>
 800cd36:	bf00      	nop
 800cd38:	0800da64 	.word	0x0800da64
 800cd3c:	0800da6e 	.word	0x0800da6e
 800cd40:	080093a9 	.word	0x080093a9
 800cd44:	0800ca95 	.word	0x0800ca95
 800cd48:	0800da6a 	.word	0x0800da6a

0800cd4c <__sfputc_r>:
 800cd4c:	6893      	ldr	r3, [r2, #8]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	b410      	push	{r4}
 800cd54:	6093      	str	r3, [r2, #8]
 800cd56:	da08      	bge.n	800cd6a <__sfputc_r+0x1e>
 800cd58:	6994      	ldr	r4, [r2, #24]
 800cd5a:	42a3      	cmp	r3, r4
 800cd5c:	db01      	blt.n	800cd62 <__sfputc_r+0x16>
 800cd5e:	290a      	cmp	r1, #10
 800cd60:	d103      	bne.n	800cd6a <__sfputc_r+0x1e>
 800cd62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd66:	f7fd be29 	b.w	800a9bc <__swbuf_r>
 800cd6a:	6813      	ldr	r3, [r2, #0]
 800cd6c:	1c58      	adds	r0, r3, #1
 800cd6e:	6010      	str	r0, [r2, #0]
 800cd70:	7019      	strb	r1, [r3, #0]
 800cd72:	4608      	mov	r0, r1
 800cd74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <__sfputs_r>:
 800cd7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7c:	4606      	mov	r6, r0
 800cd7e:	460f      	mov	r7, r1
 800cd80:	4614      	mov	r4, r2
 800cd82:	18d5      	adds	r5, r2, r3
 800cd84:	42ac      	cmp	r4, r5
 800cd86:	d101      	bne.n	800cd8c <__sfputs_r+0x12>
 800cd88:	2000      	movs	r0, #0
 800cd8a:	e007      	b.n	800cd9c <__sfputs_r+0x22>
 800cd8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd90:	463a      	mov	r2, r7
 800cd92:	4630      	mov	r0, r6
 800cd94:	f7ff ffda 	bl	800cd4c <__sfputc_r>
 800cd98:	1c43      	adds	r3, r0, #1
 800cd9a:	d1f3      	bne.n	800cd84 <__sfputs_r+0xa>
 800cd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cda0 <_vfiprintf_r>:
 800cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda4:	460d      	mov	r5, r1
 800cda6:	b09d      	sub	sp, #116	; 0x74
 800cda8:	4614      	mov	r4, r2
 800cdaa:	4698      	mov	r8, r3
 800cdac:	4606      	mov	r6, r0
 800cdae:	b118      	cbz	r0, 800cdb8 <_vfiprintf_r+0x18>
 800cdb0:	6983      	ldr	r3, [r0, #24]
 800cdb2:	b90b      	cbnz	r3, 800cdb8 <_vfiprintf_r+0x18>
 800cdb4:	f7fc f88c 	bl	8008ed0 <__sinit>
 800cdb8:	4b89      	ldr	r3, [pc, #548]	; (800cfe0 <_vfiprintf_r+0x240>)
 800cdba:	429d      	cmp	r5, r3
 800cdbc:	d11b      	bne.n	800cdf6 <_vfiprintf_r+0x56>
 800cdbe:	6875      	ldr	r5, [r6, #4]
 800cdc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdc2:	07d9      	lsls	r1, r3, #31
 800cdc4:	d405      	bmi.n	800cdd2 <_vfiprintf_r+0x32>
 800cdc6:	89ab      	ldrh	r3, [r5, #12]
 800cdc8:	059a      	lsls	r2, r3, #22
 800cdca:	d402      	bmi.n	800cdd2 <_vfiprintf_r+0x32>
 800cdcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdce:	f7fc f942 	bl	8009056 <__retarget_lock_acquire_recursive>
 800cdd2:	89ab      	ldrh	r3, [r5, #12]
 800cdd4:	071b      	lsls	r3, r3, #28
 800cdd6:	d501      	bpl.n	800cddc <_vfiprintf_r+0x3c>
 800cdd8:	692b      	ldr	r3, [r5, #16]
 800cdda:	b9eb      	cbnz	r3, 800ce18 <_vfiprintf_r+0x78>
 800cddc:	4629      	mov	r1, r5
 800cdde:	4630      	mov	r0, r6
 800cde0:	f7fd fe50 	bl	800aa84 <__swsetup_r>
 800cde4:	b1c0      	cbz	r0, 800ce18 <_vfiprintf_r+0x78>
 800cde6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cde8:	07dc      	lsls	r4, r3, #31
 800cdea:	d50e      	bpl.n	800ce0a <_vfiprintf_r+0x6a>
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf0:	b01d      	add	sp, #116	; 0x74
 800cdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf6:	4b7b      	ldr	r3, [pc, #492]	; (800cfe4 <_vfiprintf_r+0x244>)
 800cdf8:	429d      	cmp	r5, r3
 800cdfa:	d101      	bne.n	800ce00 <_vfiprintf_r+0x60>
 800cdfc:	68b5      	ldr	r5, [r6, #8]
 800cdfe:	e7df      	b.n	800cdc0 <_vfiprintf_r+0x20>
 800ce00:	4b79      	ldr	r3, [pc, #484]	; (800cfe8 <_vfiprintf_r+0x248>)
 800ce02:	429d      	cmp	r5, r3
 800ce04:	bf08      	it	eq
 800ce06:	68f5      	ldreq	r5, [r6, #12]
 800ce08:	e7da      	b.n	800cdc0 <_vfiprintf_r+0x20>
 800ce0a:	89ab      	ldrh	r3, [r5, #12]
 800ce0c:	0598      	lsls	r0, r3, #22
 800ce0e:	d4ed      	bmi.n	800cdec <_vfiprintf_r+0x4c>
 800ce10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce12:	f7fc f921 	bl	8009058 <__retarget_lock_release_recursive>
 800ce16:	e7e9      	b.n	800cdec <_vfiprintf_r+0x4c>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce1c:	2320      	movs	r3, #32
 800ce1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce26:	2330      	movs	r3, #48	; 0x30
 800ce28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cfec <_vfiprintf_r+0x24c>
 800ce2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce30:	f04f 0901 	mov.w	r9, #1
 800ce34:	4623      	mov	r3, r4
 800ce36:	469a      	mov	sl, r3
 800ce38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce3c:	b10a      	cbz	r2, 800ce42 <_vfiprintf_r+0xa2>
 800ce3e:	2a25      	cmp	r2, #37	; 0x25
 800ce40:	d1f9      	bne.n	800ce36 <_vfiprintf_r+0x96>
 800ce42:	ebba 0b04 	subs.w	fp, sl, r4
 800ce46:	d00b      	beq.n	800ce60 <_vfiprintf_r+0xc0>
 800ce48:	465b      	mov	r3, fp
 800ce4a:	4622      	mov	r2, r4
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	4630      	mov	r0, r6
 800ce50:	f7ff ff93 	bl	800cd7a <__sfputs_r>
 800ce54:	3001      	adds	r0, #1
 800ce56:	f000 80aa 	beq.w	800cfae <_vfiprintf_r+0x20e>
 800ce5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce5c:	445a      	add	r2, fp
 800ce5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ce60:	f89a 3000 	ldrb.w	r3, [sl]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f000 80a2 	beq.w	800cfae <_vfiprintf_r+0x20e>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce74:	f10a 0a01 	add.w	sl, sl, #1
 800ce78:	9304      	str	r3, [sp, #16]
 800ce7a:	9307      	str	r3, [sp, #28]
 800ce7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce80:	931a      	str	r3, [sp, #104]	; 0x68
 800ce82:	4654      	mov	r4, sl
 800ce84:	2205      	movs	r2, #5
 800ce86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce8a:	4858      	ldr	r0, [pc, #352]	; (800cfec <_vfiprintf_r+0x24c>)
 800ce8c:	f7f3 f9c0 	bl	8000210 <memchr>
 800ce90:	9a04      	ldr	r2, [sp, #16]
 800ce92:	b9d8      	cbnz	r0, 800cecc <_vfiprintf_r+0x12c>
 800ce94:	06d1      	lsls	r1, r2, #27
 800ce96:	bf44      	itt	mi
 800ce98:	2320      	movmi	r3, #32
 800ce9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce9e:	0713      	lsls	r3, r2, #28
 800cea0:	bf44      	itt	mi
 800cea2:	232b      	movmi	r3, #43	; 0x2b
 800cea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cea8:	f89a 3000 	ldrb.w	r3, [sl]
 800ceac:	2b2a      	cmp	r3, #42	; 0x2a
 800ceae:	d015      	beq.n	800cedc <_vfiprintf_r+0x13c>
 800ceb0:	9a07      	ldr	r2, [sp, #28]
 800ceb2:	4654      	mov	r4, sl
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	f04f 0c0a 	mov.w	ip, #10
 800ceba:	4621      	mov	r1, r4
 800cebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cec0:	3b30      	subs	r3, #48	; 0x30
 800cec2:	2b09      	cmp	r3, #9
 800cec4:	d94e      	bls.n	800cf64 <_vfiprintf_r+0x1c4>
 800cec6:	b1b0      	cbz	r0, 800cef6 <_vfiprintf_r+0x156>
 800cec8:	9207      	str	r2, [sp, #28]
 800ceca:	e014      	b.n	800cef6 <_vfiprintf_r+0x156>
 800cecc:	eba0 0308 	sub.w	r3, r0, r8
 800ced0:	fa09 f303 	lsl.w	r3, r9, r3
 800ced4:	4313      	orrs	r3, r2
 800ced6:	9304      	str	r3, [sp, #16]
 800ced8:	46a2      	mov	sl, r4
 800ceda:	e7d2      	b.n	800ce82 <_vfiprintf_r+0xe2>
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	1d19      	adds	r1, r3, #4
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	9103      	str	r1, [sp, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	bfbb      	ittet	lt
 800cee8:	425b      	neglt	r3, r3
 800ceea:	f042 0202 	orrlt.w	r2, r2, #2
 800ceee:	9307      	strge	r3, [sp, #28]
 800cef0:	9307      	strlt	r3, [sp, #28]
 800cef2:	bfb8      	it	lt
 800cef4:	9204      	strlt	r2, [sp, #16]
 800cef6:	7823      	ldrb	r3, [r4, #0]
 800cef8:	2b2e      	cmp	r3, #46	; 0x2e
 800cefa:	d10c      	bne.n	800cf16 <_vfiprintf_r+0x176>
 800cefc:	7863      	ldrb	r3, [r4, #1]
 800cefe:	2b2a      	cmp	r3, #42	; 0x2a
 800cf00:	d135      	bne.n	800cf6e <_vfiprintf_r+0x1ce>
 800cf02:	9b03      	ldr	r3, [sp, #12]
 800cf04:	1d1a      	adds	r2, r3, #4
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	9203      	str	r2, [sp, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	bfb8      	it	lt
 800cf0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf12:	3402      	adds	r4, #2
 800cf14:	9305      	str	r3, [sp, #20]
 800cf16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cffc <_vfiprintf_r+0x25c>
 800cf1a:	7821      	ldrb	r1, [r4, #0]
 800cf1c:	2203      	movs	r2, #3
 800cf1e:	4650      	mov	r0, sl
 800cf20:	f7f3 f976 	bl	8000210 <memchr>
 800cf24:	b140      	cbz	r0, 800cf38 <_vfiprintf_r+0x198>
 800cf26:	2340      	movs	r3, #64	; 0x40
 800cf28:	eba0 000a 	sub.w	r0, r0, sl
 800cf2c:	fa03 f000 	lsl.w	r0, r3, r0
 800cf30:	9b04      	ldr	r3, [sp, #16]
 800cf32:	4303      	orrs	r3, r0
 800cf34:	3401      	adds	r4, #1
 800cf36:	9304      	str	r3, [sp, #16]
 800cf38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf3c:	482c      	ldr	r0, [pc, #176]	; (800cff0 <_vfiprintf_r+0x250>)
 800cf3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf42:	2206      	movs	r2, #6
 800cf44:	f7f3 f964 	bl	8000210 <memchr>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d03f      	beq.n	800cfcc <_vfiprintf_r+0x22c>
 800cf4c:	4b29      	ldr	r3, [pc, #164]	; (800cff4 <_vfiprintf_r+0x254>)
 800cf4e:	bb1b      	cbnz	r3, 800cf98 <_vfiprintf_r+0x1f8>
 800cf50:	9b03      	ldr	r3, [sp, #12]
 800cf52:	3307      	adds	r3, #7
 800cf54:	f023 0307 	bic.w	r3, r3, #7
 800cf58:	3308      	adds	r3, #8
 800cf5a:	9303      	str	r3, [sp, #12]
 800cf5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf5e:	443b      	add	r3, r7
 800cf60:	9309      	str	r3, [sp, #36]	; 0x24
 800cf62:	e767      	b.n	800ce34 <_vfiprintf_r+0x94>
 800cf64:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf68:	460c      	mov	r4, r1
 800cf6a:	2001      	movs	r0, #1
 800cf6c:	e7a5      	b.n	800ceba <_vfiprintf_r+0x11a>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	3401      	adds	r4, #1
 800cf72:	9305      	str	r3, [sp, #20]
 800cf74:	4619      	mov	r1, r3
 800cf76:	f04f 0c0a 	mov.w	ip, #10
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf80:	3a30      	subs	r2, #48	; 0x30
 800cf82:	2a09      	cmp	r2, #9
 800cf84:	d903      	bls.n	800cf8e <_vfiprintf_r+0x1ee>
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d0c5      	beq.n	800cf16 <_vfiprintf_r+0x176>
 800cf8a:	9105      	str	r1, [sp, #20]
 800cf8c:	e7c3      	b.n	800cf16 <_vfiprintf_r+0x176>
 800cf8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf92:	4604      	mov	r4, r0
 800cf94:	2301      	movs	r3, #1
 800cf96:	e7f0      	b.n	800cf7a <_vfiprintf_r+0x1da>
 800cf98:	ab03      	add	r3, sp, #12
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	462a      	mov	r2, r5
 800cf9e:	4b16      	ldr	r3, [pc, #88]	; (800cff8 <_vfiprintf_r+0x258>)
 800cfa0:	a904      	add	r1, sp, #16
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7fc fa00 	bl	80093a8 <_printf_float>
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	1c78      	adds	r0, r7, #1
 800cfac:	d1d6      	bne.n	800cf5c <_vfiprintf_r+0x1bc>
 800cfae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfb0:	07d9      	lsls	r1, r3, #31
 800cfb2:	d405      	bmi.n	800cfc0 <_vfiprintf_r+0x220>
 800cfb4:	89ab      	ldrh	r3, [r5, #12]
 800cfb6:	059a      	lsls	r2, r3, #22
 800cfb8:	d402      	bmi.n	800cfc0 <_vfiprintf_r+0x220>
 800cfba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfbc:	f7fc f84c 	bl	8009058 <__retarget_lock_release_recursive>
 800cfc0:	89ab      	ldrh	r3, [r5, #12]
 800cfc2:	065b      	lsls	r3, r3, #25
 800cfc4:	f53f af12 	bmi.w	800cdec <_vfiprintf_r+0x4c>
 800cfc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfca:	e711      	b.n	800cdf0 <_vfiprintf_r+0x50>
 800cfcc:	ab03      	add	r3, sp, #12
 800cfce:	9300      	str	r3, [sp, #0]
 800cfd0:	462a      	mov	r2, r5
 800cfd2:	4b09      	ldr	r3, [pc, #36]	; (800cff8 <_vfiprintf_r+0x258>)
 800cfd4:	a904      	add	r1, sp, #16
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	f7fc fc8a 	bl	80098f0 <_printf_i>
 800cfdc:	e7e4      	b.n	800cfa8 <_vfiprintf_r+0x208>
 800cfde:	bf00      	nop
 800cfe0:	0800d734 	.word	0x0800d734
 800cfe4:	0800d754 	.word	0x0800d754
 800cfe8:	0800d714 	.word	0x0800d714
 800cfec:	0800da64 	.word	0x0800da64
 800cff0:	0800da6e 	.word	0x0800da6e
 800cff4:	080093a9 	.word	0x080093a9
 800cff8:	0800cd7b 	.word	0x0800cd7b
 800cffc:	0800da6a 	.word	0x0800da6a

0800d000 <_read_r>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	4d07      	ldr	r5, [pc, #28]	; (800d020 <_read_r+0x20>)
 800d004:	4604      	mov	r4, r0
 800d006:	4608      	mov	r0, r1
 800d008:	4611      	mov	r1, r2
 800d00a:	2200      	movs	r2, #0
 800d00c:	602a      	str	r2, [r5, #0]
 800d00e:	461a      	mov	r2, r3
 800d010:	f7f5 fedc 	bl	8002dcc <_read>
 800d014:	1c43      	adds	r3, r0, #1
 800d016:	d102      	bne.n	800d01e <_read_r+0x1e>
 800d018:	682b      	ldr	r3, [r5, #0]
 800d01a:	b103      	cbz	r3, 800d01e <_read_r+0x1e>
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	20005eb0 	.word	0x20005eb0
 800d024:	00000000 	.word	0x00000000

0800d028 <nan>:
 800d028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d030 <nan+0x8>
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	00000000 	.word	0x00000000
 800d034:	7ff80000 	.word	0x7ff80000

0800d038 <nanf>:
 800d038:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d040 <nanf+0x8>
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	7fc00000 	.word	0x7fc00000

0800d044 <__ascii_wctomb>:
 800d044:	b149      	cbz	r1, 800d05a <__ascii_wctomb+0x16>
 800d046:	2aff      	cmp	r2, #255	; 0xff
 800d048:	bf85      	ittet	hi
 800d04a:	238a      	movhi	r3, #138	; 0x8a
 800d04c:	6003      	strhi	r3, [r0, #0]
 800d04e:	700a      	strbls	r2, [r1, #0]
 800d050:	f04f 30ff 	movhi.w	r0, #4294967295
 800d054:	bf98      	it	ls
 800d056:	2001      	movls	r0, #1
 800d058:	4770      	bx	lr
 800d05a:	4608      	mov	r0, r1
 800d05c:	4770      	bx	lr
	...

0800d060 <__assert_func>:
 800d060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d062:	4614      	mov	r4, r2
 800d064:	461a      	mov	r2, r3
 800d066:	4b09      	ldr	r3, [pc, #36]	; (800d08c <__assert_func+0x2c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4605      	mov	r5, r0
 800d06c:	68d8      	ldr	r0, [r3, #12]
 800d06e:	b14c      	cbz	r4, 800d084 <__assert_func+0x24>
 800d070:	4b07      	ldr	r3, [pc, #28]	; (800d090 <__assert_func+0x30>)
 800d072:	9100      	str	r1, [sp, #0]
 800d074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d078:	4906      	ldr	r1, [pc, #24]	; (800d094 <__assert_func+0x34>)
 800d07a:	462b      	mov	r3, r5
 800d07c:	f000 f80e 	bl	800d09c <fiprintf>
 800d080:	f000 f862 	bl	800d148 <abort>
 800d084:	4b04      	ldr	r3, [pc, #16]	; (800d098 <__assert_func+0x38>)
 800d086:	461c      	mov	r4, r3
 800d088:	e7f3      	b.n	800d072 <__assert_func+0x12>
 800d08a:	bf00      	nop
 800d08c:	200002ec 	.word	0x200002ec
 800d090:	0800da75 	.word	0x0800da75
 800d094:	0800da82 	.word	0x0800da82
 800d098:	0800dab0 	.word	0x0800dab0

0800d09c <fiprintf>:
 800d09c:	b40e      	push	{r1, r2, r3}
 800d09e:	b503      	push	{r0, r1, lr}
 800d0a0:	4601      	mov	r1, r0
 800d0a2:	ab03      	add	r3, sp, #12
 800d0a4:	4805      	ldr	r0, [pc, #20]	; (800d0bc <fiprintf+0x20>)
 800d0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0aa:	6800      	ldr	r0, [r0, #0]
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	f7ff fe77 	bl	800cda0 <_vfiprintf_r>
 800d0b2:	b002      	add	sp, #8
 800d0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0b8:	b003      	add	sp, #12
 800d0ba:	4770      	bx	lr
 800d0bc:	200002ec 	.word	0x200002ec

0800d0c0 <_fstat_r>:
 800d0c0:	b538      	push	{r3, r4, r5, lr}
 800d0c2:	4d07      	ldr	r5, [pc, #28]	; (800d0e0 <_fstat_r+0x20>)
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	f7f5 fea6 	bl	8002e1e <_fstat>
 800d0d2:	1c43      	adds	r3, r0, #1
 800d0d4:	d102      	bne.n	800d0dc <_fstat_r+0x1c>
 800d0d6:	682b      	ldr	r3, [r5, #0]
 800d0d8:	b103      	cbz	r3, 800d0dc <_fstat_r+0x1c>
 800d0da:	6023      	str	r3, [r4, #0]
 800d0dc:	bd38      	pop	{r3, r4, r5, pc}
 800d0de:	bf00      	nop
 800d0e0:	20005eb0 	.word	0x20005eb0

0800d0e4 <_isatty_r>:
 800d0e4:	b538      	push	{r3, r4, r5, lr}
 800d0e6:	4d06      	ldr	r5, [pc, #24]	; (800d100 <_isatty_r+0x1c>)
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	4608      	mov	r0, r1
 800d0ee:	602b      	str	r3, [r5, #0]
 800d0f0:	f7f5 fea5 	bl	8002e3e <_isatty>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	d102      	bne.n	800d0fe <_isatty_r+0x1a>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	b103      	cbz	r3, 800d0fe <_isatty_r+0x1a>
 800d0fc:	6023      	str	r3, [r4, #0]
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	20005eb0 	.word	0x20005eb0

0800d104 <memmove>:
 800d104:	4288      	cmp	r0, r1
 800d106:	b510      	push	{r4, lr}
 800d108:	eb01 0402 	add.w	r4, r1, r2
 800d10c:	d902      	bls.n	800d114 <memmove+0x10>
 800d10e:	4284      	cmp	r4, r0
 800d110:	4623      	mov	r3, r4
 800d112:	d807      	bhi.n	800d124 <memmove+0x20>
 800d114:	1e43      	subs	r3, r0, #1
 800d116:	42a1      	cmp	r1, r4
 800d118:	d008      	beq.n	800d12c <memmove+0x28>
 800d11a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d11e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d122:	e7f8      	b.n	800d116 <memmove+0x12>
 800d124:	4402      	add	r2, r0
 800d126:	4601      	mov	r1, r0
 800d128:	428a      	cmp	r2, r1
 800d12a:	d100      	bne.n	800d12e <memmove+0x2a>
 800d12c:	bd10      	pop	{r4, pc}
 800d12e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d136:	e7f7      	b.n	800d128 <memmove+0x24>

0800d138 <_malloc_usable_size_r>:
 800d138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d13c:	1f18      	subs	r0, r3, #4
 800d13e:	2b00      	cmp	r3, #0
 800d140:	bfbc      	itt	lt
 800d142:	580b      	ldrlt	r3, [r1, r0]
 800d144:	18c0      	addlt	r0, r0, r3
 800d146:	4770      	bx	lr

0800d148 <abort>:
 800d148:	b508      	push	{r3, lr}
 800d14a:	2006      	movs	r0, #6
 800d14c:	f000 f82c 	bl	800d1a8 <raise>
 800d150:	2001      	movs	r0, #1
 800d152:	f7f5 fe31 	bl	8002db8 <_exit>

0800d156 <_raise_r>:
 800d156:	291f      	cmp	r1, #31
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4604      	mov	r4, r0
 800d15c:	460d      	mov	r5, r1
 800d15e:	d904      	bls.n	800d16a <_raise_r+0x14>
 800d160:	2316      	movs	r3, #22
 800d162:	6003      	str	r3, [r0, #0]
 800d164:	f04f 30ff 	mov.w	r0, #4294967295
 800d168:	bd38      	pop	{r3, r4, r5, pc}
 800d16a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d16c:	b112      	cbz	r2, 800d174 <_raise_r+0x1e>
 800d16e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d172:	b94b      	cbnz	r3, 800d188 <_raise_r+0x32>
 800d174:	4620      	mov	r0, r4
 800d176:	f000 f831 	bl	800d1dc <_getpid_r>
 800d17a:	462a      	mov	r2, r5
 800d17c:	4601      	mov	r1, r0
 800d17e:	4620      	mov	r0, r4
 800d180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d184:	f000 b818 	b.w	800d1b8 <_kill_r>
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d00a      	beq.n	800d1a2 <_raise_r+0x4c>
 800d18c:	1c59      	adds	r1, r3, #1
 800d18e:	d103      	bne.n	800d198 <_raise_r+0x42>
 800d190:	2316      	movs	r3, #22
 800d192:	6003      	str	r3, [r0, #0]
 800d194:	2001      	movs	r0, #1
 800d196:	e7e7      	b.n	800d168 <_raise_r+0x12>
 800d198:	2400      	movs	r4, #0
 800d19a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d19e:	4628      	mov	r0, r5
 800d1a0:	4798      	blx	r3
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	e7e0      	b.n	800d168 <_raise_r+0x12>
	...

0800d1a8 <raise>:
 800d1a8:	4b02      	ldr	r3, [pc, #8]	; (800d1b4 <raise+0xc>)
 800d1aa:	4601      	mov	r1, r0
 800d1ac:	6818      	ldr	r0, [r3, #0]
 800d1ae:	f7ff bfd2 	b.w	800d156 <_raise_r>
 800d1b2:	bf00      	nop
 800d1b4:	200002ec 	.word	0x200002ec

0800d1b8 <_kill_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	4d07      	ldr	r5, [pc, #28]	; (800d1d8 <_kill_r+0x20>)
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4604      	mov	r4, r0
 800d1c0:	4608      	mov	r0, r1
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	602b      	str	r3, [r5, #0]
 800d1c6:	f7f5 fde7 	bl	8002d98 <_kill>
 800d1ca:	1c43      	adds	r3, r0, #1
 800d1cc:	d102      	bne.n	800d1d4 <_kill_r+0x1c>
 800d1ce:	682b      	ldr	r3, [r5, #0]
 800d1d0:	b103      	cbz	r3, 800d1d4 <_kill_r+0x1c>
 800d1d2:	6023      	str	r3, [r4, #0]
 800d1d4:	bd38      	pop	{r3, r4, r5, pc}
 800d1d6:	bf00      	nop
 800d1d8:	20005eb0 	.word	0x20005eb0

0800d1dc <_getpid_r>:
 800d1dc:	f7f5 bdd4 	b.w	8002d88 <_getpid>

0800d1e0 <logf>:
 800d1e0:	b508      	push	{r3, lr}
 800d1e2:	ed2d 8b02 	vpush	{d8}
 800d1e6:	eeb0 8a40 	vmov.f32	s16, s0
 800d1ea:	f000 f827 	bl	800d23c <__ieee754_logf>
 800d1ee:	eeb4 8a48 	vcmp.f32	s16, s16
 800d1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1f6:	d60f      	bvs.n	800d218 <logf+0x38>
 800d1f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d200:	dc0a      	bgt.n	800d218 <logf+0x38>
 800d202:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20a:	d108      	bne.n	800d21e <logf+0x3e>
 800d20c:	f7fb fd2e 	bl	8008c6c <__errno>
 800d210:	2322      	movs	r3, #34	; 0x22
 800d212:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800d234 <logf+0x54>
 800d216:	6003      	str	r3, [r0, #0]
 800d218:	ecbd 8b02 	vpop	{d8}
 800d21c:	bd08      	pop	{r3, pc}
 800d21e:	f7fb fd25 	bl	8008c6c <__errno>
 800d222:	ecbd 8b02 	vpop	{d8}
 800d226:	2321      	movs	r3, #33	; 0x21
 800d228:	6003      	str	r3, [r0, #0]
 800d22a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d22e:	4802      	ldr	r0, [pc, #8]	; (800d238 <logf+0x58>)
 800d230:	f7ff bf02 	b.w	800d038 <nanf>
 800d234:	ff800000 	.word	0xff800000
 800d238:	0800dab0 	.word	0x0800dab0

0800d23c <__ieee754_logf>:
 800d23c:	ee10 3a10 	vmov	r3, s0
 800d240:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d244:	d106      	bne.n	800d254 <__ieee754_logf+0x18>
 800d246:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d3dc <__ieee754_logf+0x1a0>
 800d24a:	eddf 7a65 	vldr	s15, [pc, #404]	; 800d3e0 <__ieee754_logf+0x1a4>
 800d24e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d252:	4770      	bx	lr
 800d254:	2b00      	cmp	r3, #0
 800d256:	da02      	bge.n	800d25e <__ieee754_logf+0x22>
 800d258:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d25c:	e7f5      	b.n	800d24a <__ieee754_logf+0xe>
 800d25e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d262:	db02      	blt.n	800d26a <__ieee754_logf+0x2e>
 800d264:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d268:	4770      	bx	lr
 800d26a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d26e:	bfb8      	it	lt
 800d270:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800d3e4 <__ieee754_logf+0x1a8>
 800d274:	485c      	ldr	r0, [pc, #368]	; (800d3e8 <__ieee754_logf+0x1ac>)
 800d276:	bfbe      	ittt	lt
 800d278:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d27c:	f06f 0118 	mvnlt.w	r1, #24
 800d280:	ee17 3a90 	vmovlt	r3, s15
 800d284:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800d288:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d28c:	4418      	add	r0, r3
 800d28e:	bfa8      	it	ge
 800d290:	2100      	movge	r1, #0
 800d292:	3a7f      	subs	r2, #127	; 0x7f
 800d294:	440a      	add	r2, r1
 800d296:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800d29a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800d29e:	4319      	orrs	r1, r3
 800d2a0:	ee00 1a10 	vmov	s0, r1
 800d2a4:	4951      	ldr	r1, [pc, #324]	; (800d3ec <__ieee754_logf+0x1b0>)
 800d2a6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800d2aa:	f103 000f 	add.w	r0, r3, #15
 800d2ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d2b2:	4001      	ands	r1, r0
 800d2b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d2b8:	bb89      	cbnz	r1, 800d31e <__ieee754_logf+0xe2>
 800d2ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c2:	d10f      	bne.n	800d2e4 <__ieee754_logf+0xa8>
 800d2c4:	2a00      	cmp	r2, #0
 800d2c6:	f000 8085 	beq.w	800d3d4 <__ieee754_logf+0x198>
 800d2ca:	ee07 2a90 	vmov	s15, r2
 800d2ce:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800d3f0 <__ieee754_logf+0x1b4>
 800d2d2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800d3f4 <__ieee754_logf+0x1b8>
 800d2d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2da:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d2de:	eea7 0a87 	vfma.f32	s0, s15, s14
 800d2e2:	4770      	bx	lr
 800d2e4:	eddf 6a44 	vldr	s13, [pc, #272]	; 800d3f8 <__ieee754_logf+0x1bc>
 800d2e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d2ec:	eee0 7a66 	vfms.f32	s15, s0, s13
 800d2f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d2f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2f8:	b912      	cbnz	r2, 800d300 <__ieee754_logf+0xc4>
 800d2fa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d2fe:	4770      	bx	lr
 800d300:	ee07 2a90 	vmov	s15, r2
 800d304:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800d3f0 <__ieee754_logf+0x1b4>
 800d308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d30c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d310:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d314:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800d3f4 <__ieee754_logf+0x1b8>
 800d318:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800d31c:	4770      	bx	lr
 800d31e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d322:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d326:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d3fc <__ieee754_logf+0x1c0>
 800d32a:	eddf 4a35 	vldr	s9, [pc, #212]	; 800d400 <__ieee754_logf+0x1c4>
 800d32e:	4935      	ldr	r1, [pc, #212]	; (800d404 <__ieee754_logf+0x1c8>)
 800d330:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800d334:	4419      	add	r1, r3
 800d336:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800d33a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d33e:	430b      	orrs	r3, r1
 800d340:	2b00      	cmp	r3, #0
 800d342:	ee07 2a90 	vmov	s15, r2
 800d346:	ee26 5a06 	vmul.f32	s10, s12, s12
 800d34a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d34e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800d352:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800d408 <__ieee754_logf+0x1cc>
 800d356:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d35a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d40c <__ieee754_logf+0x1d0>
 800d35e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800d362:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d410 <__ieee754_logf+0x1d4>
 800d366:	eee7 7a24 	vfma.f32	s15, s14, s9
 800d36a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800d414 <__ieee754_logf+0x1d8>
 800d36e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800d372:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d418 <__ieee754_logf+0x1dc>
 800d376:	eee4 7a87 	vfma.f32	s15, s9, s14
 800d37a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d37e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d382:	dd1c      	ble.n	800d3be <__ieee754_logf+0x182>
 800d384:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d388:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d38c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800d390:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d394:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d398:	b922      	cbnz	r2, 800d3a4 <__ieee754_logf+0x168>
 800d39a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d39e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d3a2:	4770      	bx	lr
 800d3a4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800d3f0 <__ieee754_logf+0x1b4>
 800d3a8:	eee6 7a86 	vfma.f32	s15, s13, s12
 800d3ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3b0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d3b4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d3f4 <__ieee754_logf+0x1b8>
 800d3b8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800d3bc:	4770      	bx	lr
 800d3be:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d3c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d3c6:	2a00      	cmp	r2, #0
 800d3c8:	d0e9      	beq.n	800d39e <__ieee754_logf+0x162>
 800d3ca:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800d3f0 <__ieee754_logf+0x1b4>
 800d3ce:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d3d2:	e7ed      	b.n	800d3b0 <__ieee754_logf+0x174>
 800d3d4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800d3e0 <__ieee754_logf+0x1a4>
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	cc000000 	.word	0xcc000000
 800d3e0:	00000000 	.word	0x00000000
 800d3e4:	4c000000 	.word	0x4c000000
 800d3e8:	004afb20 	.word	0x004afb20
 800d3ec:	007ffff0 	.word	0x007ffff0
 800d3f0:	3717f7d1 	.word	0x3717f7d1
 800d3f4:	3f317180 	.word	0x3f317180
 800d3f8:	3eaaaaab 	.word	0x3eaaaaab
 800d3fc:	3e1cd04f 	.word	0x3e1cd04f
 800d400:	3e178897 	.word	0x3e178897
 800d404:	ffcf5c30 	.word	0xffcf5c30
 800d408:	3e638e29 	.word	0x3e638e29
 800d40c:	3ecccccd 	.word	0x3ecccccd
 800d410:	3e3a3325 	.word	0x3e3a3325
 800d414:	3e924925 	.word	0x3e924925
 800d418:	3f2aaaab 	.word	0x3f2aaaab

0800d41c <_init>:
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41e:	bf00      	nop
 800d420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d422:	bc08      	pop	{r3}
 800d424:	469e      	mov	lr, r3
 800d426:	4770      	bx	lr

0800d428 <_fini>:
 800d428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42a:	bf00      	nop
 800d42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d42e:	bc08      	pop	{r3}
 800d430:	469e      	mov	lr, r3
 800d432:	4770      	bx	lr
