
PROY_SEU_E3_CI_21793606.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800a488  0800a488  0001a488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa94  0800aa94  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa94  0800aa94  0001aa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa9c  0800aa9c  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa9c  0800aa9c  0001aa9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaa0  0800aaa0  0001aaa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800aaa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e24  2000021c  0800acc0  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005040  0800acc0  00025040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014751  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000373a  00000000  00000000  0003499d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000380d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  000390a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192b1  00000000  00000000  00039f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146f1  00000000  00000000  000531b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d2d7  00000000  00000000  000678a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104b79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000501c  00000000  00000000  00104bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a46c 	.word	0x0800a46c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	0800a46c 	.word	0x0800a46c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <encender_leds>:

			}
			HAL_GPIO_WritePin(ledGPIO[j], ledPIN[j], 0);
		}
}
void encender_leds(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	//enciende el resto de los leds en función de si son los que no parapadeán y necesitan estár encendidos
	for(int j = 0 ; j < 8 ; j++){
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	e017      	b.n	8000ef8 <encender_leds+0x3c>
		if (j!=led_level_buzzer){
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <encender_leds+0xac>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d00f      	beq.n	8000ef2 <encender_leds+0x36>
			HAL_GPIO_WritePin(ledGPIO[j], ledPIN[j], ledsEncendidos[j]);}
 8000ed2:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <encender_leds+0xb0>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eda:	4a25      	ldr	r2, [pc, #148]	; (8000f70 <encender_leds+0xb4>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000ee2:	4a24      	ldr	r2, [pc, #144]	; (8000f74 <encender_leds+0xb8>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	f002 ff1f 	bl	8003d30 <HAL_GPIO_WritePin>
	for(int j = 0 ; j < 8 ; j++){
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b07      	cmp	r3, #7
 8000efc:	dde4      	ble.n	8000ec8 <encender_leds+0xc>

	}
	if (llamadas>=10000){
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <encender_leds+0xbc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f06:	4293      	cmp	r3, r2
 8000f08:	dd25      	ble.n	8000f56 <encender_leds+0x9a>
		if (led_level_buzzer>=8){
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <encender_leds+0xac>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b07      	cmp	r3, #7
 8000f10:	dd02      	ble.n	8000f18 <encender_leds+0x5c>
			led_level_buzzer=7;
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <encender_leds+0xac>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ledGPIO[led_level_buzzer], ledPIN[led_level_buzzer], blinker_value);
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <encender_leds+0xac>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <encender_leds+0xb0>)
 8000f1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <encender_leds+0xac>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <encender_leds+0xb4>)
 8000f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2c:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <encender_leds+0xc0>)
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	f002 fefc 	bl	8003d30 <HAL_GPIO_WritePin>
		//cambia el valor de los leds para hacer que parpadén
		if(blinker_value==1){
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <encender_leds+0xc0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d103      	bne.n	8000f48 <encender_leds+0x8c>
			blinker_value=0;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <encender_leds+0xc0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e002      	b.n	8000f4e <encender_leds+0x92>
		}else{
			blinker_value=1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <encender_leds+0xc0>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
		}
		llamadas=0;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <encender_leds+0xbc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
	}else{
		llamadas++;
	}
}
 8000f54:	e004      	b.n	8000f60 <encender_leds+0xa4>
		llamadas++;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <encender_leds+0xbc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <encender_leds+0xbc>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000264 	.word	0x20000264
 8000f6c:	2000001c 	.word	0x2000001c
 8000f70:	0800a684 	.word	0x0800a684
 8000f74:	20000244 	.word	0x20000244
 8000f78:	2000023c 	.word	0x2000023c
 8000f7c:	20000014 	.word	0x20000014

08000f80 <lecturaPonteciometroSetAlarma>:
			}else{
				ledsEncendidos[i]= 0;
			}
		}
}
void lecturaPonteciometroSetAlarma(void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

	sConfig.Channel = ADC_CHANNEL_4;
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <lecturaPonteciometroSetAlarma+0xd8>)
 8000f88:	2204      	movs	r2, #4
 8000f8a:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <lecturaPonteciometroSetAlarma+0xd8>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <lecturaPonteciometroSetAlarma+0xd8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	492f      	ldr	r1, [pc, #188]	; (8001058 <lecturaPonteciometroSetAlarma+0xd8>)
 8000f9a:	4830      	ldr	r0, [pc, #192]	; (800105c <lecturaPonteciometroSetAlarma+0xdc>)
 8000f9c:	f001 fe0c 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <lecturaPonteciometroSetAlarma+0x2a>
	{
		Error_Handler();
 8000fa6:	f000 fc85 	bl	80018b4 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8000faa:	482c      	ldr	r0, [pc, #176]	; (800105c <lecturaPonteciometroSetAlarma+0xdc>)
 8000fac:	f001 fc84 	bl	80028b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,10000);
 8000fb0:	f242 7110 	movw	r1, #10000	; 0x2710
 8000fb4:	4829      	ldr	r0, [pc, #164]	; (800105c <lecturaPonteciometroSetAlarma+0xdc>)
 8000fb6:	f001 fd66 	bl	8002a86 <HAL_ADC_PollForConversion>
	float valor=HAL_ADC_GetValue(&hadc1);
 8000fba:	4828      	ldr	r0, [pc, #160]	; (800105c <lecturaPonteciometroSetAlarma+0xdc>)
 8000fbc:	f001 fdee 	bl	8002b9c <HAL_ADC_GetValue>
 8000fc0:	ee07 0a90 	vmov	s15, r0
 8000fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc8:	edc7 7a00 	vstr	s15, [r7]
	HAL_ADC_Stop(&hadc1);
 8000fcc:	4823      	ldr	r0, [pc, #140]	; (800105c <lecturaPonteciometroSetAlarma+0xdc>)
 8000fce:	f001 fd27 	bl	8002a20 <HAL_ADC_Stop>

		if(valor>20){
 8000fd2:	edd7 7a00 	vldr	s15, [r7]
 8000fd6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe2:	dd0c      	ble.n	8000ffe <lecturaPonteciometroSetAlarma+0x7e>
			led_level_buzzer=valor/500;
 8000fe4:	ed97 7a00 	vldr	s14, [r7]
 8000fe8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001060 <lecturaPonteciometroSetAlarma+0xe0>
 8000fec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff4:	ee17 2a90 	vmov	r2, s15
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <lecturaPonteciometroSetAlarma+0xe4>)
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e003      	b.n	8001006 <lecturaPonteciometroSetAlarma+0x86>
		}else{
			led_level_buzzer=-1;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <lecturaPonteciometroSetAlarma+0xe4>)
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	601a      	str	r2, [r3, #0]
		}
		if (led_level_buzzer>7){
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <lecturaPonteciometroSetAlarma+0xe4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b07      	cmp	r3, #7
 800100c:	dd02      	ble.n	8001014 <lecturaPonteciometroSetAlarma+0x94>
			led_level_buzzer=7;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <lecturaPonteciometroSetAlarma+0xe4>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
		}
		for(int i = 0 ;i<8;i++){
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	e016      	b.n	8001048 <lecturaPonteciometroSetAlarma+0xc8>
		if (led_level_buzzer>=0 && led_level_buzzer>=i){
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <lecturaPonteciometroSetAlarma+0xe4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0a      	blt.n	8001038 <lecturaPonteciometroSetAlarma+0xb8>
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <lecturaPonteciometroSetAlarma+0xe4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dc05      	bgt.n	8001038 <lecturaPonteciometroSetAlarma+0xb8>
			ledsEncendidos[i]= 1;
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <lecturaPonteciometroSetAlarma+0xe8>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2101      	movs	r1, #1
 8001032:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001036:	e004      	b.n	8001042 <lecturaPonteciometroSetAlarma+0xc2>
		}else{
			ledsEncendidos[i]= 0;
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <lecturaPonteciometroSetAlarma+0xe8>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2100      	movs	r1, #0
 800103e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0 ;i<8;i++){
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3301      	adds	r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b07      	cmp	r3, #7
 800104c:	dde5      	ble.n	800101a <lecturaPonteciometroSetAlarma+0x9a>
		}
	}
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000026c 	.word	0x2000026c
 800105c:	200004d8 	.word	0x200004d8
 8001060:	43fa0000 	.word	0x43fa0000
 8001064:	20000264 	.word	0x20000264
 8001068:	20000244 	.word	0x20000244

0800106c <ldrReadAndmodify>:

void ldrReadAndmodify(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0

	sConfig.Channel = ADC_CHANNEL_0;
 8001072:	4b32      	ldr	r3, [pc, #200]	; (800113c <ldrReadAndmodify+0xd0>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <ldrReadAndmodify+0xd0>)
 800107a:	2201      	movs	r2, #1
 800107c:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800107e:	4b2f      	ldr	r3, [pc, #188]	; (800113c <ldrReadAndmodify+0xd0>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001084:	492d      	ldr	r1, [pc, #180]	; (800113c <ldrReadAndmodify+0xd0>)
 8001086:	482e      	ldr	r0, [pc, #184]	; (8001140 <ldrReadAndmodify+0xd4>)
 8001088:	f001 fd96 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <ldrReadAndmodify+0x2a>
	{
		Error_Handler();
 8001092:	f000 fc0f 	bl	80018b4 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8001096:	482a      	ldr	r0, [pc, #168]	; (8001140 <ldrReadAndmodify+0xd4>)
 8001098:	f001 fc0e 	bl	80028b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,10000);
 800109c:	f242 7110 	movw	r1, #10000	; 0x2710
 80010a0:	4827      	ldr	r0, [pc, #156]	; (8001140 <ldrReadAndmodify+0xd4>)
 80010a2:	f001 fcf0 	bl	8002a86 <HAL_ADC_PollForConversion>
	float valorL=HAL_ADC_GetValue(&hadc1);
 80010a6:	4826      	ldr	r0, [pc, #152]	; (8001140 <ldrReadAndmodify+0xd4>)
 80010a8:	f001 fd78 	bl	8002b9c <HAL_ADC_GetValue>
 80010ac:	ee07 0a90 	vmov	s15, r0
 80010b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b4:	edc7 7a02 	vstr	s15, [r7, #8]
	valorReal = (1-(valorL/(float)0xfff))*100;//porcentaje de luminiscencia
 80010b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80010bc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001144 <ldrReadAndmodify+0xd8>
 80010c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010cc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001148 <ldrReadAndmodify+0xdc>
 80010d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <ldrReadAndmodify+0xe0>)
 80010d6:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 80010da:	4819      	ldr	r0, [pc, #100]	; (8001140 <ldrReadAndmodify+0xd4>)
 80010dc:	f001 fca0 	bl	8002a20 <HAL_ADC_Stop>
	float stepLDR=12.5;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <ldrReadAndmodify+0xe4>)
 80010e2:	607b      	str	r3, [r7, #4]
	ultimo_led=valorReal/stepLDR;//division para calcular el ultimo led encedido
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <ldrReadAndmodify+0xe0>)
 80010e6:	edd3 6a00 	vldr	s13, [r3]
 80010ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80010ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f6:	ee17 2a90 	vmov	r2, s15
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <ldrReadAndmodify+0xe8>)
 80010fc:	601a      	str	r2, [r3, #0]

	for(int i = 0 ;i<8;i++){
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e012      	b.n	800112a <ldrReadAndmodify+0xbe>
			if ( ultimo_led>=i){
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <ldrReadAndmodify+0xe8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	429a      	cmp	r2, r3
 800110c:	dc05      	bgt.n	800111a <ldrReadAndmodify+0xae>
				ledsEncendidos[i]= 1;
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <ldrReadAndmodify+0xec>)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2101      	movs	r1, #1
 8001114:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001118:	e004      	b.n	8001124 <ldrReadAndmodify+0xb8>
			}else{
				ledsEncendidos[i]= 0;
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <ldrReadAndmodify+0xec>)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2100      	movs	r1, #0
 8001120:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ;i<8;i++){
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b07      	cmp	r3, #7
 800112e:	dde9      	ble.n	8001104 <ldrReadAndmodify+0x98>
			}
		}
	//encender_leds();
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000026c 	.word	0x2000026c
 8001140:	200004d8 	.word	0x200004d8
 8001144:	457ff000 	.word	0x457ff000
 8001148:	42c80000 	.word	0x42c80000
 800114c:	20000280 	.word	0x20000280
 8001150:	41480000 	.word	0x41480000
 8001154:	20000268 	.word	0x20000268
 8001158:	20000244 	.word	0x20000244

0800115c <ntcReadAndmodify>:
void ntcReadAndmodify(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	ed2d 8b02 	vpush	{d8}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_1;
 8001166:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <ntcReadAndmodify+0x144>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <ntcReadAndmodify+0x144>)
 800116e:	2201      	movs	r2, #1
 8001170:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <ntcReadAndmodify+0x144>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	4949      	ldr	r1, [pc, #292]	; (80012a0 <ntcReadAndmodify+0x144>)
 800117a:	484a      	ldr	r0, [pc, #296]	; (80012a4 <ntcReadAndmodify+0x148>)
 800117c:	f001 fd1c 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <ntcReadAndmodify+0x2e>
	{
			Error_Handler();
 8001186:	f000 fb95 	bl	80018b4 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 800118a:	4846      	ldr	r0, [pc, #280]	; (80012a4 <ntcReadAndmodify+0x148>)
 800118c:	f001 fb94 	bl	80028b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,10000);
 8001190:	f242 7110 	movw	r1, #10000	; 0x2710
 8001194:	4843      	ldr	r0, [pc, #268]	; (80012a4 <ntcReadAndmodify+0x148>)
 8001196:	f001 fc76 	bl	8002a86 <HAL_ADC_PollForConversion>
	float B = 3950.f;
 800119a:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <ntcReadAndmodify+0x14c>)
 800119c:	613b      	str	r3, [r7, #16]
	float c = HAL_ADC_GetValue(&hadc1);
 800119e:	4841      	ldr	r0, [pc, #260]	; (80012a4 <ntcReadAndmodify+0x148>)
 80011a0:	f001 fcfc 	bl	8002b9c <HAL_ADC_GetValue>
 80011a4:	ee07 0a90 	vmov	s15, r0
 80011a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ac:	edc7 7a03 	vstr	s15, [r7, #12]
	float finalVal = c/(float)0xFFF * 3.3f;
 80011b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80011b4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80012ac <ntcReadAndmodify+0x150>
 80011b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011bc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80012b0 <ntcReadAndmodify+0x154>
 80011c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c4:	edc7 7a02 	vstr	s15, [r7, #8]
	float resistencia = (3.3f * NTC_RDIV) / (3.3f - finalVal) - NTC_RDIV;
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <ntcReadAndmodify+0x158>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80012b0 <ntcReadAndmodify+0x154>
 80011d2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80011d6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80012b0 <ntcReadAndmodify+0x154>
 80011da:	edd7 7a02 	vldr	s15, [r7, #8]
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011e6:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <ntcReadAndmodify+0x158>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f0:	edc7 7a01 	vstr	s15, [r7, #4]
	temperatura = (NTC_B / (logf(resistencia / NTC_RDIV )+ NTC_B/NTC_T25)) - 273.f;
 80011f4:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <ntcReadAndmodify+0x15c>)
 80011f6:	ed93 8a00 	vldr	s16, [r3]
 80011fa:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <ntcReadAndmodify+0x158>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ed97 7a01 	vldr	s14, [r7, #4]
 8001204:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001208:	eeb0 0a66 	vmov.f32	s0, s13
 800120c:	f009 f810 	bl	800a230 <logf>
 8001210:	eeb0 6a40 	vmov.f32	s12, s0
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <ntcReadAndmodify+0x15c>)
 8001216:	edd3 6a00 	vldr	s13, [r3]
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <ntcReadAndmodify+0x160>)
 800121c:	ed93 7a00 	vldr	s14, [r3]
 8001220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001224:	ee36 7a27 	vadd.f32	s14, s12, s15
 8001228:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800122c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80012c0 <ntcReadAndmodify+0x164>
 8001230:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <ntcReadAndmodify+0x168>)
 8001236:	edc3 7a00 	vstr	s15, [r3]
	float stepNTC=0.625;
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <ntcReadAndmodify+0x16c>)
 800123c:	603b      	str	r3, [r7, #0]
	ultimo_led=(temperatura-25)/stepNTC;//division para calcular el ultimo led encedido
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <ntcReadAndmodify+0x168>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001248:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800124c:	ed97 7a00 	vldr	s14, [r7]
 8001250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001258:	ee17 2a90 	vmov	r2, s15
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <ntcReadAndmodify+0x170>)
 800125e:	601a      	str	r2, [r3, #0]
	for(int i = 0 ;i<8;i++){
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e012      	b.n	800128c <ntcReadAndmodify+0x130>
		if ( ultimo_led>=i){
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <ntcReadAndmodify+0x170>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	dc05      	bgt.n	800127c <ntcReadAndmodify+0x120>
			ledsEncendidos[i]= 1;
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <ntcReadAndmodify+0x174>)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2101      	movs	r1, #1
 8001276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800127a:	e004      	b.n	8001286 <ntcReadAndmodify+0x12a>
		}else{
			ledsEncendidos[i]= 0;
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <ntcReadAndmodify+0x174>)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2100      	movs	r1, #0
 8001282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ;i<8;i++){
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b07      	cmp	r3, #7
 8001290:	dde9      	ble.n	8001266 <ntcReadAndmodify+0x10a>
		}
	}
	//encender_leds();


}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	ecbd 8b02 	vpop	{d8}
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000026c 	.word	0x2000026c
 80012a4:	200004d8 	.word	0x200004d8
 80012a8:	4576e000 	.word	0x4576e000
 80012ac:	457ff000 	.word	0x457ff000
 80012b0:	40533333 	.word	0x40533333
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000004 	.word	0x20000004
 80012c0:	43888000 	.word	0x43888000
 80012c4:	2000027c 	.word	0x2000027c
 80012c8:	3f200000 	.word	0x3f200000
 80012cc:	20000268 	.word	0x20000268
 80012d0:	20000244 	.word	0x20000244

080012d4 <buzzerStart>:
void buzzerStart(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	if(ultimo_led>=led_level_buzzer&&reset_Buzzer>100000){
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <buzzerStart+0x3c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <buzzerStart+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	db0d      	blt.n	8001300 <buzzerStart+0x2c>
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <buzzerStart+0x44>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0c      	ldr	r2, [pc, #48]	; (800131c <buzzerStart+0x48>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	dd08      	ble.n	8001300 <buzzerStart+0x2c>
		zumbar=1;
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <buzzerStart+0x4c>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Buzzer_GPIO_Port,Buzzer_Pin, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	480a      	ldr	r0, [pc, #40]	; (8001324 <buzzerStart+0x50>)
 80012fa:	f002 fd19 	bl	8003d30 <HAL_GPIO_WritePin>
 80012fe:	e005      	b.n	800130c <buzzerStart+0x38>

	}else{
		reset_Buzzer++;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <buzzerStart+0x44>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <buzzerStart+0x44>)
 8001308:	6013      	str	r3, [r2, #0]
	}
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000268 	.word	0x20000268
 8001314:	20000264 	.word	0x20000264
 8001318:	20000018 	.word	0x20000018
 800131c:	000186a0 	.word	0x000186a0
 8001320:	20000240 	.word	0x20000240
 8001324:	40020000 	.word	0x40020000

08001328 <buzzerStop>:

void buzzerStop(void){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	if(zumbar==1&&botonD==0){
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <buzzerStop+0x34>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d111      	bne.n	8001358 <buzzerStop+0x30>
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <buzzerStop+0x38>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10d      	bne.n	8001358 <buzzerStop+0x30>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	4808      	ldr	r0, [pc, #32]	; (8001364 <buzzerStop+0x3c>)
 8001342:	f002 fcf5 	bl	8003d30 <HAL_GPIO_WritePin>
		botonD=1;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <buzzerStop+0x38>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
		reset_Buzzer=0;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <buzzerStop+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
		zumbar=0;
 8001352:	4b02      	ldr	r3, [pc, #8]	; (800135c <buzzerStop+0x34>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
	}
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000240 	.word	0x20000240
 8001360:	2000000c 	.word	0x2000000c
 8001364:	40020000 	.word	0x40020000
 8001368:	20000018 	.word	0x20000018

0800136c <programaPrincipal>:
void programaPrincipal(void){
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af02      	add	r7, sp, #8
	//leer pulsador y cambiar el modo de ldr a ntc o viciversa
	botonD= HAL_GPIO_ReadPin(Pulsador1_GPIO_Port,Pulsador1_Pin);
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	482a      	ldr	r0, [pc, #168]	; (8001420 <programaPrincipal+0xb4>)
 8001376:	f002 fcc3 	bl	8003d00 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <programaPrincipal+0xb8>)
 8001380:	601a      	str	r2, [r3, #0]
	botonI= HAL_GPIO_ReadPin(Pulsador2_GPIO_Port,Pulsador2_Pin);
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	4828      	ldr	r0, [pc, #160]	; (8001428 <programaPrincipal+0xbc>)
 8001386:	f002 fcbb 	bl	8003d00 <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <programaPrincipal+0xc0>)
 8001390:	601a      	str	r2, [r3, #0]

	buzzerStart();
 8001392:	f7ff ff9f 	bl	80012d4 <buzzerStart>
	buzzerStop();
 8001396:	f7ff ffc7 	bl	8001328 <buzzerStop>
	printf("la lectura de cambiar_modo es %d y la temperaruta es %00000.f y el sensor lumnico de %00000.f \r\n",ntc,temperatura,valorReal);
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <programaPrincipal+0xc4>)
 800139c:	681e      	ldr	r6, [r3, #0]
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <programaPrincipal+0xc8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8d8 	bl	8000558 <__aeabi_f2d>
 80013a8:	4604      	mov	r4, r0
 80013aa:	460d      	mov	r5, r1
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <programaPrincipal+0xcc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8d1 	bl	8000558 <__aeabi_f2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	e9cd 2300 	strd	r2, r3, [sp]
 80013be:	4622      	mov	r2, r4
 80013c0:	462b      	mov	r3, r5
 80013c2:	4631      	mov	r1, r6
 80013c4:	481d      	ldr	r0, [pc, #116]	; (800143c <programaPrincipal+0xd0>)
 80013c6:	f007 f8a1 	bl	800850c <iprintf>
	printf("\033[H");
 80013ca:	481d      	ldr	r0, [pc, #116]	; (8001440 <programaPrincipal+0xd4>)
 80013cc:	f007 f89e 	bl	800850c <iprintf>
	if(ntc==0 && botonI==0){
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <programaPrincipal+0xc4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d107      	bne.n	80013e8 <programaPrincipal+0x7c>
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <programaPrincipal+0xc0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <programaPrincipal+0x7c>
		ntc=1;
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <programaPrincipal+0xc4>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e00a      	b.n	80013fe <programaPrincipal+0x92>
	}else{
		if(ntc==1 && botonI==0){
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <programaPrincipal+0xc4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d106      	bne.n	80013fe <programaPrincipal+0x92>
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <programaPrincipal+0xc0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <programaPrincipal+0x92>
			ntc=0;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <programaPrincipal+0xc4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
		}else{
			ntc=1;
		}
	}*/
	//enceder la lectura de los sensores
	if(ntc==0){
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <programaPrincipal+0xc4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <programaPrincipal+0xa0>
		ldrReadAndmodify();
 8001406:	f7ff fe31 	bl	800106c <ldrReadAndmodify>
 800140a:	e001      	b.n	8001410 <programaPrincipal+0xa4>
	}else{
		ntcReadAndmodify();
 800140c:	f7ff fea6 	bl	800115c <ntcReadAndmodify>
	}
	encender_leds();
 8001410:	f7ff fd54 	bl	8000ebc <encender_leds>
	lecturaPonteciometroSetAlarma();
 8001414:	f7ff fdb4 	bl	8000f80 <lecturaPonteciometroSetAlarma>
}
 8001418:	bf00      	nop
 800141a:	3704      	adds	r7, #4
 800141c:	46bd      	mov	sp, r7
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001420:	40020400 	.word	0x40020400
 8001424:	2000000c 	.word	0x2000000c
 8001428:	40020800 	.word	0x40020800
 800142c:	20000238 	.word	0x20000238
 8001430:	20000010 	.word	0x20000010
 8001434:	2000027c 	.word	0x2000027c
 8001438:	20000280 	.word	0x20000280
 800143c:	0800a488 	.word	0x0800a488
 8001440:	0800a4ec 	.word	0x0800a4ec

08001444 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4a07      	ldr	r2, [pc, #28]	; (8001470 <vApplicationGetIdleTaskMemory+0x2c>)
 8001454:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <vApplicationGetIdleTaskMemory+0x30>)
 800145a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000284 	.word	0x20000284
 8001474:	200002d8 	.word	0x200002d8

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147e:	f001 f965 	bl	800274c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001482:	f000 f825 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001486:	f000 f969 	bl	800175c <MX_GPIO_Init>
  MX_DMA_Init();
 800148a:	f000 f931 	bl	80016f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800148e:	f000 f905 	bl	800169c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001492:	f000 f8d9 	bl	8001648 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001496:	f000 f885 	bl	80015a4 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <main+0x50>)
 800149c:	1d3c      	adds	r4, r7, #4
 800149e:	461d      	mov	r5, r3
 80014a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 ffca 	bl	800544a <osThreadCreate>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <main+0x54>)
 80014ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  serie_Init_FreeRTOS();
 80014bc:	f000 fd22 	bl	8001f04 <serie_Init_FreeRTOS>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014c0:	f003 ffbc 	bl	800543c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <main+0x4c>
 80014c6:	bf00      	nop
 80014c8:	0800a580 	.word	0x0800a580
 80014cc:	20000668 	.word	0x20000668

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	; 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2230      	movs	r2, #48	; 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f006 fac2 	bl	8007a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <SystemClock_Config+0xcc>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a27      	ldr	r2, [pc, #156]	; (800159c <SystemClock_Config+0xcc>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <SystemClock_Config+0xcc>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <SystemClock_Config+0xd0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <SystemClock_Config+0xd0>)
 800151a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <SystemClock_Config+0xd0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001540:	2310      	movs	r3, #16
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001544:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001548:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800154a:	2304      	movs	r3, #4
 800154c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800154e:	2304      	movs	r3, #4
 8001550:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fc04 	bl	8003d64 <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001562:	f000 f9a7 	bl	80018b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2302      	movs	r3, #2
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fe66 	bl	8004254 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800158e:	f000 f991 	bl	80018b4 <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3750      	adds	r7, #80	; 0x50
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <MX_ADC1_Init+0x98>)
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <MX_ADC1_Init+0x9c>)
 80015ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_ADC1_Init+0x98>)
 80015be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_ADC1_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_ADC1_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_ADC1_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <MX_ADC1_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_ADC1_Init+0x98>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_ADC1_Init+0x98>)
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <MX_ADC1_Init+0xa0>)
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_ADC1_Init+0x98>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_ADC1_Init+0x98>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_ADC1_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_ADC1_Init+0x98>)
 8001600:	2201      	movs	r2, #1
 8001602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_ADC1_Init+0x98>)
 8001606:	f001 f913 	bl	8002830 <HAL_ADC_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001610:	f000 f950 	bl	80018b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001614:	2300      	movs	r3, #0
 8001616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_ADC1_Init+0x98>)
 8001626:	f001 fac7 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001630:	f000 f940 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200004d8 	.word	0x200004d8
 8001640:	40012000 	.word	0x40012000
 8001644:	0f000001 	.word	0x0f000001

08001648 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <MX_USART1_UART_Init+0x50>)
 8001650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 8001680:	f003 f808 	bl	8004694 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800168a:	f000 f913 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000520 	.word	0x20000520
 8001698:	40011000 	.word	0x40011000

0800169c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <MX_USART2_UART_Init+0x50>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016d4:	f002 ffde 	bl	8004694 <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016de:	f000 f8e9 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000564 	.word	0x20000564
 80016ec:	40004400 	.word	0x40004400

080016f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_DMA_Init+0x68>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a16      	ldr	r2, [pc, #88]	; (8001758 <MX_DMA_Init+0x68>)
 8001700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_DMA_Init+0x68>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_DMA_Init+0x68>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <MX_DMA_Init+0x68>)
 800171c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <MX_DMA_Init+0x68>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2105      	movs	r1, #5
 8001732:	2010      	movs	r0, #16
 8001734:	f001 fd49 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001738:	2010      	movs	r0, #16
 800173a:	f001 fd62 	bl	8003202 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2105      	movs	r1, #5
 8001742:	203a      	movs	r0, #58	; 0x3a
 8001744:	f001 fd41 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001748:	203a      	movs	r0, #58	; 0x3a
 800174a:	f001 fd5a 	bl	8003202 <HAL_NVIC_EnableIRQ>

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <MX_GPIO_Init+0x138>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a46      	ldr	r2, [pc, #280]	; (8001894 <MX_GPIO_Init+0x138>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b44      	ldr	r3, [pc, #272]	; (8001894 <MX_GPIO_Init+0x138>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b40      	ldr	r3, [pc, #256]	; (8001894 <MX_GPIO_Init+0x138>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a3f      	ldr	r2, [pc, #252]	; (8001894 <MX_GPIO_Init+0x138>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <MX_GPIO_Init+0x138>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b39      	ldr	r3, [pc, #228]	; (8001894 <MX_GPIO_Init+0x138>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a38      	ldr	r2, [pc, #224]	; (8001894 <MX_GPIO_Init+0x138>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b36      	ldr	r3, [pc, #216]	; (8001894 <MX_GPIO_Init+0x138>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <MX_GPIO_Init+0x138>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a31      	ldr	r2, [pc, #196]	; (8001894 <MX_GPIO_Init+0x138>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <MX_GPIO_Init+0x138>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2120      	movs	r1, #32
 80017e6:	482c      	ldr	r0, [pc, #176]	; (8001898 <MX_GPIO_Init+0x13c>)
 80017e8:	f002 faa2 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D6_Pin|Buzzer_Pin|D3_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80017f2:	4829      	ldr	r0, [pc, #164]	; (8001898 <MX_GPIO_Init+0x13c>)
 80017f4:	f002 fa9c 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D2_Pin|D5_Pin|D1_Pin
 80017f8:	2200      	movs	r2, #0
 80017fa:	f240 4139 	movw	r1, #1081	; 0x439
 80017fe:	4827      	ldr	r0, [pc, #156]	; (800189c <MX_GPIO_Init+0x140>)
 8001800:	f002 fa96 	bl	8003d30 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800180a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800180e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4821      	ldr	r0, [pc, #132]	; (80018a0 <MX_GPIO_Init+0x144>)
 800181c:	f002 f8ec 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D8_Pin D6_Pin Buzzer_Pin D3_Pin */
  GPIO_InitStruct.Pin = D8_Pin|D6_Pin|Buzzer_Pin|D3_Pin;
 8001820:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4817      	ldr	r0, [pc, #92]	; (8001898 <MX_GPIO_Init+0x13c>)
 800183a:	f002 f8dd 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin D5_Pin D1_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin|D5_Pin|D1_Pin
 800183e:	f240 4339 	movw	r3, #1081	; 0x439
 8001842:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	4811      	ldr	r0, [pc, #68]	; (800189c <MX_GPIO_Init+0x140>)
 8001858:	f002 f8ce 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulsador2_Pin */
  GPIO_InitStruct.Pin = Pulsador2_Pin;
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001864:	2301      	movs	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pulsador2_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_GPIO_Init+0x144>)
 8001870:	f002 f8c2 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulsador1_Pin */
  GPIO_InitStruct.Pin = Pulsador1_Pin;
 8001874:	2340      	movs	r3, #64	; 0x40
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187c:	2301      	movs	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pulsador1_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_GPIO_Init+0x140>)
 8001888:	f002 f8b6 	bl	80039f8 <HAL_GPIO_Init>

}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	40020400 	.word	0x40020400
 80018a0:	40020800 	.word	0x40020800

080018a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f003 fe18 	bl	80054e2 <osDelay>
 80018b2:	e7fb      	b.n	80018ac <StartDefaultTask+0x8>

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x8>
	...

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_MspInit+0x54>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_MspInit+0x54>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_MspInit+0x54>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_MspInit+0x54>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_MspInit+0x54>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_MspInit+0x54>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	210f      	movs	r1, #15
 8001902:	f06f 0001 	mvn.w	r0, #1
 8001906:	f001 fc60 	bl	80031ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_ADC_MspInit+0x7c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d127      	bne.n	800198a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_ADC_MspInit+0x80>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_ADC_MspInit+0x80>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001972:	2313      	movs	r3, #19
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001976:	2303      	movs	r3, #3
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_ADC_MspInit+0x84>)
 8001986:	f002 f837 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40012000 	.word	0x40012000
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	; 0x30
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a60      	ldr	r2, [pc, #384]	; (8001b40 <HAL_UART_MspInit+0x1a0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d15b      	bne.n	8001a7a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	4b5f      	ldr	r3, [pc, #380]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a5e      	ldr	r2, [pc, #376]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 80019cc:	f043 0310 	orr.w	r3, r3, #16
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b5c      	ldr	r3, [pc, #368]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	4b58      	ldr	r3, [pc, #352]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a57      	ldr	r2, [pc, #348]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b55      	ldr	r3, [pc, #340]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	484c      	ldr	r0, [pc, #304]	; (8001b48 <HAL_UART_MspInit+0x1a8>)
 8001a18:	f001 ffee 	bl	80039f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001a1c:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a1e:	4a4c      	ldr	r2, [pc, #304]	; (8001b50 <HAL_UART_MspInit+0x1b0>)
 8001a20:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a28:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2a:	4b48      	ldr	r3, [pc, #288]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a30:	4b46      	ldr	r3, [pc, #280]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a36:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a3e:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a44:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a4a:	4b40      	ldr	r3, [pc, #256]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a50:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a5c:	483b      	ldr	r0, [pc, #236]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a5e:	f001 fbeb 	bl	8003238 <HAL_DMA_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001a68:	f7ff ff24 	bl	80018b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a37      	ldr	r2, [pc, #220]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
 8001a72:	4a36      	ldr	r2, [pc, #216]	; (8001b4c <HAL_UART_MspInit+0x1ac>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a78:	e05e      	b.n	8001b38 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a35      	ldr	r2, [pc, #212]	; (8001b54 <HAL_UART_MspInit+0x1b4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d159      	bne.n	8001b38 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a2d      	ldr	r2, [pc, #180]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 8001a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a26      	ldr	r2, [pc, #152]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_UART_MspInit+0x1a4>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001abc:	230c      	movs	r3, #12
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001acc:	2307      	movs	r3, #7
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481c      	ldr	r0, [pc, #112]	; (8001b48 <HAL_UART_MspInit+0x1a8>)
 8001ad8:	f001 ff8e 	bl	80039f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001ade:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <HAL_UART_MspInit+0x1bc>)
 8001ae0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001ae4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b1c:	480e      	ldr	r0, [pc, #56]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001b1e:	f001 fb8b 	bl	8003238 <HAL_DMA_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001b28:	f7ff fec4 	bl	80018b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_UART_MspInit+0x1b8>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b38:	bf00      	nop
 8001b3a:	3730      	adds	r7, #48	; 0x30
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40011000 	.word	0x40011000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	200005a8 	.word	0x200005a8
 8001b50:	40026440 	.word	0x40026440
 8001b54:	40004400 	.word	0x40004400
 8001b58:	20000608 	.word	0x20000608
 8001b5c:	40026088 	.word	0x40026088

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <MemManage_Handler+0x4>

08001b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b90:	f000 fe2e 	bl	80027f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b94:	f004 ff34 	bl	8006a00 <xTaskGetSchedulerState>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d001      	beq.n	8001ba2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b9e:	f005 fb13 	bl	80071c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DMA1_Stream5_IRQHandler+0x10>)
 8001bae:	f001 fcb9 	bl	8003524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000608 	.word	0x20000608

08001bbc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <DMA2_Stream2_IRQHandler+0x10>)
 8001bc2:	f001 fcaf 	bl	8003524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200005a8 	.word	0x200005a8

08001bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
	return 1;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_kill>:

int _kill(int pid, int sig)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bea:	f005 fd27 	bl	800763c <__errno>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2216      	movs	r2, #22
 8001bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_exit>:

void _exit (int status)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe7 	bl	8001be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c12:	e7fe      	b.n	8001c12 <_exit+0x12>

08001c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e00a      	b.n	8001c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c26:	f3af 8000 	nop.w
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf0      	blt.n	8001c26 <_read+0x12>
	}

return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
	return -1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c76:	605a      	str	r2, [r3, #4]
	return 0;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_isatty>:

int _isatty(int file)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <_sbrk+0x5c>)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <_sbrk+0x60>)
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_sbrk+0x64>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <_sbrk+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d207      	bcs.n	8001cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce8:	f005 fca8 	bl	800763c <__errno>
 8001cec:	4603      	mov	r3, r0
 8001cee:	220c      	movs	r2, #12
 8001cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	e009      	b.n	8001d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <_sbrk+0x64>)
 8001d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20020000 	.word	0x20020000
 8001d18:	00000400 	.word	0x00000400
 8001d1c:	200006cc 	.word	0x200006cc
 8001d20:	20005040 	.word	0x20005040

08001d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <SystemInit+0x20>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <SystemInit+0x20>)
 8001d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <Task_DMA>:
extern uint8_t buffer_DMA_1[buffer_SIZE];
extern uint8_t buffer_DMA_2[buffer_SIZE];



void Task_DMA( void *pvParameters ){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef res;
	uint32_t nbuff;



    hdma_usart2_rx2.Instance = DMA1_Stream7;
 8001d50:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <Task_DMA+0x15c>)
 8001d52:	4a55      	ldr	r2, [pc, #340]	; (8001ea8 <Task_DMA+0x160>)
 8001d54:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx2.Init.Channel = DMA_CHANNEL_6;
 8001d56:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <Task_DMA+0x15c>)
 8001d58:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001d5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <Task_DMA+0x15c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d64:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <Task_DMA+0x15c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx2.Init.MemInc = DMA_MINC_ENABLE;
 8001d6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <Task_DMA+0x15c>)
 8001d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d70:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d72:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <Task_DMA+0x15c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d78:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <Task_DMA+0x15c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx2.Init.Mode = DMA_NORMAL;
 8001d7e:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <Task_DMA+0x15c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx2.Init.Priority = DMA_PRIORITY_LOW;
 8001d84:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <Task_DMA+0x15c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d8a:	4b46      	ldr	r3, [pc, #280]	; (8001ea4 <Task_DMA+0x15c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24



    if (HAL_DMA_Init(&hdma_usart2_rx2) != HAL_OK)
 8001d90:	4844      	ldr	r0, [pc, #272]	; (8001ea4 <Task_DMA+0x15c>)
 8001d92:	f001 fa51 	bl	8003238 <HAL_DMA_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <Task_DMA+0x58>
    {
      Error_Handler();
 8001d9c:	f7ff fd8a 	bl	80018b4 <Error_Handler>
    }

	nbuff=0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
	res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE); // Para arrancar
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	4940      	ldr	r1, [pc, #256]	; (8001eac <Task_DMA+0x164>)
 8001daa:	4841      	ldr	r0, [pc, #260]	; (8001eb0 <Task_DMA+0x168>)
 8001dac:	f002 fd51 	bl	8004852 <HAL_UART_Receive_DMA>
 8001db0:	4603      	mov	r3, r0
 8001db2:	73fb      	strb	r3, [r7, #15]

	it=0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
	while(1){

		switch (nbuff){
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <Task_DMA+0x7e>
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d032      	beq.n	8001e2a <Task_DMA+0xe2>
 8001dc4:	e066      	b.n	8001e94 <Task_DMA+0x14c>
		case 0: 	num=hdma_usart2_rx.Instance->NDTR;
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <Task_DMA+0x16c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60bb      	str	r3, [r7, #8]
					if (num<buffer_SIZE){
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd4:	d25b      	bcs.n	8001e8e <Task_DMA+0x146>
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd6:	b672      	cpsid	i
}
 8001dd8:	bf00      	nop
						__disable_irq();
						res=HAL_UART_DMAStop_PAS(&huart2);
 8001dda:	4835      	ldr	r0, [pc, #212]	; (8001eb0 <Task_DMA+0x168>)
 8001ddc:	f000 fc38 	bl	8002650 <HAL_UART_DMAStop_PAS>
 8001de0:	4603      	mov	r3, r0
 8001de2:	73fb      	strb	r3, [r7, #15]
					   __HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx2);
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <Task_DMA+0x168>)
 8001de6:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <Task_DMA+0x15c>)
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dea:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <Task_DMA+0x15c>)
 8001dec:	4a30      	ldr	r2, [pc, #192]	; (8001eb0 <Task_DMA+0x168>)
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38
					   res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_2,buffer_SIZE);
 8001df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df4:	4930      	ldr	r1, [pc, #192]	; (8001eb8 <Task_DMA+0x170>)
 8001df6:	482e      	ldr	r0, [pc, #184]	; (8001eb0 <Task_DMA+0x168>)
 8001df8:	f002 fd2b 	bl	8004852 <HAL_UART_Receive_DMA>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e00:	b662      	cpsie	i
}
 8001e02:	bf00      	nop
					   __enable_irq();
					   nbuff=1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	613b      	str	r3, [r7, #16]
					   num=hdma_usart2_rx.Instance->NDTR;
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <Task_DMA+0x16c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	60bb      	str	r3, [r7, #8]
					   res=buff->puts(buff_rx,buffer_DMA_1,buffer_SIZE-num);
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <Task_DMA+0x174>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	4a2a      	ldr	r2, [pc, #168]	; (8001ec0 <Task_DMA+0x178>)
 8001e18:	6810      	ldr	r0, [r2, #0]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8001e20:	4922      	ldr	r1, [pc, #136]	; (8001eac <Task_DMA+0x164>)
 8001e22:	4798      	blx	r3
 8001e24:	4603      	mov	r3, r0
 8001e26:	73fb      	strb	r3, [r7, #15]
					}else
						;

					break;
 8001e28:	e031      	b.n	8001e8e <Task_DMA+0x146>
		case 1:
	    			num=hdma_usart2_rx2.Instance->NDTR;
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <Task_DMA+0x15c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	60bb      	str	r3, [r7, #8]
	    			if (num<buffer_SIZE){
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e38:	d22b      	bcs.n	8001e92 <Task_DMA+0x14a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3a:	b672      	cpsid	i
}
 8001e3c:	bf00      	nop
	    				__disable_irq();
	    				res=HAL_UART_DMAStop_PAS(&huart2);
 8001e3e:	481c      	ldr	r0, [pc, #112]	; (8001eb0 <Task_DMA+0x168>)
 8001e40:	f000 fc06 	bl	8002650 <HAL_UART_DMAStop_PAS>
 8001e44:	4603      	mov	r3, r0
 8001e46:	73fb      	strb	r3, [r7, #15]
	    				__HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx);
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <Task_DMA+0x168>)
 8001e4a:	4a1a      	ldr	r2, [pc, #104]	; (8001eb4 <Task_DMA+0x16c>)
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <Task_DMA+0x16c>)
 8001e50:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <Task_DMA+0x168>)
 8001e52:	639a      	str	r2, [r3, #56]	; 0x38
	    				res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE);
 8001e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e58:	4914      	ldr	r1, [pc, #80]	; (8001eac <Task_DMA+0x164>)
 8001e5a:	4815      	ldr	r0, [pc, #84]	; (8001eb0 <Task_DMA+0x168>)
 8001e5c:	f002 fcf9 	bl	8004852 <HAL_UART_Receive_DMA>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e64:	b662      	cpsie	i
}
 8001e66:	bf00      	nop
	    				__enable_irq();
	    				nbuff=0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
	    				num=hdma_usart2_rx2.Instance->NDTR;
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <Task_DMA+0x15c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	60bb      	str	r3, [r7, #8]
	    				res=buff->puts(buff_rx,buffer_DMA_2,buffer_SIZE-num);
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <Task_DMA+0x174>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <Task_DMA+0x178>)
 8001e7c:	6810      	ldr	r0, [r2, #0]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <Task_DMA+0x170>)
 8001e86:	4798      	blx	r3
 8001e88:	4603      	mov	r3, r0
 8001e8a:	73fb      	strb	r3, [r7, #15]
	    			}else
	    				;
	    			break;
 8001e8c:	e001      	b.n	8001e92 <Task_DMA+0x14a>
					break;
 8001e8e:	bf00      	nop
 8001e90:	e000      	b.n	8001e94 <Task_DMA+0x14c>
	    			break;
 8001e92:	bf00      	nop
		}

		it++;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
		vTaskDelay(1/portTICK_RATE_MS );
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f004 f97e 	bl	800619c <vTaskDelay>
		switch (nbuff){
 8001ea0:	e78a      	b.n	8001db8 <Task_DMA+0x70>
 8001ea2:	bf00      	nop
 8001ea4:	2000066c 	.word	0x2000066c
 8001ea8:	400260b8 	.word	0x400260b8
 8001eac:	20000ed8 	.word	0x20000ed8
 8001eb0:	20000564 	.word	0x20000564
 8001eb4:	20000608 	.word	0x20000608
 8001eb8:	200010d8 	.word	0x200010d8
 8001ebc:	20000ed0 	.word	0x20000ed0
 8001ec0:	20000ed4 	.word	0x20000ed4

08001ec4 <Task_Display>:
	}
}


void Task_Display( void *pvParameters ){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

	uint32_t it;
	BUFF_ITEM_t car;
	HAL_StatusTypeDef res;

    it=0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
	while(1){

		buff->get(buff,&car);
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <Task_Display+0x38>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <Task_Display+0x38>)
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	f107 010a 	add.w	r1, r7, #10
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4798      	blx	r3
		res=HAL_UART_Transmit(& huart2,&car,1,100);
 8001ee2:	f107 010a 	add.w	r1, r7, #10
 8001ee6:	2364      	movs	r3, #100	; 0x64
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <Task_Display+0x3c>)
 8001eec:	f002 fc1f 	bl	800472e <HAL_UART_Transmit>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	72fb      	strb	r3, [r7, #11]
		it++;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
		buff->get(buff,&car);
 8001efa:	e7e9      	b.n	8001ed0 <Task_Display+0xc>
 8001efc:	20000ed0 	.word	0x20000ed0
 8001f00:	20000564 	.word	0x20000564

08001f04 <serie_Init_FreeRTOS>:


extern BUFF_BUFFER_t * buff;
extern BUFF_BUFFER_t * buff_rx;

void serie_Init_FreeRTOS(void){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af02      	add	r7, sp, #8

	BaseType_t res_task;

	//printf (PASCU_PRJ " at "__TIME__);
	fflush(0);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f005 fc5e 	bl	80077cc <fflush>

	buff=bufferCreat(128);
 8001f10:	2080      	movs	r0, #128	; 0x80
 8001f12:	f000 fa55 	bl	80023c0 <bufferCreat>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4a3f      	ldr	r2, [pc, #252]	; (8002018 <serie_Init_FreeRTOS+0x114>)
 8001f1a:	6013      	str	r3, [r2, #0]
	if (!buff) return;
 8001f1c:	4b3e      	ldr	r3, [pc, #248]	; (8002018 <serie_Init_FreeRTOS+0x114>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d072      	beq.n	800200a <serie_Init_FreeRTOS+0x106>

	buff_rx=bufferCreat(512);
 8001f24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f28:	f000 fa4a 	bl	80023c0 <bufferCreat>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a3b      	ldr	r2, [pc, #236]	; (800201c <serie_Init_FreeRTOS+0x118>)
 8001f30:	6013      	str	r3, [r2, #0]
	if (!buff_rx) return;
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <serie_Init_FreeRTOS+0x118>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d069      	beq.n	800200e <serie_Init_FreeRTOS+0x10a>

	res_task=xTaskCreate(Task_Display,"DISPLAY",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f000 fa9a 	bl	8002474 <makeFreeRtosPriority>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	9200      	str	r2, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f50:	4933      	ldr	r1, [pc, #204]	; (8002020 <serie_Init_FreeRTOS+0x11c>)
 8001f52:	4834      	ldr	r0, [pc, #208]	; (8002024 <serie_Init_FreeRTOS+0x120>)
 8001f54:	f003 ffeb 	bl	8005f2e <xTaskCreate>
 8001f58:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d006      	beq.n	8001f6e <serie_Init_FreeRTOS+0x6a>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8001f60:	4831      	ldr	r0, [pc, #196]	; (8002028 <serie_Init_FreeRTOS+0x124>)
 8001f62:	f006 fb59 	bl	8008618 <puts>
			fflush(NULL);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f005 fc30 	bl	80077cc <fflush>
			while(1);
 8001f6c:	e7fe      	b.n	8001f6c <serie_Init_FreeRTOS+0x68>
	}

	res_task=xTaskCreate(Task_DMA,"DMA",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 fa80 	bl	8002474 <makeFreeRtosPriority>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	9200      	str	r2, [sp, #0]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f84:	4929      	ldr	r1, [pc, #164]	; (800202c <serie_Init_FreeRTOS+0x128>)
 8001f86:	482a      	ldr	r0, [pc, #168]	; (8002030 <serie_Init_FreeRTOS+0x12c>)
 8001f88:	f003 ffd1 	bl	8005f2e <xTaskCreate>
 8001f8c:	6078      	str	r0, [r7, #4]
		if( res_task != pdPASS ){
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d006      	beq.n	8001fa2 <serie_Init_FreeRTOS+0x9e>
				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8001f94:	4824      	ldr	r0, [pc, #144]	; (8002028 <serie_Init_FreeRTOS+0x124>)
 8001f96:	f006 fb3f 	bl	8008618 <puts>
				fflush(NULL);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f005 fc16 	bl	80077cc <fflush>
				while(1);
 8001fa0:	e7fe      	b.n	8001fa0 <serie_Init_FreeRTOS+0x9c>
		}

	res_task=xTaskCreate(Task_Send,"ENVIO",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 fa66 	bl	8002474 <makeFreeRtosPriority>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	9200      	str	r2, [sp, #0]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb8:	491e      	ldr	r1, [pc, #120]	; (8002034 <serie_Init_FreeRTOS+0x130>)
 8001fba:	481f      	ldr	r0, [pc, #124]	; (8002038 <serie_Init_FreeRTOS+0x134>)
 8001fbc:	f003 ffb7 	bl	8005f2e <xTaskCreate>
 8001fc0:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d006      	beq.n	8001fd6 <serie_Init_FreeRTOS+0xd2>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8001fc8:	4817      	ldr	r0, [pc, #92]	; (8002028 <serie_Init_FreeRTOS+0x124>)
 8001fca:	f006 fb25 	bl	8008618 <puts>
			fflush(NULL);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f005 fbfc 	bl	80077cc <fflush>
			while(1);
 8001fd4:	e7fe      	b.n	8001fd4 <serie_Init_FreeRTOS+0xd0>
	}

	res_task=xTaskCreate(Task_Receive,"RECEIVE",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f000 fa4c 	bl	8002474 <makeFreeRtosPriority>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	9200      	str	r2, [sp, #0]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fec:	4913      	ldr	r1, [pc, #76]	; (800203c <serie_Init_FreeRTOS+0x138>)
 8001fee:	4814      	ldr	r0, [pc, #80]	; (8002040 <serie_Init_FreeRTOS+0x13c>)
 8001ff0:	f003 ff9d 	bl	8005f2e <xTaskCreate>
 8001ff4:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d009      	beq.n	8002010 <serie_Init_FreeRTOS+0x10c>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8001ffc:	480a      	ldr	r0, [pc, #40]	; (8002028 <serie_Init_FreeRTOS+0x124>)
 8001ffe:	f006 fb0b 	bl	8008618 <puts>
			fflush(NULL);
 8002002:	2000      	movs	r0, #0
 8002004:	f005 fbe2 	bl	80077cc <fflush>
			while(1);
 8002008:	e7fe      	b.n	8002008 <serie_Init_FreeRTOS+0x104>
	if (!buff) return;
 800200a:	bf00      	nop
 800200c:	e000      	b.n	8002010 <serie_Init_FreeRTOS+0x10c>
	if (!buff_rx) return;
 800200e:	bf00      	nop
	}
}
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000ed0 	.word	0x20000ed0
 800201c:	20000ed4 	.word	0x20000ed4
 8002020:	0800a59c 	.word	0x0800a59c
 8002024:	08001ec5 	.word	0x08001ec5
 8002028:	0800a5a4 	.word	0x0800a5a4
 800202c:	0800a5d0 	.word	0x0800a5d0
 8002030:	08001d49 	.word	0x08001d49
 8002034:	0800a5d4 	.word	0x0800a5d4
 8002038:	08002045 	.word	0x08002045
 800203c:	0800a5dc 	.word	0x0800a5dc
 8002040:	08002059 	.word	0x08002059

08002044 <Task_Send>:


}


void Task_Send( void *pvParameters ){
 8002044:	b580      	push	{r7, lr}
 8002046:	b09c      	sub	sp, #112	; 0x70
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

	uint32_t it;
    uint32_t res;

	char cad[100];
	it=0;
 800204c:	2300      	movs	r3, #0
 800204e:	66fb      	str	r3, [r7, #108]	; 0x6c
	//postfunc("pperez-seu-or.disca.upv.es","routerSEU","00000000","10000");

	//postfunc("pperez2.disca.upv.es","OPPOReno2","ilovematy","10000");/*
	while(1){
		//ModoTestBasico();
		programaPrincipal();
 8002050:	f7ff f98c 	bl	800136c <programaPrincipal>
	while(1){
 8002054:	e7fc      	b.n	8002050 <Task_Send+0xc>
	...

08002058 <Task_Receive>:
		vTaskDelay(10000/portTICK_RATE_MS );*/

	}//*/
}

void Task_Receive( void *pvParameters ){
 8002058:	b580      	push	{r7, lr}
 800205a:	b0a8      	sub	sp, #160	; 0xa0
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
#define buffer_length	128
    BUFF_ITEM_t  buffer[buffer_length];
    int buffer_ct,buffer_ct1;
    int crln_detect;

	it=0;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


	while(1){
		it++;
 8002066:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800206a:	3301      	adds	r3, #1
 800206c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		crln_detect=0;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		buffer_ct=0;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		while(crln_detect<2){
 800207c:	e037      	b.n	80020ee <Task_Receive+0x96>
	    	res=buff->get(buff_rx,&car);
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <Task_Receive+0x11c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a3c      	ldr	r2, [pc, #240]	; (8002178 <Task_Receive+0x120>)
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	f107 018b 	add.w	r1, r7, #139	; 0x8b
 800208c:	4610      	mov	r0, r2
 800208e:	4798      	blx	r3
 8002090:	4603      	mov	r3, r0
 8002092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	    	buffer[buffer_ct++]=car;
 8002096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80020a0:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 80020a4:	33a0      	adds	r3, #160	; 0xa0
 80020a6:	443b      	add	r3, r7
 80020a8:	f803 2c98 	strb.w	r2, [r3, #-152]
	    	if (buffer_ct>1){
 80020ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	dd1c      	ble.n	80020ee <Task_Receive+0x96>

	    		if ((buffer[buffer_ct-2]=='\r')&&(buffer[buffer_ct-1]=='\n')) // \r\n detection end of line
 80020b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020b8:	3b02      	subs	r3, #2
 80020ba:	33a0      	adds	r3, #160	; 0xa0
 80020bc:	443b      	add	r3, r7
 80020be:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 80020c2:	2b0d      	cmp	r3, #13
 80020c4:	d10c      	bne.n	80020e0 <Task_Receive+0x88>
 80020c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020ca:	3b01      	subs	r3, #1
 80020cc:	33a0      	adds	r3, #160	; 0xa0
 80020ce:	443b      	add	r3, r7
 80020d0:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 80020d4:	2b0a      	cmp	r3, #10
 80020d6:	d103      	bne.n	80020e0 <Task_Receive+0x88>
					crln_detect=2;
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020de:	e006      	b.n	80020ee <Task_Receive+0x96>
				else
					if ((buffer_ct)==buffer_length)  // line out of limits --> error
 80020e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020e4:	2b80      	cmp	r3, #128	; 0x80
 80020e6:	d102      	bne.n	80020ee <Task_Receive+0x96>
						crln_detect=3;
 80020e8:	2303      	movs	r3, #3
 80020ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(crln_detect<2){
 80020ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	ddc3      	ble.n	800207e <Task_Receive+0x26>
	    	}

		}

		// prepare reception buffer from ESP
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 80020f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020fa:	4920      	ldr	r1, [pc, #128]	; (800217c <Task_Receive+0x124>)
 80020fc:	4820      	ldr	r0, [pc, #128]	; (8002180 <Task_Receive+0x128>)
 80020fe:	f002 fba8 	bl	8004852 <HAL_UART_Receive_DMA>
		// send line (command) to ESP
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,buffer,buffer_ct,1000);
 8002102:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002106:	b29a      	uxth	r2, r3
 8002108:	f107 0108 	add.w	r1, r7, #8
 800210c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002110:	481b      	ldr	r0, [pc, #108]	; (8002180 <Task_Receive+0x128>)
 8002112:	f002 fb0c 	bl	800472e <HAL_UART_Transmit>
 8002116:	4603      	mov	r3, r0
 8002118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		// wait a bit time
		osDelay(500);
 800211c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002120:	f003 f9df 	bl	80054e2 <osDelay>
		//stop reception probably all data are in dma buffer
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8002124:	4816      	ldr	r0, [pc, #88]	; (8002180 <Task_Receive+0x128>)
 8002126:	f002 fbc4 	bl	80048b2 <HAL_UART_DMAStop>

		// send to console ESP answer.
		buffer_ct1=HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 800212a:	4815      	ldr	r0, [pc, #84]	; (8002180 <Task_Receive+0x128>)
 800212c:	f000 fad5 	bl	80026da <HAL_DMA_getcounter>
 8002130:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		buffer_ct=0;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while (buffer_ct<buffer_ct1)
 800213a:	e010      	b.n	800215e <Task_Receive+0x106>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <Task_Receive+0x11c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <Task_Receive+0x11c>)
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800214a:	1c59      	adds	r1, r3, #1
 800214c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8002150:	490a      	ldr	r1, [pc, #40]	; (800217c <Task_Receive+0x124>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	4619      	mov	r1, r3
 8002156:	4790      	blx	r2
 8002158:	4603      	mov	r3, r0
 800215a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (buffer_ct<buffer_ct1)
 800215e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002166:	429a      	cmp	r2, r3
 8002168:	dbe8      	blt.n	800213c <Task_Receive+0xe4>
		// wait a bit time
		osDelay(1);
 800216a:	2001      	movs	r0, #1
 800216c:	f003 f9b9 	bl	80054e2 <osDelay>
	while(1){
 8002170:	e779      	b.n	8002066 <Task_Receive+0xe>
 8002172:	bf00      	nop
 8002174:	20000ed0 	.word	0x20000ed0
 8002178:	20000ed4 	.word	0x20000ed4
 800217c:	200006d0 	.word	0x200006d0
 8002180:	20000520 	.word	0x20000520

08002184 <BUFF_is_empty>:
#include <task.h>
#include <math.h>

/////////////////////////////////////////////////////////////////////////////////////// BUFFER sin proteccion

uint32_t BUFF_is_empty(BUFF_BUFFER_t * buffer){
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==0);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <BUFF_is_full>:

uint32_t BUFF_is_full(BUFF_BUFFER_t * buffer){
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==buffer->size);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <BUFF_inserta>:

uint32_t BUFF_inserta(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]

	if (!buffer->isfull(buffer)){
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d119      	bne.n	800221a <BUFF_inserta+0x4e>
		buffer->buff[buffer->cabeza]=item;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	4413      	add	r3, r2
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	701a      	strb	r2, [r3, #0]
		buffer->cabeza=((buffer->cabeza)+1)%(buffer->size);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	3301      	adds	r3, #1
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6a12      	ldr	r2, [r2, #32]
 80021fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002202:	fb01 f202 	mul.w	r2, r1, r2
 8002206:	1a9a      	subs	r2, r3, r2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
		buffer->n_elem++;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
		return 1;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <BUFF_inserta+0x50>
	} else return 0;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <BUFF_extrae>:

uint32_t BUFF_extrae(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item){
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]

	if (!buffer->isempty(buffer)){
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d11a      	bne.n	8002272 <BUFF_extrae+0x4e>
			*item=buffer->buff[buffer->cola];
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4413      	add	r3, r2
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	701a      	strb	r2, [r3, #0]
			buffer->cola=(buffer->cola+1)%(buffer->size);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6a12      	ldr	r2, [r2, #32]
 8002256:	fbb3 f1f2 	udiv	r1, r3, r2
 800225a:	fb01 f202 	mul.w	r2, r1, r2
 800225e:	1a9a      	subs	r2, r3, r2
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	61da      	str	r2, [r3, #28]
			buffer->n_elem--;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	629a      	str	r2, [r3, #40]	; 0x28

	} else return 0;

   return 1;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <BUFF_extrae+0x50>
	} else return 0;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <BUFF_extrae_prot>:

uint32_t BUFF_extrae_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item)
{ //variable condicion
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	int it;

	it=0;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800228a:	bf00      	nop
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f242 7110 	movw	r1, #10000	; 0x2710
 8002294:	4618      	mov	r0, r3
 8002296:	f003 fbdf 	bl	8005a58 <xQueueSemaphoreTake>
 800229a:	4603      	mov	r3, r0
 800229c:	2b01      	cmp	r3, #1
 800229e:	d1f5      	bne.n	800228c <BUFF_extrae_prot+0x10>
	 // lock
	while(!BUFF_extrae(buffer,item)){
 80022a0:	e017      	b.n	80022d2 <BUFF_extrae_prot+0x56>
			 xSemaphoreGive(buffer->xSem);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6958      	ldr	r0, [r3, #20]
 80022a6:	2300      	movs	r3, #0
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	f003 fad6 	bl	800585c <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 80022b0:	2064      	movs	r0, #100	; 0x64
 80022b2:	f003 ff73 	bl	800619c <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 80022b6:	bf00      	nop
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 fbc9 	bl	8005a58 <xQueueSemaphoreTake>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d1f5      	bne.n	80022b8 <BUFF_extrae_prot+0x3c>
	 		 it++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60fb      	str	r3, [r7, #12]
	while(!BUFF_extrae(buffer,item)){
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffa5 	bl	8002224 <BUFF_extrae>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0e0      	beq.n	80022a2 <BUFF_extrae_prot+0x26>
	}
	xSemaphoreGive(buffer->xSem);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6958      	ldr	r0, [r3, #20]
 80022e4:	2300      	movs	r3, #0
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	f003 fab7 	bl	800585c <xQueueGenericSend>
	return 1; // siempre tiene éxito
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <BUFF_inserta_prot>:
uint32_t BUFF_inserta_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item)
{ //variable condicion
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
	int it;

	it=0;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8002308:	bf00      	nop
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fba0 	bl	8005a58 <xQueueSemaphoreTake>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d1f5      	bne.n	800230a <BUFF_inserta_prot+0x12>
	 // lock
	while(!BUFF_inserta(buffer,item)){
 800231e:	e017      	b.n	8002350 <BUFF_inserta_prot+0x58>
	 		 xSemaphoreGive(buffer->xSem);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6958      	ldr	r0, [r3, #20]
 8002324:	2300      	movs	r3, #0
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	f003 fa97 	bl	800585c <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 800232e:	2064      	movs	r0, #100	; 0x64
 8002330:	f003 ff34 	bl	800619c <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8002334:	bf00      	nop
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f242 7110 	movw	r1, #10000	; 0x2710
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fb8a 	bl	8005a58 <xQueueSemaphoreTake>
 8002344:	4603      	mov	r3, r0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d1f5      	bne.n	8002336 <BUFF_inserta_prot+0x3e>
	 		 it++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3301      	adds	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
	while(!BUFF_inserta(buffer,item)){
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	4619      	mov	r1, r3
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff39 	bl	80021cc <BUFF_inserta>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0df      	beq.n	8002320 <BUFF_inserta_prot+0x28>
	}
	xSemaphoreGive(buffer->xSem);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6958      	ldr	r0, [r3, #20]
 8002364:	2300      	movs	r3, #0
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	f003 fa77 	bl	800585c <xQueueGenericSend>
	return 1; // siempre tiene éxito
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <BUFF_inserta_cad>:

uint32_t BUFF_inserta_cad(BUFF_BUFFER_t * buffer,BUFF_ITEM_t * cad,uint32_t nitems)
{ //variable condicion
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]

	int it;
	uint32_t res;
	for (it=0;it<nitems;it++)
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e010      	b.n	80023ac <BUFF_inserta_cad+0x34>
	{
		res=BUFF_inserta_prot(buffer,cad[it]);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	4413      	add	r3, r2
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f7ff ffaf 	bl	80022f8 <BUFF_inserta_prot>
 800239a:	6138      	str	r0, [r7, #16]
		if (!res) return it;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <BUFF_inserta_cad+0x2e>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	e007      	b.n	80023b6 <BUFF_inserta_cad+0x3e>
	for (it=0;it<nitems;it++)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d8ea      	bhi.n	800238a <BUFF_inserta_cad+0x12>
	}
	return 1; // siempre tiene éxito
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <bufferCreat>:
} BUFF_BUFFER_t;
*/


// API
BUFF_BUFFER_t * bufferCreat(int size){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	BUFF_BUFFER_t * tmp;
	void * bff;

	tmp=malloc(sizeof(BUFF_BUFFER_t));
 80023c8:	202c      	movs	r0, #44	; 0x2c
 80023ca:	f005 fb2f 	bl	8007a2c <malloc>
 80023ce:	4603      	mov	r3, r0
 80023d0:	60fb      	str	r3, [r7, #12]
	if (tmp){ // enought for structure
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d03d      	beq.n	8002454 <bufferCreat+0x94>

		bff=malloc(sizeof(uint8_t)*size);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 fb26 	bl	8007a2c <malloc>
 80023e0:	4603      	mov	r3, r0
 80023e2:	60bb      	str	r3, [r7, #8]
		if (bff){ //enought for buffer
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d031      	beq.n	800244e <bufferCreat+0x8e>
			tmp->xSem=xSemaphoreCreateMutex();
 80023ea:	2001      	movs	r0, #1
 80023ec:	f003 fa1d 	bl	800582a <xQueueCreateMutex>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	615a      	str	r2, [r3, #20]
			if (!tmp->xSem){
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <bufferCreat+0x4e>
				free(bff);
 80023fe:	68b8      	ldr	r0, [r7, #8]
 8002400:	f005 fb1c 	bl	8007a3c <free>
				free(tmp);
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f005 fb19 	bl	8007a3c <free>
				return NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	e023      	b.n	8002456 <bufferCreat+0x96>
			};
            tmp->buff=bff;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
			tmp->cabeza=0;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
			tmp->cola=0;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
			tmp->size=size;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	621a      	str	r2, [r3, #32]
			tmp->n_elem=0;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
			tmp->get=(void*)BUFF_extrae_prot;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <bufferCreat+0xa0>)
 8002430:	601a      	str	r2, [r3, #0]
			tmp->put=(void*)BUFF_inserta_prot;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <bufferCreat+0xa4>)
 8002436:	605a      	str	r2, [r3, #4]
			tmp->puts=(void*)BUFF_inserta_cad;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <bufferCreat+0xa8>)
 800243c:	611a      	str	r2, [r3, #16]

			tmp->isfull=(void*)BUFF_is_full;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <bufferCreat+0xac>)
 8002442:	60da      	str	r2, [r3, #12]
			tmp->isempty=(void*)BUFF_is_empty;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <bufferCreat+0xb0>)
 8002448:	609a      	str	r2, [r3, #8]
			return tmp;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	e003      	b.n	8002456 <bufferCreat+0x96>
		}
		else
			free(tmp);
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f005 faf4 	bl	8007a3c <free>
	}
	return NULL;
 8002454:	2300      	movs	r3, #0

}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	0800227d 	.word	0x0800227d
 8002464:	080022f9 	.word	0x080022f9
 8002468:	08002379 	.word	0x08002379
 800246c:	080021a7 	.word	0x080021a7
 8002470:	08002185 	.word	0x08002185

08002474 <makeFreeRtosPriority>:
uint8_t buffer_DMA_1[buffer_SIZE];
uint8_t buffer_DMA_2[buffer_SIZE];


unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]

if (priority != osPriorityError) {
 8002482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002486:	2b84      	cmp	r3, #132	; 0x84
 8002488:	d005      	beq.n	8002496 <makeFreeRtosPriority+0x22>
fpriority += (priority - osPriorityIdle);
 800248a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4413      	add	r3, r2
 8002492:	3303      	adds	r3, #3
 8002494:	60fb      	str	r3, [r7, #12]
}

return fpriority;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_write>:

int _write(int file, char *ptr, int len){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++){
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e00a      	b.n	80024cc <_write+0x28>
       //ITM_SendChar( ptr++ );
       HAL_UART_Transmit(&huart2, ptr,len,1000);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	4807      	ldr	r0, [pc, #28]	; (80024e0 <_write+0x3c>)
 80024c2:	f002 f934 	bl	800472e <HAL_UART_Transmit>
    for (DataIdx = 0; DataIdx < len; DataIdx++){
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbf0      	blt.n	80024b6 <_write+0x12>
    }
    return len;
 80024d4:	687b      	ldr	r3, [r7, #4]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000564 	.word	0x20000564

080024e4 <UART_EndRxTransfer>:
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */

static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b095      	sub	sp, #84	; 0x54
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	e853 3f00 	ldrex	r3, [r3]
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	330c      	adds	r3, #12
 800250a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800250c:	643a      	str	r2, [r7, #64]	; 0x40
 800250e:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002514:	e841 2300 	strex	r3, r2, [r1]
 8002518:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800251a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e5      	bne.n	80024ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3314      	adds	r3, #20
 8002526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	e853 3f00 	ldrex	r3, [r3]
 800252e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3314      	adds	r3, #20
 800253e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002548:	e841 2300 	strex	r3, r2, [r1]
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e5      	bne.n	8002520 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	2b01      	cmp	r3, #1
 800255a:	d119      	bne.n	8002590 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	e853 3f00 	ldrex	r3, [r3]
 800256a:	60bb      	str	r3, [r7, #8]
   return(result);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f023 0310 	bic.w	r3, r3, #16
 8002572:	647b      	str	r3, [r7, #68]	; 0x44
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	330c      	adds	r3, #12
 800257a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800257c:	61ba      	str	r2, [r7, #24]
 800257e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002580:	6979      	ldr	r1, [r7, #20]
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	e841 2300 	strex	r3, r2, [r1]
 8002588:	613b      	str	r3, [r7, #16]
   return(result);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1e5      	bne.n	800255c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800259e:	bf00      	nop
 80025a0:	3754      	adds	r7, #84	; 0x54
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_DMA_Abort_PAS>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_PAS(DMA_HandleTypeDef *hdma)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	60fb      	str	r3, [r7, #12]

  //uint32_t tickstart = HAL_GetTick();

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d008      	beq.n	80025d6 <HAL_DMA_Abort_PAS+0x2c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e036      	b.n	8002644 <HAL_DMA_Abort_PAS+0x9a>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0216 	bic.w	r2, r2, #22
 80025e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f4:	615a      	str	r2, [r3, #20]

    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_DMA_Abort_PAS+0x5c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <HAL_DMA_Abort_PAS+0x6c>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0208 	bic.w	r2, r2, #8
 8002614:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
        return HAL_TIMEOUT;
      }
    }*/

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	223f      	movs	r2, #63	; 0x3f
 800262c:	409a      	lsls	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	609a      	str	r2, [r3, #8]

    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_UART_DMAStop_PAS>:

HAL_StatusTypeDef HAL_UART_DMAStop_PAS(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */


  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	bf0c      	ite	eq
 800266a:	2301      	moveq	r3, #1
 800266c:	2300      	movne	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b22      	cmp	r3, #34	; 0x22
 800267c:	d128      	bne.n	80026d0 <HAL_UART_DMAStop_PAS+0x80>
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	2b00      	cmp	r3, #0
 8002682:	d025      	beq.n	80026d0 <HAL_UART_DMAStop_PAS+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3314      	adds	r3, #20
 800268a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	e853 3f00 	ldrex	r3, [r3]
 8002692:	60fb      	str	r3, [r7, #12]
   return(result);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800269a:	623b      	str	r3, [r7, #32]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3314      	adds	r3, #20
 80026a2:	6a3a      	ldr	r2, [r7, #32]
 80026a4:	61fa      	str	r2, [r7, #28]
 80026a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a8:	69b9      	ldr	r1, [r7, #24]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	e841 2300 	strex	r3, r2, [r1]
 80026b0:	617b      	str	r3, [r7, #20]
   return(result);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e5      	bne.n	8002684 <HAL_UART_DMAStop_PAS+0x34>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <HAL_UART_DMAStop_PAS+0x7a>
    {
      HAL_DMA_Abort_PAS(huart->hdmarx);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff70 	bl	80025aa <HAL_DMA_Abort_PAS>
    }
    UART_EndRxTransfer(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ff0a 	bl	80024e4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_DMA_getcounter>:



uint32_t HAL_DMA_getcounter(UART_HandleTypeDef *huart){
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
	return huart->hdmarx->Instance->NDTR;}
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026fc:	480d      	ldr	r0, [pc, #52]	; (8002734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026fe:	490e      	ldr	r1, [pc, #56]	; (8002738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002704:	e002      	b.n	800270c <LoopCopyDataInit>

08002706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270a:	3304      	adds	r3, #4

0800270c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800270c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002710:	d3f9      	bcc.n	8002706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002712:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002714:	4c0b      	ldr	r4, [pc, #44]	; (8002744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002718:	e001      	b.n	800271e <LoopFillZerobss>

0800271a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800271c:	3204      	adds	r2, #4

0800271e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002720:	d3fb      	bcc.n	800271a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002722:	f7ff faff 	bl	8001d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002726:	f005 f959 	bl	80079dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272a:	f7fe fea5 	bl	8001478 <main>
  bx  lr    
 800272e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002738:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 800273c:	0800aaa4 	.word	0x0800aaa4
  ldr r2, =_sbss
 8002740:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8002744:	20005040 	.word	0x20005040

08002748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC_IRQHandler>
	...

0800274c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_Init+0x40>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0d      	ldr	r2, [pc, #52]	; (800278c <HAL_Init+0x40>)
 8002756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800275a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_Init+0x40>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0a      	ldr	r2, [pc, #40]	; (800278c <HAL_Init+0x40>)
 8002762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_Init+0x40>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a07      	ldr	r2, [pc, #28]	; (800278c <HAL_Init+0x40>)
 800276e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002774:	2003      	movs	r0, #3
 8002776:	f000 fd1d 	bl	80031b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800277a:	200f      	movs	r0, #15
 800277c:	f000 f808 	bl	8002790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002780:	f7ff f89e 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023c00 	.word	0x40023c00

08002790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_InitTick+0x54>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_InitTick+0x58>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fd35 	bl	800321e <HAL_SYSTICK_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00e      	b.n	80027dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b0f      	cmp	r3, #15
 80027c2:	d80a      	bhi.n	80027da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c4:	2200      	movs	r2, #0
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f000 fcfd 	bl	80031ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d0:	4a06      	ldr	r2, [pc, #24]	; (80027ec <HAL_InitTick+0x5c>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e000      	b.n	80027dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	2000003c 	.word	0x2000003c
 80027e8:	20000044 	.word	0x20000044
 80027ec:	20000040 	.word	0x20000040

080027f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_IncTick+0x20>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_IncTick+0x24>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_IncTick+0x24>)
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000044 	.word	0x20000044
 8002814:	200012d8 	.word	0x200012d8

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_GetTick+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	200012d8 	.word	0x200012d8

08002830 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e033      	b.n	80028ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff f862 	bl	8001918 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002876:	f023 0302 	bic.w	r3, r3, #2
 800287a:	f043 0202 	orr.w	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 faca 	bl	8002e1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
 800289e:	e001      	b.n	80028a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_Start+0x1a>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e097      	b.n	8002a02 <HAL_ADC_Start+0x14a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d018      	beq.n	800291a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028f8:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <HAL_ADC_Start+0x158>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a45      	ldr	r2, [pc, #276]	; (8002a14 <HAL_ADC_Start+0x15c>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0c9a      	lsrs	r2, r3, #18
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800290c:	e002      	b.n	8002914 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3b01      	subs	r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f9      	bne.n	800290e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d15f      	bne.n	80029e8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002952:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002966:	d106      	bne.n	8002976 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	f023 0206 	bic.w	r2, r3, #6
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
 8002974:	e002      	b.n	800297c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_ADC_Start+0x160>)
 8002986:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002990:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d129      	bne.n	8002a00 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	e020      	b.n	8002a00 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <HAL_ADC_Start+0x164>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d11b      	bne.n	8002a00 <HAL_ADC_Start+0x148>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d114      	bne.n	8002a00 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	e00b      	b.n	8002a00 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0210 	orr.w	r2, r3, #16
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000003c 	.word	0x2000003c
 8002a14:	431bde83 	.word	0x431bde83
 8002a18:	40012300 	.word	0x40012300
 8002a1c:	40012000 	.word	0x40012000

08002a20 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Stop+0x16>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e021      	b.n	8002a7a <HAL_ADC_Stop+0x5a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d109      	bne.n	8002a70 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	d113      	bne.n	8002acc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab2:	d10b      	bne.n	8002acc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e063      	b.n	8002b94 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002acc:	f7ff fea4 	bl	8002818 <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ad2:	e021      	b.n	8002b18 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ada:	d01d      	beq.n	8002b18 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_ADC_PollForConversion+0x6c>
 8002ae2:	f7ff fe99 	bl	8002818 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d212      	bcs.n	8002b18 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d00b      	beq.n	8002b18 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f043 0204 	orr.w	r2, r3, #4
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e03d      	b.n	8002b94 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d1d6      	bne.n	8002ad4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0212 	mvn.w	r2, #18
 8002b2e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d123      	bne.n	8002b92 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11f      	bne.n	8002b92 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d111      	bne.n	8002b92 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1c>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e113      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x244>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b09      	cmp	r3, #9
 8002be2:	d925      	bls.n	8002c30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68d9      	ldr	r1, [r3, #12]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3b1e      	subs	r3, #30
 8002bfa:	2207      	movs	r2, #7
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43da      	mvns	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	400a      	ands	r2, r1
 8002c08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68d9      	ldr	r1, [r3, #12]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4403      	add	r3, r0
 8002c22:	3b1e      	subs	r3, #30
 8002c24:	409a      	lsls	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	e022      	b.n	8002c76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6919      	ldr	r1, [r3, #16]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	2207      	movs	r2, #7
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43da      	mvns	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	400a      	ands	r2, r1
 8002c52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6919      	ldr	r1, [r3, #16]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	4618      	mov	r0, r3
 8002c66:	4603      	mov	r3, r0
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4403      	add	r3, r0
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d824      	bhi.n	8002cc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3b05      	subs	r3, #5
 8002c90:	221f      	movs	r2, #31
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	4618      	mov	r0, r3
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b05      	subs	r3, #5
 8002cba:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc6:	e04c      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b0c      	cmp	r3, #12
 8002cce:	d824      	bhi.n	8002d1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b23      	subs	r3, #35	; 0x23
 8002ce2:	221f      	movs	r2, #31
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	400a      	ands	r2, r1
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b23      	subs	r3, #35	; 0x23
 8002d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
 8002d18:	e023      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	3b41      	subs	r3, #65	; 0x41
 8002d2c:	221f      	movs	r2, #31
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	400a      	ands	r2, r1
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	3b41      	subs	r3, #65	; 0x41
 8002d56:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <HAL_ADC_ConfigChannel+0x250>)
 8002d64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a28      	ldr	r2, [pc, #160]	; (8002e0c <HAL_ADC_ConfigChannel+0x254>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d10f      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x1d8>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b12      	cmp	r3, #18
 8002d76:	d10b      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_ADC_ConfigChannel+0x254>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d12b      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x23a>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_ADC_ConfigChannel+0x258>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d003      	beq.n	8002dac <HAL_ADC_ConfigChannel+0x1f4>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b11      	cmp	r3, #17
 8002daa:	d122      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_ADC_ConfigChannel+0x258>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d111      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_ADC_ConfigChannel+0x25c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a11      	ldr	r2, [pc, #68]	; (8002e18 <HAL_ADC_ConfigChannel+0x260>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	0c9a      	lsrs	r2, r3, #18
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002de4:	e002      	b.n	8002dec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f9      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40012300 	.word	0x40012300
 8002e0c:	40012000 	.word	0x40012000
 8002e10:	10000012 	.word	0x10000012
 8002e14:	2000003c 	.word	0x2000003c
 8002e18:	431bde83 	.word	0x431bde83

08002e1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e24:	4b79      	ldr	r3, [pc, #484]	; (800300c <ADC_Init+0x1f0>)
 8002e26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	021a      	lsls	r2, r3, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	4a58      	ldr	r2, [pc, #352]	; (8003010 <ADC_Init+0x1f4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6899      	ldr	r1, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6899      	ldr	r1, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	e00f      	b.n	8002f1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0202 	bic.w	r2, r2, #2
 8002f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6899      	ldr	r1, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7e1b      	ldrb	r3, [r3, #24]
 8002f34:	005a      	lsls	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01b      	beq.n	8002f80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	3b01      	subs	r3, #1
 8002f74:	035a      	lsls	r2, r3, #13
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	e007      	b.n	8002f90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	051a      	lsls	r2, r3, #20
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6899      	ldr	r1, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fd2:	025a      	lsls	r2, r3, #9
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6899      	ldr	r1, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	029a      	lsls	r2, r3, #10
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40012300 	.word	0x40012300
 8003010:	0f000001 	.word	0x0f000001

08003014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003030:	4013      	ands	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800303c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003046:	4a04      	ldr	r2, [pc, #16]	; (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	60d3      	str	r3, [r2, #12]
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <__NVIC_GetPriorityGrouping+0x18>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 0307 	and.w	r3, r3, #7
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db0b      	blt.n	80030a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4907      	ldr	r1, [pc, #28]	; (80030b0 <__NVIC_EnableIRQ+0x38>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	; (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	; (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
         );
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	; 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003180:	d301      	bcc.n	8003186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003182:	2301      	movs	r3, #1
 8003184:	e00f      	b.n	80031a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003186:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <SysTick_Config+0x40>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318e:	210f      	movs	r1, #15
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	f7ff ff8e 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <SysTick_Config+0x40>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319e:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <SysTick_Config+0x40>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	e000e010 	.word	0xe000e010

080031b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff29 	bl	8003014 <__NVIC_SetPriorityGrouping>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031dc:	f7ff ff3e 	bl	800305c <__NVIC_GetPriorityGrouping>
 80031e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	6978      	ldr	r0, [r7, #20]
 80031e8:	f7ff ff8e 	bl	8003108 <NVIC_EncodePriority>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff5d 	bl	80030b4 <__NVIC_SetPriority>
}
 80031fa:	bf00      	nop
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800320c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff31 	bl	8003078 <__NVIC_EnableIRQ>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ffa2 	bl	8003170 <SysTick_Config>
 800322c:	4603      	mov	r3, r0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff fae8 	bl	8002818 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e099      	b.n	8003388 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003274:	e00f      	b.n	8003296 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003276:	f7ff facf 	bl	8002818 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b05      	cmp	r3, #5
 8003282:	d908      	bls.n	8003296 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2203      	movs	r2, #3
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e078      	b.n	8003388 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e8      	bne.n	8003276 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_DMA_Init+0x158>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d107      	bne.n	8003300 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	4313      	orrs	r3, r2
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0307 	bic.w	r3, r3, #7
 8003316:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b04      	cmp	r3, #4
 8003328:	d117      	bne.n	800335a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fadf 	bl	8003900 <DMA_CheckFifoParam>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2240      	movs	r2, #64	; 0x40
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003356:	2301      	movs	r3, #1
 8003358:	e016      	b.n	8003388 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa96 	bl	8003894 <DMA_CalcBaseAndBitshift>
 8003368:	4603      	mov	r3, r0
 800336a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	223f      	movs	r2, #63	; 0x3f
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	f010803f 	.word	0xf010803f

08003394 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_DMA_Start_IT+0x26>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e040      	b.n	800343c <HAL_DMA_Start_IT+0xa8>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d12f      	bne.n	800342e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fa28 	bl	8003838 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	223f      	movs	r2, #63	; 0x3f
 80033ee:	409a      	lsls	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0216 	orr.w	r2, r2, #22
 8003402:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0208 	orr.w	r2, r2, #8
 800341a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e005      	b.n	800343a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003436:	2302      	movs	r3, #2
 8003438:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003452:	f7ff f9e1 	bl	8002818 <HAL_GetTick>
 8003456:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d008      	beq.n	8003476 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e052      	b.n	800351c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0216 	bic.w	r2, r2, #22
 8003484:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003494:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_DMA_Abort+0x62>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0208 	bic.w	r2, r2, #8
 80034b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c6:	e013      	b.n	80034f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c8:	f7ff f9a6 	bl	8002818 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d90c      	bls.n	80034f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2203      	movs	r2, #3
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e015      	b.n	800351c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e4      	bne.n	80034c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	223f      	movs	r2, #63	; 0x3f
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003530:	4b8e      	ldr	r3, [pc, #568]	; (800376c <HAL_DMA_IRQHandler+0x248>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a8e      	ldr	r2, [pc, #568]	; (8003770 <HAL_DMA_IRQHandler+0x24c>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0a9b      	lsrs	r3, r3, #10
 800353c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	2208      	movs	r2, #8
 8003550:	409a      	lsls	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01a      	beq.n	8003590 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	2208      	movs	r2, #8
 800357e:	409a      	lsls	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0201 	orr.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d012      	beq.n	80035c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	2201      	movs	r2, #1
 80035b4:	409a      	lsls	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f043 0202 	orr.w	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2204      	movs	r2, #4
 80035cc:	409a      	lsls	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00b      	beq.n	80035fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e8:	2204      	movs	r2, #4
 80035ea:	409a      	lsls	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	2210      	movs	r2, #16
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d043      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d03c      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	2210      	movs	r2, #16
 8003620:	409a      	lsls	r2, r3
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d018      	beq.n	8003666 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d108      	bne.n	8003654 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d024      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
 8003652:	e01f      	b.n	8003694 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
 8003664:	e016      	b.n	8003694 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0208 	bic.w	r2, r2, #8
 8003682:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	2220      	movs	r2, #32
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 808f 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8087 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	2220      	movs	r2, #32
 80036bc:	409a      	lsls	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d136      	bne.n	800373c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0216 	bic.w	r2, r2, #22
 80036dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <HAL_DMA_IRQHandler+0x1da>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0208 	bic.w	r2, r2, #8
 800370c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	223f      	movs	r2, #63	; 0x3f
 8003714:	409a      	lsls	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	2b00      	cmp	r3, #0
 8003730:	d07e      	beq.n	8003830 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
        }
        return;
 800373a:	e079      	b.n	8003830 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01d      	beq.n	8003786 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	2b00      	cmp	r3, #0
 800375e:	d031      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e02c      	b.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
 800376a:	bf00      	nop
 800376c:	2000003c 	.word	0x2000003c
 8003770:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d023      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
 8003784:	e01e      	b.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10f      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0210 	bic.w	r2, r2, #16
 80037a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d032      	beq.n	8003832 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d022      	beq.n	800381e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2205      	movs	r2, #5
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	3301      	adds	r3, #1
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d307      	bcc.n	800380c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f2      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x2cc>
 800380a:	e000      	b.n	800380e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800380c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
 800382e:	e000      	b.n	8003832 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003830:	bf00      	nop
    }
  }
}
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003854:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d108      	bne.n	8003878 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003876:	e007      	b.n	8003888 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	3b10      	subs	r3, #16
 80038a4:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <DMA_CalcBaseAndBitshift+0x64>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ae:	4a13      	ldr	r2, [pc, #76]	; (80038fc <DMA_CalcBaseAndBitshift+0x68>)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d909      	bls.n	80038d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	1d1a      	adds	r2, r3, #4
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	659a      	str	r2, [r3, #88]	; 0x58
 80038d4:	e007      	b.n	80038e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	aaaaaaab 	.word	0xaaaaaaab
 80038fc:	0800a6ac 	.word	0x0800a6ac

08003900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11f      	bne.n	800395a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d856      	bhi.n	80039ce <DMA_CheckFifoParam+0xce>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <DMA_CheckFifoParam+0x28>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	08003939 	.word	0x08003939
 800392c:	0800394b 	.word	0x0800394b
 8003930:	08003939 	.word	0x08003939
 8003934:	080039cf 	.word	0x080039cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d046      	beq.n	80039d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003948:	e043      	b.n	80039d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003952:	d140      	bne.n	80039d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003958:	e03d      	b.n	80039d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003962:	d121      	bne.n	80039a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d837      	bhi.n	80039da <DMA_CheckFifoParam+0xda>
 800396a:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <DMA_CheckFifoParam+0x70>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	08003981 	.word	0x08003981
 8003974:	08003987 	.word	0x08003987
 8003978:	08003981 	.word	0x08003981
 800397c:	08003999 	.word	0x08003999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      break;
 8003984:	e030      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d025      	beq.n	80039de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003996:	e022      	b.n	80039de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039a0:	d11f      	bne.n	80039e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039a6:	e01c      	b.n	80039e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d903      	bls.n	80039b6 <DMA_CheckFifoParam+0xb6>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d003      	beq.n	80039bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039b4:	e018      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
      break;
 80039ba:	e015      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00e      	beq.n	80039e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      break;
 80039cc:	e00b      	b.n	80039e6 <DMA_CheckFifoParam+0xe6>
      break;
 80039ce:	bf00      	nop
 80039d0:	e00a      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039d2:	bf00      	nop
 80039d4:	e008      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039d6:	bf00      	nop
 80039d8:	e006      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039da:	bf00      	nop
 80039dc:	e004      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039de:	bf00      	nop
 80039e0:	e002      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039e6:	bf00      	nop
    }
  } 
  
  return status; 
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop

080039f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	e159      	b.n	8003cc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a14:	2201      	movs	r2, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	f040 8148 	bne.w	8003cc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d005      	beq.n	8003a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d130      	bne.n	8003aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	2203      	movs	r2, #3
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a80:	2201      	movs	r2, #1
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 0201 	and.w	r2, r3, #1
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d017      	beq.n	8003ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d123      	bne.n	8003b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	08da      	lsrs	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3208      	adds	r2, #8
 8003afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	08da      	lsrs	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3208      	adds	r2, #8
 8003b36:	69b9      	ldr	r1, [r7, #24]
 8003b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 0203 	and.w	r2, r3, #3
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80a2 	beq.w	8003cc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b57      	ldr	r3, [pc, #348]	; (8003ce0 <HAL_GPIO_Init+0x2e8>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	4a56      	ldr	r2, [pc, #344]	; (8003ce0 <HAL_GPIO_Init+0x2e8>)
 8003b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8e:	4b54      	ldr	r3, [pc, #336]	; (8003ce0 <HAL_GPIO_Init+0x2e8>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b9a:	4a52      	ldr	r2, [pc, #328]	; (8003ce4 <HAL_GPIO_Init+0x2ec>)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a49      	ldr	r2, [pc, #292]	; (8003ce8 <HAL_GPIO_Init+0x2f0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d019      	beq.n	8003bfa <HAL_GPIO_Init+0x202>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a48      	ldr	r2, [pc, #288]	; (8003cec <HAL_GPIO_Init+0x2f4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_GPIO_Init+0x1fe>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a47      	ldr	r2, [pc, #284]	; (8003cf0 <HAL_GPIO_Init+0x2f8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00d      	beq.n	8003bf2 <HAL_GPIO_Init+0x1fa>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a46      	ldr	r2, [pc, #280]	; (8003cf4 <HAL_GPIO_Init+0x2fc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d007      	beq.n	8003bee <HAL_GPIO_Init+0x1f6>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a45      	ldr	r2, [pc, #276]	; (8003cf8 <HAL_GPIO_Init+0x300>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_GPIO_Init+0x1f2>
 8003be6:	2304      	movs	r3, #4
 8003be8:	e008      	b.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bea:	2307      	movs	r3, #7
 8003bec:	e006      	b.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e004      	b.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e002      	b.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	f002 0203 	and.w	r2, r2, #3
 8003c02:	0092      	lsls	r2, r2, #2
 8003c04:	4093      	lsls	r3, r2
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c0c:	4935      	ldr	r1, [pc, #212]	; (8003ce4 <HAL_GPIO_Init+0x2ec>)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	3302      	adds	r3, #2
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c3e:	4a2f      	ldr	r2, [pc, #188]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c44:	4b2d      	ldr	r3, [pc, #180]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c68:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c92:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cbc:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b0f      	cmp	r3, #15
 8003ccc:	f67f aea2 	bls.w	8003a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	3724      	adds	r7, #36	; 0x24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	40020000 	.word	0x40020000
 8003cec:	40020400 	.word	0x40020400
 8003cf0:	40020800 	.word	0x40020800
 8003cf4:	40020c00 	.word	0x40020c00
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40013c00 	.word	0x40013c00

08003d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	887b      	ldrh	r3, [r7, #2]
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	e001      	b.n	8003d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d4c:	e003      	b.n	8003d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	041a      	lsls	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	619a      	str	r2, [r3, #24]
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e267      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d075      	beq.n	8003e6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d82:	4b88      	ldr	r3, [pc, #544]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d00c      	beq.n	8003da8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d8e:	4b85      	ldr	r3, [pc, #532]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d112      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d9a:	4b82      	ldr	r3, [pc, #520]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da6:	d10b      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da8:	4b7e      	ldr	r3, [pc, #504]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d05b      	beq.n	8003e6c <HAL_RCC_OscConfig+0x108>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d157      	bne.n	8003e6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e242      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x74>
 8003dca:	4b76      	ldr	r3, [pc, #472]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a75      	ldr	r2, [pc, #468]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e01d      	b.n	8003e14 <HAL_RCC_OscConfig+0xb0>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x98>
 8003de2:	4b70      	ldr	r3, [pc, #448]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a6f      	ldr	r2, [pc, #444]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b6d      	ldr	r3, [pc, #436]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a6c      	ldr	r2, [pc, #432]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCC_OscConfig+0xb0>
 8003dfc:	4b69      	ldr	r3, [pc, #420]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a68      	ldr	r2, [pc, #416]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b66      	ldr	r3, [pc, #408]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a65      	ldr	r2, [pc, #404]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fe fcfc 	bl	8002818 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fe fcf8 	bl	8002818 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e207      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	4b5b      	ldr	r3, [pc, #364]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0xc0>
 8003e42:	e014      	b.n	8003e6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fe fce8 	bl	8002818 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fe fce4 	bl	8002818 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e1f3      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5e:	4b51      	ldr	r3, [pc, #324]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0xe8>
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d063      	beq.n	8003f42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e7a:	4b4a      	ldr	r3, [pc, #296]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d11c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e92:	4b44      	ldr	r3, [pc, #272]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d116      	bne.n	8003ecc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x152>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e1c7      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4937      	ldr	r1, [pc, #220]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eca:	e03a      	b.n	8003f42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed4:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_OscConfig+0x244>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7fe fc9d 	bl	8002818 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee2:	f7fe fc99 	bl	8002818 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e1a8      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f00:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4925      	ldr	r1, [pc, #148]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]
 8003f14:	e015      	b.n	8003f42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_OscConfig+0x244>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fe fc7c 	bl	8002818 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f24:	f7fe fc78 	bl	8002818 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e187      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d036      	beq.n	8003fbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d016      	beq.n	8003f84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <HAL_RCC_OscConfig+0x248>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fe fc5c 	bl	8002818 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fe fc58 	bl	8002818 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e167      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_OscConfig+0x240>)
 8003f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x200>
 8003f82:	e01b      	b.n	8003fbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_OscConfig+0x248>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe fc45 	bl	8002818 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	e00e      	b.n	8003fb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f92:	f7fe fc41 	bl	8002818 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d907      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e150      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	42470000 	.word	0x42470000
 8003fac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	4b88      	ldr	r3, [pc, #544]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ea      	bne.n	8003f92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8097 	beq.w	80040f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fce:	4b81      	ldr	r3, [pc, #516]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	4b7d      	ldr	r3, [pc, #500]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a7c      	ldr	r2, [pc, #496]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fea:	4b7a      	ldr	r3, [pc, #488]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b77      	ldr	r3, [pc, #476]	; (80041d8 <HAL_RCC_OscConfig+0x474>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d118      	bne.n	8004038 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004006:	4b74      	ldr	r3, [pc, #464]	; (80041d8 <HAL_RCC_OscConfig+0x474>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a73      	ldr	r2, [pc, #460]	; (80041d8 <HAL_RCC_OscConfig+0x474>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004012:	f7fe fc01 	bl	8002818 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7fe fbfd 	bl	8002818 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e10c      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <HAL_RCC_OscConfig+0x474>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x2ea>
 8004040:	4b64      	ldr	r3, [pc, #400]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	4a63      	ldr	r2, [pc, #396]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6713      	str	r3, [r2, #112]	; 0x70
 800404c:	e01c      	b.n	8004088 <HAL_RCC_OscConfig+0x324>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b05      	cmp	r3, #5
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0x30c>
 8004056:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a5e      	ldr	r2, [pc, #376]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
 8004062:	4b5c      	ldr	r3, [pc, #368]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a5b      	ldr	r2, [pc, #364]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6713      	str	r3, [r2, #112]	; 0x70
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0x324>
 8004070:	4b58      	ldr	r3, [pc, #352]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4a57      	ldr	r2, [pc, #348]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	; 0x70
 800407c:	4b55      	ldr	r3, [pc, #340]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	4a54      	ldr	r2, [pc, #336]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004082:	f023 0304 	bic.w	r3, r3, #4
 8004086:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d015      	beq.n	80040bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fe fbc2 	bl	8002818 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fe fbbe 	bl	8002818 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e0cb      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ee      	beq.n	8004098 <HAL_RCC_OscConfig+0x334>
 80040ba:	e014      	b.n	80040e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040bc:	f7fe fbac 	bl	8002818 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c2:	e00a      	b.n	80040da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fe fba8 	bl	8002818 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e0b5      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040da:	4b3e      	ldr	r3, [pc, #248]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ee      	bne.n	80040c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ec:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	4a38      	ldr	r2, [pc, #224]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 80040f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80a1 	beq.w	8004244 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004102:	4b34      	ldr	r3, [pc, #208]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b08      	cmp	r3, #8
 800410c:	d05c      	beq.n	80041c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d141      	bne.n	800419a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004116:	4b31      	ldr	r3, [pc, #196]	; (80041dc <HAL_RCC_OscConfig+0x478>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fe fb7c 	bl	8002818 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004124:	f7fe fb78 	bl	8002818 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e087      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	3b01      	subs	r3, #1
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	491b      	ldr	r1, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800416c:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <HAL_RCC_OscConfig+0x478>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004172:	f7fe fb51 	bl	8002818 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417a:	f7fe fb4d 	bl	8002818 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e05c      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x416>
 8004198:	e054      	b.n	8004244 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <HAL_RCC_OscConfig+0x478>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fe fb3a 	bl	8002818 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fe fb36 	bl	8002818 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e045      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_RCC_OscConfig+0x470>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x444>
 80041c6:	e03d      	b.n	8004244 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e038      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40007000 	.word	0x40007000
 80041dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041e0:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <HAL_RCC_OscConfig+0x4ec>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d028      	beq.n	8004240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d121      	bne.n	8004240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d11a      	bne.n	8004240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004210:	4013      	ands	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004216:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004218:	4293      	cmp	r3, r2
 800421a:	d111      	bne.n	8004240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	085b      	lsrs	r3, r3, #1
 8004228:	3b01      	subs	r3, #1
 800422a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d107      	bne.n	8004240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800

08004254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0cc      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004268:	4b68      	ldr	r3, [pc, #416]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d90c      	bls.n	8004290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004276:	4b65      	ldr	r3, [pc, #404]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b63      	ldr	r3, [pc, #396]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0b8      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a8:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4a58      	ldr	r2, [pc, #352]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a52      	ldr	r2, [pc, #328]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042cc:	4b50      	ldr	r3, [pc, #320]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	494d      	ldr	r1, [pc, #308]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d044      	beq.n	8004374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d119      	bne.n	8004332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e07f      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d003      	beq.n	8004312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430e:	2b03      	cmp	r3, #3
 8004310:	d107      	bne.n	8004322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004312:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e06f      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004322:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e067      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f023 0203 	bic.w	r2, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4934      	ldr	r1, [pc, #208]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	4313      	orrs	r3, r2
 8004342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004344:	f7fe fa68 	bl	8002818 <HAL_GetTick>
 8004348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	e00a      	b.n	8004362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434c:	f7fe fa64 	bl	8002818 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	; 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e04f      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 020c 	and.w	r2, r3, #12
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	429a      	cmp	r2, r3
 8004372:	d1eb      	bne.n	800434c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004374:	4b25      	ldr	r3, [pc, #148]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d20c      	bcs.n	800439c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004382:	4b22      	ldr	r3, [pc, #136]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e032      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4916      	ldr	r1, [pc, #88]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	490e      	ldr	r1, [pc, #56]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043da:	f000 f821 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80043de:	4602      	mov	r2, r0
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	490a      	ldr	r1, [pc, #40]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 80043ec:	5ccb      	ldrb	r3, [r1, r3]
 80043ee:	fa22 f303 	lsr.w	r3, r2, r3
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80043f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe f9c8 	bl	8002790 <HAL_InitTick>

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40023c00 	.word	0x40023c00
 8004410:	40023800 	.word	0x40023800
 8004414:	0800a694 	.word	0x0800a694
 8004418:	2000003c 	.word	0x2000003c
 800441c:	20000040 	.word	0x20000040

08004420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004424:	b094      	sub	sp, #80	; 0x50
 8004426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	647b      	str	r3, [r7, #68]	; 0x44
 800442c:	2300      	movs	r3, #0
 800442e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004430:	2300      	movs	r3, #0
 8004432:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004438:	4b79      	ldr	r3, [pc, #484]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b08      	cmp	r3, #8
 8004442:	d00d      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x40>
 8004444:	2b08      	cmp	r3, #8
 8004446:	f200 80e1 	bhi.w	800460c <HAL_RCC_GetSysClockFreq+0x1ec>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x34>
 800444e:	2b04      	cmp	r3, #4
 8004450:	d003      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x3a>
 8004452:	e0db      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004454:	4b73      	ldr	r3, [pc, #460]	; (8004624 <HAL_RCC_GetSysClockFreq+0x204>)
 8004456:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004458:	e0db      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800445a:	4b73      	ldr	r3, [pc, #460]	; (8004628 <HAL_RCC_GetSysClockFreq+0x208>)
 800445c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800445e:	e0d8      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004460:	4b6f      	ldr	r3, [pc, #444]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004468:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800446a:	4b6d      	ldr	r3, [pc, #436]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d063      	beq.n	800453e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004476:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	2200      	movs	r2, #0
 800447e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004480:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004488:	633b      	str	r3, [r7, #48]	; 0x30
 800448a:	2300      	movs	r3, #0
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
 800448e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004492:	4622      	mov	r2, r4
 8004494:	462b      	mov	r3, r5
 8004496:	f04f 0000 	mov.w	r0, #0
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	0159      	lsls	r1, r3, #5
 80044a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a4:	0150      	lsls	r0, r2, #5
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4621      	mov	r1, r4
 80044ac:	1a51      	subs	r1, r2, r1
 80044ae:	6139      	str	r1, [r7, #16]
 80044b0:	4629      	mov	r1, r5
 80044b2:	eb63 0301 	sbc.w	r3, r3, r1
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044c4:	4659      	mov	r1, fp
 80044c6:	018b      	lsls	r3, r1, #6
 80044c8:	4651      	mov	r1, sl
 80044ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ce:	4651      	mov	r1, sl
 80044d0:	018a      	lsls	r2, r1, #6
 80044d2:	4651      	mov	r1, sl
 80044d4:	ebb2 0801 	subs.w	r8, r2, r1
 80044d8:	4659      	mov	r1, fp
 80044da:	eb63 0901 	sbc.w	r9, r3, r1
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044f2:	4690      	mov	r8, r2
 80044f4:	4699      	mov	r9, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	eb18 0303 	adds.w	r3, r8, r3
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	462b      	mov	r3, r5
 8004500:	eb49 0303 	adc.w	r3, r9, r3
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004512:	4629      	mov	r1, r5
 8004514:	024b      	lsls	r3, r1, #9
 8004516:	4621      	mov	r1, r4
 8004518:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800451c:	4621      	mov	r1, r4
 800451e:	024a      	lsls	r2, r1, #9
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004526:	2200      	movs	r2, #0
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
 800452a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800452c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004530:	f7fc fb42 	bl	8000bb8 <__aeabi_uldivmod>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4613      	mov	r3, r2
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800453c:	e058      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453e:	4b38      	ldr	r3, [pc, #224]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	2200      	movs	r2, #0
 8004546:	4618      	mov	r0, r3
 8004548:	4611      	mov	r1, r2
 800454a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800454e:	623b      	str	r3, [r7, #32]
 8004550:	2300      	movs	r3, #0
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
 8004554:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	f04f 0000 	mov.w	r0, #0
 8004560:	f04f 0100 	mov.w	r1, #0
 8004564:	0159      	lsls	r1, r3, #5
 8004566:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800456a:	0150      	lsls	r0, r2, #5
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4641      	mov	r1, r8
 8004572:	ebb2 0a01 	subs.w	sl, r2, r1
 8004576:	4649      	mov	r1, r9
 8004578:	eb63 0b01 	sbc.w	fp, r3, r1
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004588:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800458c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004590:	ebb2 040a 	subs.w	r4, r2, sl
 8004594:	eb63 050b 	sbc.w	r5, r3, fp
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	00eb      	lsls	r3, r5, #3
 80045a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a6:	00e2      	lsls	r2, r4, #3
 80045a8:	4614      	mov	r4, r2
 80045aa:	461d      	mov	r5, r3
 80045ac:	4643      	mov	r3, r8
 80045ae:	18e3      	adds	r3, r4, r3
 80045b0:	603b      	str	r3, [r7, #0]
 80045b2:	464b      	mov	r3, r9
 80045b4:	eb45 0303 	adc.w	r3, r5, r3
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045c6:	4629      	mov	r1, r5
 80045c8:	028b      	lsls	r3, r1, #10
 80045ca:	4621      	mov	r1, r4
 80045cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045d0:	4621      	mov	r1, r4
 80045d2:	028a      	lsls	r2, r1, #10
 80045d4:	4610      	mov	r0, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045da:	2200      	movs	r2, #0
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	61fa      	str	r2, [r7, #28]
 80045e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045e4:	f7fc fae8 	bl	8000bb8 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4613      	mov	r3, r2
 80045ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	3301      	adds	r3, #1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800460a:	e002      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCC_GetSysClockFreq+0x204>)
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004614:	4618      	mov	r0, r3
 8004616:	3750      	adds	r7, #80	; 0x50
 8004618:	46bd      	mov	sp, r7
 800461a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	00f42400 	.word	0x00f42400
 8004628:	007a1200 	.word	0x007a1200

0800462c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <HAL_RCC_GetHCLKFreq+0x14>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	2000003c 	.word	0x2000003c

08004644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004648:	f7ff fff0 	bl	800462c <HAL_RCC_GetHCLKFreq>
 800464c:	4602      	mov	r2, r0
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	0a9b      	lsrs	r3, r3, #10
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4903      	ldr	r1, [pc, #12]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800465a:	5ccb      	ldrb	r3, [r1, r3]
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40023800 	.word	0x40023800
 8004668:	0800a6a4 	.word	0x0800a6a4

0800466c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004670:	f7ff ffdc 	bl	800462c <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0b5b      	lsrs	r3, r3, #13
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4903      	ldr	r1, [pc, #12]	; (8004690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40023800 	.word	0x40023800
 8004690:	0800a6a4 	.word	0x0800a6a4

08004694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e03f      	b.n	8004726 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fd f970 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	; 0x24
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fc23 	bl	8004f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800470c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b08a      	sub	sp, #40	; 0x28
 8004732:	af02      	add	r7, sp, #8
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b20      	cmp	r3, #32
 800474c:	d17c      	bne.n	8004848 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_UART_Transmit+0x2c>
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e075      	b.n	800484a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_UART_Transmit+0x3e>
 8004768:	2302      	movs	r3, #2
 800476a:	e06e      	b.n	800484a <HAL_UART_Transmit+0x11c>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2221      	movs	r2, #33	; 0x21
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004782:	f7fe f849 	bl	8002818 <HAL_GetTick>
 8004786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	88fa      	ldrh	r2, [r7, #6]
 8004792:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d108      	bne.n	80047b0 <HAL_UART_Transmit+0x82>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	e003      	b.n	80047b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047c0:	e02a      	b.n	8004818 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fa11 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e036      	b.n	800484a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	3302      	adds	r3, #2
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	e007      	b.n	800480a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	3301      	adds	r3, #1
 8004808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1cf      	bne.n	80047c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2200      	movs	r2, #0
 800482a:	2140      	movs	r1, #64	; 0x40
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f9e1 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e006      	b.n	800484a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e000      	b.n	800484a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	4613      	mov	r3, r2
 800485e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b20      	cmp	r3, #32
 800486a:	d11d      	bne.n	80048a8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_UART_Receive_DMA+0x26>
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e016      	b.n	80048aa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_UART_Receive_DMA+0x38>
 8004886:	2302      	movs	r3, #2
 8004888:	e00f      	b.n	80048aa <HAL_UART_Receive_DMA+0x58>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	461a      	mov	r2, r3
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fa16 	bl	8004cd0 <UART_Start_Receive_DMA>
 80048a4:	4603      	mov	r3, r0
 80048a6:	e000      	b.n	80048aa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b090      	sub	sp, #64	; 0x40
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b80      	cmp	r3, #128	; 0x80
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b21      	cmp	r3, #33	; 0x21
 80048de:	d128      	bne.n	8004932 <HAL_UART_DMAStop+0x80>
 80048e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d025      	beq.n	8004932 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3314      	adds	r3, #20
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	623b      	str	r3, [r7, #32]
   return(result);
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3314      	adds	r3, #20
 8004904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004906:	633a      	str	r2, [r7, #48]	; 0x30
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800490c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe fd8c 	bl	8003444 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fa6d 	bl	8004e0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b22      	cmp	r3, #34	; 0x22
 8004952:	d128      	bne.n	80049a6 <HAL_UART_DMAStop+0xf4>
 8004954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d025      	beq.n	80049a6 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3314      	adds	r3, #20
 8004960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	60fb      	str	r3, [r7, #12]
   return(result);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004970:	637b      	str	r3, [r7, #52]	; 0x34
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3314      	adds	r3, #20
 8004978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800497a:	61fa      	str	r2, [r7, #28]
 800497c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	617b      	str	r3, [r7, #20]
   return(result);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e5      	bne.n	800495a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	2b00      	cmp	r3, #0
 8004994:	d004      	beq.n	80049a0 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fd52 	bl	8003444 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fa5b 	bl	8004e5c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3740      	adds	r7, #64	; 0x40
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b09c      	sub	sp, #112	; 0x70
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d172      	bne.n	8004b06 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a22:	2200      	movs	r2, #0
 8004a24:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a46:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e5      	bne.n	8004a26 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	667b      	str	r3, [r7, #100]	; 0x64
 8004a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3314      	adds	r3, #20
 8004a78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a7a:	647a      	str	r2, [r7, #68]	; 0x44
 8004a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3314      	adds	r3, #20
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3314      	adds	r3, #20
 8004aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aae:	633a      	str	r2, [r7, #48]	; 0x30
 8004ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d119      	bne.n	8004b06 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f023 0310 	bic.w	r3, r3, #16
 8004ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	330c      	adds	r3, #12
 8004af0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004af2:	61fa      	str	r2, [r7, #28]
 8004af4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	69b9      	ldr	r1, [r7, #24]
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	617b      	str	r3, [r7, #20]
   return(result);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e5      	bne.n	8004ad2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d106      	bne.n	8004b1c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b12:	4619      	mov	r1, r3
 8004b14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b16:	f7ff ff69 	bl	80049ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b1a:	e002      	b.n	8004b22 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004b1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b1e:	f7ff ff47 	bl	80049b0 <HAL_UART_RxCpltCallback>
}
 8004b22:	bf00      	nop
 8004b24:	3770      	adds	r7, #112	; 0x70
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d108      	bne.n	8004b52 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	4619      	mov	r1, r3
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff ff4e 	bl	80049ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b50:	e002      	b.n	8004b58 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff ff36 	bl	80049c4 <HAL_UART_RxHalfCpltCallback>
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7c:	2b80      	cmp	r3, #128	; 0x80
 8004b7e:	bf0c      	ite	eq
 8004b80:	2301      	moveq	r3, #1
 8004b82:	2300      	movne	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b21      	cmp	r3, #33	; 0x21
 8004b92:	d108      	bne.n	8004ba6 <UART_DMAError+0x46>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ba0:	68b8      	ldr	r0, [r7, #8]
 8004ba2:	f000 f933 	bl	8004e0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b22      	cmp	r3, #34	; 0x22
 8004bc6:	d108      	bne.n	8004bda <UART_DMAError+0x7a>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004bd4:	68b8      	ldr	r0, [r7, #8]
 8004bd6:	f000 f941 	bl	8004e5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f043 0210 	orr.w	r2, r3, #16
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f7ff fef6 	bl	80049d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b090      	sub	sp, #64	; 0x40
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c04:	e050      	b.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d04c      	beq.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c14:	f7fd fe00 	bl	8002818 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d241      	bcs.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c44:	637a      	str	r2, [r7, #52]	; 0x34
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e5      	bne.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	613b      	str	r3, [r7, #16]
   return(result);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3314      	adds	r3, #20
 8004c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c78:	623a      	str	r2, [r7, #32]
 8004c7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	69f9      	ldr	r1, [r7, #28]
 8004c7e:	6a3a      	ldr	r2, [r7, #32]
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e5      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e00f      	b.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d09f      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3740      	adds	r7, #64	; 0x40
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b098      	sub	sp, #96	; 0x60
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2222      	movs	r2, #34	; 0x22
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	4a40      	ldr	r2, [pc, #256]	; (8004e00 <UART_Start_Receive_DMA+0x130>)
 8004cfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	4a3f      	ldr	r2, [pc, #252]	; (8004e04 <UART_Start_Receive_DMA+0x134>)
 8004d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	4a3e      	ldr	r2, [pc, #248]	; (8004e08 <UART_Start_Receive_DMA+0x138>)
 8004d0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	2200      	movs	r2, #0
 8004d16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d18:	f107 0308 	add.w	r3, r7, #8
 8004d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	f7fe fb30 	bl	8003394 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d019      	beq.n	8004d8e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d70:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	330c      	adds	r3, #12
 8004d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d7a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004d7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e5      	bne.n	8004d5a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3314      	adds	r3, #20
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	657b      	str	r3, [r7, #84]	; 0x54
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3314      	adds	r3, #20
 8004dac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dae:	63ba      	str	r2, [r7, #56]	; 0x38
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db6:	e841 2300 	strex	r3, r2, [r1]
 8004dba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e5      	bne.n	8004d8e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3314      	adds	r3, #20
 8004dc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd8:	653b      	str	r3, [r7, #80]	; 0x50
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004de2:	627a      	str	r2, [r7, #36]	; 0x24
 8004de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6a39      	ldr	r1, [r7, #32]
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e5      	bne.n	8004dc2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3760      	adds	r7, #96	; 0x60
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	08004a05 	.word	0x08004a05
 8004e04:	08004b2b 	.word	0x08004b2b
 8004e08:	08004b61 	.word	0x08004b61

08004e0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	; 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	61ba      	str	r2, [r7, #24]
 8004e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6979      	ldr	r1, [r7, #20]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	613b      	str	r3, [r7, #16]
   return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004e50:	bf00      	nop
 8004e52:	3724      	adds	r7, #36	; 0x24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b095      	sub	sp, #84	; 0x54
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e84:	643a      	str	r2, [r7, #64]	; 0x40
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e5      	bne.n	8004e64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3314      	adds	r3, #20
 8004e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3314      	adds	r3, #20
 8004eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d119      	bne.n	8004f08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f023 0310 	bic.w	r3, r3, #16
 8004eea:	647b      	str	r3, [r7, #68]	; 0x44
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ef4:	61ba      	str	r2, [r7, #24]
 8004ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6979      	ldr	r1, [r7, #20]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	613b      	str	r3, [r7, #16]
   return(result);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e5      	bne.n	8004ed4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f16:	bf00      	nop
 8004f18:	3754      	adds	r7, #84	; 0x54
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f28:	b0c0      	sub	sp, #256	; 0x100
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f40:	68d9      	ldr	r1, [r3, #12]
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	ea40 0301 	orr.w	r3, r0, r1
 8004f4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f7c:	f021 010c 	bic.w	r1, r1, #12
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9e:	6999      	ldr	r1, [r3, #24]
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	ea40 0301 	orr.w	r3, r0, r1
 8004faa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b8f      	ldr	r3, [pc, #572]	; (80051f0 <UART_SetConfig+0x2cc>)
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d005      	beq.n	8004fc4 <UART_SetConfig+0xa0>
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4b8d      	ldr	r3, [pc, #564]	; (80051f4 <UART_SetConfig+0x2d0>)
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d104      	bne.n	8004fce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fc4:	f7ff fb52 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 8004fc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fcc:	e003      	b.n	8004fd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fce:	f7ff fb39 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 8004fd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe0:	f040 810c 	bne.w	80051fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ff2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	462b      	mov	r3, r5
 8004ffa:	1891      	adds	r1, r2, r2
 8004ffc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ffe:	415b      	adcs	r3, r3
 8005000:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005002:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005006:	4621      	mov	r1, r4
 8005008:	eb12 0801 	adds.w	r8, r2, r1
 800500c:	4629      	mov	r1, r5
 800500e:	eb43 0901 	adc.w	r9, r3, r1
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800501e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005026:	4690      	mov	r8, r2
 8005028:	4699      	mov	r9, r3
 800502a:	4623      	mov	r3, r4
 800502c:	eb18 0303 	adds.w	r3, r8, r3
 8005030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005034:	462b      	mov	r3, r5
 8005036:	eb49 0303 	adc.w	r3, r9, r3
 800503a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800504a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800504e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005052:	460b      	mov	r3, r1
 8005054:	18db      	adds	r3, r3, r3
 8005056:	653b      	str	r3, [r7, #80]	; 0x50
 8005058:	4613      	mov	r3, r2
 800505a:	eb42 0303 	adc.w	r3, r2, r3
 800505e:	657b      	str	r3, [r7, #84]	; 0x54
 8005060:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005064:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005068:	f7fb fda6 	bl	8000bb8 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4b61      	ldr	r3, [pc, #388]	; (80051f8 <UART_SetConfig+0x2d4>)
 8005072:	fba3 2302 	umull	r2, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	011c      	lsls	r4, r3, #4
 800507a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507e:	2200      	movs	r2, #0
 8005080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005084:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005088:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	1891      	adds	r1, r2, r2
 8005092:	64b9      	str	r1, [r7, #72]	; 0x48
 8005094:	415b      	adcs	r3, r3
 8005096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005098:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800509c:	4641      	mov	r1, r8
 800509e:	eb12 0a01 	adds.w	sl, r2, r1
 80050a2:	4649      	mov	r1, r9
 80050a4:	eb43 0b01 	adc.w	fp, r3, r1
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050bc:	4692      	mov	sl, r2
 80050be:	469b      	mov	fp, r3
 80050c0:	4643      	mov	r3, r8
 80050c2:	eb1a 0303 	adds.w	r3, sl, r3
 80050c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ca:	464b      	mov	r3, r9
 80050cc:	eb4b 0303 	adc.w	r3, fp, r3
 80050d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050e8:	460b      	mov	r3, r1
 80050ea:	18db      	adds	r3, r3, r3
 80050ec:	643b      	str	r3, [r7, #64]	; 0x40
 80050ee:	4613      	mov	r3, r2
 80050f0:	eb42 0303 	adc.w	r3, r2, r3
 80050f4:	647b      	str	r3, [r7, #68]	; 0x44
 80050f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050fe:	f7fb fd5b 	bl	8000bb8 <__aeabi_uldivmod>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4611      	mov	r1, r2
 8005108:	4b3b      	ldr	r3, [pc, #236]	; (80051f8 <UART_SetConfig+0x2d4>)
 800510a:	fba3 2301 	umull	r2, r3, r3, r1
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	2264      	movs	r2, #100	; 0x64
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	1acb      	subs	r3, r1, r3
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800511e:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <UART_SetConfig+0x2d4>)
 8005120:	fba3 2302 	umull	r2, r3, r3, r2
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800512c:	441c      	add	r4, r3
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005132:	2200      	movs	r2, #0
 8005134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005138:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800513c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	1891      	adds	r1, r2, r2
 8005146:	63b9      	str	r1, [r7, #56]	; 0x38
 8005148:	415b      	adcs	r3, r3
 800514a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800514c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005150:	4641      	mov	r1, r8
 8005152:	1851      	adds	r1, r2, r1
 8005154:	6339      	str	r1, [r7, #48]	; 0x30
 8005156:	4649      	mov	r1, r9
 8005158:	414b      	adcs	r3, r1
 800515a:	637b      	str	r3, [r7, #52]	; 0x34
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005168:	4659      	mov	r1, fp
 800516a:	00cb      	lsls	r3, r1, #3
 800516c:	4651      	mov	r1, sl
 800516e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005172:	4651      	mov	r1, sl
 8005174:	00ca      	lsls	r2, r1, #3
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	4603      	mov	r3, r0
 800517c:	4642      	mov	r2, r8
 800517e:	189b      	adds	r3, r3, r2
 8005180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005184:	464b      	mov	r3, r9
 8005186:	460a      	mov	r2, r1
 8005188:	eb42 0303 	adc.w	r3, r2, r3
 800518c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800519c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051a4:	460b      	mov	r3, r1
 80051a6:	18db      	adds	r3, r3, r3
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051aa:	4613      	mov	r3, r2
 80051ac:	eb42 0303 	adc.w	r3, r2, r3
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051ba:	f7fb fcfd 	bl	8000bb8 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <UART_SetConfig+0x2d4>)
 80051c4:	fba3 1302 	umull	r1, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2164      	movs	r1, #100	; 0x64
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	3332      	adds	r3, #50	; 0x32
 80051d6:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <UART_SetConfig+0x2d4>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	f003 0207 	and.w	r2, r3, #7
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4422      	add	r2, r4
 80051ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051ec:	e105      	b.n	80053fa <UART_SetConfig+0x4d6>
 80051ee:	bf00      	nop
 80051f0:	40011000 	.word	0x40011000
 80051f4:	40011400 	.word	0x40011400
 80051f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005200:	2200      	movs	r2, #0
 8005202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005206:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800520a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800520e:	4642      	mov	r2, r8
 8005210:	464b      	mov	r3, r9
 8005212:	1891      	adds	r1, r2, r2
 8005214:	6239      	str	r1, [r7, #32]
 8005216:	415b      	adcs	r3, r3
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
 800521a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800521e:	4641      	mov	r1, r8
 8005220:	1854      	adds	r4, r2, r1
 8005222:	4649      	mov	r1, r9
 8005224:	eb43 0501 	adc.w	r5, r3, r1
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	00eb      	lsls	r3, r5, #3
 8005232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005236:	00e2      	lsls	r2, r4, #3
 8005238:	4614      	mov	r4, r2
 800523a:	461d      	mov	r5, r3
 800523c:	4643      	mov	r3, r8
 800523e:	18e3      	adds	r3, r4, r3
 8005240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005244:	464b      	mov	r3, r9
 8005246:	eb45 0303 	adc.w	r3, r5, r3
 800524a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800525a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800526a:	4629      	mov	r1, r5
 800526c:	008b      	lsls	r3, r1, #2
 800526e:	4621      	mov	r1, r4
 8005270:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005274:	4621      	mov	r1, r4
 8005276:	008a      	lsls	r2, r1, #2
 8005278:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800527c:	f7fb fc9c 	bl	8000bb8 <__aeabi_uldivmod>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4b60      	ldr	r3, [pc, #384]	; (8005408 <UART_SetConfig+0x4e4>)
 8005286:	fba3 2302 	umull	r2, r3, r3, r2
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	011c      	lsls	r4, r3, #4
 800528e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005298:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800529c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052a0:	4642      	mov	r2, r8
 80052a2:	464b      	mov	r3, r9
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	61b9      	str	r1, [r7, #24]
 80052a8:	415b      	adcs	r3, r3
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b0:	4641      	mov	r1, r8
 80052b2:	1851      	adds	r1, r2, r1
 80052b4:	6139      	str	r1, [r7, #16]
 80052b6:	4649      	mov	r1, r9
 80052b8:	414b      	adcs	r3, r1
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052c8:	4659      	mov	r1, fp
 80052ca:	00cb      	lsls	r3, r1, #3
 80052cc:	4651      	mov	r1, sl
 80052ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d2:	4651      	mov	r1, sl
 80052d4:	00ca      	lsls	r2, r1, #3
 80052d6:	4610      	mov	r0, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	4603      	mov	r3, r0
 80052dc:	4642      	mov	r2, r8
 80052de:	189b      	adds	r3, r3, r2
 80052e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052e4:	464b      	mov	r3, r9
 80052e6:	460a      	mov	r2, r1
 80052e8:	eb42 0303 	adc.w	r3, r2, r3
 80052ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80052fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005308:	4649      	mov	r1, r9
 800530a:	008b      	lsls	r3, r1, #2
 800530c:	4641      	mov	r1, r8
 800530e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005312:	4641      	mov	r1, r8
 8005314:	008a      	lsls	r2, r1, #2
 8005316:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800531a:	f7fb fc4d 	bl	8000bb8 <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4b39      	ldr	r3, [pc, #228]	; (8005408 <UART_SetConfig+0x4e4>)
 8005324:	fba3 1302 	umull	r1, r3, r3, r2
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	2164      	movs	r1, #100	; 0x64
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	3332      	adds	r3, #50	; 0x32
 8005336:	4a34      	ldr	r2, [pc, #208]	; (8005408 <UART_SetConfig+0x4e4>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005342:	441c      	add	r4, r3
 8005344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005348:	2200      	movs	r2, #0
 800534a:	673b      	str	r3, [r7, #112]	; 0x70
 800534c:	677a      	str	r2, [r7, #116]	; 0x74
 800534e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005352:	4642      	mov	r2, r8
 8005354:	464b      	mov	r3, r9
 8005356:	1891      	adds	r1, r2, r2
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	415b      	adcs	r3, r3
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005362:	4641      	mov	r1, r8
 8005364:	1851      	adds	r1, r2, r1
 8005366:	6039      	str	r1, [r7, #0]
 8005368:	4649      	mov	r1, r9
 800536a:	414b      	adcs	r3, r1
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800537a:	4659      	mov	r1, fp
 800537c:	00cb      	lsls	r3, r1, #3
 800537e:	4651      	mov	r1, sl
 8005380:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005384:	4651      	mov	r1, sl
 8005386:	00ca      	lsls	r2, r1, #3
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	4603      	mov	r3, r0
 800538e:	4642      	mov	r2, r8
 8005390:	189b      	adds	r3, r3, r2
 8005392:	66bb      	str	r3, [r7, #104]	; 0x68
 8005394:	464b      	mov	r3, r9
 8005396:	460a      	mov	r2, r1
 8005398:	eb42 0303 	adc.w	r3, r2, r3
 800539c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	663b      	str	r3, [r7, #96]	; 0x60
 80053a8:	667a      	str	r2, [r7, #100]	; 0x64
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053b6:	4649      	mov	r1, r9
 80053b8:	008b      	lsls	r3, r1, #2
 80053ba:	4641      	mov	r1, r8
 80053bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053c0:	4641      	mov	r1, r8
 80053c2:	008a      	lsls	r2, r1, #2
 80053c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053c8:	f7fb fbf6 	bl	8000bb8 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <UART_SetConfig+0x4e4>)
 80053d2:	fba3 1302 	umull	r1, r3, r3, r2
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	2164      	movs	r1, #100	; 0x64
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	3332      	adds	r3, #50	; 0x32
 80053e4:	4a08      	ldr	r2, [pc, #32]	; (8005408 <UART_SetConfig+0x4e4>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	f003 020f 	and.w	r2, r3, #15
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4422      	add	r2, r4
 80053f8:	609a      	str	r2, [r3, #8]
}
 80053fa:	bf00      	nop
 80053fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005400:	46bd      	mov	sp, r7
 8005402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005406:	bf00      	nop
 8005408:	51eb851f 	.word	0x51eb851f

0800540c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800541a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800541e:	2b84      	cmp	r3, #132	; 0x84
 8005420:	d005      	beq.n	800542e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005422:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	3303      	adds	r3, #3
 800542c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800542e:	68fb      	ldr	r3, [r7, #12]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005440:	f000 fee0 	bl	8006204 <vTaskStartScheduler>
  
  return osOK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	bd80      	pop	{r7, pc}

0800544a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800544a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800544c:	b089      	sub	sp, #36	; 0x24
 800544e:	af04      	add	r7, sp, #16
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d020      	beq.n	800549e <osThreadCreate+0x54>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01c      	beq.n	800549e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685c      	ldr	r4, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681d      	ldr	r5, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691e      	ldr	r6, [r3, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff ffc8 	bl	800540c <makeFreeRtosPriority>
 800547c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005486:	9202      	str	r2, [sp, #8]
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	9100      	str	r1, [sp, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4632      	mov	r2, r6
 8005490:	4629      	mov	r1, r5
 8005492:	4620      	mov	r0, r4
 8005494:	f000 fcee 	bl	8005e74 <xTaskCreateStatic>
 8005498:	4603      	mov	r3, r0
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e01c      	b.n	80054d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685c      	ldr	r4, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054aa:	b29e      	uxth	r6, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff ffaa 	bl	800540c <makeFreeRtosPriority>
 80054b8:	4602      	mov	r2, r0
 80054ba:	f107 030c 	add.w	r3, r7, #12
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	9200      	str	r2, [sp, #0]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	4632      	mov	r2, r6
 80054c6:	4629      	mov	r1, r5
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 fd30 	bl	8005f2e <xTaskCreate>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d001      	beq.n	80054d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	e000      	b.n	80054da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80054d8:	68fb      	ldr	r3, [r7, #12]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <osDelay+0x16>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	e000      	b.n	80054fa <osDelay+0x18>
 80054f8:	2301      	movs	r3, #1
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fe4e 	bl	800619c <vTaskDelay>
  
  return osOK;
 8005500:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f103 0208 	add.w	r2, r3, #8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f04f 32ff 	mov.w	r2, #4294967295
 8005522:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f103 0208 	add.w	r2, r3, #8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f103 0208 	add.w	r2, r3, #8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	601a      	str	r2, [r3, #0]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c2:	d103      	bne.n	80055cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e00c      	b.n	80055e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3308      	adds	r3, #8
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e002      	b.n	80055da <vListInsert+0x2e>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d2f6      	bcs.n	80055d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6892      	ldr	r2, [r2, #8]
 8005634:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6852      	ldr	r2, [r2, #4]
 800563e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	d103      	bne.n	8005652 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	1e5a      	subs	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800569e:	f001 fd01 	bl	80070a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	68f9      	ldr	r1, [r7, #12]
 80056ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056ae:	fb01 f303 	mul.w	r3, r1, r3
 80056b2:	441a      	add	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	3b01      	subs	r3, #1
 80056d0:	68f9      	ldr	r1, [r7, #12]
 80056d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	441a      	add	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	22ff      	movs	r2, #255	; 0xff
 80056e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	22ff      	movs	r2, #255	; 0xff
 80056ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d114      	bne.n	800571e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01a      	beq.n	8005732 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3310      	adds	r3, #16
 8005700:	4618      	mov	r0, r3
 8005702:	f000 ffc1 	bl	8006688 <xTaskRemoveFromEventList>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d012      	beq.n	8005732 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800570c:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <xQueueGenericReset+0xcc>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	e009      	b.n	8005732 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3310      	adds	r3, #16
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fef1 	bl	800550a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3324      	adds	r3, #36	; 0x24
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff feec 	bl	800550a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005732:	f001 fce7 	bl	8007104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005736:	2301      	movs	r3, #1
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	e000ed04 	.word	0xe000ed04

08005744 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	4613      	mov	r3, r2
 8005750:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	613b      	str	r3, [r7, #16]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	3348      	adds	r3, #72	; 0x48
 800577c:	4618      	mov	r0, r3
 800577e:	f001 fd73 	bl	8007268 <pvPortMalloc>
 8005782:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d011      	beq.n	80057ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	3348      	adds	r3, #72	; 0x48
 8005792:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800579c:	79fa      	ldrb	r2, [r7, #7]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	4613      	mov	r3, r2
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f805 	bl	80057b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057ae:	69bb      	ldr	r3, [r7, #24]
	}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d103      	bne.n	80057d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e002      	b.n	80057da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057e6:	2101      	movs	r1, #1
 80057e8:	69b8      	ldr	r0, [r7, #24]
 80057ea:	f7ff ff43 	bl	8005674 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057ee:	bf00      	nop
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00e      	beq.n	8005822 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005816:	2300      	movs	r3, #0
 8005818:	2200      	movs	r2, #0
 800581a:	2100      	movs	r1, #0
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f81d 	bl	800585c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	4603      	mov	r3, r0
 8005832:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005834:	2301      	movs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	461a      	mov	r2, r3
 8005840:	6939      	ldr	r1, [r7, #16]
 8005842:	6978      	ldr	r0, [r7, #20]
 8005844:	f7ff ff7e 	bl	8005744 <xQueueGenericCreate>
 8005848:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff ffd3 	bl	80057f6 <prvInitialiseMutex>

		return xNewQueue;
 8005850:	68fb      	ldr	r3, [r7, #12]
	}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08e      	sub	sp, #56	; 0x38
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800586a:	2300      	movs	r3, #0
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <xQueueGenericSend+0x32>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d103      	bne.n	800589c <xQueueGenericSend+0x40>
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <xQueueGenericSend+0x44>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <xQueueGenericSend+0x46>
 80058a0:	2300      	movs	r3, #0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <xQueueGenericSend+0x60>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d103      	bne.n	80058ca <xQueueGenericSend+0x6e>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <xQueueGenericSend+0x72>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <xQueueGenericSend+0x74>
 80058ce:	2300      	movs	r3, #0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10a      	bne.n	80058ea <xQueueGenericSend+0x8e>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	623b      	str	r3, [r7, #32]
}
 80058e6:	bf00      	nop
 80058e8:	e7fe      	b.n	80058e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058ea:	f001 f889 	bl	8006a00 <xTaskGetSchedulerState>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d102      	bne.n	80058fa <xQueueGenericSend+0x9e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <xQueueGenericSend+0xa2>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <xQueueGenericSend+0xa4>
 80058fe:	2300      	movs	r3, #0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <xQueueGenericSend+0xbe>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	61fb      	str	r3, [r7, #28]
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800591a:	f001 fbc3 	bl	80070a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <xQueueGenericSend+0xd4>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d129      	bne.n	8005984 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005936:	f000 f9b3 	bl	8005ca0 <prvCopyDataToQueue>
 800593a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	2b00      	cmp	r3, #0
 8005942:	d010      	beq.n	8005966 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	3324      	adds	r3, #36	; 0x24
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fe9d 	bl	8006688 <xTaskRemoveFromEventList>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d013      	beq.n	800597c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005954:	4b3f      	ldr	r3, [pc, #252]	; (8005a54 <xQueueGenericSend+0x1f8>)
 8005956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	e00a      	b.n	800597c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d007      	beq.n	800597c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800596c:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <xQueueGenericSend+0x1f8>)
 800596e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800597c:	f001 fbc2 	bl	8007104 <vPortExitCritical>
				return pdPASS;
 8005980:	2301      	movs	r3, #1
 8005982:	e063      	b.n	8005a4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800598a:	f001 fbbb 	bl	8007104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800598e:	2300      	movs	r3, #0
 8005990:	e05c      	b.n	8005a4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005998:	f107 0314 	add.w	r3, r7, #20
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fed5 	bl	800674c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059a2:	2301      	movs	r3, #1
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059a6:	f001 fbad 	bl	8007104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059aa:	f000 fc8b 	bl	80062c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ae:	f001 fb79 	bl	80070a4 <vPortEnterCritical>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059b8:	b25b      	sxtb	r3, r3
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d103      	bne.n	80059c8 <xQueueGenericSend+0x16c>
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ce:	b25b      	sxtb	r3, r3
 80059d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d4:	d103      	bne.n	80059de <xQueueGenericSend+0x182>
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059de:	f001 fb91 	bl	8007104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059e2:	1d3a      	adds	r2, r7, #4
 80059e4:	f107 0314 	add.w	r3, r7, #20
 80059e8:	4611      	mov	r1, r2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fec4 	bl	8006778 <xTaskCheckForTimeOut>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d124      	bne.n	8005a40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059f8:	f000 fa24 	bl	8005e44 <prvIsQueueFull>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d018      	beq.n	8005a34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	3310      	adds	r3, #16
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fe18 	bl	8006640 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a12:	f000 f9af 	bl	8005d74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a16:	f000 fc63 	bl	80062e0 <xTaskResumeAll>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f47f af7c 	bne.w	800591a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005a22:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <xQueueGenericSend+0x1f8>)
 8005a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	e772      	b.n	800591a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a36:	f000 f99d 	bl	8005d74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a3a:	f000 fc51 	bl	80062e0 <xTaskResumeAll>
 8005a3e:	e76c      	b.n	800591a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a42:	f000 f997 	bl	8005d74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a46:	f000 fc4b 	bl	80062e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3738      	adds	r7, #56	; 0x38
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	e000ed04 	.word	0xe000ed04

08005a58 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08e      	sub	sp, #56	; 0x38
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	623b      	str	r3, [r7, #32]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	61fb      	str	r3, [r7, #28]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aa8:	f000 ffaa 	bl	8006a00 <xTaskGetSchedulerState>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <xQueueSemaphoreTake+0x60>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <xQueueSemaphoreTake+0x64>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <xQueueSemaphoreTake+0x66>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	61bb      	str	r3, [r7, #24]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ad8:	f001 fae4 	bl	80070a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d024      	beq.n	8005b32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	1e5a      	subs	r2, r3, #1
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005af8:	f001 f92a 	bl	8006d50 <pvTaskIncrementMutexHeldCount>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00f      	beq.n	8005b2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	3310      	adds	r3, #16
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fdba 	bl	8006688 <xTaskRemoveFromEventList>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b1a:	4b54      	ldr	r3, [pc, #336]	; (8005c6c <xQueueSemaphoreTake+0x214>)
 8005b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b2a:	f001 faeb 	bl	8007104 <vPortExitCritical>
				return pdPASS;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e097      	b.n	8005c62 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d111      	bne.n	8005b5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	617b      	str	r3, [r7, #20]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b54:	f001 fad6 	bl	8007104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e082      	b.n	8005c62 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b62:	f107 030c 	add.w	r3, r7, #12
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fdf0 	bl	800674c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b70:	f001 fac8 	bl	8007104 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b74:	f000 fba6 	bl	80062c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b78:	f001 fa94 	bl	80070a4 <vPortEnterCritical>
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b82:	b25b      	sxtb	r3, r3
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d103      	bne.n	8005b92 <xQueueSemaphoreTake+0x13a>
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b98:	b25b      	sxtb	r3, r3
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d103      	bne.n	8005ba8 <xQueueSemaphoreTake+0x150>
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ba8:	f001 faac 	bl	8007104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bac:	463a      	mov	r2, r7
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fddf 	bl	8006778 <xTaskCheckForTimeOut>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d132      	bne.n	8005c26 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bc2:	f000 f929 	bl	8005e18 <prvIsQueueEmpty>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d026      	beq.n	8005c1a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005bd4:	f001 fa66 	bl	80070a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 ff2d 	bl	8006a3c <xTaskPriorityInherit>
 8005be2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005be4:	f001 fa8e 	bl	8007104 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	3324      	adds	r3, #36	; 0x24
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fd25 	bl	8006640 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bf8:	f000 f8bc 	bl	8005d74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bfc:	f000 fb70 	bl	80062e0 <xTaskResumeAll>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f47f af68 	bne.w	8005ad8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005c08:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <xQueueSemaphoreTake+0x214>)
 8005c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	e75e      	b.n	8005ad8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c1c:	f000 f8aa 	bl	8005d74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c20:	f000 fb5e 	bl	80062e0 <xTaskResumeAll>
 8005c24:	e758      	b.n	8005ad8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c28:	f000 f8a4 	bl	8005d74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c2c:	f000 fb58 	bl	80062e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c32:	f000 f8f1 	bl	8005e18 <prvIsQueueEmpty>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f43f af4d 	beq.w	8005ad8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00d      	beq.n	8005c60 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005c44:	f001 fa2e 	bl	80070a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c4a:	f000 f811 	bl	8005c70 <prvGetDisinheritPriorityAfterTimeout>
 8005c4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 ffec 	bl	8006c34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c5c:	f001 fa52 	bl	8007104 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3738      	adds	r7, #56	; 0x38
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	e000ed04 	.word	0xe000ed04

08005c70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d006      	beq.n	8005c8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f1c3 0307 	rsb	r3, r3, #7
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	e001      	b.n	8005c92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c92:	68fb      	ldr	r3, [r7, #12]
	}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d14d      	bne.n	8005d62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 ff2c 	bl	8006b28 <xTaskPriorityDisinherit>
 8005cd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	e043      	b.n	8005d62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d119      	bne.n	8005d14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6858      	ldr	r0, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	f001 feae 	bl	8007a4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	441a      	add	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d32b      	bcc.n	8005d62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	605a      	str	r2, [r3, #4]
 8005d12:	e026      	b.n	8005d62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68d8      	ldr	r0, [r3, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	f001 fe94 	bl	8007a4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	425b      	negs	r3, r3
 8005d2e:	441a      	add	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d207      	bcs.n	8005d50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	425b      	negs	r3, r3
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d105      	bne.n	8005d62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d6a:	697b      	ldr	r3, [r7, #20]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d7c:	f001 f992 	bl	80070a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d88:	e011      	b.n	8005dae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d012      	beq.n	8005db8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3324      	adds	r3, #36	; 0x24
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fc76 	bl	8006688 <xTaskRemoveFromEventList>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005da2:	f000 fd4b 	bl	800683c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	dce9      	bgt.n	8005d8a <prvUnlockQueue+0x16>
 8005db6:	e000      	b.n	8005dba <prvUnlockQueue+0x46>
					break;
 8005db8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	22ff      	movs	r2, #255	; 0xff
 8005dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005dc2:	f001 f99f 	bl	8007104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dc6:	f001 f96d 	bl	80070a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dd2:	e011      	b.n	8005df8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d012      	beq.n	8005e02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3310      	adds	r3, #16
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fc51 	bl	8006688 <xTaskRemoveFromEventList>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dec:	f000 fd26 	bl	800683c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005df0:	7bbb      	ldrb	r3, [r7, #14]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	dce9      	bgt.n	8005dd4 <prvUnlockQueue+0x60>
 8005e00:	e000      	b.n	8005e04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	22ff      	movs	r2, #255	; 0xff
 8005e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e0c:	f001 f97a 	bl	8007104 <vPortExitCritical>
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e20:	f001 f940 	bl	80070a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e001      	b.n	8005e36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e36:	f001 f965 	bl	8007104 <vPortExitCritical>

	return xReturn;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e4c:	f001 f92a 	bl	80070a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d102      	bne.n	8005e62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	e001      	b.n	8005e66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e66:	f001 f94d 	bl	8007104 <vPortExitCritical>

	return xReturn;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08e      	sub	sp, #56	; 0x38
 8005e78:	af04      	add	r7, sp, #16
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	623b      	str	r3, [r7, #32]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <xTaskCreateStatic+0x46>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	61fb      	str	r3, [r7, #28]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005eba:	2354      	movs	r3, #84	; 0x54
 8005ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b54      	cmp	r3, #84	; 0x54
 8005ec2:	d00a      	beq.n	8005eda <xTaskCreateStatic+0x66>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	61bb      	str	r3, [r7, #24]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005eda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01e      	beq.n	8005f20 <xTaskCreateStatic+0xac>
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01b      	beq.n	8005f20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005efa:	2300      	movs	r3, #0
 8005efc:	9303      	str	r3, [sp, #12]
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	9302      	str	r3, [sp, #8]
 8005f02:	f107 0314 	add.w	r3, r7, #20
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f850 	bl	8005fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f1a:	f000 f8d5 	bl	80060c8 <prvAddNewTaskToReadyList>
 8005f1e:	e001      	b.n	8005f24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f24:	697b      	ldr	r3, [r7, #20]
	}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3728      	adds	r7, #40	; 0x28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b08c      	sub	sp, #48	; 0x30
 8005f32:	af04      	add	r7, sp, #16
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 f990 	bl	8007268 <pvPortMalloc>
 8005f48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00e      	beq.n	8005f6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f50:	2054      	movs	r0, #84	; 0x54
 8005f52:	f001 f989 	bl	8007268 <pvPortMalloc>
 8005f56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30
 8005f64:	e005      	b.n	8005f72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f001 fa4a 	bl	8007400 <vPortFree>
 8005f6c:	e001      	b.n	8005f72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d017      	beq.n	8005fa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f80:	88fa      	ldrh	r2, [r7, #6]
 8005f82:	2300      	movs	r3, #0
 8005f84:	9303      	str	r3, [sp, #12]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	9302      	str	r3, [sp, #8]
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	9301      	str	r3, [sp, #4]
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f80e 	bl	8005fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f9c:	69f8      	ldr	r0, [r7, #28]
 8005f9e:	f000 f893 	bl	80060c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	e002      	b.n	8005fae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fae:	69bb      	ldr	r3, [r7, #24]
	}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f023 0307 	bic.w	r3, r3, #7
 8005fde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	617b      	str	r3, [r7, #20]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d01f      	beq.n	8006046 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006006:	2300      	movs	r3, #0
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	e012      	b.n	8006032 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	7819      	ldrb	r1, [r3, #0]
 8006014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	3334      	adds	r3, #52	; 0x34
 800601c:	460a      	mov	r2, r1
 800601e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d006      	beq.n	800603a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	3301      	adds	r3, #1
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	2b0f      	cmp	r3, #15
 8006036:	d9e9      	bls.n	800600c <prvInitialiseNewTask+0x54>
 8006038:	e000      	b.n	800603c <prvInitialiseNewTask+0x84>
			{
				break;
 800603a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006044:	e003      	b.n	800604e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	2b06      	cmp	r3, #6
 8006052:	d901      	bls.n	8006058 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006054:	2306      	movs	r3, #6
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800605c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006062:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	2200      	movs	r2, #0
 8006068:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	3304      	adds	r3, #4
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff fa6b 	bl	800554a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	3318      	adds	r3, #24
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fa66 	bl	800554a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006082:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	f1c3 0207 	rsb	r2, r3, #7
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006092:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	2200      	movs	r2, #0
 8006098:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	68f9      	ldr	r1, [r7, #12]
 80060a6:	69b8      	ldr	r0, [r7, #24]
 80060a8:	f000 fecc 	bl	8006e44 <pxPortInitialiseStack>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060be:	bf00      	nop
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060d0:	f000 ffe8 	bl	80070a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060d4:	4b2a      	ldr	r3, [pc, #168]	; (8006180 <prvAddNewTaskToReadyList+0xb8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3301      	adds	r3, #1
 80060da:	4a29      	ldr	r2, [pc, #164]	; (8006180 <prvAddNewTaskToReadyList+0xb8>)
 80060dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060de:	4b29      	ldr	r3, [pc, #164]	; (8006184 <prvAddNewTaskToReadyList+0xbc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060e6:	4a27      	ldr	r2, [pc, #156]	; (8006184 <prvAddNewTaskToReadyList+0xbc>)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060ec:	4b24      	ldr	r3, [pc, #144]	; (8006180 <prvAddNewTaskToReadyList+0xb8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d110      	bne.n	8006116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060f4:	f000 fbc6 	bl	8006884 <prvInitialiseTaskLists>
 80060f8:	e00d      	b.n	8006116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060fa:	4b23      	ldr	r3, [pc, #140]	; (8006188 <prvAddNewTaskToReadyList+0xc0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006102:	4b20      	ldr	r3, [pc, #128]	; (8006184 <prvAddNewTaskToReadyList+0xbc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	429a      	cmp	r2, r3
 800610e:	d802      	bhi.n	8006116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006110:	4a1c      	ldr	r2, [pc, #112]	; (8006184 <prvAddNewTaskToReadyList+0xbc>)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006116:	4b1d      	ldr	r3, [pc, #116]	; (800618c <prvAddNewTaskToReadyList+0xc4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3301      	adds	r3, #1
 800611c:	4a1b      	ldr	r2, [pc, #108]	; (800618c <prvAddNewTaskToReadyList+0xc4>)
 800611e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	2201      	movs	r2, #1
 8006126:	409a      	lsls	r2, r3
 8006128:	4b19      	ldr	r3, [pc, #100]	; (8006190 <prvAddNewTaskToReadyList+0xc8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4313      	orrs	r3, r2
 800612e:	4a18      	ldr	r2, [pc, #96]	; (8006190 <prvAddNewTaskToReadyList+0xc8>)
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4a15      	ldr	r2, [pc, #84]	; (8006194 <prvAddNewTaskToReadyList+0xcc>)
 8006140:	441a      	add	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f7ff fa0b 	bl	8005564 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800614e:	f000 ffd9 	bl	8007104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006152:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <prvAddNewTaskToReadyList+0xc0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00e      	beq.n	8006178 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800615a:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <prvAddNewTaskToReadyList+0xbc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	429a      	cmp	r2, r3
 8006166:	d207      	bcs.n	8006178 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <prvAddNewTaskToReadyList+0xd0>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	200013dc 	.word	0x200013dc
 8006184:	200012dc 	.word	0x200012dc
 8006188:	200013e8 	.word	0x200013e8
 800618c:	200013f8 	.word	0x200013f8
 8006190:	200013e4 	.word	0x200013e4
 8006194:	200012e0 	.word	0x200012e0
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d017      	beq.n	80061de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <vTaskDelay+0x60>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <vTaskDelay+0x30>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	60bb      	str	r3, [r7, #8]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061cc:	f000 f87a 	bl	80062c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061d0:	2100      	movs	r1, #0
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fdd0 	bl	8006d78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061d8:	f000 f882 	bl	80062e0 <xTaskResumeAll>
 80061dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d107      	bne.n	80061f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061e4:	4b06      	ldr	r3, [pc, #24]	; (8006200 <vTaskDelay+0x64>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20001404 	.word	0x20001404
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006212:	463a      	mov	r2, r7
 8006214:	1d39      	adds	r1, r7, #4
 8006216:	f107 0308 	add.w	r3, r7, #8
 800621a:	4618      	mov	r0, r3
 800621c:	f7fb f912 	bl	8001444 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	9202      	str	r2, [sp, #8]
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	2300      	movs	r3, #0
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	2300      	movs	r3, #0
 8006230:	460a      	mov	r2, r1
 8006232:	491e      	ldr	r1, [pc, #120]	; (80062ac <vTaskStartScheduler+0xa8>)
 8006234:	481e      	ldr	r0, [pc, #120]	; (80062b0 <vTaskStartScheduler+0xac>)
 8006236:	f7ff fe1d 	bl	8005e74 <xTaskCreateStatic>
 800623a:	4603      	mov	r3, r0
 800623c:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <vTaskStartScheduler+0xb0>)
 800623e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006240:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <vTaskStartScheduler+0xb0>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006248:	2301      	movs	r3, #1
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	e001      	b.n	8006252 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d116      	bne.n	8006286 <vTaskStartScheduler+0x82>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	613b      	str	r3, [r7, #16]
}
 800626a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800626c:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <vTaskStartScheduler+0xb4>)
 800626e:	f04f 32ff 	mov.w	r2, #4294967295
 8006272:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006274:	4b11      	ldr	r3, [pc, #68]	; (80062bc <vTaskStartScheduler+0xb8>)
 8006276:	2201      	movs	r2, #1
 8006278:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800627a:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <vTaskStartScheduler+0xbc>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006280:	f000 fe6e 	bl	8006f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006284:	e00e      	b.n	80062a4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d10a      	bne.n	80062a4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	60fb      	str	r3, [r7, #12]
}
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <vTaskStartScheduler+0x9e>
}
 80062a4:	bf00      	nop
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	0800a67c 	.word	0x0800a67c
 80062b0:	08006855 	.word	0x08006855
 80062b4:	20001400 	.word	0x20001400
 80062b8:	200013fc 	.word	0x200013fc
 80062bc:	200013e8 	.word	0x200013e8
 80062c0:	200013e0 	.word	0x200013e0

080062c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062c8:	4b04      	ldr	r3, [pc, #16]	; (80062dc <vTaskSuspendAll+0x18>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	4a03      	ldr	r2, [pc, #12]	; (80062dc <vTaskSuspendAll+0x18>)
 80062d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062d2:	bf00      	nop
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20001404 	.word	0x20001404

080062e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062ee:	4b41      	ldr	r3, [pc, #260]	; (80063f4 <xTaskResumeAll+0x114>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <xTaskResumeAll+0x2c>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	603b      	str	r3, [r7, #0]
}
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800630c:	f000 feca 	bl	80070a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006310:	4b38      	ldr	r3, [pc, #224]	; (80063f4 <xTaskResumeAll+0x114>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3b01      	subs	r3, #1
 8006316:	4a37      	ldr	r2, [pc, #220]	; (80063f4 <xTaskResumeAll+0x114>)
 8006318:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800631a:	4b36      	ldr	r3, [pc, #216]	; (80063f4 <xTaskResumeAll+0x114>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d161      	bne.n	80063e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006322:	4b35      	ldr	r3, [pc, #212]	; (80063f8 <xTaskResumeAll+0x118>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d05d      	beq.n	80063e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800632a:	e02e      	b.n	800638a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632c:	4b33      	ldr	r3, [pc, #204]	; (80063fc <xTaskResumeAll+0x11c>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3318      	adds	r3, #24
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff f970 	bl	800561e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3304      	adds	r3, #4
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff f96b 	bl	800561e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	2201      	movs	r2, #1
 800634e:	409a      	lsls	r2, r3
 8006350:	4b2b      	ldr	r3, [pc, #172]	; (8006400 <xTaskResumeAll+0x120>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4313      	orrs	r3, r2
 8006356:	4a2a      	ldr	r2, [pc, #168]	; (8006400 <xTaskResumeAll+0x120>)
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4a27      	ldr	r2, [pc, #156]	; (8006404 <xTaskResumeAll+0x124>)
 8006368:	441a      	add	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3304      	adds	r3, #4
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f7ff f8f7 	bl	8005564 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637a:	4b23      	ldr	r3, [pc, #140]	; (8006408 <xTaskResumeAll+0x128>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	429a      	cmp	r2, r3
 8006382:	d302      	bcc.n	800638a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006384:	4b21      	ldr	r3, [pc, #132]	; (800640c <xTaskResumeAll+0x12c>)
 8006386:	2201      	movs	r2, #1
 8006388:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800638a:	4b1c      	ldr	r3, [pc, #112]	; (80063fc <xTaskResumeAll+0x11c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1cc      	bne.n	800632c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006398:	f000 fb12 	bl	80069c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800639c:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <xTaskResumeAll+0x130>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d010      	beq.n	80063ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063a8:	f000 f836 	bl	8006418 <xTaskIncrementTick>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063b2:	4b16      	ldr	r3, [pc, #88]	; (800640c <xTaskResumeAll+0x12c>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1f1      	bne.n	80063a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80063c4:	4b12      	ldr	r3, [pc, #72]	; (8006410 <xTaskResumeAll+0x130>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063ca:	4b10      	ldr	r3, [pc, #64]	; (800640c <xTaskResumeAll+0x12c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063d6:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <xTaskResumeAll+0x134>)
 80063d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063e6:	f000 fe8d 	bl	8007104 <vPortExitCritical>

	return xAlreadyYielded;
 80063ea:	68bb      	ldr	r3, [r7, #8]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20001404 	.word	0x20001404
 80063f8:	200013dc 	.word	0x200013dc
 80063fc:	2000139c 	.word	0x2000139c
 8006400:	200013e4 	.word	0x200013e4
 8006404:	200012e0 	.word	0x200012e0
 8006408:	200012dc 	.word	0x200012dc
 800640c:	200013f0 	.word	0x200013f0
 8006410:	200013ec 	.word	0x200013ec
 8006414:	e000ed04 	.word	0xe000ed04

08006418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006422:	4b4e      	ldr	r3, [pc, #312]	; (800655c <xTaskIncrementTick+0x144>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	f040 808e 	bne.w	8006548 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800642c:	4b4c      	ldr	r3, [pc, #304]	; (8006560 <xTaskIncrementTick+0x148>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3301      	adds	r3, #1
 8006432:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006434:	4a4a      	ldr	r2, [pc, #296]	; (8006560 <xTaskIncrementTick+0x148>)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d120      	bne.n	8006482 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006440:	4b48      	ldr	r3, [pc, #288]	; (8006564 <xTaskIncrementTick+0x14c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <xTaskIncrementTick+0x48>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	603b      	str	r3, [r7, #0]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <xTaskIncrementTick+0x46>
 8006460:	4b40      	ldr	r3, [pc, #256]	; (8006564 <xTaskIncrementTick+0x14c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	4b40      	ldr	r3, [pc, #256]	; (8006568 <xTaskIncrementTick+0x150>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a3e      	ldr	r2, [pc, #248]	; (8006564 <xTaskIncrementTick+0x14c>)
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	4a3e      	ldr	r2, [pc, #248]	; (8006568 <xTaskIncrementTick+0x150>)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	4b3d      	ldr	r3, [pc, #244]	; (800656c <xTaskIncrementTick+0x154>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	4a3c      	ldr	r2, [pc, #240]	; (800656c <xTaskIncrementTick+0x154>)
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	f000 fa9f 	bl	80069c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006482:	4b3b      	ldr	r3, [pc, #236]	; (8006570 <xTaskIncrementTick+0x158>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	429a      	cmp	r2, r3
 800648a:	d348      	bcc.n	800651e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800648c:	4b35      	ldr	r3, [pc, #212]	; (8006564 <xTaskIncrementTick+0x14c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006496:	4b36      	ldr	r3, [pc, #216]	; (8006570 <xTaskIncrementTick+0x158>)
 8006498:	f04f 32ff 	mov.w	r2, #4294967295
 800649c:	601a      	str	r2, [r3, #0]
					break;
 800649e:	e03e      	b.n	800651e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a0:	4b30      	ldr	r3, [pc, #192]	; (8006564 <xTaskIncrementTick+0x14c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d203      	bcs.n	80064c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064b8:	4a2d      	ldr	r2, [pc, #180]	; (8006570 <xTaskIncrementTick+0x158>)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064be:	e02e      	b.n	800651e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff f8aa 	bl	800561e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	3318      	adds	r3, #24
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff f8a1 	bl	800561e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	2201      	movs	r2, #1
 80064e2:	409a      	lsls	r2, r3
 80064e4:	4b23      	ldr	r3, [pc, #140]	; (8006574 <xTaskIncrementTick+0x15c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	4a22      	ldr	r2, [pc, #136]	; (8006574 <xTaskIncrementTick+0x15c>)
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4a1f      	ldr	r2, [pc, #124]	; (8006578 <xTaskIncrementTick+0x160>)
 80064fc:	441a      	add	r2, r3
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	3304      	adds	r3, #4
 8006502:	4619      	mov	r1, r3
 8006504:	4610      	mov	r0, r2
 8006506:	f7ff f82d 	bl	8005564 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650e:	4b1b      	ldr	r3, [pc, #108]	; (800657c <xTaskIncrementTick+0x164>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	429a      	cmp	r2, r3
 8006516:	d3b9      	bcc.n	800648c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006518:	2301      	movs	r3, #1
 800651a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800651c:	e7b6      	b.n	800648c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800651e:	4b17      	ldr	r3, [pc, #92]	; (800657c <xTaskIncrementTick+0x164>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	4914      	ldr	r1, [pc, #80]	; (8006578 <xTaskIncrementTick+0x160>)
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d901      	bls.n	800653a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006536:	2301      	movs	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <xTaskIncrementTick+0x168>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	e004      	b.n	8006552 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006548:	4b0e      	ldr	r3, [pc, #56]	; (8006584 <xTaskIncrementTick+0x16c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3301      	adds	r3, #1
 800654e:	4a0d      	ldr	r2, [pc, #52]	; (8006584 <xTaskIncrementTick+0x16c>)
 8006550:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006552:	697b      	ldr	r3, [r7, #20]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20001404 	.word	0x20001404
 8006560:	200013e0 	.word	0x200013e0
 8006564:	20001394 	.word	0x20001394
 8006568:	20001398 	.word	0x20001398
 800656c:	200013f4 	.word	0x200013f4
 8006570:	200013fc 	.word	0x200013fc
 8006574:	200013e4 	.word	0x200013e4
 8006578:	200012e0 	.word	0x200012e0
 800657c:	200012dc 	.word	0x200012dc
 8006580:	200013f0 	.word	0x200013f0
 8006584:	200013ec 	.word	0x200013ec

08006588 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800658e:	4b27      	ldr	r3, [pc, #156]	; (800662c <vTaskSwitchContext+0xa4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006596:	4b26      	ldr	r3, [pc, #152]	; (8006630 <vTaskSwitchContext+0xa8>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800659c:	e03f      	b.n	800661e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <vTaskSwitchContext+0xa8>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a4:	4b23      	ldr	r3, [pc, #140]	; (8006634 <vTaskSwitchContext+0xac>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	fab3 f383 	clz	r3, r3
 80065b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065b2:	7afb      	ldrb	r3, [r7, #11]
 80065b4:	f1c3 031f 	rsb	r3, r3, #31
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	491f      	ldr	r1, [pc, #124]	; (8006638 <vTaskSwitchContext+0xb0>)
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <vTaskSwitchContext+0x5a>
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4a12      	ldr	r2, [pc, #72]	; (8006638 <vTaskSwitchContext+0xb0>)
 80065f0:	4413      	add	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	605a      	str	r2, [r3, #4]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	3308      	adds	r3, #8
 8006606:	429a      	cmp	r2, r3
 8006608:	d104      	bne.n	8006614 <vTaskSwitchContext+0x8c>
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	605a      	str	r2, [r3, #4]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	4a08      	ldr	r2, [pc, #32]	; (800663c <vTaskSwitchContext+0xb4>)
 800661c:	6013      	str	r3, [r2, #0]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	20001404 	.word	0x20001404
 8006630:	200013f0 	.word	0x200013f0
 8006634:	200013e4 	.word	0x200013e4
 8006638:	200012e0 	.word	0x200012e0
 800663c:	200012dc 	.word	0x200012dc

08006640 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	60fb      	str	r3, [r7, #12]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006666:	4b07      	ldr	r3, [pc, #28]	; (8006684 <vTaskPlaceOnEventList+0x44>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3318      	adds	r3, #24
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fe ff9c 	bl	80055ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006674:	2101      	movs	r1, #1
 8006676:	6838      	ldr	r0, [r7, #0]
 8006678:	f000 fb7e 	bl	8006d78 <prvAddCurrentTaskToDelayedList>
}
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	200012dc 	.word	0x200012dc

08006688 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	60fb      	str	r3, [r7, #12]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3318      	adds	r3, #24
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe ffb0 	bl	800561e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066be:	4b1d      	ldr	r3, [pc, #116]	; (8006734 <xTaskRemoveFromEventList+0xac>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d11c      	bne.n	8006700 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe ffa7 	bl	800561e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	2201      	movs	r2, #1
 80066d6:	409a      	lsls	r2, r3
 80066d8:	4b17      	ldr	r3, [pc, #92]	; (8006738 <xTaskRemoveFromEventList+0xb0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4313      	orrs	r3, r2
 80066de:	4a16      	ldr	r2, [pc, #88]	; (8006738 <xTaskRemoveFromEventList+0xb0>)
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4a13      	ldr	r2, [pc, #76]	; (800673c <xTaskRemoveFromEventList+0xb4>)
 80066f0:	441a      	add	r2, r3
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f7fe ff33 	bl	8005564 <vListInsertEnd>
 80066fe:	e005      	b.n	800670c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	3318      	adds	r3, #24
 8006704:	4619      	mov	r1, r3
 8006706:	480e      	ldr	r0, [pc, #56]	; (8006740 <xTaskRemoveFromEventList+0xb8>)
 8006708:	f7fe ff2c 	bl	8005564 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <xTaskRemoveFromEventList+0xbc>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	429a      	cmp	r2, r3
 8006718:	d905      	bls.n	8006726 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800671a:	2301      	movs	r3, #1
 800671c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800671e:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <xTaskRemoveFromEventList+0xc0>)
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e001      	b.n	800672a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800672a:	697b      	ldr	r3, [r7, #20]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20001404 	.word	0x20001404
 8006738:	200013e4 	.word	0x200013e4
 800673c:	200012e0 	.word	0x200012e0
 8006740:	2000139c 	.word	0x2000139c
 8006744:	200012dc 	.word	0x200012dc
 8006748:	200013f0 	.word	0x200013f0

0800674c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006754:	4b06      	ldr	r3, [pc, #24]	; (8006770 <vTaskInternalSetTimeOutState+0x24>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <vTaskInternalSetTimeOutState+0x28>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	605a      	str	r2, [r3, #4]
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	200013f4 	.word	0x200013f4
 8006774:	200013e0 	.word	0x200013e0

08006778 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	613b      	str	r3, [r7, #16]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	60fb      	str	r3, [r7, #12]
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067ba:	f000 fc73 	bl	80070a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <xTaskCheckForTimeOut+0xbc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d102      	bne.n	80067de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067d8:	2300      	movs	r3, #0
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	e023      	b.n	8006826 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	4b15      	ldr	r3, [pc, #84]	; (8006838 <xTaskCheckForTimeOut+0xc0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d007      	beq.n	80067fa <xTaskCheckForTimeOut+0x82>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d302      	bcc.n	80067fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067f4:	2301      	movs	r3, #1
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e015      	b.n	8006826 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	429a      	cmp	r2, r3
 8006802:	d20b      	bcs.n	800681c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	1ad2      	subs	r2, r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff ff9b 	bl	800674c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	e004      	b.n	8006826 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006826:	f000 fc6d 	bl	8007104 <vPortExitCritical>

	return xReturn;
 800682a:	69fb      	ldr	r3, [r7, #28]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3720      	adds	r7, #32
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	200013e0 	.word	0x200013e0
 8006838:	200013f4 	.word	0x200013f4

0800683c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006840:	4b03      	ldr	r3, [pc, #12]	; (8006850 <vTaskMissedYield+0x14>)
 8006842:	2201      	movs	r2, #1
 8006844:	601a      	str	r2, [r3, #0]
}
 8006846:	bf00      	nop
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	200013f0 	.word	0x200013f0

08006854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800685c:	f000 f852 	bl	8006904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006860:	4b06      	ldr	r3, [pc, #24]	; (800687c <prvIdleTask+0x28>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d9f9      	bls.n	800685c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <prvIdleTask+0x2c>)
 800686a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006878:	e7f0      	b.n	800685c <prvIdleTask+0x8>
 800687a:	bf00      	nop
 800687c:	200012e0 	.word	0x200012e0
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	e00c      	b.n	80068aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4a12      	ldr	r2, [pc, #72]	; (80068e4 <prvInitialiseTaskLists+0x60>)
 800689c:	4413      	add	r3, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe fe33 	bl	800550a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3301      	adds	r3, #1
 80068a8:	607b      	str	r3, [r7, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b06      	cmp	r3, #6
 80068ae:	d9ef      	bls.n	8006890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068b0:	480d      	ldr	r0, [pc, #52]	; (80068e8 <prvInitialiseTaskLists+0x64>)
 80068b2:	f7fe fe2a 	bl	800550a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068b6:	480d      	ldr	r0, [pc, #52]	; (80068ec <prvInitialiseTaskLists+0x68>)
 80068b8:	f7fe fe27 	bl	800550a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068bc:	480c      	ldr	r0, [pc, #48]	; (80068f0 <prvInitialiseTaskLists+0x6c>)
 80068be:	f7fe fe24 	bl	800550a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068c2:	480c      	ldr	r0, [pc, #48]	; (80068f4 <prvInitialiseTaskLists+0x70>)
 80068c4:	f7fe fe21 	bl	800550a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068c8:	480b      	ldr	r0, [pc, #44]	; (80068f8 <prvInitialiseTaskLists+0x74>)
 80068ca:	f7fe fe1e 	bl	800550a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068ce:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <prvInitialiseTaskLists+0x78>)
 80068d0:	4a05      	ldr	r2, [pc, #20]	; (80068e8 <prvInitialiseTaskLists+0x64>)
 80068d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068d4:	4b0a      	ldr	r3, [pc, #40]	; (8006900 <prvInitialiseTaskLists+0x7c>)
 80068d6:	4a05      	ldr	r2, [pc, #20]	; (80068ec <prvInitialiseTaskLists+0x68>)
 80068d8:	601a      	str	r2, [r3, #0]
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	200012e0 	.word	0x200012e0
 80068e8:	2000136c 	.word	0x2000136c
 80068ec:	20001380 	.word	0x20001380
 80068f0:	2000139c 	.word	0x2000139c
 80068f4:	200013b0 	.word	0x200013b0
 80068f8:	200013c8 	.word	0x200013c8
 80068fc:	20001394 	.word	0x20001394
 8006900:	20001398 	.word	0x20001398

08006904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800690a:	e019      	b.n	8006940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800690c:	f000 fbca 	bl	80070a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006910:	4b10      	ldr	r3, [pc, #64]	; (8006954 <prvCheckTasksWaitingTermination+0x50>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3304      	adds	r3, #4
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe fe7e 	bl	800561e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <prvCheckTasksWaitingTermination+0x54>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3b01      	subs	r3, #1
 8006928:	4a0b      	ldr	r2, [pc, #44]	; (8006958 <prvCheckTasksWaitingTermination+0x54>)
 800692a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800692c:	4b0b      	ldr	r3, [pc, #44]	; (800695c <prvCheckTasksWaitingTermination+0x58>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3b01      	subs	r3, #1
 8006932:	4a0a      	ldr	r2, [pc, #40]	; (800695c <prvCheckTasksWaitingTermination+0x58>)
 8006934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006936:	f000 fbe5 	bl	8007104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f810 	bl	8006960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <prvCheckTasksWaitingTermination+0x58>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e1      	bne.n	800690c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	200013b0 	.word	0x200013b0
 8006958:	200013dc 	.word	0x200013dc
 800695c:	200013c4 	.word	0x200013c4

08006960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800696e:	2b00      	cmp	r3, #0
 8006970:	d108      	bne.n	8006984 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fd42 	bl	8007400 <vPortFree>
				vPortFree( pxTCB );
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fd3f 	bl	8007400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006982:	e018      	b.n	80069b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800698a:	2b01      	cmp	r3, #1
 800698c:	d103      	bne.n	8006996 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fd36 	bl	8007400 <vPortFree>
	}
 8006994:	e00f      	b.n	80069b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800699c:	2b02      	cmp	r3, #2
 800699e:	d00a      	beq.n	80069b6 <prvDeleteTCB+0x56>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	60fb      	str	r3, [r7, #12]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <prvDeleteTCB+0x54>
	}
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069c6:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <prvResetNextTaskUnblockTime+0x38>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d104      	bne.n	80069da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069d0:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <prvResetNextTaskUnblockTime+0x3c>)
 80069d2:	f04f 32ff 	mov.w	r2, #4294967295
 80069d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069d8:	e008      	b.n	80069ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069da:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <prvResetNextTaskUnblockTime+0x38>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a04      	ldr	r2, [pc, #16]	; (80069fc <prvResetNextTaskUnblockTime+0x3c>)
 80069ea:	6013      	str	r3, [r2, #0]
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	20001394 	.word	0x20001394
 80069fc:	200013fc 	.word	0x200013fc

08006a00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a06:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <xTaskGetSchedulerState+0x34>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	e008      	b.n	8006a26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a14:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <xTaskGetSchedulerState+0x38>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	607b      	str	r3, [r7, #4]
 8006a20:	e001      	b.n	8006a26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a26:	687b      	ldr	r3, [r7, #4]
	}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	200013e8 	.word	0x200013e8
 8006a38:	20001404 	.word	0x20001404

08006a3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d05e      	beq.n	8006b10 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <xTaskPriorityInherit+0xe0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d24e      	bcs.n	8006afe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	db06      	blt.n	8006a76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a68:	4b2c      	ldr	r3, [pc, #176]	; (8006b1c <xTaskPriorityInherit+0xe0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	f1c3 0207 	rsb	r2, r3, #7
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	6959      	ldr	r1, [r3, #20]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4a26      	ldr	r2, [pc, #152]	; (8006b20 <xTaskPriorityInherit+0xe4>)
 8006a88:	4413      	add	r3, r2
 8006a8a:	4299      	cmp	r1, r3
 8006a8c:	d12f      	bne.n	8006aee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe fdc3 	bl	800561e <uxListRemove>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	43da      	mvns	r2, r3
 8006aaa:	4b1e      	ldr	r3, [pc, #120]	; (8006b24 <xTaskPriorityInherit+0xe8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <xTaskPriorityInherit+0xe8>)
 8006ab2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ab4:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <xTaskPriorityInherit+0xe0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	409a      	lsls	r2, r3
 8006ac6:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <xTaskPriorityInherit+0xe8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <xTaskPriorityInherit+0xe8>)
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4a10      	ldr	r2, [pc, #64]	; (8006b20 <xTaskPriorityInherit+0xe4>)
 8006ade:	441a      	add	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	f7fe fd3c 	bl	8005564 <vListInsertEnd>
 8006aec:	e004      	b.n	8006af8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006aee:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <xTaskPriorityInherit+0xe0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006af8:	2301      	movs	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e008      	b.n	8006b10 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b02:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <xTaskPriorityInherit+0xe0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d201      	bcs.n	8006b10 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b10:	68fb      	ldr	r3, [r7, #12]
	}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	200012dc 	.word	0x200012dc
 8006b20:	200012e0 	.word	0x200012e0
 8006b24:	200013e4 	.word	0x200013e4

08006b28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d06e      	beq.n	8006c1c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b3e:	4b3a      	ldr	r3, [pc, #232]	; (8006c28 <xTaskPriorityDisinherit+0x100>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d00a      	beq.n	8006b5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	60fb      	str	r3, [r7, #12]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	60bb      	str	r3, [r7, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b80:	1e5a      	subs	r2, r3, #1
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d044      	beq.n	8006c1c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d140      	bne.n	8006c1c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fe fd3d 	bl	800561e <uxListRemove>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d115      	bne.n	8006bd6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	491f      	ldr	r1, [pc, #124]	; (8006c2c <xTaskPriorityDisinherit+0x104>)
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	440b      	add	r3, r1
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <xTaskPriorityDisinherit+0xae>
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	43da      	mvns	r2, r3
 8006bcc:	4b18      	ldr	r3, [pc, #96]	; (8006c30 <xTaskPriorityDisinherit+0x108>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	4a17      	ldr	r2, [pc, #92]	; (8006c30 <xTaskPriorityDisinherit+0x108>)
 8006bd4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be2:	f1c3 0207 	rsb	r2, r3, #7
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	2201      	movs	r2, #1
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <xTaskPriorityDisinherit+0x108>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	4a0d      	ldr	r2, [pc, #52]	; (8006c30 <xTaskPriorityDisinherit+0x108>)
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4a08      	ldr	r2, [pc, #32]	; (8006c2c <xTaskPriorityDisinherit+0x104>)
 8006c0a:	441a      	add	r2, r3
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7fe fca6 	bl	8005564 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c1c:	697b      	ldr	r3, [r7, #20]
	}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	200012dc 	.word	0x200012dc
 8006c2c:	200012e0 	.word	0x200012e0
 8006c30:	200013e4 	.word	0x200013e4

08006c34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006c42:	2301      	movs	r3, #1
 8006c44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d077      	beq.n	8006d3c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	60fb      	str	r3, [r7, #12]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d902      	bls.n	8006c7a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	e002      	b.n	8006c80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d058      	beq.n	8006d3c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d153      	bne.n	8006d3c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c94:	4b2b      	ldr	r3, [pc, #172]	; (8006d44 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d10a      	bne.n	8006cb4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	60bb      	str	r3, [r7, #8]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	db04      	blt.n	8006cd2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f1c3 0207 	rsb	r2, r3, #7
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	6959      	ldr	r1, [r3, #20]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4a19      	ldr	r2, [pc, #100]	; (8006d48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006ce2:	4413      	add	r3, r2
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	d129      	bne.n	8006d3c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe fc96 	bl	800561e <uxListRemove>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006d02:	43da      	mvns	r2, r3
 8006d04:	4b11      	ldr	r3, [pc, #68]	; (8006d4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	4a10      	ldr	r2, [pc, #64]	; (8006d4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d0c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d12:	2201      	movs	r2, #1
 8006d14:	409a      	lsls	r2, r3
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	4a0b      	ldr	r2, [pc, #44]	; (8006d4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4a06      	ldr	r2, [pc, #24]	; (8006d48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006d2e:	441a      	add	r2, r3
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	3304      	adds	r3, #4
 8006d34:	4619      	mov	r1, r3
 8006d36:	4610      	mov	r0, r2
 8006d38:	f7fe fc14 	bl	8005564 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d3c:	bf00      	nop
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	200012dc 	.word	0x200012dc
 8006d48:	200012e0 	.word	0x200012e0
 8006d4c:	200013e4 	.word	0x200013e4

08006d50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d54:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d62:	3201      	adds	r2, #1
 8006d64:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006d66:	4b03      	ldr	r3, [pc, #12]	; (8006d74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d68:	681b      	ldr	r3, [r3, #0]
	}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	200012dc 	.word	0x200012dc

08006d78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d82:	4b29      	ldr	r3, [pc, #164]	; (8006e28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d88:	4b28      	ldr	r3, [pc, #160]	; (8006e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fc45 	bl	800561e <uxListRemove>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10b      	bne.n	8006db2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d9a:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	2201      	movs	r2, #1
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43da      	mvns	r2, r3
 8006da8:	4b21      	ldr	r3, [pc, #132]	; (8006e30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4013      	ands	r3, r2
 8006dae:	4a20      	ldr	r2, [pc, #128]	; (8006e30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006db0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d10a      	bne.n	8006dd0 <prvAddCurrentTaskToDelayedList+0x58>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	481a      	ldr	r0, [pc, #104]	; (8006e34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006dca:	f7fe fbcb 	bl	8005564 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006dce:	e026      	b.n	8006e1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006dd8:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d209      	bcs.n	8006dfc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006de8:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7fe fbd9 	bl	80055ac <vListInsert>
}
 8006dfa:	e010      	b.n	8006e1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dfc:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	f7fe fbcf 	bl	80055ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d202      	bcs.n	8006e1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e18:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6013      	str	r3, [r2, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	200013e0 	.word	0x200013e0
 8006e2c:	200012dc 	.word	0x200012dc
 8006e30:	200013e4 	.word	0x200013e4
 8006e34:	200013c8 	.word	0x200013c8
 8006e38:	20001398 	.word	0x20001398
 8006e3c:	20001394 	.word	0x20001394
 8006e40:	200013fc 	.word	0x200013fc

08006e44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3b04      	subs	r3, #4
 8006e54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3b04      	subs	r3, #4
 8006e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f023 0201 	bic.w	r2, r3, #1
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3b04      	subs	r3, #4
 8006e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e74:	4a0c      	ldr	r2, [pc, #48]	; (8006ea8 <pxPortInitialiseStack+0x64>)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3b14      	subs	r3, #20
 8006e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3b04      	subs	r3, #4
 8006e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f06f 0202 	mvn.w	r2, #2
 8006e92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3b20      	subs	r3, #32
 8006e98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	08006ead 	.word	0x08006ead

08006eac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006eb6:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <prvTaskExitError+0x54>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d00a      	beq.n	8006ed6 <prvTaskExitError+0x2a>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	60fb      	str	r3, [r7, #12]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <prvTaskExitError+0x28>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	60bb      	str	r3, [r7, #8]
}
 8006ee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006eea:	bf00      	nop
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0fc      	beq.n	8006eec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	20000048 	.word	0x20000048
	...

08006f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f10:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <pxCurrentTCBConst2>)
 8006f12:	6819      	ldr	r1, [r3, #0]
 8006f14:	6808      	ldr	r0, [r1, #0]
 8006f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1a:	f380 8809 	msr	PSP, r0
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f04f 0000 	mov.w	r0, #0
 8006f26:	f380 8811 	msr	BASEPRI, r0
 8006f2a:	4770      	bx	lr
 8006f2c:	f3af 8000 	nop.w

08006f30 <pxCurrentTCBConst2>:
 8006f30:	200012dc 	.word	0x200012dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop

08006f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f38:	4808      	ldr	r0, [pc, #32]	; (8006f5c <prvPortStartFirstTask+0x24>)
 8006f3a:	6800      	ldr	r0, [r0, #0]
 8006f3c:	6800      	ldr	r0, [r0, #0]
 8006f3e:	f380 8808 	msr	MSP, r0
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f380 8814 	msr	CONTROL, r0
 8006f4a:	b662      	cpsie	i
 8006f4c:	b661      	cpsie	f
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	df00      	svc	0
 8006f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f5a:	bf00      	nop
 8006f5c:	e000ed08 	.word	0xe000ed08

08006f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f66:	4b46      	ldr	r3, [pc, #280]	; (8007080 <xPortStartScheduler+0x120>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a46      	ldr	r2, [pc, #280]	; (8007084 <xPortStartScheduler+0x124>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10a      	bne.n	8006f86 <xPortStartScheduler+0x26>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	613b      	str	r3, [r7, #16]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f86:	4b3e      	ldr	r3, [pc, #248]	; (8007080 <xPortStartScheduler+0x120>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a3f      	ldr	r2, [pc, #252]	; (8007088 <xPortStartScheduler+0x128>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d10a      	bne.n	8006fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	60fb      	str	r3, [r7, #12]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fa6:	4b39      	ldr	r3, [pc, #228]	; (800708c <xPortStartScheduler+0x12c>)
 8006fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	22ff      	movs	r2, #255	; 0xff
 8006fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	4b31      	ldr	r3, [pc, #196]	; (8007090 <xPortStartScheduler+0x130>)
 8006fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fce:	4b31      	ldr	r3, [pc, #196]	; (8007094 <xPortStartScheduler+0x134>)
 8006fd0:	2207      	movs	r2, #7
 8006fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fd4:	e009      	b.n	8006fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006fd6:	4b2f      	ldr	r3, [pc, #188]	; (8007094 <xPortStartScheduler+0x134>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	4a2d      	ldr	r2, [pc, #180]	; (8007094 <xPortStartScheduler+0x134>)
 8006fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff2:	2b80      	cmp	r3, #128	; 0x80
 8006ff4:	d0ef      	beq.n	8006fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ff6:	4b27      	ldr	r3, [pc, #156]	; (8007094 <xPortStartScheduler+0x134>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f1c3 0307 	rsb	r3, r3, #7
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d00a      	beq.n	8007018 <xPortStartScheduler+0xb8>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	60bb      	str	r3, [r7, #8]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007018:	4b1e      	ldr	r3, [pc, #120]	; (8007094 <xPortStartScheduler+0x134>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	021b      	lsls	r3, r3, #8
 800701e:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <xPortStartScheduler+0x134>)
 8007020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007022:	4b1c      	ldr	r3, [pc, #112]	; (8007094 <xPortStartScheduler+0x134>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800702a:	4a1a      	ldr	r2, [pc, #104]	; (8007094 <xPortStartScheduler+0x134>)
 800702c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007036:	4b18      	ldr	r3, [pc, #96]	; (8007098 <xPortStartScheduler+0x138>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <xPortStartScheduler+0x138>)
 800703c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007042:	4b15      	ldr	r3, [pc, #84]	; (8007098 <xPortStartScheduler+0x138>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a14      	ldr	r2, [pc, #80]	; (8007098 <xPortStartScheduler+0x138>)
 8007048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800704c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800704e:	f000 f8dd 	bl	800720c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007052:	4b12      	ldr	r3, [pc, #72]	; (800709c <xPortStartScheduler+0x13c>)
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007058:	f000 f8fc 	bl	8007254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800705c:	4b10      	ldr	r3, [pc, #64]	; (80070a0 <xPortStartScheduler+0x140>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a0f      	ldr	r2, [pc, #60]	; (80070a0 <xPortStartScheduler+0x140>)
 8007062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007068:	f7ff ff66 	bl	8006f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800706c:	f7ff fa8c 	bl	8006588 <vTaskSwitchContext>
	prvTaskExitError();
 8007070:	f7ff ff1c 	bl	8006eac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	e000ed00 	.word	0xe000ed00
 8007084:	410fc271 	.word	0x410fc271
 8007088:	410fc270 	.word	0x410fc270
 800708c:	e000e400 	.word	0xe000e400
 8007090:	20001408 	.word	0x20001408
 8007094:	2000140c 	.word	0x2000140c
 8007098:	e000ed20 	.word	0xe000ed20
 800709c:	20000048 	.word	0x20000048
 80070a0:	e000ef34 	.word	0xe000ef34

080070a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	607b      	str	r3, [r7, #4]
}
 80070bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <vPortEnterCritical+0x58>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	4a0d      	ldr	r2, [pc, #52]	; (80070fc <vPortEnterCritical+0x58>)
 80070c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070c8:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <vPortEnterCritical+0x58>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d10f      	bne.n	80070f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <vPortEnterCritical+0x5c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	603b      	str	r3, [r7, #0]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <vPortEnterCritical+0x4a>
	}
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	20000048 	.word	0x20000048
 8007100:	e000ed04 	.word	0xe000ed04

08007104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <vPortExitCritical+0x50>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <vPortExitCritical+0x24>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	607b      	str	r3, [r7, #4]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007128:	4b0a      	ldr	r3, [pc, #40]	; (8007154 <vPortExitCritical+0x50>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3b01      	subs	r3, #1
 800712e:	4a09      	ldr	r2, [pc, #36]	; (8007154 <vPortExitCritical+0x50>)
 8007130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007132:	4b08      	ldr	r3, [pc, #32]	; (8007154 <vPortExitCritical+0x50>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d105      	bne.n	8007146 <vPortExitCritical+0x42>
 800713a:	2300      	movs	r3, #0
 800713c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20000048 	.word	0x20000048
	...

08007160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007160:	f3ef 8009 	mrs	r0, PSP
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <pxCurrentTCBConst>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	f01e 0f10 	tst.w	lr, #16
 8007170:	bf08      	it	eq
 8007172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	6010      	str	r0, [r2, #0]
 800717c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007184:	f380 8811 	msr	BASEPRI, r0
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f7ff f9fa 	bl	8006588 <vTaskSwitchContext>
 8007194:	f04f 0000 	mov.w	r0, #0
 8007198:	f380 8811 	msr	BASEPRI, r0
 800719c:	bc09      	pop	{r0, r3}
 800719e:	6819      	ldr	r1, [r3, #0]
 80071a0:	6808      	ldr	r0, [r1, #0]
 80071a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a6:	f01e 0f10 	tst.w	lr, #16
 80071aa:	bf08      	it	eq
 80071ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071b0:	f380 8809 	msr	PSP, r0
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	f3af 8000 	nop.w

080071c0 <pxCurrentTCBConst>:
 80071c0:	200012dc 	.word	0x200012dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop

080071c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
}
 80071e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071e2:	f7ff f919 	bl	8006418 <xTaskIncrementTick>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <xPortSysTickHandler+0x40>)
 80071ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	f383 8811 	msr	BASEPRI, r3
}
 80071fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	e000ed04 	.word	0xe000ed04

0800720c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <vPortSetupTimerInterrupt+0x34>)
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007216:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <vPortSetupTimerInterrupt+0x38>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800721c:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <vPortSetupTimerInterrupt+0x3c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a0a      	ldr	r2, [pc, #40]	; (800724c <vPortSetupTimerInterrupt+0x40>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	099b      	lsrs	r3, r3, #6
 8007228:	4a09      	ldr	r2, [pc, #36]	; (8007250 <vPortSetupTimerInterrupt+0x44>)
 800722a:	3b01      	subs	r3, #1
 800722c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800722e:	4b04      	ldr	r3, [pc, #16]	; (8007240 <vPortSetupTimerInterrupt+0x34>)
 8007230:	2207      	movs	r2, #7
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	e000e010 	.word	0xe000e010
 8007244:	e000e018 	.word	0xe000e018
 8007248:	2000003c 	.word	0x2000003c
 800724c:	10624dd3 	.word	0x10624dd3
 8007250:	e000e014 	.word	0xe000e014

08007254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007264 <vPortEnableVFP+0x10>
 8007258:	6801      	ldr	r1, [r0, #0]
 800725a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800725e:	6001      	str	r1, [r0, #0]
 8007260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007262:	bf00      	nop
 8007264:	e000ed88 	.word	0xe000ed88

08007268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08a      	sub	sp, #40	; 0x28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007270:	2300      	movs	r3, #0
 8007272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007274:	f7ff f826 	bl	80062c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007278:	4b5b      	ldr	r3, [pc, #364]	; (80073e8 <pvPortMalloc+0x180>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007280:	f000 f920 	bl	80074c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007284:	4b59      	ldr	r3, [pc, #356]	; (80073ec <pvPortMalloc+0x184>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	f040 8093 	bne.w	80073b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01d      	beq.n	80072d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007298:	2208      	movs	r2, #8
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d014      	beq.n	80072d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f023 0307 	bic.w	r3, r3, #7
 80072b0:	3308      	adds	r3, #8
 80072b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <pvPortMalloc+0x6c>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	617b      	str	r3, [r7, #20]
}
 80072d0:	bf00      	nop
 80072d2:	e7fe      	b.n	80072d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d06e      	beq.n	80073b8 <pvPortMalloc+0x150>
 80072da:	4b45      	ldr	r3, [pc, #276]	; (80073f0 <pvPortMalloc+0x188>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d869      	bhi.n	80073b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072e4:	4b43      	ldr	r3, [pc, #268]	; (80073f4 <pvPortMalloc+0x18c>)
 80072e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072e8:	4b42      	ldr	r3, [pc, #264]	; (80073f4 <pvPortMalloc+0x18c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ee:	e004      	b.n	80072fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	d903      	bls.n	800730c <pvPortMalloc+0xa4>
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f1      	bne.n	80072f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800730c:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <pvPortMalloc+0x180>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007312:	429a      	cmp	r2, r3
 8007314:	d050      	beq.n	80073b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2208      	movs	r2, #8
 800731c:	4413      	add	r3, r2
 800731e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	2308      	movs	r3, #8
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	429a      	cmp	r2, r3
 8007336:	d91f      	bls.n	8007378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <pvPortMalloc+0xf8>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	613b      	str	r3, [r7, #16]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	1ad2      	subs	r2, r2, r3
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007372:	69b8      	ldr	r0, [r7, #24]
 8007374:	f000 f908 	bl	8007588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007378:	4b1d      	ldr	r3, [pc, #116]	; (80073f0 <pvPortMalloc+0x188>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	4a1b      	ldr	r2, [pc, #108]	; (80073f0 <pvPortMalloc+0x188>)
 8007384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007386:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <pvPortMalloc+0x188>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <pvPortMalloc+0x190>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d203      	bcs.n	800739a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007392:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <pvPortMalloc+0x188>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a18      	ldr	r2, [pc, #96]	; (80073f8 <pvPortMalloc+0x190>)
 8007398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <pvPortMalloc+0x184>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073ae:	4b13      	ldr	r3, [pc, #76]	; (80073fc <pvPortMalloc+0x194>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	4a11      	ldr	r2, [pc, #68]	; (80073fc <pvPortMalloc+0x194>)
 80073b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073b8:	f7fe ff92 	bl	80062e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <pvPortMalloc+0x174>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60fb      	str	r3, [r7, #12]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <pvPortMalloc+0x172>
	return pvReturn;
 80073dc:	69fb      	ldr	r3, [r7, #28]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3728      	adds	r7, #40	; 0x28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20005018 	.word	0x20005018
 80073ec:	2000502c 	.word	0x2000502c
 80073f0:	2000501c 	.word	0x2000501c
 80073f4:	20005010 	.word	0x20005010
 80073f8:	20005020 	.word	0x20005020
 80073fc:	20005024 	.word	0x20005024

08007400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d04d      	beq.n	80074ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007412:	2308      	movs	r3, #8
 8007414:	425b      	negs	r3, r3
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	4413      	add	r3, r2
 800741a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	4b24      	ldr	r3, [pc, #144]	; (80074b8 <vPortFree+0xb8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4013      	ands	r3, r2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <vPortFree+0x44>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	60fb      	str	r3, [r7, #12]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00a      	beq.n	8007462 <vPortFree+0x62>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60bb      	str	r3, [r7, #8]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <vPortFree+0xb8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4013      	ands	r3, r2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01e      	beq.n	80074ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d11a      	bne.n	80074ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <vPortFree+0xb8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	43db      	mvns	r3, r3
 8007482:	401a      	ands	r2, r3
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007488:	f7fe ff1c 	bl	80062c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <vPortFree+0xbc>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4413      	add	r3, r2
 8007496:	4a09      	ldr	r2, [pc, #36]	; (80074bc <vPortFree+0xbc>)
 8007498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800749a:	6938      	ldr	r0, [r7, #16]
 800749c:	f000 f874 	bl	8007588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074a0:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <vPortFree+0xc0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3301      	adds	r3, #1
 80074a6:	4a06      	ldr	r2, [pc, #24]	; (80074c0 <vPortFree+0xc0>)
 80074a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074aa:	f7fe ff19 	bl	80062e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074ae:	bf00      	nop
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	2000502c 	.word	0x2000502c
 80074bc:	2000501c 	.word	0x2000501c
 80074c0:	20005028 	.word	0x20005028

080074c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80074ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074d0:	4b27      	ldr	r3, [pc, #156]	; (8007570 <prvHeapInit+0xac>)
 80074d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00c      	beq.n	80074f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3307      	adds	r3, #7
 80074e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0307 	bic.w	r3, r3, #7
 80074ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	4a1f      	ldr	r2, [pc, #124]	; (8007570 <prvHeapInit+0xac>)
 80074f4:	4413      	add	r3, r2
 80074f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074fc:	4a1d      	ldr	r2, [pc, #116]	; (8007574 <prvHeapInit+0xb0>)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007502:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <prvHeapInit+0xb0>)
 8007504:	2200      	movs	r2, #0
 8007506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	4413      	add	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007510:	2208      	movs	r2, #8
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1a9b      	subs	r3, r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4a15      	ldr	r2, [pc, #84]	; (8007578 <prvHeapInit+0xb4>)
 8007524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007526:	4b14      	ldr	r3, [pc, #80]	; (8007578 <prvHeapInit+0xb4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2200      	movs	r2, #0
 800752c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <prvHeapInit+0xb4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	1ad2      	subs	r2, r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <prvHeapInit+0xb4>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	4a0a      	ldr	r2, [pc, #40]	; (800757c <prvHeapInit+0xb8>)
 8007552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	4a09      	ldr	r2, [pc, #36]	; (8007580 <prvHeapInit+0xbc>)
 800755a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800755c:	4b09      	ldr	r3, [pc, #36]	; (8007584 <prvHeapInit+0xc0>)
 800755e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007562:	601a      	str	r2, [r3, #0]
}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	20001410 	.word	0x20001410
 8007574:	20005010 	.word	0x20005010
 8007578:	20005018 	.word	0x20005018
 800757c:	20005020 	.word	0x20005020
 8007580:	2000501c 	.word	0x2000501c
 8007584:	2000502c 	.word	0x2000502c

08007588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007590:	4b28      	ldr	r3, [pc, #160]	; (8007634 <prvInsertBlockIntoFreeList+0xac>)
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	e002      	b.n	800759c <prvInsertBlockIntoFreeList+0x14>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d8f7      	bhi.n	8007596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d108      	bne.n	80075ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	441a      	add	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	441a      	add	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d118      	bne.n	8007610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <prvInsertBlockIntoFreeList+0xb0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d00d      	beq.n	8007606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	441a      	add	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	e008      	b.n	8007618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007606:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <prvInsertBlockIntoFreeList+0xb0>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e003      	b.n	8007618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d002      	beq.n	8007626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007626:	bf00      	nop
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20005010 	.word	0x20005010
 8007638:	20005018 	.word	0x20005018

0800763c <__errno>:
 800763c:	4b01      	ldr	r3, [pc, #4]	; (8007644 <__errno+0x8>)
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	2000004c 	.word	0x2000004c

08007648 <__sflush_r>:
 8007648:	898a      	ldrh	r2, [r1, #12]
 800764a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800764e:	4605      	mov	r5, r0
 8007650:	0710      	lsls	r0, r2, #28
 8007652:	460c      	mov	r4, r1
 8007654:	d458      	bmi.n	8007708 <__sflush_r+0xc0>
 8007656:	684b      	ldr	r3, [r1, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	dc05      	bgt.n	8007668 <__sflush_r+0x20>
 800765c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800765e:	2b00      	cmp	r3, #0
 8007660:	dc02      	bgt.n	8007668 <__sflush_r+0x20>
 8007662:	2000      	movs	r0, #0
 8007664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800766a:	2e00      	cmp	r6, #0
 800766c:	d0f9      	beq.n	8007662 <__sflush_r+0x1a>
 800766e:	2300      	movs	r3, #0
 8007670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007674:	682f      	ldr	r7, [r5, #0]
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	d032      	beq.n	80076e0 <__sflush_r+0x98>
 800767a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	075a      	lsls	r2, r3, #29
 8007680:	d505      	bpl.n	800768e <__sflush_r+0x46>
 8007682:	6863      	ldr	r3, [r4, #4]
 8007684:	1ac0      	subs	r0, r0, r3
 8007686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007688:	b10b      	cbz	r3, 800768e <__sflush_r+0x46>
 800768a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800768c:	1ac0      	subs	r0, r0, r3
 800768e:	2300      	movs	r3, #0
 8007690:	4602      	mov	r2, r0
 8007692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007694:	6a21      	ldr	r1, [r4, #32]
 8007696:	4628      	mov	r0, r5
 8007698:	47b0      	blx	r6
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	d106      	bne.n	80076ae <__sflush_r+0x66>
 80076a0:	6829      	ldr	r1, [r5, #0]
 80076a2:	291d      	cmp	r1, #29
 80076a4:	d82c      	bhi.n	8007700 <__sflush_r+0xb8>
 80076a6:	4a2a      	ldr	r2, [pc, #168]	; (8007750 <__sflush_r+0x108>)
 80076a8:	40ca      	lsrs	r2, r1
 80076aa:	07d6      	lsls	r6, r2, #31
 80076ac:	d528      	bpl.n	8007700 <__sflush_r+0xb8>
 80076ae:	2200      	movs	r2, #0
 80076b0:	6062      	str	r2, [r4, #4]
 80076b2:	04d9      	lsls	r1, r3, #19
 80076b4:	6922      	ldr	r2, [r4, #16]
 80076b6:	6022      	str	r2, [r4, #0]
 80076b8:	d504      	bpl.n	80076c4 <__sflush_r+0x7c>
 80076ba:	1c42      	adds	r2, r0, #1
 80076bc:	d101      	bne.n	80076c2 <__sflush_r+0x7a>
 80076be:	682b      	ldr	r3, [r5, #0]
 80076c0:	b903      	cbnz	r3, 80076c4 <__sflush_r+0x7c>
 80076c2:	6560      	str	r0, [r4, #84]	; 0x54
 80076c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076c6:	602f      	str	r7, [r5, #0]
 80076c8:	2900      	cmp	r1, #0
 80076ca:	d0ca      	beq.n	8007662 <__sflush_r+0x1a>
 80076cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076d0:	4299      	cmp	r1, r3
 80076d2:	d002      	beq.n	80076da <__sflush_r+0x92>
 80076d4:	4628      	mov	r0, r5
 80076d6:	f000 f9cf 	bl	8007a78 <_free_r>
 80076da:	2000      	movs	r0, #0
 80076dc:	6360      	str	r0, [r4, #52]	; 0x34
 80076de:	e7c1      	b.n	8007664 <__sflush_r+0x1c>
 80076e0:	6a21      	ldr	r1, [r4, #32]
 80076e2:	2301      	movs	r3, #1
 80076e4:	4628      	mov	r0, r5
 80076e6:	47b0      	blx	r6
 80076e8:	1c41      	adds	r1, r0, #1
 80076ea:	d1c7      	bne.n	800767c <__sflush_r+0x34>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0c4      	beq.n	800767c <__sflush_r+0x34>
 80076f2:	2b1d      	cmp	r3, #29
 80076f4:	d001      	beq.n	80076fa <__sflush_r+0xb2>
 80076f6:	2b16      	cmp	r3, #22
 80076f8:	d101      	bne.n	80076fe <__sflush_r+0xb6>
 80076fa:	602f      	str	r7, [r5, #0]
 80076fc:	e7b1      	b.n	8007662 <__sflush_r+0x1a>
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007704:	81a3      	strh	r3, [r4, #12]
 8007706:	e7ad      	b.n	8007664 <__sflush_r+0x1c>
 8007708:	690f      	ldr	r7, [r1, #16]
 800770a:	2f00      	cmp	r7, #0
 800770c:	d0a9      	beq.n	8007662 <__sflush_r+0x1a>
 800770e:	0793      	lsls	r3, r2, #30
 8007710:	680e      	ldr	r6, [r1, #0]
 8007712:	bf08      	it	eq
 8007714:	694b      	ldreq	r3, [r1, #20]
 8007716:	600f      	str	r7, [r1, #0]
 8007718:	bf18      	it	ne
 800771a:	2300      	movne	r3, #0
 800771c:	eba6 0807 	sub.w	r8, r6, r7
 8007720:	608b      	str	r3, [r1, #8]
 8007722:	f1b8 0f00 	cmp.w	r8, #0
 8007726:	dd9c      	ble.n	8007662 <__sflush_r+0x1a>
 8007728:	6a21      	ldr	r1, [r4, #32]
 800772a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800772c:	4643      	mov	r3, r8
 800772e:	463a      	mov	r2, r7
 8007730:	4628      	mov	r0, r5
 8007732:	47b0      	blx	r6
 8007734:	2800      	cmp	r0, #0
 8007736:	dc06      	bgt.n	8007746 <__sflush_r+0xfe>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	f04f 30ff 	mov.w	r0, #4294967295
 8007744:	e78e      	b.n	8007664 <__sflush_r+0x1c>
 8007746:	4407      	add	r7, r0
 8007748:	eba8 0800 	sub.w	r8, r8, r0
 800774c:	e7e9      	b.n	8007722 <__sflush_r+0xda>
 800774e:	bf00      	nop
 8007750:	20400001 	.word	0x20400001

08007754 <_fflush_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	690b      	ldr	r3, [r1, #16]
 8007758:	4605      	mov	r5, r0
 800775a:	460c      	mov	r4, r1
 800775c:	b913      	cbnz	r3, 8007764 <_fflush_r+0x10>
 800775e:	2500      	movs	r5, #0
 8007760:	4628      	mov	r0, r5
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	b118      	cbz	r0, 800776e <_fflush_r+0x1a>
 8007766:	6983      	ldr	r3, [r0, #24]
 8007768:	b90b      	cbnz	r3, 800776e <_fflush_r+0x1a>
 800776a:	f000 f899 	bl	80078a0 <__sinit>
 800776e:	4b14      	ldr	r3, [pc, #80]	; (80077c0 <_fflush_r+0x6c>)
 8007770:	429c      	cmp	r4, r3
 8007772:	d11b      	bne.n	80077ac <_fflush_r+0x58>
 8007774:	686c      	ldr	r4, [r5, #4]
 8007776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0ef      	beq.n	800775e <_fflush_r+0xa>
 800777e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007780:	07d0      	lsls	r0, r2, #31
 8007782:	d404      	bmi.n	800778e <_fflush_r+0x3a>
 8007784:	0599      	lsls	r1, r3, #22
 8007786:	d402      	bmi.n	800778e <_fflush_r+0x3a>
 8007788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800778a:	f000 f94c 	bl	8007a26 <__retarget_lock_acquire_recursive>
 800778e:	4628      	mov	r0, r5
 8007790:	4621      	mov	r1, r4
 8007792:	f7ff ff59 	bl	8007648 <__sflush_r>
 8007796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007798:	07da      	lsls	r2, r3, #31
 800779a:	4605      	mov	r5, r0
 800779c:	d4e0      	bmi.n	8007760 <_fflush_r+0xc>
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	059b      	lsls	r3, r3, #22
 80077a2:	d4dd      	bmi.n	8007760 <_fflush_r+0xc>
 80077a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077a6:	f000 f93f 	bl	8007a28 <__retarget_lock_release_recursive>
 80077aa:	e7d9      	b.n	8007760 <_fflush_r+0xc>
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <_fflush_r+0x70>)
 80077ae:	429c      	cmp	r4, r3
 80077b0:	d101      	bne.n	80077b6 <_fflush_r+0x62>
 80077b2:	68ac      	ldr	r4, [r5, #8]
 80077b4:	e7df      	b.n	8007776 <_fflush_r+0x22>
 80077b6:	4b04      	ldr	r3, [pc, #16]	; (80077c8 <_fflush_r+0x74>)
 80077b8:	429c      	cmp	r4, r3
 80077ba:	bf08      	it	eq
 80077bc:	68ec      	ldreq	r4, [r5, #12]
 80077be:	e7da      	b.n	8007776 <_fflush_r+0x22>
 80077c0:	0800a7d8 	.word	0x0800a7d8
 80077c4:	0800a7f8 	.word	0x0800a7f8
 80077c8:	0800a7b8 	.word	0x0800a7b8

080077cc <fflush>:
 80077cc:	4601      	mov	r1, r0
 80077ce:	b920      	cbnz	r0, 80077da <fflush+0xe>
 80077d0:	4b04      	ldr	r3, [pc, #16]	; (80077e4 <fflush+0x18>)
 80077d2:	4905      	ldr	r1, [pc, #20]	; (80077e8 <fflush+0x1c>)
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	f000 b8e1 	b.w	800799c <_fwalk_reent>
 80077da:	4b04      	ldr	r3, [pc, #16]	; (80077ec <fflush+0x20>)
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	f7ff bfb9 	b.w	8007754 <_fflush_r>
 80077e2:	bf00      	nop
 80077e4:	0800a818 	.word	0x0800a818
 80077e8:	08007755 	.word	0x08007755
 80077ec:	2000004c 	.word	0x2000004c

080077f0 <std>:
 80077f0:	2300      	movs	r3, #0
 80077f2:	b510      	push	{r4, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	e9c0 3300 	strd	r3, r3, [r0]
 80077fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077fe:	6083      	str	r3, [r0, #8]
 8007800:	8181      	strh	r1, [r0, #12]
 8007802:	6643      	str	r3, [r0, #100]	; 0x64
 8007804:	81c2      	strh	r2, [r0, #14]
 8007806:	6183      	str	r3, [r0, #24]
 8007808:	4619      	mov	r1, r3
 800780a:	2208      	movs	r2, #8
 800780c:	305c      	adds	r0, #92	; 0x5c
 800780e:	f000 f92b 	bl	8007a68 <memset>
 8007812:	4b05      	ldr	r3, [pc, #20]	; (8007828 <std+0x38>)
 8007814:	6263      	str	r3, [r4, #36]	; 0x24
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <std+0x3c>)
 8007818:	62a3      	str	r3, [r4, #40]	; 0x28
 800781a:	4b05      	ldr	r3, [pc, #20]	; (8007830 <std+0x40>)
 800781c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <std+0x44>)
 8007820:	6224      	str	r4, [r4, #32]
 8007822:	6323      	str	r3, [r4, #48]	; 0x30
 8007824:	bd10      	pop	{r4, pc}
 8007826:	bf00      	nop
 8007828:	08008649 	.word	0x08008649
 800782c:	0800866b 	.word	0x0800866b
 8007830:	080086a3 	.word	0x080086a3
 8007834:	080086c7 	.word	0x080086c7

08007838 <_cleanup_r>:
 8007838:	4901      	ldr	r1, [pc, #4]	; (8007840 <_cleanup_r+0x8>)
 800783a:	f000 b8af 	b.w	800799c <_fwalk_reent>
 800783e:	bf00      	nop
 8007840:	08007755 	.word	0x08007755

08007844 <__sfmoreglue>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	2268      	movs	r2, #104	; 0x68
 8007848:	1e4d      	subs	r5, r1, #1
 800784a:	4355      	muls	r5, r2
 800784c:	460e      	mov	r6, r1
 800784e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007852:	f000 f97d 	bl	8007b50 <_malloc_r>
 8007856:	4604      	mov	r4, r0
 8007858:	b140      	cbz	r0, 800786c <__sfmoreglue+0x28>
 800785a:	2100      	movs	r1, #0
 800785c:	e9c0 1600 	strd	r1, r6, [r0]
 8007860:	300c      	adds	r0, #12
 8007862:	60a0      	str	r0, [r4, #8]
 8007864:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007868:	f000 f8fe 	bl	8007a68 <memset>
 800786c:	4620      	mov	r0, r4
 800786e:	bd70      	pop	{r4, r5, r6, pc}

08007870 <__sfp_lock_acquire>:
 8007870:	4801      	ldr	r0, [pc, #4]	; (8007878 <__sfp_lock_acquire+0x8>)
 8007872:	f000 b8d8 	b.w	8007a26 <__retarget_lock_acquire_recursive>
 8007876:	bf00      	nop
 8007878:	20005031 	.word	0x20005031

0800787c <__sfp_lock_release>:
 800787c:	4801      	ldr	r0, [pc, #4]	; (8007884 <__sfp_lock_release+0x8>)
 800787e:	f000 b8d3 	b.w	8007a28 <__retarget_lock_release_recursive>
 8007882:	bf00      	nop
 8007884:	20005031 	.word	0x20005031

08007888 <__sinit_lock_acquire>:
 8007888:	4801      	ldr	r0, [pc, #4]	; (8007890 <__sinit_lock_acquire+0x8>)
 800788a:	f000 b8cc 	b.w	8007a26 <__retarget_lock_acquire_recursive>
 800788e:	bf00      	nop
 8007890:	20005032 	.word	0x20005032

08007894 <__sinit_lock_release>:
 8007894:	4801      	ldr	r0, [pc, #4]	; (800789c <__sinit_lock_release+0x8>)
 8007896:	f000 b8c7 	b.w	8007a28 <__retarget_lock_release_recursive>
 800789a:	bf00      	nop
 800789c:	20005032 	.word	0x20005032

080078a0 <__sinit>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	4604      	mov	r4, r0
 80078a4:	f7ff fff0 	bl	8007888 <__sinit_lock_acquire>
 80078a8:	69a3      	ldr	r3, [r4, #24]
 80078aa:	b11b      	cbz	r3, 80078b4 <__sinit+0x14>
 80078ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b0:	f7ff bff0 	b.w	8007894 <__sinit_lock_release>
 80078b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078b8:	6523      	str	r3, [r4, #80]	; 0x50
 80078ba:	4b13      	ldr	r3, [pc, #76]	; (8007908 <__sinit+0x68>)
 80078bc:	4a13      	ldr	r2, [pc, #76]	; (800790c <__sinit+0x6c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80078c2:	42a3      	cmp	r3, r4
 80078c4:	bf04      	itt	eq
 80078c6:	2301      	moveq	r3, #1
 80078c8:	61a3      	streq	r3, [r4, #24]
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 f820 	bl	8007910 <__sfp>
 80078d0:	6060      	str	r0, [r4, #4]
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 f81c 	bl	8007910 <__sfp>
 80078d8:	60a0      	str	r0, [r4, #8]
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 f818 	bl	8007910 <__sfp>
 80078e0:	2200      	movs	r2, #0
 80078e2:	60e0      	str	r0, [r4, #12]
 80078e4:	2104      	movs	r1, #4
 80078e6:	6860      	ldr	r0, [r4, #4]
 80078e8:	f7ff ff82 	bl	80077f0 <std>
 80078ec:	68a0      	ldr	r0, [r4, #8]
 80078ee:	2201      	movs	r2, #1
 80078f0:	2109      	movs	r1, #9
 80078f2:	f7ff ff7d 	bl	80077f0 <std>
 80078f6:	68e0      	ldr	r0, [r4, #12]
 80078f8:	2202      	movs	r2, #2
 80078fa:	2112      	movs	r1, #18
 80078fc:	f7ff ff78 	bl	80077f0 <std>
 8007900:	2301      	movs	r3, #1
 8007902:	61a3      	str	r3, [r4, #24]
 8007904:	e7d2      	b.n	80078ac <__sinit+0xc>
 8007906:	bf00      	nop
 8007908:	0800a818 	.word	0x0800a818
 800790c:	08007839 	.word	0x08007839

08007910 <__sfp>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	4607      	mov	r7, r0
 8007914:	f7ff ffac 	bl	8007870 <__sfp_lock_acquire>
 8007918:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <__sfp+0x84>)
 800791a:	681e      	ldr	r6, [r3, #0]
 800791c:	69b3      	ldr	r3, [r6, #24]
 800791e:	b913      	cbnz	r3, 8007926 <__sfp+0x16>
 8007920:	4630      	mov	r0, r6
 8007922:	f7ff ffbd 	bl	80078a0 <__sinit>
 8007926:	3648      	adds	r6, #72	; 0x48
 8007928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800792c:	3b01      	subs	r3, #1
 800792e:	d503      	bpl.n	8007938 <__sfp+0x28>
 8007930:	6833      	ldr	r3, [r6, #0]
 8007932:	b30b      	cbz	r3, 8007978 <__sfp+0x68>
 8007934:	6836      	ldr	r6, [r6, #0]
 8007936:	e7f7      	b.n	8007928 <__sfp+0x18>
 8007938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800793c:	b9d5      	cbnz	r5, 8007974 <__sfp+0x64>
 800793e:	4b16      	ldr	r3, [pc, #88]	; (8007998 <__sfp+0x88>)
 8007940:	60e3      	str	r3, [r4, #12]
 8007942:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007946:	6665      	str	r5, [r4, #100]	; 0x64
 8007948:	f000 f86c 	bl	8007a24 <__retarget_lock_init_recursive>
 800794c:	f7ff ff96 	bl	800787c <__sfp_lock_release>
 8007950:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007954:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007958:	6025      	str	r5, [r4, #0]
 800795a:	61a5      	str	r5, [r4, #24]
 800795c:	2208      	movs	r2, #8
 800795e:	4629      	mov	r1, r5
 8007960:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007964:	f000 f880 	bl	8007a68 <memset>
 8007968:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800796c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007970:	4620      	mov	r0, r4
 8007972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007974:	3468      	adds	r4, #104	; 0x68
 8007976:	e7d9      	b.n	800792c <__sfp+0x1c>
 8007978:	2104      	movs	r1, #4
 800797a:	4638      	mov	r0, r7
 800797c:	f7ff ff62 	bl	8007844 <__sfmoreglue>
 8007980:	4604      	mov	r4, r0
 8007982:	6030      	str	r0, [r6, #0]
 8007984:	2800      	cmp	r0, #0
 8007986:	d1d5      	bne.n	8007934 <__sfp+0x24>
 8007988:	f7ff ff78 	bl	800787c <__sfp_lock_release>
 800798c:	230c      	movs	r3, #12
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	e7ee      	b.n	8007970 <__sfp+0x60>
 8007992:	bf00      	nop
 8007994:	0800a818 	.word	0x0800a818
 8007998:	ffff0001 	.word	0xffff0001

0800799c <_fwalk_reent>:
 800799c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079a0:	4606      	mov	r6, r0
 80079a2:	4688      	mov	r8, r1
 80079a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079a8:	2700      	movs	r7, #0
 80079aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079ae:	f1b9 0901 	subs.w	r9, r9, #1
 80079b2:	d505      	bpl.n	80079c0 <_fwalk_reent+0x24>
 80079b4:	6824      	ldr	r4, [r4, #0]
 80079b6:	2c00      	cmp	r4, #0
 80079b8:	d1f7      	bne.n	80079aa <_fwalk_reent+0xe>
 80079ba:	4638      	mov	r0, r7
 80079bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079c0:	89ab      	ldrh	r3, [r5, #12]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d907      	bls.n	80079d6 <_fwalk_reent+0x3a>
 80079c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079ca:	3301      	adds	r3, #1
 80079cc:	d003      	beq.n	80079d6 <_fwalk_reent+0x3a>
 80079ce:	4629      	mov	r1, r5
 80079d0:	4630      	mov	r0, r6
 80079d2:	47c0      	blx	r8
 80079d4:	4307      	orrs	r7, r0
 80079d6:	3568      	adds	r5, #104	; 0x68
 80079d8:	e7e9      	b.n	80079ae <_fwalk_reent+0x12>
	...

080079dc <__libc_init_array>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	4d0d      	ldr	r5, [pc, #52]	; (8007a14 <__libc_init_array+0x38>)
 80079e0:	4c0d      	ldr	r4, [pc, #52]	; (8007a18 <__libc_init_array+0x3c>)
 80079e2:	1b64      	subs	r4, r4, r5
 80079e4:	10a4      	asrs	r4, r4, #2
 80079e6:	2600      	movs	r6, #0
 80079e8:	42a6      	cmp	r6, r4
 80079ea:	d109      	bne.n	8007a00 <__libc_init_array+0x24>
 80079ec:	4d0b      	ldr	r5, [pc, #44]	; (8007a1c <__libc_init_array+0x40>)
 80079ee:	4c0c      	ldr	r4, [pc, #48]	; (8007a20 <__libc_init_array+0x44>)
 80079f0:	f002 fd3c 	bl	800a46c <_init>
 80079f4:	1b64      	subs	r4, r4, r5
 80079f6:	10a4      	asrs	r4, r4, #2
 80079f8:	2600      	movs	r6, #0
 80079fa:	42a6      	cmp	r6, r4
 80079fc:	d105      	bne.n	8007a0a <__libc_init_array+0x2e>
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a04:	4798      	blx	r3
 8007a06:	3601      	adds	r6, #1
 8007a08:	e7ee      	b.n	80079e8 <__libc_init_array+0xc>
 8007a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0e:	4798      	blx	r3
 8007a10:	3601      	adds	r6, #1
 8007a12:	e7f2      	b.n	80079fa <__libc_init_array+0x1e>
 8007a14:	0800aa9c 	.word	0x0800aa9c
 8007a18:	0800aa9c 	.word	0x0800aa9c
 8007a1c:	0800aa9c 	.word	0x0800aa9c
 8007a20:	0800aaa0 	.word	0x0800aaa0

08007a24 <__retarget_lock_init_recursive>:
 8007a24:	4770      	bx	lr

08007a26 <__retarget_lock_acquire_recursive>:
 8007a26:	4770      	bx	lr

08007a28 <__retarget_lock_release_recursive>:
 8007a28:	4770      	bx	lr
	...

08007a2c <malloc>:
 8007a2c:	4b02      	ldr	r3, [pc, #8]	; (8007a38 <malloc+0xc>)
 8007a2e:	4601      	mov	r1, r0
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f000 b88d 	b.w	8007b50 <_malloc_r>
 8007a36:	bf00      	nop
 8007a38:	2000004c 	.word	0x2000004c

08007a3c <free>:
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <free+0xc>)
 8007a3e:	4601      	mov	r1, r0
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	f000 b819 	b.w	8007a78 <_free_r>
 8007a46:	bf00      	nop
 8007a48:	2000004c 	.word	0x2000004c

08007a4c <memcpy>:
 8007a4c:	440a      	add	r2, r1
 8007a4e:	4291      	cmp	r1, r2
 8007a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a54:	d100      	bne.n	8007a58 <memcpy+0xc>
 8007a56:	4770      	bx	lr
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a62:	4291      	cmp	r1, r2
 8007a64:	d1f9      	bne.n	8007a5a <memcpy+0xe>
 8007a66:	bd10      	pop	{r4, pc}

08007a68 <memset>:
 8007a68:	4402      	add	r2, r0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d100      	bne.n	8007a72 <memset+0xa>
 8007a70:	4770      	bx	lr
 8007a72:	f803 1b01 	strb.w	r1, [r3], #1
 8007a76:	e7f9      	b.n	8007a6c <memset+0x4>

08007a78 <_free_r>:
 8007a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a7a:	2900      	cmp	r1, #0
 8007a7c:	d044      	beq.n	8007b08 <_free_r+0x90>
 8007a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a82:	9001      	str	r0, [sp, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f1a1 0404 	sub.w	r4, r1, #4
 8007a8a:	bfb8      	it	lt
 8007a8c:	18e4      	addlt	r4, r4, r3
 8007a8e:	f001 fe0b 	bl	80096a8 <__malloc_lock>
 8007a92:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <_free_r+0x94>)
 8007a94:	9801      	ldr	r0, [sp, #4]
 8007a96:	6813      	ldr	r3, [r2, #0]
 8007a98:	b933      	cbnz	r3, 8007aa8 <_free_r+0x30>
 8007a9a:	6063      	str	r3, [r4, #4]
 8007a9c:	6014      	str	r4, [r2, #0]
 8007a9e:	b003      	add	sp, #12
 8007aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007aa4:	f001 be06 	b.w	80096b4 <__malloc_unlock>
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d908      	bls.n	8007abe <_free_r+0x46>
 8007aac:	6825      	ldr	r5, [r4, #0]
 8007aae:	1961      	adds	r1, r4, r5
 8007ab0:	428b      	cmp	r3, r1
 8007ab2:	bf01      	itttt	eq
 8007ab4:	6819      	ldreq	r1, [r3, #0]
 8007ab6:	685b      	ldreq	r3, [r3, #4]
 8007ab8:	1949      	addeq	r1, r1, r5
 8007aba:	6021      	streq	r1, [r4, #0]
 8007abc:	e7ed      	b.n	8007a9a <_free_r+0x22>
 8007abe:	461a      	mov	r2, r3
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	b10b      	cbz	r3, 8007ac8 <_free_r+0x50>
 8007ac4:	42a3      	cmp	r3, r4
 8007ac6:	d9fa      	bls.n	8007abe <_free_r+0x46>
 8007ac8:	6811      	ldr	r1, [r2, #0]
 8007aca:	1855      	adds	r5, r2, r1
 8007acc:	42a5      	cmp	r5, r4
 8007ace:	d10b      	bne.n	8007ae8 <_free_r+0x70>
 8007ad0:	6824      	ldr	r4, [r4, #0]
 8007ad2:	4421      	add	r1, r4
 8007ad4:	1854      	adds	r4, r2, r1
 8007ad6:	42a3      	cmp	r3, r4
 8007ad8:	6011      	str	r1, [r2, #0]
 8007ada:	d1e0      	bne.n	8007a9e <_free_r+0x26>
 8007adc:	681c      	ldr	r4, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	6053      	str	r3, [r2, #4]
 8007ae2:	4421      	add	r1, r4
 8007ae4:	6011      	str	r1, [r2, #0]
 8007ae6:	e7da      	b.n	8007a9e <_free_r+0x26>
 8007ae8:	d902      	bls.n	8007af0 <_free_r+0x78>
 8007aea:	230c      	movs	r3, #12
 8007aec:	6003      	str	r3, [r0, #0]
 8007aee:	e7d6      	b.n	8007a9e <_free_r+0x26>
 8007af0:	6825      	ldr	r5, [r4, #0]
 8007af2:	1961      	adds	r1, r4, r5
 8007af4:	428b      	cmp	r3, r1
 8007af6:	bf04      	itt	eq
 8007af8:	6819      	ldreq	r1, [r3, #0]
 8007afa:	685b      	ldreq	r3, [r3, #4]
 8007afc:	6063      	str	r3, [r4, #4]
 8007afe:	bf04      	itt	eq
 8007b00:	1949      	addeq	r1, r1, r5
 8007b02:	6021      	streq	r1, [r4, #0]
 8007b04:	6054      	str	r4, [r2, #4]
 8007b06:	e7ca      	b.n	8007a9e <_free_r+0x26>
 8007b08:	b003      	add	sp, #12
 8007b0a:	bd30      	pop	{r4, r5, pc}
 8007b0c:	20005034 	.word	0x20005034

08007b10 <sbrk_aligned>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	4e0e      	ldr	r6, [pc, #56]	; (8007b4c <sbrk_aligned+0x3c>)
 8007b14:	460c      	mov	r4, r1
 8007b16:	6831      	ldr	r1, [r6, #0]
 8007b18:	4605      	mov	r5, r0
 8007b1a:	b911      	cbnz	r1, 8007b22 <sbrk_aligned+0x12>
 8007b1c:	f000 fd84 	bl	8008628 <_sbrk_r>
 8007b20:	6030      	str	r0, [r6, #0]
 8007b22:	4621      	mov	r1, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 fd7f 	bl	8008628 <_sbrk_r>
 8007b2a:	1c43      	adds	r3, r0, #1
 8007b2c:	d00a      	beq.n	8007b44 <sbrk_aligned+0x34>
 8007b2e:	1cc4      	adds	r4, r0, #3
 8007b30:	f024 0403 	bic.w	r4, r4, #3
 8007b34:	42a0      	cmp	r0, r4
 8007b36:	d007      	beq.n	8007b48 <sbrk_aligned+0x38>
 8007b38:	1a21      	subs	r1, r4, r0
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f000 fd74 	bl	8008628 <_sbrk_r>
 8007b40:	3001      	adds	r0, #1
 8007b42:	d101      	bne.n	8007b48 <sbrk_aligned+0x38>
 8007b44:	f04f 34ff 	mov.w	r4, #4294967295
 8007b48:	4620      	mov	r0, r4
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	20005038 	.word	0x20005038

08007b50 <_malloc_r>:
 8007b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b54:	1ccd      	adds	r5, r1, #3
 8007b56:	f025 0503 	bic.w	r5, r5, #3
 8007b5a:	3508      	adds	r5, #8
 8007b5c:	2d0c      	cmp	r5, #12
 8007b5e:	bf38      	it	cc
 8007b60:	250c      	movcc	r5, #12
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	4607      	mov	r7, r0
 8007b66:	db01      	blt.n	8007b6c <_malloc_r+0x1c>
 8007b68:	42a9      	cmp	r1, r5
 8007b6a:	d905      	bls.n	8007b78 <_malloc_r+0x28>
 8007b6c:	230c      	movs	r3, #12
 8007b6e:	603b      	str	r3, [r7, #0]
 8007b70:	2600      	movs	r6, #0
 8007b72:	4630      	mov	r0, r6
 8007b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b78:	4e2e      	ldr	r6, [pc, #184]	; (8007c34 <_malloc_r+0xe4>)
 8007b7a:	f001 fd95 	bl	80096a8 <__malloc_lock>
 8007b7e:	6833      	ldr	r3, [r6, #0]
 8007b80:	461c      	mov	r4, r3
 8007b82:	bb34      	cbnz	r4, 8007bd2 <_malloc_r+0x82>
 8007b84:	4629      	mov	r1, r5
 8007b86:	4638      	mov	r0, r7
 8007b88:	f7ff ffc2 	bl	8007b10 <sbrk_aligned>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	4604      	mov	r4, r0
 8007b90:	d14d      	bne.n	8007c2e <_malloc_r+0xde>
 8007b92:	6834      	ldr	r4, [r6, #0]
 8007b94:	4626      	mov	r6, r4
 8007b96:	2e00      	cmp	r6, #0
 8007b98:	d140      	bne.n	8007c1c <_malloc_r+0xcc>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	eb04 0803 	add.w	r8, r4, r3
 8007ba4:	f000 fd40 	bl	8008628 <_sbrk_r>
 8007ba8:	4580      	cmp	r8, r0
 8007baa:	d13a      	bne.n	8007c22 <_malloc_r+0xd2>
 8007bac:	6821      	ldr	r1, [r4, #0]
 8007bae:	3503      	adds	r5, #3
 8007bb0:	1a6d      	subs	r5, r5, r1
 8007bb2:	f025 0503 	bic.w	r5, r5, #3
 8007bb6:	3508      	adds	r5, #8
 8007bb8:	2d0c      	cmp	r5, #12
 8007bba:	bf38      	it	cc
 8007bbc:	250c      	movcc	r5, #12
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f7ff ffa5 	bl	8007b10 <sbrk_aligned>
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	d02b      	beq.n	8007c22 <_malloc_r+0xd2>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	442b      	add	r3, r5
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	e00e      	b.n	8007bf0 <_malloc_r+0xa0>
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	1b52      	subs	r2, r2, r5
 8007bd6:	d41e      	bmi.n	8007c16 <_malloc_r+0xc6>
 8007bd8:	2a0b      	cmp	r2, #11
 8007bda:	d916      	bls.n	8007c0a <_malloc_r+0xba>
 8007bdc:	1961      	adds	r1, r4, r5
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	6025      	str	r5, [r4, #0]
 8007be2:	bf18      	it	ne
 8007be4:	6059      	strne	r1, [r3, #4]
 8007be6:	6863      	ldr	r3, [r4, #4]
 8007be8:	bf08      	it	eq
 8007bea:	6031      	streq	r1, [r6, #0]
 8007bec:	5162      	str	r2, [r4, r5]
 8007bee:	604b      	str	r3, [r1, #4]
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f104 060b 	add.w	r6, r4, #11
 8007bf6:	f001 fd5d 	bl	80096b4 <__malloc_unlock>
 8007bfa:	f026 0607 	bic.w	r6, r6, #7
 8007bfe:	1d23      	adds	r3, r4, #4
 8007c00:	1af2      	subs	r2, r6, r3
 8007c02:	d0b6      	beq.n	8007b72 <_malloc_r+0x22>
 8007c04:	1b9b      	subs	r3, r3, r6
 8007c06:	50a3      	str	r3, [r4, r2]
 8007c08:	e7b3      	b.n	8007b72 <_malloc_r+0x22>
 8007c0a:	6862      	ldr	r2, [r4, #4]
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	bf0c      	ite	eq
 8007c10:	6032      	streq	r2, [r6, #0]
 8007c12:	605a      	strne	r2, [r3, #4]
 8007c14:	e7ec      	b.n	8007bf0 <_malloc_r+0xa0>
 8007c16:	4623      	mov	r3, r4
 8007c18:	6864      	ldr	r4, [r4, #4]
 8007c1a:	e7b2      	b.n	8007b82 <_malloc_r+0x32>
 8007c1c:	4634      	mov	r4, r6
 8007c1e:	6876      	ldr	r6, [r6, #4]
 8007c20:	e7b9      	b.n	8007b96 <_malloc_r+0x46>
 8007c22:	230c      	movs	r3, #12
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4638      	mov	r0, r7
 8007c28:	f001 fd44 	bl	80096b4 <__malloc_unlock>
 8007c2c:	e7a1      	b.n	8007b72 <_malloc_r+0x22>
 8007c2e:	6025      	str	r5, [r4, #0]
 8007c30:	e7de      	b.n	8007bf0 <_malloc_r+0xa0>
 8007c32:	bf00      	nop
 8007c34:	20005034 	.word	0x20005034

08007c38 <__cvt>:
 8007c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c3c:	ec55 4b10 	vmov	r4, r5, d0
 8007c40:	2d00      	cmp	r5, #0
 8007c42:	460e      	mov	r6, r1
 8007c44:	4619      	mov	r1, r3
 8007c46:	462b      	mov	r3, r5
 8007c48:	bfbb      	ittet	lt
 8007c4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c4e:	461d      	movlt	r5, r3
 8007c50:	2300      	movge	r3, #0
 8007c52:	232d      	movlt	r3, #45	; 0x2d
 8007c54:	700b      	strb	r3, [r1, #0]
 8007c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c5c:	4691      	mov	r9, r2
 8007c5e:	f023 0820 	bic.w	r8, r3, #32
 8007c62:	bfbc      	itt	lt
 8007c64:	4622      	movlt	r2, r4
 8007c66:	4614      	movlt	r4, r2
 8007c68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c6c:	d005      	beq.n	8007c7a <__cvt+0x42>
 8007c6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c72:	d100      	bne.n	8007c76 <__cvt+0x3e>
 8007c74:	3601      	adds	r6, #1
 8007c76:	2102      	movs	r1, #2
 8007c78:	e000      	b.n	8007c7c <__cvt+0x44>
 8007c7a:	2103      	movs	r1, #3
 8007c7c:	ab03      	add	r3, sp, #12
 8007c7e:	9301      	str	r3, [sp, #4]
 8007c80:	ab02      	add	r3, sp, #8
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	ec45 4b10 	vmov	d0, r4, r5
 8007c88:	4653      	mov	r3, sl
 8007c8a:	4632      	mov	r2, r6
 8007c8c:	f000 fe90 	bl	80089b0 <_dtoa_r>
 8007c90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c94:	4607      	mov	r7, r0
 8007c96:	d102      	bne.n	8007c9e <__cvt+0x66>
 8007c98:	f019 0f01 	tst.w	r9, #1
 8007c9c:	d022      	beq.n	8007ce4 <__cvt+0xac>
 8007c9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ca2:	eb07 0906 	add.w	r9, r7, r6
 8007ca6:	d110      	bne.n	8007cca <__cvt+0x92>
 8007ca8:	783b      	ldrb	r3, [r7, #0]
 8007caa:	2b30      	cmp	r3, #48	; 0x30
 8007cac:	d10a      	bne.n	8007cc4 <__cvt+0x8c>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	f7f8 ff0f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cba:	b918      	cbnz	r0, 8007cc4 <__cvt+0x8c>
 8007cbc:	f1c6 0601 	rsb	r6, r6, #1
 8007cc0:	f8ca 6000 	str.w	r6, [sl]
 8007cc4:	f8da 3000 	ldr.w	r3, [sl]
 8007cc8:	4499      	add	r9, r3
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 ff01 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cd6:	b108      	cbz	r0, 8007cdc <__cvt+0xa4>
 8007cd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cdc:	2230      	movs	r2, #48	; 0x30
 8007cde:	9b03      	ldr	r3, [sp, #12]
 8007ce0:	454b      	cmp	r3, r9
 8007ce2:	d307      	bcc.n	8007cf4 <__cvt+0xbc>
 8007ce4:	9b03      	ldr	r3, [sp, #12]
 8007ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ce8:	1bdb      	subs	r3, r3, r7
 8007cea:	4638      	mov	r0, r7
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	b004      	add	sp, #16
 8007cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf4:	1c59      	adds	r1, r3, #1
 8007cf6:	9103      	str	r1, [sp, #12]
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	e7f0      	b.n	8007cde <__cvt+0xa6>

08007cfc <__exponent>:
 8007cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2900      	cmp	r1, #0
 8007d02:	bfb8      	it	lt
 8007d04:	4249      	neglt	r1, r1
 8007d06:	f803 2b02 	strb.w	r2, [r3], #2
 8007d0a:	bfb4      	ite	lt
 8007d0c:	222d      	movlt	r2, #45	; 0x2d
 8007d0e:	222b      	movge	r2, #43	; 0x2b
 8007d10:	2909      	cmp	r1, #9
 8007d12:	7042      	strb	r2, [r0, #1]
 8007d14:	dd2a      	ble.n	8007d6c <__exponent+0x70>
 8007d16:	f10d 0407 	add.w	r4, sp, #7
 8007d1a:	46a4      	mov	ip, r4
 8007d1c:	270a      	movs	r7, #10
 8007d1e:	46a6      	mov	lr, r4
 8007d20:	460a      	mov	r2, r1
 8007d22:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d26:	fb07 1516 	mls	r5, r7, r6, r1
 8007d2a:	3530      	adds	r5, #48	; 0x30
 8007d2c:	2a63      	cmp	r2, #99	; 0x63
 8007d2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d36:	4631      	mov	r1, r6
 8007d38:	dcf1      	bgt.n	8007d1e <__exponent+0x22>
 8007d3a:	3130      	adds	r1, #48	; 0x30
 8007d3c:	f1ae 0502 	sub.w	r5, lr, #2
 8007d40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d44:	1c44      	adds	r4, r0, #1
 8007d46:	4629      	mov	r1, r5
 8007d48:	4561      	cmp	r1, ip
 8007d4a:	d30a      	bcc.n	8007d62 <__exponent+0x66>
 8007d4c:	f10d 0209 	add.w	r2, sp, #9
 8007d50:	eba2 020e 	sub.w	r2, r2, lr
 8007d54:	4565      	cmp	r5, ip
 8007d56:	bf88      	it	hi
 8007d58:	2200      	movhi	r2, #0
 8007d5a:	4413      	add	r3, r2
 8007d5c:	1a18      	subs	r0, r3, r0
 8007d5e:	b003      	add	sp, #12
 8007d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d6a:	e7ed      	b.n	8007d48 <__exponent+0x4c>
 8007d6c:	2330      	movs	r3, #48	; 0x30
 8007d6e:	3130      	adds	r1, #48	; 0x30
 8007d70:	7083      	strb	r3, [r0, #2]
 8007d72:	70c1      	strb	r1, [r0, #3]
 8007d74:	1d03      	adds	r3, r0, #4
 8007d76:	e7f1      	b.n	8007d5c <__exponent+0x60>

08007d78 <_printf_float>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	ed2d 8b02 	vpush	{d8}
 8007d80:	b08d      	sub	sp, #52	; 0x34
 8007d82:	460c      	mov	r4, r1
 8007d84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d88:	4616      	mov	r6, r2
 8007d8a:	461f      	mov	r7, r3
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	f001 fbfd 	bl	800958c <_localeconv_r>
 8007d92:	f8d0 a000 	ldr.w	sl, [r0]
 8007d96:	4650      	mov	r0, sl
 8007d98:	f7f8 fa22 	bl	80001e0 <strlen>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	9305      	str	r3, [sp, #20]
 8007da4:	f8d8 3000 	ldr.w	r3, [r8]
 8007da8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007dac:	3307      	adds	r3, #7
 8007dae:	f023 0307 	bic.w	r3, r3, #7
 8007db2:	f103 0208 	add.w	r2, r3, #8
 8007db6:	f8c8 2000 	str.w	r2, [r8]
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007dc2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007dc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dca:	9307      	str	r3, [sp, #28]
 8007dcc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dd0:	ee08 0a10 	vmov	s16, r0
 8007dd4:	4b9f      	ldr	r3, [pc, #636]	; (8008054 <_printf_float+0x2dc>)
 8007dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	f7f8 fead 	bl	8000b3c <__aeabi_dcmpun>
 8007de2:	bb88      	cbnz	r0, 8007e48 <_printf_float+0xd0>
 8007de4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007de8:	4b9a      	ldr	r3, [pc, #616]	; (8008054 <_printf_float+0x2dc>)
 8007dea:	f04f 32ff 	mov.w	r2, #4294967295
 8007dee:	f7f8 fe87 	bl	8000b00 <__aeabi_dcmple>
 8007df2:	bb48      	cbnz	r0, 8007e48 <_printf_float+0xd0>
 8007df4:	2200      	movs	r2, #0
 8007df6:	2300      	movs	r3, #0
 8007df8:	4640      	mov	r0, r8
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	f7f8 fe76 	bl	8000aec <__aeabi_dcmplt>
 8007e00:	b110      	cbz	r0, 8007e08 <_printf_float+0x90>
 8007e02:	232d      	movs	r3, #45	; 0x2d
 8007e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e08:	4b93      	ldr	r3, [pc, #588]	; (8008058 <_printf_float+0x2e0>)
 8007e0a:	4894      	ldr	r0, [pc, #592]	; (800805c <_printf_float+0x2e4>)
 8007e0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e10:	bf94      	ite	ls
 8007e12:	4698      	movls	r8, r3
 8007e14:	4680      	movhi	r8, r0
 8007e16:	2303      	movs	r3, #3
 8007e18:	6123      	str	r3, [r4, #16]
 8007e1a:	9b05      	ldr	r3, [sp, #20]
 8007e1c:	f023 0204 	bic.w	r2, r3, #4
 8007e20:	6022      	str	r2, [r4, #0]
 8007e22:	f04f 0900 	mov.w	r9, #0
 8007e26:	9700      	str	r7, [sp, #0]
 8007e28:	4633      	mov	r3, r6
 8007e2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 f9d8 	bl	80081e4 <_printf_common>
 8007e34:	3001      	adds	r0, #1
 8007e36:	f040 8090 	bne.w	8007f5a <_printf_float+0x1e2>
 8007e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3e:	b00d      	add	sp, #52	; 0x34
 8007e40:	ecbd 8b02 	vpop	{d8}
 8007e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	4642      	mov	r2, r8
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	4649      	mov	r1, r9
 8007e50:	f7f8 fe74 	bl	8000b3c <__aeabi_dcmpun>
 8007e54:	b140      	cbz	r0, 8007e68 <_printf_float+0xf0>
 8007e56:	464b      	mov	r3, r9
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bfbc      	itt	lt
 8007e5c:	232d      	movlt	r3, #45	; 0x2d
 8007e5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e62:	487f      	ldr	r0, [pc, #508]	; (8008060 <_printf_float+0x2e8>)
 8007e64:	4b7f      	ldr	r3, [pc, #508]	; (8008064 <_printf_float+0x2ec>)
 8007e66:	e7d1      	b.n	8007e0c <_printf_float+0x94>
 8007e68:	6863      	ldr	r3, [r4, #4]
 8007e6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e6e:	9206      	str	r2, [sp, #24]
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	d13f      	bne.n	8007ef4 <_printf_float+0x17c>
 8007e74:	2306      	movs	r3, #6
 8007e76:	6063      	str	r3, [r4, #4]
 8007e78:	9b05      	ldr	r3, [sp, #20]
 8007e7a:	6861      	ldr	r1, [r4, #4]
 8007e7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e80:	2300      	movs	r3, #0
 8007e82:	9303      	str	r3, [sp, #12]
 8007e84:	ab0a      	add	r3, sp, #40	; 0x28
 8007e86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e8a:	ab09      	add	r3, sp, #36	; 0x24
 8007e8c:	ec49 8b10 	vmov	d0, r8, r9
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	6022      	str	r2, [r4, #0]
 8007e94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f7ff fecd 	bl	8007c38 <__cvt>
 8007e9e:	9b06      	ldr	r3, [sp, #24]
 8007ea0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ea2:	2b47      	cmp	r3, #71	; 0x47
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	d108      	bne.n	8007eba <_printf_float+0x142>
 8007ea8:	1cc8      	adds	r0, r1, #3
 8007eaa:	db02      	blt.n	8007eb2 <_printf_float+0x13a>
 8007eac:	6863      	ldr	r3, [r4, #4]
 8007eae:	4299      	cmp	r1, r3
 8007eb0:	dd41      	ble.n	8007f36 <_printf_float+0x1be>
 8007eb2:	f1ab 0b02 	sub.w	fp, fp, #2
 8007eb6:	fa5f fb8b 	uxtb.w	fp, fp
 8007eba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ebe:	d820      	bhi.n	8007f02 <_printf_float+0x18a>
 8007ec0:	3901      	subs	r1, #1
 8007ec2:	465a      	mov	r2, fp
 8007ec4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ec8:	9109      	str	r1, [sp, #36]	; 0x24
 8007eca:	f7ff ff17 	bl	8007cfc <__exponent>
 8007ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ed0:	1813      	adds	r3, r2, r0
 8007ed2:	2a01      	cmp	r2, #1
 8007ed4:	4681      	mov	r9, r0
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	dc02      	bgt.n	8007ee0 <_printf_float+0x168>
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	07d2      	lsls	r2, r2, #31
 8007ede:	d501      	bpl.n	8007ee4 <_printf_float+0x16c>
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d09c      	beq.n	8007e26 <_printf_float+0xae>
 8007eec:	232d      	movs	r3, #45	; 0x2d
 8007eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef2:	e798      	b.n	8007e26 <_printf_float+0xae>
 8007ef4:	9a06      	ldr	r2, [sp, #24]
 8007ef6:	2a47      	cmp	r2, #71	; 0x47
 8007ef8:	d1be      	bne.n	8007e78 <_printf_float+0x100>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1bc      	bne.n	8007e78 <_printf_float+0x100>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e7b9      	b.n	8007e76 <_printf_float+0xfe>
 8007f02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f06:	d118      	bne.n	8007f3a <_printf_float+0x1c2>
 8007f08:	2900      	cmp	r1, #0
 8007f0a:	6863      	ldr	r3, [r4, #4]
 8007f0c:	dd0b      	ble.n	8007f26 <_printf_float+0x1ae>
 8007f0e:	6121      	str	r1, [r4, #16]
 8007f10:	b913      	cbnz	r3, 8007f18 <_printf_float+0x1a0>
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	07d0      	lsls	r0, r2, #31
 8007f16:	d502      	bpl.n	8007f1e <_printf_float+0x1a6>
 8007f18:	3301      	adds	r3, #1
 8007f1a:	440b      	add	r3, r1
 8007f1c:	6123      	str	r3, [r4, #16]
 8007f1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f20:	f04f 0900 	mov.w	r9, #0
 8007f24:	e7de      	b.n	8007ee4 <_printf_float+0x16c>
 8007f26:	b913      	cbnz	r3, 8007f2e <_printf_float+0x1b6>
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	07d2      	lsls	r2, r2, #31
 8007f2c:	d501      	bpl.n	8007f32 <_printf_float+0x1ba>
 8007f2e:	3302      	adds	r3, #2
 8007f30:	e7f4      	b.n	8007f1c <_printf_float+0x1a4>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e7f2      	b.n	8007f1c <_printf_float+0x1a4>
 8007f36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f3c:	4299      	cmp	r1, r3
 8007f3e:	db05      	blt.n	8007f4c <_printf_float+0x1d4>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	6121      	str	r1, [r4, #16]
 8007f44:	07d8      	lsls	r0, r3, #31
 8007f46:	d5ea      	bpl.n	8007f1e <_printf_float+0x1a6>
 8007f48:	1c4b      	adds	r3, r1, #1
 8007f4a:	e7e7      	b.n	8007f1c <_printf_float+0x1a4>
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	bfd4      	ite	le
 8007f50:	f1c1 0202 	rsble	r2, r1, #2
 8007f54:	2201      	movgt	r2, #1
 8007f56:	4413      	add	r3, r2
 8007f58:	e7e0      	b.n	8007f1c <_printf_float+0x1a4>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	055a      	lsls	r2, r3, #21
 8007f5e:	d407      	bmi.n	8007f70 <_printf_float+0x1f8>
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	4642      	mov	r2, r8
 8007f64:	4631      	mov	r1, r6
 8007f66:	4628      	mov	r0, r5
 8007f68:	47b8      	blx	r7
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d12c      	bne.n	8007fc8 <_printf_float+0x250>
 8007f6e:	e764      	b.n	8007e3a <_printf_float+0xc2>
 8007f70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f74:	f240 80e0 	bls.w	8008138 <_printf_float+0x3c0>
 8007f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f7f8 fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d034      	beq.n	8007ff2 <_printf_float+0x27a>
 8007f88:	4a37      	ldr	r2, [pc, #220]	; (8008068 <_printf_float+0x2f0>)
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	4628      	mov	r0, r5
 8007f90:	47b8      	blx	r7
 8007f92:	3001      	adds	r0, #1
 8007f94:	f43f af51 	beq.w	8007e3a <_printf_float+0xc2>
 8007f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	db02      	blt.n	8007fa6 <_printf_float+0x22e>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	07d8      	lsls	r0, r3, #31
 8007fa4:	d510      	bpl.n	8007fc8 <_printf_float+0x250>
 8007fa6:	ee18 3a10 	vmov	r3, s16
 8007faa:	4652      	mov	r2, sl
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f af41 	beq.w	8007e3a <_printf_float+0xc2>
 8007fb8:	f04f 0800 	mov.w	r8, #0
 8007fbc:	f104 091a 	add.w	r9, r4, #26
 8007fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	4543      	cmp	r3, r8
 8007fc6:	dc09      	bgt.n	8007fdc <_printf_float+0x264>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	079b      	lsls	r3, r3, #30
 8007fcc:	f100 8105 	bmi.w	80081da <_printf_float+0x462>
 8007fd0:	68e0      	ldr	r0, [r4, #12]
 8007fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd4:	4298      	cmp	r0, r3
 8007fd6:	bfb8      	it	lt
 8007fd8:	4618      	movlt	r0, r3
 8007fda:	e730      	b.n	8007e3e <_printf_float+0xc6>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	464a      	mov	r2, r9
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f af27 	beq.w	8007e3a <_printf_float+0xc2>
 8007fec:	f108 0801 	add.w	r8, r8, #1
 8007ff0:	e7e6      	b.n	8007fc0 <_printf_float+0x248>
 8007ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dc39      	bgt.n	800806c <_printf_float+0x2f4>
 8007ff8:	4a1b      	ldr	r2, [pc, #108]	; (8008068 <_printf_float+0x2f0>)
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	f43f af19 	beq.w	8007e3a <_printf_float+0xc2>
 8008008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800800c:	4313      	orrs	r3, r2
 800800e:	d102      	bne.n	8008016 <_printf_float+0x29e>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	07d9      	lsls	r1, r3, #31
 8008014:	d5d8      	bpl.n	8007fc8 <_printf_float+0x250>
 8008016:	ee18 3a10 	vmov	r3, s16
 800801a:	4652      	mov	r2, sl
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	f43f af09 	beq.w	8007e3a <_printf_float+0xc2>
 8008028:	f04f 0900 	mov.w	r9, #0
 800802c:	f104 0a1a 	add.w	sl, r4, #26
 8008030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008032:	425b      	negs	r3, r3
 8008034:	454b      	cmp	r3, r9
 8008036:	dc01      	bgt.n	800803c <_printf_float+0x2c4>
 8008038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800803a:	e792      	b.n	8007f62 <_printf_float+0x1ea>
 800803c:	2301      	movs	r3, #1
 800803e:	4652      	mov	r2, sl
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	f43f aef7 	beq.w	8007e3a <_printf_float+0xc2>
 800804c:	f109 0901 	add.w	r9, r9, #1
 8008050:	e7ee      	b.n	8008030 <_printf_float+0x2b8>
 8008052:	bf00      	nop
 8008054:	7fefffff 	.word	0x7fefffff
 8008058:	0800a81c 	.word	0x0800a81c
 800805c:	0800a820 	.word	0x0800a820
 8008060:	0800a828 	.word	0x0800a828
 8008064:	0800a824 	.word	0x0800a824
 8008068:	0800a82c 	.word	0x0800a82c
 800806c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800806e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008070:	429a      	cmp	r2, r3
 8008072:	bfa8      	it	ge
 8008074:	461a      	movge	r2, r3
 8008076:	2a00      	cmp	r2, #0
 8008078:	4691      	mov	r9, r2
 800807a:	dc37      	bgt.n	80080ec <_printf_float+0x374>
 800807c:	f04f 0b00 	mov.w	fp, #0
 8008080:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008084:	f104 021a 	add.w	r2, r4, #26
 8008088:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800808a:	9305      	str	r3, [sp, #20]
 800808c:	eba3 0309 	sub.w	r3, r3, r9
 8008090:	455b      	cmp	r3, fp
 8008092:	dc33      	bgt.n	80080fc <_printf_float+0x384>
 8008094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008098:	429a      	cmp	r2, r3
 800809a:	db3b      	blt.n	8008114 <_printf_float+0x39c>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	07da      	lsls	r2, r3, #31
 80080a0:	d438      	bmi.n	8008114 <_printf_float+0x39c>
 80080a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a4:	9a05      	ldr	r2, [sp, #20]
 80080a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080a8:	1a9a      	subs	r2, r3, r2
 80080aa:	eba3 0901 	sub.w	r9, r3, r1
 80080ae:	4591      	cmp	r9, r2
 80080b0:	bfa8      	it	ge
 80080b2:	4691      	movge	r9, r2
 80080b4:	f1b9 0f00 	cmp.w	r9, #0
 80080b8:	dc35      	bgt.n	8008126 <_printf_float+0x3ae>
 80080ba:	f04f 0800 	mov.w	r8, #0
 80080be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c2:	f104 0a1a 	add.w	sl, r4, #26
 80080c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ca:	1a9b      	subs	r3, r3, r2
 80080cc:	eba3 0309 	sub.w	r3, r3, r9
 80080d0:	4543      	cmp	r3, r8
 80080d2:	f77f af79 	ble.w	8007fc8 <_printf_float+0x250>
 80080d6:	2301      	movs	r3, #1
 80080d8:	4652      	mov	r2, sl
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	f43f aeaa 	beq.w	8007e3a <_printf_float+0xc2>
 80080e6:	f108 0801 	add.w	r8, r8, #1
 80080ea:	e7ec      	b.n	80080c6 <_printf_float+0x34e>
 80080ec:	4613      	mov	r3, r2
 80080ee:	4631      	mov	r1, r6
 80080f0:	4642      	mov	r2, r8
 80080f2:	4628      	mov	r0, r5
 80080f4:	47b8      	blx	r7
 80080f6:	3001      	adds	r0, #1
 80080f8:	d1c0      	bne.n	800807c <_printf_float+0x304>
 80080fa:	e69e      	b.n	8007e3a <_printf_float+0xc2>
 80080fc:	2301      	movs	r3, #1
 80080fe:	4631      	mov	r1, r6
 8008100:	4628      	mov	r0, r5
 8008102:	9205      	str	r2, [sp, #20]
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	f43f ae97 	beq.w	8007e3a <_printf_float+0xc2>
 800810c:	9a05      	ldr	r2, [sp, #20]
 800810e:	f10b 0b01 	add.w	fp, fp, #1
 8008112:	e7b9      	b.n	8008088 <_printf_float+0x310>
 8008114:	ee18 3a10 	vmov	r3, s16
 8008118:	4652      	mov	r2, sl
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	d1be      	bne.n	80080a2 <_printf_float+0x32a>
 8008124:	e689      	b.n	8007e3a <_printf_float+0xc2>
 8008126:	9a05      	ldr	r2, [sp, #20]
 8008128:	464b      	mov	r3, r9
 800812a:	4442      	add	r2, r8
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	d1c1      	bne.n	80080ba <_printf_float+0x342>
 8008136:	e680      	b.n	8007e3a <_printf_float+0xc2>
 8008138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800813a:	2a01      	cmp	r2, #1
 800813c:	dc01      	bgt.n	8008142 <_printf_float+0x3ca>
 800813e:	07db      	lsls	r3, r3, #31
 8008140:	d538      	bpl.n	80081b4 <_printf_float+0x43c>
 8008142:	2301      	movs	r3, #1
 8008144:	4642      	mov	r2, r8
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	f43f ae74 	beq.w	8007e3a <_printf_float+0xc2>
 8008152:	ee18 3a10 	vmov	r3, s16
 8008156:	4652      	mov	r2, sl
 8008158:	4631      	mov	r1, r6
 800815a:	4628      	mov	r0, r5
 800815c:	47b8      	blx	r7
 800815e:	3001      	adds	r0, #1
 8008160:	f43f ae6b 	beq.w	8007e3a <_printf_float+0xc2>
 8008164:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008168:	2200      	movs	r2, #0
 800816a:	2300      	movs	r3, #0
 800816c:	f7f8 fcb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008170:	b9d8      	cbnz	r0, 80081aa <_printf_float+0x432>
 8008172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008174:	f108 0201 	add.w	r2, r8, #1
 8008178:	3b01      	subs	r3, #1
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	d10e      	bne.n	80081a2 <_printf_float+0x42a>
 8008184:	e659      	b.n	8007e3a <_printf_float+0xc2>
 8008186:	2301      	movs	r3, #1
 8008188:	4652      	mov	r2, sl
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	47b8      	blx	r7
 8008190:	3001      	adds	r0, #1
 8008192:	f43f ae52 	beq.w	8007e3a <_printf_float+0xc2>
 8008196:	f108 0801 	add.w	r8, r8, #1
 800819a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819c:	3b01      	subs	r3, #1
 800819e:	4543      	cmp	r3, r8
 80081a0:	dcf1      	bgt.n	8008186 <_printf_float+0x40e>
 80081a2:	464b      	mov	r3, r9
 80081a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081a8:	e6dc      	b.n	8007f64 <_printf_float+0x1ec>
 80081aa:	f04f 0800 	mov.w	r8, #0
 80081ae:	f104 0a1a 	add.w	sl, r4, #26
 80081b2:	e7f2      	b.n	800819a <_printf_float+0x422>
 80081b4:	2301      	movs	r3, #1
 80081b6:	4642      	mov	r2, r8
 80081b8:	e7df      	b.n	800817a <_printf_float+0x402>
 80081ba:	2301      	movs	r3, #1
 80081bc:	464a      	mov	r2, r9
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b8      	blx	r7
 80081c4:	3001      	adds	r0, #1
 80081c6:	f43f ae38 	beq.w	8007e3a <_printf_float+0xc2>
 80081ca:	f108 0801 	add.w	r8, r8, #1
 80081ce:	68e3      	ldr	r3, [r4, #12]
 80081d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081d2:	1a5b      	subs	r3, r3, r1
 80081d4:	4543      	cmp	r3, r8
 80081d6:	dcf0      	bgt.n	80081ba <_printf_float+0x442>
 80081d8:	e6fa      	b.n	8007fd0 <_printf_float+0x258>
 80081da:	f04f 0800 	mov.w	r8, #0
 80081de:	f104 0919 	add.w	r9, r4, #25
 80081e2:	e7f4      	b.n	80081ce <_printf_float+0x456>

080081e4 <_printf_common>:
 80081e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	4616      	mov	r6, r2
 80081ea:	4699      	mov	r9, r3
 80081ec:	688a      	ldr	r2, [r1, #8]
 80081ee:	690b      	ldr	r3, [r1, #16]
 80081f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081f4:	4293      	cmp	r3, r2
 80081f6:	bfb8      	it	lt
 80081f8:	4613      	movlt	r3, r2
 80081fa:	6033      	str	r3, [r6, #0]
 80081fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008200:	4607      	mov	r7, r0
 8008202:	460c      	mov	r4, r1
 8008204:	b10a      	cbz	r2, 800820a <_printf_common+0x26>
 8008206:	3301      	adds	r3, #1
 8008208:	6033      	str	r3, [r6, #0]
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	0699      	lsls	r1, r3, #26
 800820e:	bf42      	ittt	mi
 8008210:	6833      	ldrmi	r3, [r6, #0]
 8008212:	3302      	addmi	r3, #2
 8008214:	6033      	strmi	r3, [r6, #0]
 8008216:	6825      	ldr	r5, [r4, #0]
 8008218:	f015 0506 	ands.w	r5, r5, #6
 800821c:	d106      	bne.n	800822c <_printf_common+0x48>
 800821e:	f104 0a19 	add.w	sl, r4, #25
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	6832      	ldr	r2, [r6, #0]
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	42ab      	cmp	r3, r5
 800822a:	dc26      	bgt.n	800827a <_printf_common+0x96>
 800822c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008230:	1e13      	subs	r3, r2, #0
 8008232:	6822      	ldr	r2, [r4, #0]
 8008234:	bf18      	it	ne
 8008236:	2301      	movne	r3, #1
 8008238:	0692      	lsls	r2, r2, #26
 800823a:	d42b      	bmi.n	8008294 <_printf_common+0xb0>
 800823c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008240:	4649      	mov	r1, r9
 8008242:	4638      	mov	r0, r7
 8008244:	47c0      	blx	r8
 8008246:	3001      	adds	r0, #1
 8008248:	d01e      	beq.n	8008288 <_printf_common+0xa4>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	68e5      	ldr	r5, [r4, #12]
 800824e:	6832      	ldr	r2, [r6, #0]
 8008250:	f003 0306 	and.w	r3, r3, #6
 8008254:	2b04      	cmp	r3, #4
 8008256:	bf08      	it	eq
 8008258:	1aad      	subeq	r5, r5, r2
 800825a:	68a3      	ldr	r3, [r4, #8]
 800825c:	6922      	ldr	r2, [r4, #16]
 800825e:	bf0c      	ite	eq
 8008260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008264:	2500      	movne	r5, #0
 8008266:	4293      	cmp	r3, r2
 8008268:	bfc4      	itt	gt
 800826a:	1a9b      	subgt	r3, r3, r2
 800826c:	18ed      	addgt	r5, r5, r3
 800826e:	2600      	movs	r6, #0
 8008270:	341a      	adds	r4, #26
 8008272:	42b5      	cmp	r5, r6
 8008274:	d11a      	bne.n	80082ac <_printf_common+0xc8>
 8008276:	2000      	movs	r0, #0
 8008278:	e008      	b.n	800828c <_printf_common+0xa8>
 800827a:	2301      	movs	r3, #1
 800827c:	4652      	mov	r2, sl
 800827e:	4649      	mov	r1, r9
 8008280:	4638      	mov	r0, r7
 8008282:	47c0      	blx	r8
 8008284:	3001      	adds	r0, #1
 8008286:	d103      	bne.n	8008290 <_printf_common+0xac>
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008290:	3501      	adds	r5, #1
 8008292:	e7c6      	b.n	8008222 <_printf_common+0x3e>
 8008294:	18e1      	adds	r1, r4, r3
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	2030      	movs	r0, #48	; 0x30
 800829a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800829e:	4422      	add	r2, r4
 80082a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082a8:	3302      	adds	r3, #2
 80082aa:	e7c7      	b.n	800823c <_printf_common+0x58>
 80082ac:	2301      	movs	r3, #1
 80082ae:	4622      	mov	r2, r4
 80082b0:	4649      	mov	r1, r9
 80082b2:	4638      	mov	r0, r7
 80082b4:	47c0      	blx	r8
 80082b6:	3001      	adds	r0, #1
 80082b8:	d0e6      	beq.n	8008288 <_printf_common+0xa4>
 80082ba:	3601      	adds	r6, #1
 80082bc:	e7d9      	b.n	8008272 <_printf_common+0x8e>
	...

080082c0 <_printf_i>:
 80082c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c4:	7e0f      	ldrb	r7, [r1, #24]
 80082c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082c8:	2f78      	cmp	r7, #120	; 0x78
 80082ca:	4691      	mov	r9, r2
 80082cc:	4680      	mov	r8, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	469a      	mov	sl, r3
 80082d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082d6:	d807      	bhi.n	80082e8 <_printf_i+0x28>
 80082d8:	2f62      	cmp	r7, #98	; 0x62
 80082da:	d80a      	bhi.n	80082f2 <_printf_i+0x32>
 80082dc:	2f00      	cmp	r7, #0
 80082de:	f000 80d8 	beq.w	8008492 <_printf_i+0x1d2>
 80082e2:	2f58      	cmp	r7, #88	; 0x58
 80082e4:	f000 80a3 	beq.w	800842e <_printf_i+0x16e>
 80082e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082f0:	e03a      	b.n	8008368 <_printf_i+0xa8>
 80082f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082f6:	2b15      	cmp	r3, #21
 80082f8:	d8f6      	bhi.n	80082e8 <_printf_i+0x28>
 80082fa:	a101      	add	r1, pc, #4	; (adr r1, 8008300 <_printf_i+0x40>)
 80082fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008300:	08008359 	.word	0x08008359
 8008304:	0800836d 	.word	0x0800836d
 8008308:	080082e9 	.word	0x080082e9
 800830c:	080082e9 	.word	0x080082e9
 8008310:	080082e9 	.word	0x080082e9
 8008314:	080082e9 	.word	0x080082e9
 8008318:	0800836d 	.word	0x0800836d
 800831c:	080082e9 	.word	0x080082e9
 8008320:	080082e9 	.word	0x080082e9
 8008324:	080082e9 	.word	0x080082e9
 8008328:	080082e9 	.word	0x080082e9
 800832c:	08008479 	.word	0x08008479
 8008330:	0800839d 	.word	0x0800839d
 8008334:	0800845b 	.word	0x0800845b
 8008338:	080082e9 	.word	0x080082e9
 800833c:	080082e9 	.word	0x080082e9
 8008340:	0800849b 	.word	0x0800849b
 8008344:	080082e9 	.word	0x080082e9
 8008348:	0800839d 	.word	0x0800839d
 800834c:	080082e9 	.word	0x080082e9
 8008350:	080082e9 	.word	0x080082e9
 8008354:	08008463 	.word	0x08008463
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	1d1a      	adds	r2, r3, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	602a      	str	r2, [r5, #0]
 8008360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008368:	2301      	movs	r3, #1
 800836a:	e0a3      	b.n	80084b4 <_printf_i+0x1f4>
 800836c:	6820      	ldr	r0, [r4, #0]
 800836e:	6829      	ldr	r1, [r5, #0]
 8008370:	0606      	lsls	r6, r0, #24
 8008372:	f101 0304 	add.w	r3, r1, #4
 8008376:	d50a      	bpl.n	800838e <_printf_i+0xce>
 8008378:	680e      	ldr	r6, [r1, #0]
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	2e00      	cmp	r6, #0
 800837e:	da03      	bge.n	8008388 <_printf_i+0xc8>
 8008380:	232d      	movs	r3, #45	; 0x2d
 8008382:	4276      	negs	r6, r6
 8008384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008388:	485e      	ldr	r0, [pc, #376]	; (8008504 <_printf_i+0x244>)
 800838a:	230a      	movs	r3, #10
 800838c:	e019      	b.n	80083c2 <_printf_i+0x102>
 800838e:	680e      	ldr	r6, [r1, #0]
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008396:	bf18      	it	ne
 8008398:	b236      	sxthne	r6, r6
 800839a:	e7ef      	b.n	800837c <_printf_i+0xbc>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	6820      	ldr	r0, [r4, #0]
 80083a0:	1d19      	adds	r1, r3, #4
 80083a2:	6029      	str	r1, [r5, #0]
 80083a4:	0601      	lsls	r1, r0, #24
 80083a6:	d501      	bpl.n	80083ac <_printf_i+0xec>
 80083a8:	681e      	ldr	r6, [r3, #0]
 80083aa:	e002      	b.n	80083b2 <_printf_i+0xf2>
 80083ac:	0646      	lsls	r6, r0, #25
 80083ae:	d5fb      	bpl.n	80083a8 <_printf_i+0xe8>
 80083b0:	881e      	ldrh	r6, [r3, #0]
 80083b2:	4854      	ldr	r0, [pc, #336]	; (8008504 <_printf_i+0x244>)
 80083b4:	2f6f      	cmp	r7, #111	; 0x6f
 80083b6:	bf0c      	ite	eq
 80083b8:	2308      	moveq	r3, #8
 80083ba:	230a      	movne	r3, #10
 80083bc:	2100      	movs	r1, #0
 80083be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083c2:	6865      	ldr	r5, [r4, #4]
 80083c4:	60a5      	str	r5, [r4, #8]
 80083c6:	2d00      	cmp	r5, #0
 80083c8:	bfa2      	ittt	ge
 80083ca:	6821      	ldrge	r1, [r4, #0]
 80083cc:	f021 0104 	bicge.w	r1, r1, #4
 80083d0:	6021      	strge	r1, [r4, #0]
 80083d2:	b90e      	cbnz	r6, 80083d8 <_printf_i+0x118>
 80083d4:	2d00      	cmp	r5, #0
 80083d6:	d04d      	beq.n	8008474 <_printf_i+0x1b4>
 80083d8:	4615      	mov	r5, r2
 80083da:	fbb6 f1f3 	udiv	r1, r6, r3
 80083de:	fb03 6711 	mls	r7, r3, r1, r6
 80083e2:	5dc7      	ldrb	r7, [r0, r7]
 80083e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083e8:	4637      	mov	r7, r6
 80083ea:	42bb      	cmp	r3, r7
 80083ec:	460e      	mov	r6, r1
 80083ee:	d9f4      	bls.n	80083da <_printf_i+0x11a>
 80083f0:	2b08      	cmp	r3, #8
 80083f2:	d10b      	bne.n	800840c <_printf_i+0x14c>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	07de      	lsls	r6, r3, #31
 80083f8:	d508      	bpl.n	800840c <_printf_i+0x14c>
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	6861      	ldr	r1, [r4, #4]
 80083fe:	4299      	cmp	r1, r3
 8008400:	bfde      	ittt	le
 8008402:	2330      	movle	r3, #48	; 0x30
 8008404:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008408:	f105 35ff 	addle.w	r5, r5, #4294967295
 800840c:	1b52      	subs	r2, r2, r5
 800840e:	6122      	str	r2, [r4, #16]
 8008410:	f8cd a000 	str.w	sl, [sp]
 8008414:	464b      	mov	r3, r9
 8008416:	aa03      	add	r2, sp, #12
 8008418:	4621      	mov	r1, r4
 800841a:	4640      	mov	r0, r8
 800841c:	f7ff fee2 	bl	80081e4 <_printf_common>
 8008420:	3001      	adds	r0, #1
 8008422:	d14c      	bne.n	80084be <_printf_i+0x1fe>
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	b004      	add	sp, #16
 800842a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842e:	4835      	ldr	r0, [pc, #212]	; (8008504 <_printf_i+0x244>)
 8008430:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008434:	6829      	ldr	r1, [r5, #0]
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	f851 6b04 	ldr.w	r6, [r1], #4
 800843c:	6029      	str	r1, [r5, #0]
 800843e:	061d      	lsls	r5, r3, #24
 8008440:	d514      	bpl.n	800846c <_printf_i+0x1ac>
 8008442:	07df      	lsls	r7, r3, #31
 8008444:	bf44      	itt	mi
 8008446:	f043 0320 	orrmi.w	r3, r3, #32
 800844a:	6023      	strmi	r3, [r4, #0]
 800844c:	b91e      	cbnz	r6, 8008456 <_printf_i+0x196>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	f023 0320 	bic.w	r3, r3, #32
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	2310      	movs	r3, #16
 8008458:	e7b0      	b.n	80083bc <_printf_i+0xfc>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	f043 0320 	orr.w	r3, r3, #32
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	2378      	movs	r3, #120	; 0x78
 8008464:	4828      	ldr	r0, [pc, #160]	; (8008508 <_printf_i+0x248>)
 8008466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800846a:	e7e3      	b.n	8008434 <_printf_i+0x174>
 800846c:	0659      	lsls	r1, r3, #25
 800846e:	bf48      	it	mi
 8008470:	b2b6      	uxthmi	r6, r6
 8008472:	e7e6      	b.n	8008442 <_printf_i+0x182>
 8008474:	4615      	mov	r5, r2
 8008476:	e7bb      	b.n	80083f0 <_printf_i+0x130>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	6826      	ldr	r6, [r4, #0]
 800847c:	6961      	ldr	r1, [r4, #20]
 800847e:	1d18      	adds	r0, r3, #4
 8008480:	6028      	str	r0, [r5, #0]
 8008482:	0635      	lsls	r5, r6, #24
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	d501      	bpl.n	800848c <_printf_i+0x1cc>
 8008488:	6019      	str	r1, [r3, #0]
 800848a:	e002      	b.n	8008492 <_printf_i+0x1d2>
 800848c:	0670      	lsls	r0, r6, #25
 800848e:	d5fb      	bpl.n	8008488 <_printf_i+0x1c8>
 8008490:	8019      	strh	r1, [r3, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	6123      	str	r3, [r4, #16]
 8008496:	4615      	mov	r5, r2
 8008498:	e7ba      	b.n	8008410 <_printf_i+0x150>
 800849a:	682b      	ldr	r3, [r5, #0]
 800849c:	1d1a      	adds	r2, r3, #4
 800849e:	602a      	str	r2, [r5, #0]
 80084a0:	681d      	ldr	r5, [r3, #0]
 80084a2:	6862      	ldr	r2, [r4, #4]
 80084a4:	2100      	movs	r1, #0
 80084a6:	4628      	mov	r0, r5
 80084a8:	f7f7 fea2 	bl	80001f0 <memchr>
 80084ac:	b108      	cbz	r0, 80084b2 <_printf_i+0x1f2>
 80084ae:	1b40      	subs	r0, r0, r5
 80084b0:	6060      	str	r0, [r4, #4]
 80084b2:	6863      	ldr	r3, [r4, #4]
 80084b4:	6123      	str	r3, [r4, #16]
 80084b6:	2300      	movs	r3, #0
 80084b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084bc:	e7a8      	b.n	8008410 <_printf_i+0x150>
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	462a      	mov	r2, r5
 80084c2:	4649      	mov	r1, r9
 80084c4:	4640      	mov	r0, r8
 80084c6:	47d0      	blx	sl
 80084c8:	3001      	adds	r0, #1
 80084ca:	d0ab      	beq.n	8008424 <_printf_i+0x164>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	079b      	lsls	r3, r3, #30
 80084d0:	d413      	bmi.n	80084fa <_printf_i+0x23a>
 80084d2:	68e0      	ldr	r0, [r4, #12]
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	4298      	cmp	r0, r3
 80084d8:	bfb8      	it	lt
 80084da:	4618      	movlt	r0, r3
 80084dc:	e7a4      	b.n	8008428 <_printf_i+0x168>
 80084de:	2301      	movs	r3, #1
 80084e0:	4632      	mov	r2, r6
 80084e2:	4649      	mov	r1, r9
 80084e4:	4640      	mov	r0, r8
 80084e6:	47d0      	blx	sl
 80084e8:	3001      	adds	r0, #1
 80084ea:	d09b      	beq.n	8008424 <_printf_i+0x164>
 80084ec:	3501      	adds	r5, #1
 80084ee:	68e3      	ldr	r3, [r4, #12]
 80084f0:	9903      	ldr	r1, [sp, #12]
 80084f2:	1a5b      	subs	r3, r3, r1
 80084f4:	42ab      	cmp	r3, r5
 80084f6:	dcf2      	bgt.n	80084de <_printf_i+0x21e>
 80084f8:	e7eb      	b.n	80084d2 <_printf_i+0x212>
 80084fa:	2500      	movs	r5, #0
 80084fc:	f104 0619 	add.w	r6, r4, #25
 8008500:	e7f5      	b.n	80084ee <_printf_i+0x22e>
 8008502:	bf00      	nop
 8008504:	0800a82e 	.word	0x0800a82e
 8008508:	0800a83f 	.word	0x0800a83f

0800850c <iprintf>:
 800850c:	b40f      	push	{r0, r1, r2, r3}
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <iprintf+0x2c>)
 8008510:	b513      	push	{r0, r1, r4, lr}
 8008512:	681c      	ldr	r4, [r3, #0]
 8008514:	b124      	cbz	r4, 8008520 <iprintf+0x14>
 8008516:	69a3      	ldr	r3, [r4, #24]
 8008518:	b913      	cbnz	r3, 8008520 <iprintf+0x14>
 800851a:	4620      	mov	r0, r4
 800851c:	f7ff f9c0 	bl	80078a0 <__sinit>
 8008520:	ab05      	add	r3, sp, #20
 8008522:	9a04      	ldr	r2, [sp, #16]
 8008524:	68a1      	ldr	r1, [r4, #8]
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	4620      	mov	r0, r4
 800852a:	f001 fc8d 	bl	8009e48 <_vfiprintf_r>
 800852e:	b002      	add	sp, #8
 8008530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008534:	b004      	add	sp, #16
 8008536:	4770      	bx	lr
 8008538:	2000004c 	.word	0x2000004c

0800853c <_puts_r>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	460e      	mov	r6, r1
 8008540:	4605      	mov	r5, r0
 8008542:	b118      	cbz	r0, 800854c <_puts_r+0x10>
 8008544:	6983      	ldr	r3, [r0, #24]
 8008546:	b90b      	cbnz	r3, 800854c <_puts_r+0x10>
 8008548:	f7ff f9aa 	bl	80078a0 <__sinit>
 800854c:	69ab      	ldr	r3, [r5, #24]
 800854e:	68ac      	ldr	r4, [r5, #8]
 8008550:	b913      	cbnz	r3, 8008558 <_puts_r+0x1c>
 8008552:	4628      	mov	r0, r5
 8008554:	f7ff f9a4 	bl	80078a0 <__sinit>
 8008558:	4b2c      	ldr	r3, [pc, #176]	; (800860c <_puts_r+0xd0>)
 800855a:	429c      	cmp	r4, r3
 800855c:	d120      	bne.n	80085a0 <_puts_r+0x64>
 800855e:	686c      	ldr	r4, [r5, #4]
 8008560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008562:	07db      	lsls	r3, r3, #31
 8008564:	d405      	bmi.n	8008572 <_puts_r+0x36>
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	0598      	lsls	r0, r3, #22
 800856a:	d402      	bmi.n	8008572 <_puts_r+0x36>
 800856c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800856e:	f7ff fa5a 	bl	8007a26 <__retarget_lock_acquire_recursive>
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	0719      	lsls	r1, r3, #28
 8008576:	d51d      	bpl.n	80085b4 <_puts_r+0x78>
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	b1db      	cbz	r3, 80085b4 <_puts_r+0x78>
 800857c:	3e01      	subs	r6, #1
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008584:	3b01      	subs	r3, #1
 8008586:	60a3      	str	r3, [r4, #8]
 8008588:	bb39      	cbnz	r1, 80085da <_puts_r+0x9e>
 800858a:	2b00      	cmp	r3, #0
 800858c:	da38      	bge.n	8008600 <_puts_r+0xc4>
 800858e:	4622      	mov	r2, r4
 8008590:	210a      	movs	r1, #10
 8008592:	4628      	mov	r0, r5
 8008594:	f000 f89c 	bl	80086d0 <__swbuf_r>
 8008598:	3001      	adds	r0, #1
 800859a:	d011      	beq.n	80085c0 <_puts_r+0x84>
 800859c:	250a      	movs	r5, #10
 800859e:	e011      	b.n	80085c4 <_puts_r+0x88>
 80085a0:	4b1b      	ldr	r3, [pc, #108]	; (8008610 <_puts_r+0xd4>)
 80085a2:	429c      	cmp	r4, r3
 80085a4:	d101      	bne.n	80085aa <_puts_r+0x6e>
 80085a6:	68ac      	ldr	r4, [r5, #8]
 80085a8:	e7da      	b.n	8008560 <_puts_r+0x24>
 80085aa:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <_puts_r+0xd8>)
 80085ac:	429c      	cmp	r4, r3
 80085ae:	bf08      	it	eq
 80085b0:	68ec      	ldreq	r4, [r5, #12]
 80085b2:	e7d5      	b.n	8008560 <_puts_r+0x24>
 80085b4:	4621      	mov	r1, r4
 80085b6:	4628      	mov	r0, r5
 80085b8:	f000 f8ee 	bl	8008798 <__swsetup_r>
 80085bc:	2800      	cmp	r0, #0
 80085be:	d0dd      	beq.n	800857c <_puts_r+0x40>
 80085c0:	f04f 35ff 	mov.w	r5, #4294967295
 80085c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085c6:	07da      	lsls	r2, r3, #31
 80085c8:	d405      	bmi.n	80085d6 <_puts_r+0x9a>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	059b      	lsls	r3, r3, #22
 80085ce:	d402      	bmi.n	80085d6 <_puts_r+0x9a>
 80085d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085d2:	f7ff fa29 	bl	8007a28 <__retarget_lock_release_recursive>
 80085d6:	4628      	mov	r0, r5
 80085d8:	bd70      	pop	{r4, r5, r6, pc}
 80085da:	2b00      	cmp	r3, #0
 80085dc:	da04      	bge.n	80085e8 <_puts_r+0xac>
 80085de:	69a2      	ldr	r2, [r4, #24]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	dc06      	bgt.n	80085f2 <_puts_r+0xb6>
 80085e4:	290a      	cmp	r1, #10
 80085e6:	d004      	beq.n	80085f2 <_puts_r+0xb6>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	6022      	str	r2, [r4, #0]
 80085ee:	7019      	strb	r1, [r3, #0]
 80085f0:	e7c5      	b.n	800857e <_puts_r+0x42>
 80085f2:	4622      	mov	r2, r4
 80085f4:	4628      	mov	r0, r5
 80085f6:	f000 f86b 	bl	80086d0 <__swbuf_r>
 80085fa:	3001      	adds	r0, #1
 80085fc:	d1bf      	bne.n	800857e <_puts_r+0x42>
 80085fe:	e7df      	b.n	80085c0 <_puts_r+0x84>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	250a      	movs	r5, #10
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	6022      	str	r2, [r4, #0]
 8008608:	701d      	strb	r5, [r3, #0]
 800860a:	e7db      	b.n	80085c4 <_puts_r+0x88>
 800860c:	0800a7d8 	.word	0x0800a7d8
 8008610:	0800a7f8 	.word	0x0800a7f8
 8008614:	0800a7b8 	.word	0x0800a7b8

08008618 <puts>:
 8008618:	4b02      	ldr	r3, [pc, #8]	; (8008624 <puts+0xc>)
 800861a:	4601      	mov	r1, r0
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	f7ff bf8d 	b.w	800853c <_puts_r>
 8008622:	bf00      	nop
 8008624:	2000004c 	.word	0x2000004c

08008628 <_sbrk_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d06      	ldr	r5, [pc, #24]	; (8008644 <_sbrk_r+0x1c>)
 800862c:	2300      	movs	r3, #0
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7f9 fb40 	bl	8001cb8 <_sbrk>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_sbrk_r+0x1a>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_sbrk_r+0x1a>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	2000503c 	.word	0x2000503c

08008648 <__sread>:
 8008648:	b510      	push	{r4, lr}
 800864a:	460c      	mov	r4, r1
 800864c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008650:	f001 fd2a 	bl	800a0a8 <_read_r>
 8008654:	2800      	cmp	r0, #0
 8008656:	bfab      	itete	ge
 8008658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800865a:	89a3      	ldrhlt	r3, [r4, #12]
 800865c:	181b      	addge	r3, r3, r0
 800865e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008662:	bfac      	ite	ge
 8008664:	6563      	strge	r3, [r4, #84]	; 0x54
 8008666:	81a3      	strhlt	r3, [r4, #12]
 8008668:	bd10      	pop	{r4, pc}

0800866a <__swrite>:
 800866a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800866e:	461f      	mov	r7, r3
 8008670:	898b      	ldrh	r3, [r1, #12]
 8008672:	05db      	lsls	r3, r3, #23
 8008674:	4605      	mov	r5, r0
 8008676:	460c      	mov	r4, r1
 8008678:	4616      	mov	r6, r2
 800867a:	d505      	bpl.n	8008688 <__swrite+0x1e>
 800867c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008680:	2302      	movs	r3, #2
 8008682:	2200      	movs	r2, #0
 8008684:	f000 ff86 	bl	8009594 <_lseek_r>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800868e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008692:	81a3      	strh	r3, [r4, #12]
 8008694:	4632      	mov	r2, r6
 8008696:	463b      	mov	r3, r7
 8008698:	4628      	mov	r0, r5
 800869a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800869e:	f000 b869 	b.w	8008774 <_write_r>

080086a2 <__sseek>:
 80086a2:	b510      	push	{r4, lr}
 80086a4:	460c      	mov	r4, r1
 80086a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086aa:	f000 ff73 	bl	8009594 <_lseek_r>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	89a3      	ldrh	r3, [r4, #12]
 80086b2:	bf15      	itete	ne
 80086b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80086b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086be:	81a3      	strheq	r3, [r4, #12]
 80086c0:	bf18      	it	ne
 80086c2:	81a3      	strhne	r3, [r4, #12]
 80086c4:	bd10      	pop	{r4, pc}

080086c6 <__sclose>:
 80086c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ca:	f000 b8d3 	b.w	8008874 <_close_r>
	...

080086d0 <__swbuf_r>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	460e      	mov	r6, r1
 80086d4:	4614      	mov	r4, r2
 80086d6:	4605      	mov	r5, r0
 80086d8:	b118      	cbz	r0, 80086e2 <__swbuf_r+0x12>
 80086da:	6983      	ldr	r3, [r0, #24]
 80086dc:	b90b      	cbnz	r3, 80086e2 <__swbuf_r+0x12>
 80086de:	f7ff f8df 	bl	80078a0 <__sinit>
 80086e2:	4b21      	ldr	r3, [pc, #132]	; (8008768 <__swbuf_r+0x98>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	d12b      	bne.n	8008740 <__swbuf_r+0x70>
 80086e8:	686c      	ldr	r4, [r5, #4]
 80086ea:	69a3      	ldr	r3, [r4, #24]
 80086ec:	60a3      	str	r3, [r4, #8]
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	071a      	lsls	r2, r3, #28
 80086f2:	d52f      	bpl.n	8008754 <__swbuf_r+0x84>
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	b36b      	cbz	r3, 8008754 <__swbuf_r+0x84>
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	6820      	ldr	r0, [r4, #0]
 80086fc:	1ac0      	subs	r0, r0, r3
 80086fe:	6963      	ldr	r3, [r4, #20]
 8008700:	b2f6      	uxtb	r6, r6
 8008702:	4283      	cmp	r3, r0
 8008704:	4637      	mov	r7, r6
 8008706:	dc04      	bgt.n	8008712 <__swbuf_r+0x42>
 8008708:	4621      	mov	r1, r4
 800870a:	4628      	mov	r0, r5
 800870c:	f7ff f822 	bl	8007754 <_fflush_r>
 8008710:	bb30      	cbnz	r0, 8008760 <__swbuf_r+0x90>
 8008712:	68a3      	ldr	r3, [r4, #8]
 8008714:	3b01      	subs	r3, #1
 8008716:	60a3      	str	r3, [r4, #8]
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	6022      	str	r2, [r4, #0]
 800871e:	701e      	strb	r6, [r3, #0]
 8008720:	6963      	ldr	r3, [r4, #20]
 8008722:	3001      	adds	r0, #1
 8008724:	4283      	cmp	r3, r0
 8008726:	d004      	beq.n	8008732 <__swbuf_r+0x62>
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	07db      	lsls	r3, r3, #31
 800872c:	d506      	bpl.n	800873c <__swbuf_r+0x6c>
 800872e:	2e0a      	cmp	r6, #10
 8008730:	d104      	bne.n	800873c <__swbuf_r+0x6c>
 8008732:	4621      	mov	r1, r4
 8008734:	4628      	mov	r0, r5
 8008736:	f7ff f80d 	bl	8007754 <_fflush_r>
 800873a:	b988      	cbnz	r0, 8008760 <__swbuf_r+0x90>
 800873c:	4638      	mov	r0, r7
 800873e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008740:	4b0a      	ldr	r3, [pc, #40]	; (800876c <__swbuf_r+0x9c>)
 8008742:	429c      	cmp	r4, r3
 8008744:	d101      	bne.n	800874a <__swbuf_r+0x7a>
 8008746:	68ac      	ldr	r4, [r5, #8]
 8008748:	e7cf      	b.n	80086ea <__swbuf_r+0x1a>
 800874a:	4b09      	ldr	r3, [pc, #36]	; (8008770 <__swbuf_r+0xa0>)
 800874c:	429c      	cmp	r4, r3
 800874e:	bf08      	it	eq
 8008750:	68ec      	ldreq	r4, [r5, #12]
 8008752:	e7ca      	b.n	80086ea <__swbuf_r+0x1a>
 8008754:	4621      	mov	r1, r4
 8008756:	4628      	mov	r0, r5
 8008758:	f000 f81e 	bl	8008798 <__swsetup_r>
 800875c:	2800      	cmp	r0, #0
 800875e:	d0cb      	beq.n	80086f8 <__swbuf_r+0x28>
 8008760:	f04f 37ff 	mov.w	r7, #4294967295
 8008764:	e7ea      	b.n	800873c <__swbuf_r+0x6c>
 8008766:	bf00      	nop
 8008768:	0800a7d8 	.word	0x0800a7d8
 800876c:	0800a7f8 	.word	0x0800a7f8
 8008770:	0800a7b8 	.word	0x0800a7b8

08008774 <_write_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d07      	ldr	r5, [pc, #28]	; (8008794 <_write_r+0x20>)
 8008778:	4604      	mov	r4, r0
 800877a:	4608      	mov	r0, r1
 800877c:	4611      	mov	r1, r2
 800877e:	2200      	movs	r2, #0
 8008780:	602a      	str	r2, [r5, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	f7f9 fe8e 	bl	80024a4 <_write>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d102      	bne.n	8008792 <_write_r+0x1e>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	b103      	cbz	r3, 8008792 <_write_r+0x1e>
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	2000503c 	.word	0x2000503c

08008798 <__swsetup_r>:
 8008798:	4b32      	ldr	r3, [pc, #200]	; (8008864 <__swsetup_r+0xcc>)
 800879a:	b570      	push	{r4, r5, r6, lr}
 800879c:	681d      	ldr	r5, [r3, #0]
 800879e:	4606      	mov	r6, r0
 80087a0:	460c      	mov	r4, r1
 80087a2:	b125      	cbz	r5, 80087ae <__swsetup_r+0x16>
 80087a4:	69ab      	ldr	r3, [r5, #24]
 80087a6:	b913      	cbnz	r3, 80087ae <__swsetup_r+0x16>
 80087a8:	4628      	mov	r0, r5
 80087aa:	f7ff f879 	bl	80078a0 <__sinit>
 80087ae:	4b2e      	ldr	r3, [pc, #184]	; (8008868 <__swsetup_r+0xd0>)
 80087b0:	429c      	cmp	r4, r3
 80087b2:	d10f      	bne.n	80087d4 <__swsetup_r+0x3c>
 80087b4:	686c      	ldr	r4, [r5, #4]
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087bc:	0719      	lsls	r1, r3, #28
 80087be:	d42c      	bmi.n	800881a <__swsetup_r+0x82>
 80087c0:	06dd      	lsls	r5, r3, #27
 80087c2:	d411      	bmi.n	80087e8 <__swsetup_r+0x50>
 80087c4:	2309      	movs	r3, #9
 80087c6:	6033      	str	r3, [r6, #0]
 80087c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087cc:	81a3      	strh	r3, [r4, #12]
 80087ce:	f04f 30ff 	mov.w	r0, #4294967295
 80087d2:	e03e      	b.n	8008852 <__swsetup_r+0xba>
 80087d4:	4b25      	ldr	r3, [pc, #148]	; (800886c <__swsetup_r+0xd4>)
 80087d6:	429c      	cmp	r4, r3
 80087d8:	d101      	bne.n	80087de <__swsetup_r+0x46>
 80087da:	68ac      	ldr	r4, [r5, #8]
 80087dc:	e7eb      	b.n	80087b6 <__swsetup_r+0x1e>
 80087de:	4b24      	ldr	r3, [pc, #144]	; (8008870 <__swsetup_r+0xd8>)
 80087e0:	429c      	cmp	r4, r3
 80087e2:	bf08      	it	eq
 80087e4:	68ec      	ldreq	r4, [r5, #12]
 80087e6:	e7e6      	b.n	80087b6 <__swsetup_r+0x1e>
 80087e8:	0758      	lsls	r0, r3, #29
 80087ea:	d512      	bpl.n	8008812 <__swsetup_r+0x7a>
 80087ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ee:	b141      	cbz	r1, 8008802 <__swsetup_r+0x6a>
 80087f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087f4:	4299      	cmp	r1, r3
 80087f6:	d002      	beq.n	80087fe <__swsetup_r+0x66>
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7ff f93d 	bl	8007a78 <_free_r>
 80087fe:	2300      	movs	r3, #0
 8008800:	6363      	str	r3, [r4, #52]	; 0x34
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	2300      	movs	r3, #0
 800880c:	6063      	str	r3, [r4, #4]
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	f043 0308 	orr.w	r3, r3, #8
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	6923      	ldr	r3, [r4, #16]
 800881c:	b94b      	cbnz	r3, 8008832 <__swsetup_r+0x9a>
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008828:	d003      	beq.n	8008832 <__swsetup_r+0x9a>
 800882a:	4621      	mov	r1, r4
 800882c:	4630      	mov	r0, r6
 800882e:	f000 fee9 	bl	8009604 <__smakebuf_r>
 8008832:	89a0      	ldrh	r0, [r4, #12]
 8008834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008838:	f010 0301 	ands.w	r3, r0, #1
 800883c:	d00a      	beq.n	8008854 <__swsetup_r+0xbc>
 800883e:	2300      	movs	r3, #0
 8008840:	60a3      	str	r3, [r4, #8]
 8008842:	6963      	ldr	r3, [r4, #20]
 8008844:	425b      	negs	r3, r3
 8008846:	61a3      	str	r3, [r4, #24]
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	b943      	cbnz	r3, 800885e <__swsetup_r+0xc6>
 800884c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008850:	d1ba      	bne.n	80087c8 <__swsetup_r+0x30>
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	0781      	lsls	r1, r0, #30
 8008856:	bf58      	it	pl
 8008858:	6963      	ldrpl	r3, [r4, #20]
 800885a:	60a3      	str	r3, [r4, #8]
 800885c:	e7f4      	b.n	8008848 <__swsetup_r+0xb0>
 800885e:	2000      	movs	r0, #0
 8008860:	e7f7      	b.n	8008852 <__swsetup_r+0xba>
 8008862:	bf00      	nop
 8008864:	2000004c 	.word	0x2000004c
 8008868:	0800a7d8 	.word	0x0800a7d8
 800886c:	0800a7f8 	.word	0x0800a7f8
 8008870:	0800a7b8 	.word	0x0800a7b8

08008874 <_close_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d06      	ldr	r5, [pc, #24]	; (8008890 <_close_r+0x1c>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	f7f9 f9e5 	bl	8001c4e <_close>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_close_r+0x1a>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_close_r+0x1a>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	2000503c 	.word	0x2000503c

08008894 <quorem>:
 8008894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	6903      	ldr	r3, [r0, #16]
 800889a:	690c      	ldr	r4, [r1, #16]
 800889c:	42a3      	cmp	r3, r4
 800889e:	4607      	mov	r7, r0
 80088a0:	f2c0 8081 	blt.w	80089a6 <quorem+0x112>
 80088a4:	3c01      	subs	r4, #1
 80088a6:	f101 0814 	add.w	r8, r1, #20
 80088aa:	f100 0514 	add.w	r5, r0, #20
 80088ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088bc:	3301      	adds	r3, #1
 80088be:	429a      	cmp	r2, r3
 80088c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80088cc:	d331      	bcc.n	8008932 <quorem+0x9e>
 80088ce:	f04f 0e00 	mov.w	lr, #0
 80088d2:	4640      	mov	r0, r8
 80088d4:	46ac      	mov	ip, r5
 80088d6:	46f2      	mov	sl, lr
 80088d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80088dc:	b293      	uxth	r3, r2
 80088de:	fb06 e303 	mla	r3, r6, r3, lr
 80088e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	ebaa 0303 	sub.w	r3, sl, r3
 80088ec:	f8dc a000 	ldr.w	sl, [ip]
 80088f0:	0c12      	lsrs	r2, r2, #16
 80088f2:	fa13 f38a 	uxtah	r3, r3, sl
 80088f6:	fb06 e202 	mla	r2, r6, r2, lr
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	9b00      	ldr	r3, [sp, #0]
 80088fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008902:	b292      	uxth	r2, r2
 8008904:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800890c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008910:	4581      	cmp	r9, r0
 8008912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008916:	f84c 3b04 	str.w	r3, [ip], #4
 800891a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800891e:	d2db      	bcs.n	80088d8 <quorem+0x44>
 8008920:	f855 300b 	ldr.w	r3, [r5, fp]
 8008924:	b92b      	cbnz	r3, 8008932 <quorem+0x9e>
 8008926:	9b01      	ldr	r3, [sp, #4]
 8008928:	3b04      	subs	r3, #4
 800892a:	429d      	cmp	r5, r3
 800892c:	461a      	mov	r2, r3
 800892e:	d32e      	bcc.n	800898e <quorem+0xfa>
 8008930:	613c      	str	r4, [r7, #16]
 8008932:	4638      	mov	r0, r7
 8008934:	f001 f946 	bl	8009bc4 <__mcmp>
 8008938:	2800      	cmp	r0, #0
 800893a:	db24      	blt.n	8008986 <quorem+0xf2>
 800893c:	3601      	adds	r6, #1
 800893e:	4628      	mov	r0, r5
 8008940:	f04f 0c00 	mov.w	ip, #0
 8008944:	f858 2b04 	ldr.w	r2, [r8], #4
 8008948:	f8d0 e000 	ldr.w	lr, [r0]
 800894c:	b293      	uxth	r3, r2
 800894e:	ebac 0303 	sub.w	r3, ip, r3
 8008952:	0c12      	lsrs	r2, r2, #16
 8008954:	fa13 f38e 	uxtah	r3, r3, lr
 8008958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800895c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008960:	b29b      	uxth	r3, r3
 8008962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008966:	45c1      	cmp	r9, r8
 8008968:	f840 3b04 	str.w	r3, [r0], #4
 800896c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008970:	d2e8      	bcs.n	8008944 <quorem+0xb0>
 8008972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800897a:	b922      	cbnz	r2, 8008986 <quorem+0xf2>
 800897c:	3b04      	subs	r3, #4
 800897e:	429d      	cmp	r5, r3
 8008980:	461a      	mov	r2, r3
 8008982:	d30a      	bcc.n	800899a <quorem+0x106>
 8008984:	613c      	str	r4, [r7, #16]
 8008986:	4630      	mov	r0, r6
 8008988:	b003      	add	sp, #12
 800898a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898e:	6812      	ldr	r2, [r2, #0]
 8008990:	3b04      	subs	r3, #4
 8008992:	2a00      	cmp	r2, #0
 8008994:	d1cc      	bne.n	8008930 <quorem+0x9c>
 8008996:	3c01      	subs	r4, #1
 8008998:	e7c7      	b.n	800892a <quorem+0x96>
 800899a:	6812      	ldr	r2, [r2, #0]
 800899c:	3b04      	subs	r3, #4
 800899e:	2a00      	cmp	r2, #0
 80089a0:	d1f0      	bne.n	8008984 <quorem+0xf0>
 80089a2:	3c01      	subs	r4, #1
 80089a4:	e7eb      	b.n	800897e <quorem+0xea>
 80089a6:	2000      	movs	r0, #0
 80089a8:	e7ee      	b.n	8008988 <quorem+0xf4>
 80089aa:	0000      	movs	r0, r0
 80089ac:	0000      	movs	r0, r0
	...

080089b0 <_dtoa_r>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	ed2d 8b04 	vpush	{d8-d9}
 80089b8:	ec57 6b10 	vmov	r6, r7, d0
 80089bc:	b093      	sub	sp, #76	; 0x4c
 80089be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089c4:	9106      	str	r1, [sp, #24]
 80089c6:	ee10 aa10 	vmov	sl, s0
 80089ca:	4604      	mov	r4, r0
 80089cc:	9209      	str	r2, [sp, #36]	; 0x24
 80089ce:	930c      	str	r3, [sp, #48]	; 0x30
 80089d0:	46bb      	mov	fp, r7
 80089d2:	b975      	cbnz	r5, 80089f2 <_dtoa_r+0x42>
 80089d4:	2010      	movs	r0, #16
 80089d6:	f7ff f829 	bl	8007a2c <malloc>
 80089da:	4602      	mov	r2, r0
 80089dc:	6260      	str	r0, [r4, #36]	; 0x24
 80089de:	b920      	cbnz	r0, 80089ea <_dtoa_r+0x3a>
 80089e0:	4ba7      	ldr	r3, [pc, #668]	; (8008c80 <_dtoa_r+0x2d0>)
 80089e2:	21ea      	movs	r1, #234	; 0xea
 80089e4:	48a7      	ldr	r0, [pc, #668]	; (8008c84 <_dtoa_r+0x2d4>)
 80089e6:	f001 fb85 	bl	800a0f4 <__assert_func>
 80089ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089ee:	6005      	str	r5, [r0, #0]
 80089f0:	60c5      	str	r5, [r0, #12]
 80089f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089f4:	6819      	ldr	r1, [r3, #0]
 80089f6:	b151      	cbz	r1, 8008a0e <_dtoa_r+0x5e>
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	604a      	str	r2, [r1, #4]
 80089fc:	2301      	movs	r3, #1
 80089fe:	4093      	lsls	r3, r2
 8008a00:	608b      	str	r3, [r1, #8]
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 fe9c 	bl	8009740 <_Bfree>
 8008a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	1e3b      	subs	r3, r7, #0
 8008a10:	bfaa      	itet	ge
 8008a12:	2300      	movge	r3, #0
 8008a14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a18:	f8c8 3000 	strge.w	r3, [r8]
 8008a1c:	4b9a      	ldr	r3, [pc, #616]	; (8008c88 <_dtoa_r+0x2d8>)
 8008a1e:	bfbc      	itt	lt
 8008a20:	2201      	movlt	r2, #1
 8008a22:	f8c8 2000 	strlt.w	r2, [r8]
 8008a26:	ea33 030b 	bics.w	r3, r3, fp
 8008a2a:	d11b      	bne.n	8008a64 <_dtoa_r+0xb4>
 8008a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a38:	4333      	orrs	r3, r6
 8008a3a:	f000 8592 	beq.w	8009562 <_dtoa_r+0xbb2>
 8008a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a40:	b963      	cbnz	r3, 8008a5c <_dtoa_r+0xac>
 8008a42:	4b92      	ldr	r3, [pc, #584]	; (8008c8c <_dtoa_r+0x2dc>)
 8008a44:	e022      	b.n	8008a8c <_dtoa_r+0xdc>
 8008a46:	4b92      	ldr	r3, [pc, #584]	; (8008c90 <_dtoa_r+0x2e0>)
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	9801      	ldr	r0, [sp, #4]
 8008a52:	b013      	add	sp, #76	; 0x4c
 8008a54:	ecbd 8b04 	vpop	{d8-d9}
 8008a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5c:	4b8b      	ldr	r3, [pc, #556]	; (8008c8c <_dtoa_r+0x2dc>)
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	3303      	adds	r3, #3
 8008a62:	e7f3      	b.n	8008a4c <_dtoa_r+0x9c>
 8008a64:	2200      	movs	r2, #0
 8008a66:	2300      	movs	r3, #0
 8008a68:	4650      	mov	r0, sl
 8008a6a:	4659      	mov	r1, fp
 8008a6c:	f7f8 f834 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a70:	ec4b ab19 	vmov	d9, sl, fp
 8008a74:	4680      	mov	r8, r0
 8008a76:	b158      	cbz	r0, 8008a90 <_dtoa_r+0xe0>
 8008a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 856b 	beq.w	800955c <_dtoa_r+0xbac>
 8008a86:	4883      	ldr	r0, [pc, #524]	; (8008c94 <_dtoa_r+0x2e4>)
 8008a88:	6018      	str	r0, [r3, #0]
 8008a8a:	1e43      	subs	r3, r0, #1
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	e7df      	b.n	8008a50 <_dtoa_r+0xa0>
 8008a90:	ec4b ab10 	vmov	d0, sl, fp
 8008a94:	aa10      	add	r2, sp, #64	; 0x40
 8008a96:	a911      	add	r1, sp, #68	; 0x44
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f001 f939 	bl	8009d10 <__d2b>
 8008a9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008aa2:	ee08 0a10 	vmov	s16, r0
 8008aa6:	2d00      	cmp	r5, #0
 8008aa8:	f000 8084 	beq.w	8008bb4 <_dtoa_r+0x204>
 8008aac:	ee19 3a90 	vmov	r3, s19
 8008ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ab4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ab8:	4656      	mov	r6, sl
 8008aba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ac2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ac6:	4b74      	ldr	r3, [pc, #464]	; (8008c98 <_dtoa_r+0x2e8>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	4630      	mov	r0, r6
 8008acc:	4639      	mov	r1, r7
 8008ace:	f7f7 fbe3 	bl	8000298 <__aeabi_dsub>
 8008ad2:	a365      	add	r3, pc, #404	; (adr r3, 8008c68 <_dtoa_r+0x2b8>)
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f7f7 fd96 	bl	8000608 <__aeabi_dmul>
 8008adc:	a364      	add	r3, pc, #400	; (adr r3, 8008c70 <_dtoa_r+0x2c0>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	f7f7 fbdb 	bl	800029c <__adddf3>
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	4628      	mov	r0, r5
 8008aea:	460f      	mov	r7, r1
 8008aec:	f7f7 fd22 	bl	8000534 <__aeabi_i2d>
 8008af0:	a361      	add	r3, pc, #388	; (adr r3, 8008c78 <_dtoa_r+0x2c8>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7f7 fd87 	bl	8000608 <__aeabi_dmul>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4630      	mov	r0, r6
 8008b00:	4639      	mov	r1, r7
 8008b02:	f7f7 fbcb 	bl	800029c <__adddf3>
 8008b06:	4606      	mov	r6, r0
 8008b08:	460f      	mov	r7, r1
 8008b0a:	f7f8 f82d 	bl	8000b68 <__aeabi_d2iz>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	9000      	str	r0, [sp, #0]
 8008b12:	2300      	movs	r3, #0
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f7f7 ffe8 	bl	8000aec <__aeabi_dcmplt>
 8008b1c:	b150      	cbz	r0, 8008b34 <_dtoa_r+0x184>
 8008b1e:	9800      	ldr	r0, [sp, #0]
 8008b20:	f7f7 fd08 	bl	8000534 <__aeabi_i2d>
 8008b24:	4632      	mov	r2, r6
 8008b26:	463b      	mov	r3, r7
 8008b28:	f7f7 ffd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b2c:	b910      	cbnz	r0, 8008b34 <_dtoa_r+0x184>
 8008b2e:	9b00      	ldr	r3, [sp, #0]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	9b00      	ldr	r3, [sp, #0]
 8008b36:	2b16      	cmp	r3, #22
 8008b38:	d85a      	bhi.n	8008bf0 <_dtoa_r+0x240>
 8008b3a:	9a00      	ldr	r2, [sp, #0]
 8008b3c:	4b57      	ldr	r3, [pc, #348]	; (8008c9c <_dtoa_r+0x2ec>)
 8008b3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	ec51 0b19 	vmov	r0, r1, d9
 8008b4a:	f7f7 ffcf 	bl	8000aec <__aeabi_dcmplt>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d050      	beq.n	8008bf4 <_dtoa_r+0x244>
 8008b52:	9b00      	ldr	r3, [sp, #0]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b5e:	1b5d      	subs	r5, r3, r5
 8008b60:	1e6b      	subs	r3, r5, #1
 8008b62:	9305      	str	r3, [sp, #20]
 8008b64:	bf45      	ittet	mi
 8008b66:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b6a:	9304      	strmi	r3, [sp, #16]
 8008b6c:	2300      	movpl	r3, #0
 8008b6e:	2300      	movmi	r3, #0
 8008b70:	bf4c      	ite	mi
 8008b72:	9305      	strmi	r3, [sp, #20]
 8008b74:	9304      	strpl	r3, [sp, #16]
 8008b76:	9b00      	ldr	r3, [sp, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	db3d      	blt.n	8008bf8 <_dtoa_r+0x248>
 8008b7c:	9b05      	ldr	r3, [sp, #20]
 8008b7e:	9a00      	ldr	r2, [sp, #0]
 8008b80:	920a      	str	r2, [sp, #40]	; 0x28
 8008b82:	4413      	add	r3, r2
 8008b84:	9305      	str	r3, [sp, #20]
 8008b86:	2300      	movs	r3, #0
 8008b88:	9307      	str	r3, [sp, #28]
 8008b8a:	9b06      	ldr	r3, [sp, #24]
 8008b8c:	2b09      	cmp	r3, #9
 8008b8e:	f200 8089 	bhi.w	8008ca4 <_dtoa_r+0x2f4>
 8008b92:	2b05      	cmp	r3, #5
 8008b94:	bfc4      	itt	gt
 8008b96:	3b04      	subgt	r3, #4
 8008b98:	9306      	strgt	r3, [sp, #24]
 8008b9a:	9b06      	ldr	r3, [sp, #24]
 8008b9c:	f1a3 0302 	sub.w	r3, r3, #2
 8008ba0:	bfcc      	ite	gt
 8008ba2:	2500      	movgt	r5, #0
 8008ba4:	2501      	movle	r5, #1
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	f200 8087 	bhi.w	8008cba <_dtoa_r+0x30a>
 8008bac:	e8df f003 	tbb	[pc, r3]
 8008bb0:	59383a2d 	.word	0x59383a2d
 8008bb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008bb8:	441d      	add	r5, r3
 8008bba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	bfc1      	itttt	gt
 8008bc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008bca:	fa0b f303 	lslgt.w	r3, fp, r3
 8008bce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008bd2:	bfda      	itte	le
 8008bd4:	f1c3 0320 	rsble	r3, r3, #32
 8008bd8:	fa06 f003 	lslle.w	r0, r6, r3
 8008bdc:	4318      	orrgt	r0, r3
 8008bde:	f7f7 fc99 	bl	8000514 <__aeabi_ui2d>
 8008be2:	2301      	movs	r3, #1
 8008be4:	4606      	mov	r6, r0
 8008be6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008bea:	3d01      	subs	r5, #1
 8008bec:	930e      	str	r3, [sp, #56]	; 0x38
 8008bee:	e76a      	b.n	8008ac6 <_dtoa_r+0x116>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e7b2      	b.n	8008b5a <_dtoa_r+0x1aa>
 8008bf4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008bf6:	e7b1      	b.n	8008b5c <_dtoa_r+0x1ac>
 8008bf8:	9b04      	ldr	r3, [sp, #16]
 8008bfa:	9a00      	ldr	r2, [sp, #0]
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	9304      	str	r3, [sp, #16]
 8008c00:	4253      	negs	r3, r2
 8008c02:	9307      	str	r3, [sp, #28]
 8008c04:	2300      	movs	r3, #0
 8008c06:	930a      	str	r3, [sp, #40]	; 0x28
 8008c08:	e7bf      	b.n	8008b8a <_dtoa_r+0x1da>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	9308      	str	r3, [sp, #32]
 8008c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dc55      	bgt.n	8008cc0 <_dtoa_r+0x310>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c1e:	e00c      	b.n	8008c3a <_dtoa_r+0x28a>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e7f3      	b.n	8008c0c <_dtoa_r+0x25c>
 8008c24:	2300      	movs	r3, #0
 8008c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c28:	9308      	str	r3, [sp, #32]
 8008c2a:	9b00      	ldr	r3, [sp, #0]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	9302      	str	r3, [sp, #8]
 8008c30:	3301      	adds	r3, #1
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	9303      	str	r3, [sp, #12]
 8008c36:	bfb8      	it	lt
 8008c38:	2301      	movlt	r3, #1
 8008c3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	6042      	str	r2, [r0, #4]
 8008c40:	2204      	movs	r2, #4
 8008c42:	f102 0614 	add.w	r6, r2, #20
 8008c46:	429e      	cmp	r6, r3
 8008c48:	6841      	ldr	r1, [r0, #4]
 8008c4a:	d93d      	bls.n	8008cc8 <_dtoa_r+0x318>
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 fd37 	bl	80096c0 <_Balloc>
 8008c52:	9001      	str	r0, [sp, #4]
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d13b      	bne.n	8008cd0 <_dtoa_r+0x320>
 8008c58:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <_dtoa_r+0x2f0>)
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c60:	e6c0      	b.n	80089e4 <_dtoa_r+0x34>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e7df      	b.n	8008c26 <_dtoa_r+0x276>
 8008c66:	bf00      	nop
 8008c68:	636f4361 	.word	0x636f4361
 8008c6c:	3fd287a7 	.word	0x3fd287a7
 8008c70:	8b60c8b3 	.word	0x8b60c8b3
 8008c74:	3fc68a28 	.word	0x3fc68a28
 8008c78:	509f79fb 	.word	0x509f79fb
 8008c7c:	3fd34413 	.word	0x3fd34413
 8008c80:	0800a85d 	.word	0x0800a85d
 8008c84:	0800a874 	.word	0x0800a874
 8008c88:	7ff00000 	.word	0x7ff00000
 8008c8c:	0800a859 	.word	0x0800a859
 8008c90:	0800a850 	.word	0x0800a850
 8008c94:	0800a82d 	.word	0x0800a82d
 8008c98:	3ff80000 	.word	0x3ff80000
 8008c9c:	0800a970 	.word	0x0800a970
 8008ca0:	0800a8cf 	.word	0x0800a8cf
 8008ca4:	2501      	movs	r5, #1
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	9306      	str	r3, [sp, #24]
 8008caa:	9508      	str	r5, [sp, #32]
 8008cac:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2312      	movs	r3, #18
 8008cb8:	e7b0      	b.n	8008c1c <_dtoa_r+0x26c>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	9308      	str	r3, [sp, #32]
 8008cbe:	e7f5      	b.n	8008cac <_dtoa_r+0x2fc>
 8008cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cc6:	e7b8      	b.n	8008c3a <_dtoa_r+0x28a>
 8008cc8:	3101      	adds	r1, #1
 8008cca:	6041      	str	r1, [r0, #4]
 8008ccc:	0052      	lsls	r2, r2, #1
 8008cce:	e7b8      	b.n	8008c42 <_dtoa_r+0x292>
 8008cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cd2:	9a01      	ldr	r2, [sp, #4]
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	9b03      	ldr	r3, [sp, #12]
 8008cd8:	2b0e      	cmp	r3, #14
 8008cda:	f200 809d 	bhi.w	8008e18 <_dtoa_r+0x468>
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	f000 809a 	beq.w	8008e18 <_dtoa_r+0x468>
 8008ce4:	9b00      	ldr	r3, [sp, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	dd32      	ble.n	8008d50 <_dtoa_r+0x3a0>
 8008cea:	4ab7      	ldr	r2, [pc, #732]	; (8008fc8 <_dtoa_r+0x618>)
 8008cec:	f003 030f 	and.w	r3, r3, #15
 8008cf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cf8:	9b00      	ldr	r3, [sp, #0]
 8008cfa:	05d8      	lsls	r0, r3, #23
 8008cfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d00:	d516      	bpl.n	8008d30 <_dtoa_r+0x380>
 8008d02:	4bb2      	ldr	r3, [pc, #712]	; (8008fcc <_dtoa_r+0x61c>)
 8008d04:	ec51 0b19 	vmov	r0, r1, d9
 8008d08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d0c:	f7f7 fda6 	bl	800085c <__aeabi_ddiv>
 8008d10:	f007 070f 	and.w	r7, r7, #15
 8008d14:	4682      	mov	sl, r0
 8008d16:	468b      	mov	fp, r1
 8008d18:	2503      	movs	r5, #3
 8008d1a:	4eac      	ldr	r6, [pc, #688]	; (8008fcc <_dtoa_r+0x61c>)
 8008d1c:	b957      	cbnz	r7, 8008d34 <_dtoa_r+0x384>
 8008d1e:	4642      	mov	r2, r8
 8008d20:	464b      	mov	r3, r9
 8008d22:	4650      	mov	r0, sl
 8008d24:	4659      	mov	r1, fp
 8008d26:	f7f7 fd99 	bl	800085c <__aeabi_ddiv>
 8008d2a:	4682      	mov	sl, r0
 8008d2c:	468b      	mov	fp, r1
 8008d2e:	e028      	b.n	8008d82 <_dtoa_r+0x3d2>
 8008d30:	2502      	movs	r5, #2
 8008d32:	e7f2      	b.n	8008d1a <_dtoa_r+0x36a>
 8008d34:	07f9      	lsls	r1, r7, #31
 8008d36:	d508      	bpl.n	8008d4a <_dtoa_r+0x39a>
 8008d38:	4640      	mov	r0, r8
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d40:	f7f7 fc62 	bl	8000608 <__aeabi_dmul>
 8008d44:	3501      	adds	r5, #1
 8008d46:	4680      	mov	r8, r0
 8008d48:	4689      	mov	r9, r1
 8008d4a:	107f      	asrs	r7, r7, #1
 8008d4c:	3608      	adds	r6, #8
 8008d4e:	e7e5      	b.n	8008d1c <_dtoa_r+0x36c>
 8008d50:	f000 809b 	beq.w	8008e8a <_dtoa_r+0x4da>
 8008d54:	9b00      	ldr	r3, [sp, #0]
 8008d56:	4f9d      	ldr	r7, [pc, #628]	; (8008fcc <_dtoa_r+0x61c>)
 8008d58:	425e      	negs	r6, r3
 8008d5a:	4b9b      	ldr	r3, [pc, #620]	; (8008fc8 <_dtoa_r+0x618>)
 8008d5c:	f006 020f 	and.w	r2, r6, #15
 8008d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	ec51 0b19 	vmov	r0, r1, d9
 8008d6c:	f7f7 fc4c 	bl	8000608 <__aeabi_dmul>
 8008d70:	1136      	asrs	r6, r6, #4
 8008d72:	4682      	mov	sl, r0
 8008d74:	468b      	mov	fp, r1
 8008d76:	2300      	movs	r3, #0
 8008d78:	2502      	movs	r5, #2
 8008d7a:	2e00      	cmp	r6, #0
 8008d7c:	d17a      	bne.n	8008e74 <_dtoa_r+0x4c4>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1d3      	bne.n	8008d2a <_dtoa_r+0x37a>
 8008d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8082 	beq.w	8008e8e <_dtoa_r+0x4de>
 8008d8a:	4b91      	ldr	r3, [pc, #580]	; (8008fd0 <_dtoa_r+0x620>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4650      	mov	r0, sl
 8008d90:	4659      	mov	r1, fp
 8008d92:	f7f7 feab 	bl	8000aec <__aeabi_dcmplt>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d079      	beq.n	8008e8e <_dtoa_r+0x4de>
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d076      	beq.n	8008e8e <_dtoa_r+0x4de>
 8008da0:	9b02      	ldr	r3, [sp, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dd36      	ble.n	8008e14 <_dtoa_r+0x464>
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	4650      	mov	r0, sl
 8008daa:	4659      	mov	r1, fp
 8008dac:	1e5f      	subs	r7, r3, #1
 8008dae:	2200      	movs	r2, #0
 8008db0:	4b88      	ldr	r3, [pc, #544]	; (8008fd4 <_dtoa_r+0x624>)
 8008db2:	f7f7 fc29 	bl	8000608 <__aeabi_dmul>
 8008db6:	9e02      	ldr	r6, [sp, #8]
 8008db8:	4682      	mov	sl, r0
 8008dba:	468b      	mov	fp, r1
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f7f7 fbb8 	bl	8000534 <__aeabi_i2d>
 8008dc4:	4652      	mov	r2, sl
 8008dc6:	465b      	mov	r3, fp
 8008dc8:	f7f7 fc1e 	bl	8000608 <__aeabi_dmul>
 8008dcc:	4b82      	ldr	r3, [pc, #520]	; (8008fd8 <_dtoa_r+0x628>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f7f7 fa64 	bl	800029c <__adddf3>
 8008dd4:	46d0      	mov	r8, sl
 8008dd6:	46d9      	mov	r9, fp
 8008dd8:	4682      	mov	sl, r0
 8008dda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008dde:	2e00      	cmp	r6, #0
 8008de0:	d158      	bne.n	8008e94 <_dtoa_r+0x4e4>
 8008de2:	4b7e      	ldr	r3, [pc, #504]	; (8008fdc <_dtoa_r+0x62c>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	4640      	mov	r0, r8
 8008de8:	4649      	mov	r1, r9
 8008dea:	f7f7 fa55 	bl	8000298 <__aeabi_dsub>
 8008dee:	4652      	mov	r2, sl
 8008df0:	465b      	mov	r3, fp
 8008df2:	4680      	mov	r8, r0
 8008df4:	4689      	mov	r9, r1
 8008df6:	f7f7 fe97 	bl	8000b28 <__aeabi_dcmpgt>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	f040 8295 	bne.w	800932a <_dtoa_r+0x97a>
 8008e00:	4652      	mov	r2, sl
 8008e02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e06:	4640      	mov	r0, r8
 8008e08:	4649      	mov	r1, r9
 8008e0a:	f7f7 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	f040 8289 	bne.w	8009326 <_dtoa_r+0x976>
 8008e14:	ec5b ab19 	vmov	sl, fp, d9
 8008e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f2c0 8148 	blt.w	80090b0 <_dtoa_r+0x700>
 8008e20:	9a00      	ldr	r2, [sp, #0]
 8008e22:	2a0e      	cmp	r2, #14
 8008e24:	f300 8144 	bgt.w	80090b0 <_dtoa_r+0x700>
 8008e28:	4b67      	ldr	r3, [pc, #412]	; (8008fc8 <_dtoa_r+0x618>)
 8008e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f280 80d5 	bge.w	8008fe4 <_dtoa_r+0x634>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f300 80d1 	bgt.w	8008fe4 <_dtoa_r+0x634>
 8008e42:	f040 826f 	bne.w	8009324 <_dtoa_r+0x974>
 8008e46:	4b65      	ldr	r3, [pc, #404]	; (8008fdc <_dtoa_r+0x62c>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	f7f7 fbdb 	bl	8000608 <__aeabi_dmul>
 8008e52:	4652      	mov	r2, sl
 8008e54:	465b      	mov	r3, fp
 8008e56:	f7f7 fe5d 	bl	8000b14 <__aeabi_dcmpge>
 8008e5a:	9e03      	ldr	r6, [sp, #12]
 8008e5c:	4637      	mov	r7, r6
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	f040 8245 	bne.w	80092ee <_dtoa_r+0x93e>
 8008e64:	9d01      	ldr	r5, [sp, #4]
 8008e66:	2331      	movs	r3, #49	; 0x31
 8008e68:	f805 3b01 	strb.w	r3, [r5], #1
 8008e6c:	9b00      	ldr	r3, [sp, #0]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	e240      	b.n	80092f6 <_dtoa_r+0x946>
 8008e74:	07f2      	lsls	r2, r6, #31
 8008e76:	d505      	bpl.n	8008e84 <_dtoa_r+0x4d4>
 8008e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7c:	f7f7 fbc4 	bl	8000608 <__aeabi_dmul>
 8008e80:	3501      	adds	r5, #1
 8008e82:	2301      	movs	r3, #1
 8008e84:	1076      	asrs	r6, r6, #1
 8008e86:	3708      	adds	r7, #8
 8008e88:	e777      	b.n	8008d7a <_dtoa_r+0x3ca>
 8008e8a:	2502      	movs	r5, #2
 8008e8c:	e779      	b.n	8008d82 <_dtoa_r+0x3d2>
 8008e8e:	9f00      	ldr	r7, [sp, #0]
 8008e90:	9e03      	ldr	r6, [sp, #12]
 8008e92:	e794      	b.n	8008dbe <_dtoa_r+0x40e>
 8008e94:	9901      	ldr	r1, [sp, #4]
 8008e96:	4b4c      	ldr	r3, [pc, #304]	; (8008fc8 <_dtoa_r+0x618>)
 8008e98:	4431      	add	r1, r6
 8008e9a:	910d      	str	r1, [sp, #52]	; 0x34
 8008e9c:	9908      	ldr	r1, [sp, #32]
 8008e9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ea6:	2900      	cmp	r1, #0
 8008ea8:	d043      	beq.n	8008f32 <_dtoa_r+0x582>
 8008eaa:	494d      	ldr	r1, [pc, #308]	; (8008fe0 <_dtoa_r+0x630>)
 8008eac:	2000      	movs	r0, #0
 8008eae:	f7f7 fcd5 	bl	800085c <__aeabi_ddiv>
 8008eb2:	4652      	mov	r2, sl
 8008eb4:	465b      	mov	r3, fp
 8008eb6:	f7f7 f9ef 	bl	8000298 <__aeabi_dsub>
 8008eba:	9d01      	ldr	r5, [sp, #4]
 8008ebc:	4682      	mov	sl, r0
 8008ebe:	468b      	mov	fp, r1
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	f7f7 fe50 	bl	8000b68 <__aeabi_d2iz>
 8008ec8:	4606      	mov	r6, r0
 8008eca:	f7f7 fb33 	bl	8000534 <__aeabi_i2d>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	f7f7 f9df 	bl	8000298 <__aeabi_dsub>
 8008eda:	3630      	adds	r6, #48	; 0x30
 8008edc:	f805 6b01 	strb.w	r6, [r5], #1
 8008ee0:	4652      	mov	r2, sl
 8008ee2:	465b      	mov	r3, fp
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	4689      	mov	r9, r1
 8008ee8:	f7f7 fe00 	bl	8000aec <__aeabi_dcmplt>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d163      	bne.n	8008fb8 <_dtoa_r+0x608>
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	464b      	mov	r3, r9
 8008ef4:	4936      	ldr	r1, [pc, #216]	; (8008fd0 <_dtoa_r+0x620>)
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	f7f7 f9ce 	bl	8000298 <__aeabi_dsub>
 8008efc:	4652      	mov	r2, sl
 8008efe:	465b      	mov	r3, fp
 8008f00:	f7f7 fdf4 	bl	8000aec <__aeabi_dcmplt>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	f040 80b5 	bne.w	8009074 <_dtoa_r+0x6c4>
 8008f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f0c:	429d      	cmp	r5, r3
 8008f0e:	d081      	beq.n	8008e14 <_dtoa_r+0x464>
 8008f10:	4b30      	ldr	r3, [pc, #192]	; (8008fd4 <_dtoa_r+0x624>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	4650      	mov	r0, sl
 8008f16:	4659      	mov	r1, fp
 8008f18:	f7f7 fb76 	bl	8000608 <__aeabi_dmul>
 8008f1c:	4b2d      	ldr	r3, [pc, #180]	; (8008fd4 <_dtoa_r+0x624>)
 8008f1e:	4682      	mov	sl, r0
 8008f20:	468b      	mov	fp, r1
 8008f22:	4640      	mov	r0, r8
 8008f24:	4649      	mov	r1, r9
 8008f26:	2200      	movs	r2, #0
 8008f28:	f7f7 fb6e 	bl	8000608 <__aeabi_dmul>
 8008f2c:	4680      	mov	r8, r0
 8008f2e:	4689      	mov	r9, r1
 8008f30:	e7c6      	b.n	8008ec0 <_dtoa_r+0x510>
 8008f32:	4650      	mov	r0, sl
 8008f34:	4659      	mov	r1, fp
 8008f36:	f7f7 fb67 	bl	8000608 <__aeabi_dmul>
 8008f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f3c:	9d01      	ldr	r5, [sp, #4]
 8008f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f40:	4682      	mov	sl, r0
 8008f42:	468b      	mov	fp, r1
 8008f44:	4649      	mov	r1, r9
 8008f46:	4640      	mov	r0, r8
 8008f48:	f7f7 fe0e 	bl	8000b68 <__aeabi_d2iz>
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	f7f7 faf1 	bl	8000534 <__aeabi_i2d>
 8008f52:	3630      	adds	r6, #48	; 0x30
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4640      	mov	r0, r8
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	f7f7 f99c 	bl	8000298 <__aeabi_dsub>
 8008f60:	f805 6b01 	strb.w	r6, [r5], #1
 8008f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f66:	429d      	cmp	r5, r3
 8008f68:	4680      	mov	r8, r0
 8008f6a:	4689      	mov	r9, r1
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	d124      	bne.n	8008fbc <_dtoa_r+0x60c>
 8008f72:	4b1b      	ldr	r3, [pc, #108]	; (8008fe0 <_dtoa_r+0x630>)
 8008f74:	4650      	mov	r0, sl
 8008f76:	4659      	mov	r1, fp
 8008f78:	f7f7 f990 	bl	800029c <__adddf3>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4640      	mov	r0, r8
 8008f82:	4649      	mov	r1, r9
 8008f84:	f7f7 fdd0 	bl	8000b28 <__aeabi_dcmpgt>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d173      	bne.n	8009074 <_dtoa_r+0x6c4>
 8008f8c:	4652      	mov	r2, sl
 8008f8e:	465b      	mov	r3, fp
 8008f90:	4913      	ldr	r1, [pc, #76]	; (8008fe0 <_dtoa_r+0x630>)
 8008f92:	2000      	movs	r0, #0
 8008f94:	f7f7 f980 	bl	8000298 <__aeabi_dsub>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	f7f7 fda4 	bl	8000aec <__aeabi_dcmplt>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	f43f af35 	beq.w	8008e14 <_dtoa_r+0x464>
 8008faa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fac:	1e6b      	subs	r3, r5, #1
 8008fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fb4:	2b30      	cmp	r3, #48	; 0x30
 8008fb6:	d0f8      	beq.n	8008faa <_dtoa_r+0x5fa>
 8008fb8:	9700      	str	r7, [sp, #0]
 8008fba:	e049      	b.n	8009050 <_dtoa_r+0x6a0>
 8008fbc:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <_dtoa_r+0x624>)
 8008fbe:	f7f7 fb23 	bl	8000608 <__aeabi_dmul>
 8008fc2:	4680      	mov	r8, r0
 8008fc4:	4689      	mov	r9, r1
 8008fc6:	e7bd      	b.n	8008f44 <_dtoa_r+0x594>
 8008fc8:	0800a970 	.word	0x0800a970
 8008fcc:	0800a948 	.word	0x0800a948
 8008fd0:	3ff00000 	.word	0x3ff00000
 8008fd4:	40240000 	.word	0x40240000
 8008fd8:	401c0000 	.word	0x401c0000
 8008fdc:	40140000 	.word	0x40140000
 8008fe0:	3fe00000 	.word	0x3fe00000
 8008fe4:	9d01      	ldr	r5, [sp, #4]
 8008fe6:	4656      	mov	r6, sl
 8008fe8:	465f      	mov	r7, fp
 8008fea:	4642      	mov	r2, r8
 8008fec:	464b      	mov	r3, r9
 8008fee:	4630      	mov	r0, r6
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	f7f7 fc33 	bl	800085c <__aeabi_ddiv>
 8008ff6:	f7f7 fdb7 	bl	8000b68 <__aeabi_d2iz>
 8008ffa:	4682      	mov	sl, r0
 8008ffc:	f7f7 fa9a 	bl	8000534 <__aeabi_i2d>
 8009000:	4642      	mov	r2, r8
 8009002:	464b      	mov	r3, r9
 8009004:	f7f7 fb00 	bl	8000608 <__aeabi_dmul>
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	4630      	mov	r0, r6
 800900e:	4639      	mov	r1, r7
 8009010:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009014:	f7f7 f940 	bl	8000298 <__aeabi_dsub>
 8009018:	f805 6b01 	strb.w	r6, [r5], #1
 800901c:	9e01      	ldr	r6, [sp, #4]
 800901e:	9f03      	ldr	r7, [sp, #12]
 8009020:	1bae      	subs	r6, r5, r6
 8009022:	42b7      	cmp	r7, r6
 8009024:	4602      	mov	r2, r0
 8009026:	460b      	mov	r3, r1
 8009028:	d135      	bne.n	8009096 <_dtoa_r+0x6e6>
 800902a:	f7f7 f937 	bl	800029c <__adddf3>
 800902e:	4642      	mov	r2, r8
 8009030:	464b      	mov	r3, r9
 8009032:	4606      	mov	r6, r0
 8009034:	460f      	mov	r7, r1
 8009036:	f7f7 fd77 	bl	8000b28 <__aeabi_dcmpgt>
 800903a:	b9d0      	cbnz	r0, 8009072 <_dtoa_r+0x6c2>
 800903c:	4642      	mov	r2, r8
 800903e:	464b      	mov	r3, r9
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	f7f7 fd48 	bl	8000ad8 <__aeabi_dcmpeq>
 8009048:	b110      	cbz	r0, 8009050 <_dtoa_r+0x6a0>
 800904a:	f01a 0f01 	tst.w	sl, #1
 800904e:	d110      	bne.n	8009072 <_dtoa_r+0x6c2>
 8009050:	4620      	mov	r0, r4
 8009052:	ee18 1a10 	vmov	r1, s16
 8009056:	f000 fb73 	bl	8009740 <_Bfree>
 800905a:	2300      	movs	r3, #0
 800905c:	9800      	ldr	r0, [sp, #0]
 800905e:	702b      	strb	r3, [r5, #0]
 8009060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009062:	3001      	adds	r0, #1
 8009064:	6018      	str	r0, [r3, #0]
 8009066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009068:	2b00      	cmp	r3, #0
 800906a:	f43f acf1 	beq.w	8008a50 <_dtoa_r+0xa0>
 800906e:	601d      	str	r5, [r3, #0]
 8009070:	e4ee      	b.n	8008a50 <_dtoa_r+0xa0>
 8009072:	9f00      	ldr	r7, [sp, #0]
 8009074:	462b      	mov	r3, r5
 8009076:	461d      	mov	r5, r3
 8009078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800907c:	2a39      	cmp	r2, #57	; 0x39
 800907e:	d106      	bne.n	800908e <_dtoa_r+0x6de>
 8009080:	9a01      	ldr	r2, [sp, #4]
 8009082:	429a      	cmp	r2, r3
 8009084:	d1f7      	bne.n	8009076 <_dtoa_r+0x6c6>
 8009086:	9901      	ldr	r1, [sp, #4]
 8009088:	2230      	movs	r2, #48	; 0x30
 800908a:	3701      	adds	r7, #1
 800908c:	700a      	strb	r2, [r1, #0]
 800908e:	781a      	ldrb	r2, [r3, #0]
 8009090:	3201      	adds	r2, #1
 8009092:	701a      	strb	r2, [r3, #0]
 8009094:	e790      	b.n	8008fb8 <_dtoa_r+0x608>
 8009096:	4ba6      	ldr	r3, [pc, #664]	; (8009330 <_dtoa_r+0x980>)
 8009098:	2200      	movs	r2, #0
 800909a:	f7f7 fab5 	bl	8000608 <__aeabi_dmul>
 800909e:	2200      	movs	r2, #0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4606      	mov	r6, r0
 80090a4:	460f      	mov	r7, r1
 80090a6:	f7f7 fd17 	bl	8000ad8 <__aeabi_dcmpeq>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d09d      	beq.n	8008fea <_dtoa_r+0x63a>
 80090ae:	e7cf      	b.n	8009050 <_dtoa_r+0x6a0>
 80090b0:	9a08      	ldr	r2, [sp, #32]
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	f000 80d7 	beq.w	8009266 <_dtoa_r+0x8b6>
 80090b8:	9a06      	ldr	r2, [sp, #24]
 80090ba:	2a01      	cmp	r2, #1
 80090bc:	f300 80ba 	bgt.w	8009234 <_dtoa_r+0x884>
 80090c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090c2:	2a00      	cmp	r2, #0
 80090c4:	f000 80b2 	beq.w	800922c <_dtoa_r+0x87c>
 80090c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090cc:	9e07      	ldr	r6, [sp, #28]
 80090ce:	9d04      	ldr	r5, [sp, #16]
 80090d0:	9a04      	ldr	r2, [sp, #16]
 80090d2:	441a      	add	r2, r3
 80090d4:	9204      	str	r2, [sp, #16]
 80090d6:	9a05      	ldr	r2, [sp, #20]
 80090d8:	2101      	movs	r1, #1
 80090da:	441a      	add	r2, r3
 80090dc:	4620      	mov	r0, r4
 80090de:	9205      	str	r2, [sp, #20]
 80090e0:	f000 fbe6 	bl	80098b0 <__i2b>
 80090e4:	4607      	mov	r7, r0
 80090e6:	2d00      	cmp	r5, #0
 80090e8:	dd0c      	ble.n	8009104 <_dtoa_r+0x754>
 80090ea:	9b05      	ldr	r3, [sp, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	dd09      	ble.n	8009104 <_dtoa_r+0x754>
 80090f0:	42ab      	cmp	r3, r5
 80090f2:	9a04      	ldr	r2, [sp, #16]
 80090f4:	bfa8      	it	ge
 80090f6:	462b      	movge	r3, r5
 80090f8:	1ad2      	subs	r2, r2, r3
 80090fa:	9204      	str	r2, [sp, #16]
 80090fc:	9a05      	ldr	r2, [sp, #20]
 80090fe:	1aed      	subs	r5, r5, r3
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	9305      	str	r3, [sp, #20]
 8009104:	9b07      	ldr	r3, [sp, #28]
 8009106:	b31b      	cbz	r3, 8009150 <_dtoa_r+0x7a0>
 8009108:	9b08      	ldr	r3, [sp, #32]
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 80af 	beq.w	800926e <_dtoa_r+0x8be>
 8009110:	2e00      	cmp	r6, #0
 8009112:	dd13      	ble.n	800913c <_dtoa_r+0x78c>
 8009114:	4639      	mov	r1, r7
 8009116:	4632      	mov	r2, r6
 8009118:	4620      	mov	r0, r4
 800911a:	f000 fc89 	bl	8009a30 <__pow5mult>
 800911e:	ee18 2a10 	vmov	r2, s16
 8009122:	4601      	mov	r1, r0
 8009124:	4607      	mov	r7, r0
 8009126:	4620      	mov	r0, r4
 8009128:	f000 fbd8 	bl	80098dc <__multiply>
 800912c:	ee18 1a10 	vmov	r1, s16
 8009130:	4680      	mov	r8, r0
 8009132:	4620      	mov	r0, r4
 8009134:	f000 fb04 	bl	8009740 <_Bfree>
 8009138:	ee08 8a10 	vmov	s16, r8
 800913c:	9b07      	ldr	r3, [sp, #28]
 800913e:	1b9a      	subs	r2, r3, r6
 8009140:	d006      	beq.n	8009150 <_dtoa_r+0x7a0>
 8009142:	ee18 1a10 	vmov	r1, s16
 8009146:	4620      	mov	r0, r4
 8009148:	f000 fc72 	bl	8009a30 <__pow5mult>
 800914c:	ee08 0a10 	vmov	s16, r0
 8009150:	2101      	movs	r1, #1
 8009152:	4620      	mov	r0, r4
 8009154:	f000 fbac 	bl	80098b0 <__i2b>
 8009158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	4606      	mov	r6, r0
 800915e:	f340 8088 	ble.w	8009272 <_dtoa_r+0x8c2>
 8009162:	461a      	mov	r2, r3
 8009164:	4601      	mov	r1, r0
 8009166:	4620      	mov	r0, r4
 8009168:	f000 fc62 	bl	8009a30 <__pow5mult>
 800916c:	9b06      	ldr	r3, [sp, #24]
 800916e:	2b01      	cmp	r3, #1
 8009170:	4606      	mov	r6, r0
 8009172:	f340 8081 	ble.w	8009278 <_dtoa_r+0x8c8>
 8009176:	f04f 0800 	mov.w	r8, #0
 800917a:	6933      	ldr	r3, [r6, #16]
 800917c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009180:	6918      	ldr	r0, [r3, #16]
 8009182:	f000 fb45 	bl	8009810 <__hi0bits>
 8009186:	f1c0 0020 	rsb	r0, r0, #32
 800918a:	9b05      	ldr	r3, [sp, #20]
 800918c:	4418      	add	r0, r3
 800918e:	f010 001f 	ands.w	r0, r0, #31
 8009192:	f000 8092 	beq.w	80092ba <_dtoa_r+0x90a>
 8009196:	f1c0 0320 	rsb	r3, r0, #32
 800919a:	2b04      	cmp	r3, #4
 800919c:	f340 808a 	ble.w	80092b4 <_dtoa_r+0x904>
 80091a0:	f1c0 001c 	rsb	r0, r0, #28
 80091a4:	9b04      	ldr	r3, [sp, #16]
 80091a6:	4403      	add	r3, r0
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	9b05      	ldr	r3, [sp, #20]
 80091ac:	4403      	add	r3, r0
 80091ae:	4405      	add	r5, r0
 80091b0:	9305      	str	r3, [sp, #20]
 80091b2:	9b04      	ldr	r3, [sp, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	dd07      	ble.n	80091c8 <_dtoa_r+0x818>
 80091b8:	ee18 1a10 	vmov	r1, s16
 80091bc:	461a      	mov	r2, r3
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 fc90 	bl	8009ae4 <__lshift>
 80091c4:	ee08 0a10 	vmov	s16, r0
 80091c8:	9b05      	ldr	r3, [sp, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dd05      	ble.n	80091da <_dtoa_r+0x82a>
 80091ce:	4631      	mov	r1, r6
 80091d0:	461a      	mov	r2, r3
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 fc86 	bl	8009ae4 <__lshift>
 80091d8:	4606      	mov	r6, r0
 80091da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d06e      	beq.n	80092be <_dtoa_r+0x90e>
 80091e0:	ee18 0a10 	vmov	r0, s16
 80091e4:	4631      	mov	r1, r6
 80091e6:	f000 fced 	bl	8009bc4 <__mcmp>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	da67      	bge.n	80092be <_dtoa_r+0x90e>
 80091ee:	9b00      	ldr	r3, [sp, #0]
 80091f0:	3b01      	subs	r3, #1
 80091f2:	ee18 1a10 	vmov	r1, s16
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	220a      	movs	r2, #10
 80091fa:	2300      	movs	r3, #0
 80091fc:	4620      	mov	r0, r4
 80091fe:	f000 fac1 	bl	8009784 <__multadd>
 8009202:	9b08      	ldr	r3, [sp, #32]
 8009204:	ee08 0a10 	vmov	s16, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 81b1 	beq.w	8009570 <_dtoa_r+0xbc0>
 800920e:	2300      	movs	r3, #0
 8009210:	4639      	mov	r1, r7
 8009212:	220a      	movs	r2, #10
 8009214:	4620      	mov	r0, r4
 8009216:	f000 fab5 	bl	8009784 <__multadd>
 800921a:	9b02      	ldr	r3, [sp, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	4607      	mov	r7, r0
 8009220:	f300 808e 	bgt.w	8009340 <_dtoa_r+0x990>
 8009224:	9b06      	ldr	r3, [sp, #24]
 8009226:	2b02      	cmp	r3, #2
 8009228:	dc51      	bgt.n	80092ce <_dtoa_r+0x91e>
 800922a:	e089      	b.n	8009340 <_dtoa_r+0x990>
 800922c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800922e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009232:	e74b      	b.n	80090cc <_dtoa_r+0x71c>
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	1e5e      	subs	r6, r3, #1
 8009238:	9b07      	ldr	r3, [sp, #28]
 800923a:	42b3      	cmp	r3, r6
 800923c:	bfbf      	itttt	lt
 800923e:	9b07      	ldrlt	r3, [sp, #28]
 8009240:	9607      	strlt	r6, [sp, #28]
 8009242:	1af2      	sublt	r2, r6, r3
 8009244:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009246:	bfb6      	itet	lt
 8009248:	189b      	addlt	r3, r3, r2
 800924a:	1b9e      	subge	r6, r3, r6
 800924c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800924e:	9b03      	ldr	r3, [sp, #12]
 8009250:	bfb8      	it	lt
 8009252:	2600      	movlt	r6, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	bfb7      	itett	lt
 8009258:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800925c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009260:	1a9d      	sublt	r5, r3, r2
 8009262:	2300      	movlt	r3, #0
 8009264:	e734      	b.n	80090d0 <_dtoa_r+0x720>
 8009266:	9e07      	ldr	r6, [sp, #28]
 8009268:	9d04      	ldr	r5, [sp, #16]
 800926a:	9f08      	ldr	r7, [sp, #32]
 800926c:	e73b      	b.n	80090e6 <_dtoa_r+0x736>
 800926e:	9a07      	ldr	r2, [sp, #28]
 8009270:	e767      	b.n	8009142 <_dtoa_r+0x792>
 8009272:	9b06      	ldr	r3, [sp, #24]
 8009274:	2b01      	cmp	r3, #1
 8009276:	dc18      	bgt.n	80092aa <_dtoa_r+0x8fa>
 8009278:	f1ba 0f00 	cmp.w	sl, #0
 800927c:	d115      	bne.n	80092aa <_dtoa_r+0x8fa>
 800927e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009282:	b993      	cbnz	r3, 80092aa <_dtoa_r+0x8fa>
 8009284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009288:	0d1b      	lsrs	r3, r3, #20
 800928a:	051b      	lsls	r3, r3, #20
 800928c:	b183      	cbz	r3, 80092b0 <_dtoa_r+0x900>
 800928e:	9b04      	ldr	r3, [sp, #16]
 8009290:	3301      	adds	r3, #1
 8009292:	9304      	str	r3, [sp, #16]
 8009294:	9b05      	ldr	r3, [sp, #20]
 8009296:	3301      	adds	r3, #1
 8009298:	9305      	str	r3, [sp, #20]
 800929a:	f04f 0801 	mov.w	r8, #1
 800929e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f47f af6a 	bne.w	800917a <_dtoa_r+0x7ca>
 80092a6:	2001      	movs	r0, #1
 80092a8:	e76f      	b.n	800918a <_dtoa_r+0x7da>
 80092aa:	f04f 0800 	mov.w	r8, #0
 80092ae:	e7f6      	b.n	800929e <_dtoa_r+0x8ee>
 80092b0:	4698      	mov	r8, r3
 80092b2:	e7f4      	b.n	800929e <_dtoa_r+0x8ee>
 80092b4:	f43f af7d 	beq.w	80091b2 <_dtoa_r+0x802>
 80092b8:	4618      	mov	r0, r3
 80092ba:	301c      	adds	r0, #28
 80092bc:	e772      	b.n	80091a4 <_dtoa_r+0x7f4>
 80092be:	9b03      	ldr	r3, [sp, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dc37      	bgt.n	8009334 <_dtoa_r+0x984>
 80092c4:	9b06      	ldr	r3, [sp, #24]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	dd34      	ble.n	8009334 <_dtoa_r+0x984>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	9302      	str	r3, [sp, #8]
 80092ce:	9b02      	ldr	r3, [sp, #8]
 80092d0:	b96b      	cbnz	r3, 80092ee <_dtoa_r+0x93e>
 80092d2:	4631      	mov	r1, r6
 80092d4:	2205      	movs	r2, #5
 80092d6:	4620      	mov	r0, r4
 80092d8:	f000 fa54 	bl	8009784 <__multadd>
 80092dc:	4601      	mov	r1, r0
 80092de:	4606      	mov	r6, r0
 80092e0:	ee18 0a10 	vmov	r0, s16
 80092e4:	f000 fc6e 	bl	8009bc4 <__mcmp>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	f73f adbb 	bgt.w	8008e64 <_dtoa_r+0x4b4>
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	9d01      	ldr	r5, [sp, #4]
 80092f2:	43db      	mvns	r3, r3
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	f04f 0800 	mov.w	r8, #0
 80092fa:	4631      	mov	r1, r6
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 fa1f 	bl	8009740 <_Bfree>
 8009302:	2f00      	cmp	r7, #0
 8009304:	f43f aea4 	beq.w	8009050 <_dtoa_r+0x6a0>
 8009308:	f1b8 0f00 	cmp.w	r8, #0
 800930c:	d005      	beq.n	800931a <_dtoa_r+0x96a>
 800930e:	45b8      	cmp	r8, r7
 8009310:	d003      	beq.n	800931a <_dtoa_r+0x96a>
 8009312:	4641      	mov	r1, r8
 8009314:	4620      	mov	r0, r4
 8009316:	f000 fa13 	bl	8009740 <_Bfree>
 800931a:	4639      	mov	r1, r7
 800931c:	4620      	mov	r0, r4
 800931e:	f000 fa0f 	bl	8009740 <_Bfree>
 8009322:	e695      	b.n	8009050 <_dtoa_r+0x6a0>
 8009324:	2600      	movs	r6, #0
 8009326:	4637      	mov	r7, r6
 8009328:	e7e1      	b.n	80092ee <_dtoa_r+0x93e>
 800932a:	9700      	str	r7, [sp, #0]
 800932c:	4637      	mov	r7, r6
 800932e:	e599      	b.n	8008e64 <_dtoa_r+0x4b4>
 8009330:	40240000 	.word	0x40240000
 8009334:	9b08      	ldr	r3, [sp, #32]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 80ca 	beq.w	80094d0 <_dtoa_r+0xb20>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	9302      	str	r3, [sp, #8]
 8009340:	2d00      	cmp	r5, #0
 8009342:	dd05      	ble.n	8009350 <_dtoa_r+0x9a0>
 8009344:	4639      	mov	r1, r7
 8009346:	462a      	mov	r2, r5
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fbcb 	bl	8009ae4 <__lshift>
 800934e:	4607      	mov	r7, r0
 8009350:	f1b8 0f00 	cmp.w	r8, #0
 8009354:	d05b      	beq.n	800940e <_dtoa_r+0xa5e>
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	4620      	mov	r0, r4
 800935a:	f000 f9b1 	bl	80096c0 <_Balloc>
 800935e:	4605      	mov	r5, r0
 8009360:	b928      	cbnz	r0, 800936e <_dtoa_r+0x9be>
 8009362:	4b87      	ldr	r3, [pc, #540]	; (8009580 <_dtoa_r+0xbd0>)
 8009364:	4602      	mov	r2, r0
 8009366:	f240 21ea 	movw	r1, #746	; 0x2ea
 800936a:	f7ff bb3b 	b.w	80089e4 <_dtoa_r+0x34>
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	3202      	adds	r2, #2
 8009372:	0092      	lsls	r2, r2, #2
 8009374:	f107 010c 	add.w	r1, r7, #12
 8009378:	300c      	adds	r0, #12
 800937a:	f7fe fb67 	bl	8007a4c <memcpy>
 800937e:	2201      	movs	r2, #1
 8009380:	4629      	mov	r1, r5
 8009382:	4620      	mov	r0, r4
 8009384:	f000 fbae 	bl	8009ae4 <__lshift>
 8009388:	9b01      	ldr	r3, [sp, #4]
 800938a:	f103 0901 	add.w	r9, r3, #1
 800938e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009392:	4413      	add	r3, r2
 8009394:	9305      	str	r3, [sp, #20]
 8009396:	f00a 0301 	and.w	r3, sl, #1
 800939a:	46b8      	mov	r8, r7
 800939c:	9304      	str	r3, [sp, #16]
 800939e:	4607      	mov	r7, r0
 80093a0:	4631      	mov	r1, r6
 80093a2:	ee18 0a10 	vmov	r0, s16
 80093a6:	f7ff fa75 	bl	8008894 <quorem>
 80093aa:	4641      	mov	r1, r8
 80093ac:	9002      	str	r0, [sp, #8]
 80093ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093b2:	ee18 0a10 	vmov	r0, s16
 80093b6:	f000 fc05 	bl	8009bc4 <__mcmp>
 80093ba:	463a      	mov	r2, r7
 80093bc:	9003      	str	r0, [sp, #12]
 80093be:	4631      	mov	r1, r6
 80093c0:	4620      	mov	r0, r4
 80093c2:	f000 fc1b 	bl	8009bfc <__mdiff>
 80093c6:	68c2      	ldr	r2, [r0, #12]
 80093c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80093cc:	4605      	mov	r5, r0
 80093ce:	bb02      	cbnz	r2, 8009412 <_dtoa_r+0xa62>
 80093d0:	4601      	mov	r1, r0
 80093d2:	ee18 0a10 	vmov	r0, s16
 80093d6:	f000 fbf5 	bl	8009bc4 <__mcmp>
 80093da:	4602      	mov	r2, r0
 80093dc:	4629      	mov	r1, r5
 80093de:	4620      	mov	r0, r4
 80093e0:	9207      	str	r2, [sp, #28]
 80093e2:	f000 f9ad 	bl	8009740 <_Bfree>
 80093e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80093ea:	ea43 0102 	orr.w	r1, r3, r2
 80093ee:	9b04      	ldr	r3, [sp, #16]
 80093f0:	430b      	orrs	r3, r1
 80093f2:	464d      	mov	r5, r9
 80093f4:	d10f      	bne.n	8009416 <_dtoa_r+0xa66>
 80093f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80093fa:	d02a      	beq.n	8009452 <_dtoa_r+0xaa2>
 80093fc:	9b03      	ldr	r3, [sp, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	dd02      	ble.n	8009408 <_dtoa_r+0xa58>
 8009402:	9b02      	ldr	r3, [sp, #8]
 8009404:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009408:	f88b a000 	strb.w	sl, [fp]
 800940c:	e775      	b.n	80092fa <_dtoa_r+0x94a>
 800940e:	4638      	mov	r0, r7
 8009410:	e7ba      	b.n	8009388 <_dtoa_r+0x9d8>
 8009412:	2201      	movs	r2, #1
 8009414:	e7e2      	b.n	80093dc <_dtoa_r+0xa2c>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	db04      	blt.n	8009426 <_dtoa_r+0xa76>
 800941c:	9906      	ldr	r1, [sp, #24]
 800941e:	430b      	orrs	r3, r1
 8009420:	9904      	ldr	r1, [sp, #16]
 8009422:	430b      	orrs	r3, r1
 8009424:	d122      	bne.n	800946c <_dtoa_r+0xabc>
 8009426:	2a00      	cmp	r2, #0
 8009428:	ddee      	ble.n	8009408 <_dtoa_r+0xa58>
 800942a:	ee18 1a10 	vmov	r1, s16
 800942e:	2201      	movs	r2, #1
 8009430:	4620      	mov	r0, r4
 8009432:	f000 fb57 	bl	8009ae4 <__lshift>
 8009436:	4631      	mov	r1, r6
 8009438:	ee08 0a10 	vmov	s16, r0
 800943c:	f000 fbc2 	bl	8009bc4 <__mcmp>
 8009440:	2800      	cmp	r0, #0
 8009442:	dc03      	bgt.n	800944c <_dtoa_r+0xa9c>
 8009444:	d1e0      	bne.n	8009408 <_dtoa_r+0xa58>
 8009446:	f01a 0f01 	tst.w	sl, #1
 800944a:	d0dd      	beq.n	8009408 <_dtoa_r+0xa58>
 800944c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009450:	d1d7      	bne.n	8009402 <_dtoa_r+0xa52>
 8009452:	2339      	movs	r3, #57	; 0x39
 8009454:	f88b 3000 	strb.w	r3, [fp]
 8009458:	462b      	mov	r3, r5
 800945a:	461d      	mov	r5, r3
 800945c:	3b01      	subs	r3, #1
 800945e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009462:	2a39      	cmp	r2, #57	; 0x39
 8009464:	d071      	beq.n	800954a <_dtoa_r+0xb9a>
 8009466:	3201      	adds	r2, #1
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	e746      	b.n	80092fa <_dtoa_r+0x94a>
 800946c:	2a00      	cmp	r2, #0
 800946e:	dd07      	ble.n	8009480 <_dtoa_r+0xad0>
 8009470:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009474:	d0ed      	beq.n	8009452 <_dtoa_r+0xaa2>
 8009476:	f10a 0301 	add.w	r3, sl, #1
 800947a:	f88b 3000 	strb.w	r3, [fp]
 800947e:	e73c      	b.n	80092fa <_dtoa_r+0x94a>
 8009480:	9b05      	ldr	r3, [sp, #20]
 8009482:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009486:	4599      	cmp	r9, r3
 8009488:	d047      	beq.n	800951a <_dtoa_r+0xb6a>
 800948a:	ee18 1a10 	vmov	r1, s16
 800948e:	2300      	movs	r3, #0
 8009490:	220a      	movs	r2, #10
 8009492:	4620      	mov	r0, r4
 8009494:	f000 f976 	bl	8009784 <__multadd>
 8009498:	45b8      	cmp	r8, r7
 800949a:	ee08 0a10 	vmov	s16, r0
 800949e:	f04f 0300 	mov.w	r3, #0
 80094a2:	f04f 020a 	mov.w	r2, #10
 80094a6:	4641      	mov	r1, r8
 80094a8:	4620      	mov	r0, r4
 80094aa:	d106      	bne.n	80094ba <_dtoa_r+0xb0a>
 80094ac:	f000 f96a 	bl	8009784 <__multadd>
 80094b0:	4680      	mov	r8, r0
 80094b2:	4607      	mov	r7, r0
 80094b4:	f109 0901 	add.w	r9, r9, #1
 80094b8:	e772      	b.n	80093a0 <_dtoa_r+0x9f0>
 80094ba:	f000 f963 	bl	8009784 <__multadd>
 80094be:	4639      	mov	r1, r7
 80094c0:	4680      	mov	r8, r0
 80094c2:	2300      	movs	r3, #0
 80094c4:	220a      	movs	r2, #10
 80094c6:	4620      	mov	r0, r4
 80094c8:	f000 f95c 	bl	8009784 <__multadd>
 80094cc:	4607      	mov	r7, r0
 80094ce:	e7f1      	b.n	80094b4 <_dtoa_r+0xb04>
 80094d0:	9b03      	ldr	r3, [sp, #12]
 80094d2:	9302      	str	r3, [sp, #8]
 80094d4:	9d01      	ldr	r5, [sp, #4]
 80094d6:	ee18 0a10 	vmov	r0, s16
 80094da:	4631      	mov	r1, r6
 80094dc:	f7ff f9da 	bl	8008894 <quorem>
 80094e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094e4:	9b01      	ldr	r3, [sp, #4]
 80094e6:	f805 ab01 	strb.w	sl, [r5], #1
 80094ea:	1aea      	subs	r2, r5, r3
 80094ec:	9b02      	ldr	r3, [sp, #8]
 80094ee:	4293      	cmp	r3, r2
 80094f0:	dd09      	ble.n	8009506 <_dtoa_r+0xb56>
 80094f2:	ee18 1a10 	vmov	r1, s16
 80094f6:	2300      	movs	r3, #0
 80094f8:	220a      	movs	r2, #10
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 f942 	bl	8009784 <__multadd>
 8009500:	ee08 0a10 	vmov	s16, r0
 8009504:	e7e7      	b.n	80094d6 <_dtoa_r+0xb26>
 8009506:	9b02      	ldr	r3, [sp, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	bfc8      	it	gt
 800950c:	461d      	movgt	r5, r3
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	bfd8      	it	le
 8009512:	2501      	movle	r5, #1
 8009514:	441d      	add	r5, r3
 8009516:	f04f 0800 	mov.w	r8, #0
 800951a:	ee18 1a10 	vmov	r1, s16
 800951e:	2201      	movs	r2, #1
 8009520:	4620      	mov	r0, r4
 8009522:	f000 fadf 	bl	8009ae4 <__lshift>
 8009526:	4631      	mov	r1, r6
 8009528:	ee08 0a10 	vmov	s16, r0
 800952c:	f000 fb4a 	bl	8009bc4 <__mcmp>
 8009530:	2800      	cmp	r0, #0
 8009532:	dc91      	bgt.n	8009458 <_dtoa_r+0xaa8>
 8009534:	d102      	bne.n	800953c <_dtoa_r+0xb8c>
 8009536:	f01a 0f01 	tst.w	sl, #1
 800953a:	d18d      	bne.n	8009458 <_dtoa_r+0xaa8>
 800953c:	462b      	mov	r3, r5
 800953e:	461d      	mov	r5, r3
 8009540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009544:	2a30      	cmp	r2, #48	; 0x30
 8009546:	d0fa      	beq.n	800953e <_dtoa_r+0xb8e>
 8009548:	e6d7      	b.n	80092fa <_dtoa_r+0x94a>
 800954a:	9a01      	ldr	r2, [sp, #4]
 800954c:	429a      	cmp	r2, r3
 800954e:	d184      	bne.n	800945a <_dtoa_r+0xaaa>
 8009550:	9b00      	ldr	r3, [sp, #0]
 8009552:	3301      	adds	r3, #1
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	2331      	movs	r3, #49	; 0x31
 8009558:	7013      	strb	r3, [r2, #0]
 800955a:	e6ce      	b.n	80092fa <_dtoa_r+0x94a>
 800955c:	4b09      	ldr	r3, [pc, #36]	; (8009584 <_dtoa_r+0xbd4>)
 800955e:	f7ff ba95 	b.w	8008a8c <_dtoa_r+0xdc>
 8009562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009564:	2b00      	cmp	r3, #0
 8009566:	f47f aa6e 	bne.w	8008a46 <_dtoa_r+0x96>
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <_dtoa_r+0xbd8>)
 800956c:	f7ff ba8e 	b.w	8008a8c <_dtoa_r+0xdc>
 8009570:	9b02      	ldr	r3, [sp, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	dcae      	bgt.n	80094d4 <_dtoa_r+0xb24>
 8009576:	9b06      	ldr	r3, [sp, #24]
 8009578:	2b02      	cmp	r3, #2
 800957a:	f73f aea8 	bgt.w	80092ce <_dtoa_r+0x91e>
 800957e:	e7a9      	b.n	80094d4 <_dtoa_r+0xb24>
 8009580:	0800a8cf 	.word	0x0800a8cf
 8009584:	0800a82c 	.word	0x0800a82c
 8009588:	0800a850 	.word	0x0800a850

0800958c <_localeconv_r>:
 800958c:	4800      	ldr	r0, [pc, #0]	; (8009590 <_localeconv_r+0x4>)
 800958e:	4770      	bx	lr
 8009590:	200001a0 	.word	0x200001a0

08009594 <_lseek_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d07      	ldr	r5, [pc, #28]	; (80095b4 <_lseek_r+0x20>)
 8009598:	4604      	mov	r4, r0
 800959a:	4608      	mov	r0, r1
 800959c:	4611      	mov	r1, r2
 800959e:	2200      	movs	r2, #0
 80095a0:	602a      	str	r2, [r5, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f7f8 fb7a 	bl	8001c9c <_lseek>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_lseek_r+0x1e>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_lseek_r+0x1e>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	2000503c 	.word	0x2000503c

080095b8 <__swhatbuf_r>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	460e      	mov	r6, r1
 80095bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c0:	2900      	cmp	r1, #0
 80095c2:	b096      	sub	sp, #88	; 0x58
 80095c4:	4614      	mov	r4, r2
 80095c6:	461d      	mov	r5, r3
 80095c8:	da08      	bge.n	80095dc <__swhatbuf_r+0x24>
 80095ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	602a      	str	r2, [r5, #0]
 80095d2:	061a      	lsls	r2, r3, #24
 80095d4:	d410      	bmi.n	80095f8 <__swhatbuf_r+0x40>
 80095d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095da:	e00e      	b.n	80095fa <__swhatbuf_r+0x42>
 80095dc:	466a      	mov	r2, sp
 80095de:	f000 fdb9 	bl	800a154 <_fstat_r>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	dbf1      	blt.n	80095ca <__swhatbuf_r+0x12>
 80095e6:	9a01      	ldr	r2, [sp, #4]
 80095e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095f0:	425a      	negs	r2, r3
 80095f2:	415a      	adcs	r2, r3
 80095f4:	602a      	str	r2, [r5, #0]
 80095f6:	e7ee      	b.n	80095d6 <__swhatbuf_r+0x1e>
 80095f8:	2340      	movs	r3, #64	; 0x40
 80095fa:	2000      	movs	r0, #0
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	b016      	add	sp, #88	; 0x58
 8009600:	bd70      	pop	{r4, r5, r6, pc}
	...

08009604 <__smakebuf_r>:
 8009604:	898b      	ldrh	r3, [r1, #12]
 8009606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009608:	079d      	lsls	r5, r3, #30
 800960a:	4606      	mov	r6, r0
 800960c:	460c      	mov	r4, r1
 800960e:	d507      	bpl.n	8009620 <__smakebuf_r+0x1c>
 8009610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	6123      	str	r3, [r4, #16]
 8009618:	2301      	movs	r3, #1
 800961a:	6163      	str	r3, [r4, #20]
 800961c:	b002      	add	sp, #8
 800961e:	bd70      	pop	{r4, r5, r6, pc}
 8009620:	ab01      	add	r3, sp, #4
 8009622:	466a      	mov	r2, sp
 8009624:	f7ff ffc8 	bl	80095b8 <__swhatbuf_r>
 8009628:	9900      	ldr	r1, [sp, #0]
 800962a:	4605      	mov	r5, r0
 800962c:	4630      	mov	r0, r6
 800962e:	f7fe fa8f 	bl	8007b50 <_malloc_r>
 8009632:	b948      	cbnz	r0, 8009648 <__smakebuf_r+0x44>
 8009634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009638:	059a      	lsls	r2, r3, #22
 800963a:	d4ef      	bmi.n	800961c <__smakebuf_r+0x18>
 800963c:	f023 0303 	bic.w	r3, r3, #3
 8009640:	f043 0302 	orr.w	r3, r3, #2
 8009644:	81a3      	strh	r3, [r4, #12]
 8009646:	e7e3      	b.n	8009610 <__smakebuf_r+0xc>
 8009648:	4b0d      	ldr	r3, [pc, #52]	; (8009680 <__smakebuf_r+0x7c>)
 800964a:	62b3      	str	r3, [r6, #40]	; 0x28
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	6020      	str	r0, [r4, #0]
 8009650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009654:	81a3      	strh	r3, [r4, #12]
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	6163      	str	r3, [r4, #20]
 800965a:	9b01      	ldr	r3, [sp, #4]
 800965c:	6120      	str	r0, [r4, #16]
 800965e:	b15b      	cbz	r3, 8009678 <__smakebuf_r+0x74>
 8009660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009664:	4630      	mov	r0, r6
 8009666:	f000 fd87 	bl	800a178 <_isatty_r>
 800966a:	b128      	cbz	r0, 8009678 <__smakebuf_r+0x74>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f023 0303 	bic.w	r3, r3, #3
 8009672:	f043 0301 	orr.w	r3, r3, #1
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	89a0      	ldrh	r0, [r4, #12]
 800967a:	4305      	orrs	r5, r0
 800967c:	81a5      	strh	r5, [r4, #12]
 800967e:	e7cd      	b.n	800961c <__smakebuf_r+0x18>
 8009680:	08007839 	.word	0x08007839

08009684 <__ascii_mbtowc>:
 8009684:	b082      	sub	sp, #8
 8009686:	b901      	cbnz	r1, 800968a <__ascii_mbtowc+0x6>
 8009688:	a901      	add	r1, sp, #4
 800968a:	b142      	cbz	r2, 800969e <__ascii_mbtowc+0x1a>
 800968c:	b14b      	cbz	r3, 80096a2 <__ascii_mbtowc+0x1e>
 800968e:	7813      	ldrb	r3, [r2, #0]
 8009690:	600b      	str	r3, [r1, #0]
 8009692:	7812      	ldrb	r2, [r2, #0]
 8009694:	1e10      	subs	r0, r2, #0
 8009696:	bf18      	it	ne
 8009698:	2001      	movne	r0, #1
 800969a:	b002      	add	sp, #8
 800969c:	4770      	bx	lr
 800969e:	4610      	mov	r0, r2
 80096a0:	e7fb      	b.n	800969a <__ascii_mbtowc+0x16>
 80096a2:	f06f 0001 	mvn.w	r0, #1
 80096a6:	e7f8      	b.n	800969a <__ascii_mbtowc+0x16>

080096a8 <__malloc_lock>:
 80096a8:	4801      	ldr	r0, [pc, #4]	; (80096b0 <__malloc_lock+0x8>)
 80096aa:	f7fe b9bc 	b.w	8007a26 <__retarget_lock_acquire_recursive>
 80096ae:	bf00      	nop
 80096b0:	20005030 	.word	0x20005030

080096b4 <__malloc_unlock>:
 80096b4:	4801      	ldr	r0, [pc, #4]	; (80096bc <__malloc_unlock+0x8>)
 80096b6:	f7fe b9b7 	b.w	8007a28 <__retarget_lock_release_recursive>
 80096ba:	bf00      	nop
 80096bc:	20005030 	.word	0x20005030

080096c0 <_Balloc>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096c4:	4604      	mov	r4, r0
 80096c6:	460d      	mov	r5, r1
 80096c8:	b976      	cbnz	r6, 80096e8 <_Balloc+0x28>
 80096ca:	2010      	movs	r0, #16
 80096cc:	f7fe f9ae 	bl	8007a2c <malloc>
 80096d0:	4602      	mov	r2, r0
 80096d2:	6260      	str	r0, [r4, #36]	; 0x24
 80096d4:	b920      	cbnz	r0, 80096e0 <_Balloc+0x20>
 80096d6:	4b18      	ldr	r3, [pc, #96]	; (8009738 <_Balloc+0x78>)
 80096d8:	4818      	ldr	r0, [pc, #96]	; (800973c <_Balloc+0x7c>)
 80096da:	2166      	movs	r1, #102	; 0x66
 80096dc:	f000 fd0a 	bl	800a0f4 <__assert_func>
 80096e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096e4:	6006      	str	r6, [r0, #0]
 80096e6:	60c6      	str	r6, [r0, #12]
 80096e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096ea:	68f3      	ldr	r3, [r6, #12]
 80096ec:	b183      	cbz	r3, 8009710 <_Balloc+0x50>
 80096ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096f6:	b9b8      	cbnz	r0, 8009728 <_Balloc+0x68>
 80096f8:	2101      	movs	r1, #1
 80096fa:	fa01 f605 	lsl.w	r6, r1, r5
 80096fe:	1d72      	adds	r2, r6, #5
 8009700:	0092      	lsls	r2, r2, #2
 8009702:	4620      	mov	r0, r4
 8009704:	f000 fb60 	bl	8009dc8 <_calloc_r>
 8009708:	b160      	cbz	r0, 8009724 <_Balloc+0x64>
 800970a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800970e:	e00e      	b.n	800972e <_Balloc+0x6e>
 8009710:	2221      	movs	r2, #33	; 0x21
 8009712:	2104      	movs	r1, #4
 8009714:	4620      	mov	r0, r4
 8009716:	f000 fb57 	bl	8009dc8 <_calloc_r>
 800971a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800971c:	60f0      	str	r0, [r6, #12]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1e4      	bne.n	80096ee <_Balloc+0x2e>
 8009724:	2000      	movs	r0, #0
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	6802      	ldr	r2, [r0, #0]
 800972a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800972e:	2300      	movs	r3, #0
 8009730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009734:	e7f7      	b.n	8009726 <_Balloc+0x66>
 8009736:	bf00      	nop
 8009738:	0800a85d 	.word	0x0800a85d
 800973c:	0800a8ea 	.word	0x0800a8ea

08009740 <_Bfree>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009744:	4605      	mov	r5, r0
 8009746:	460c      	mov	r4, r1
 8009748:	b976      	cbnz	r6, 8009768 <_Bfree+0x28>
 800974a:	2010      	movs	r0, #16
 800974c:	f7fe f96e 	bl	8007a2c <malloc>
 8009750:	4602      	mov	r2, r0
 8009752:	6268      	str	r0, [r5, #36]	; 0x24
 8009754:	b920      	cbnz	r0, 8009760 <_Bfree+0x20>
 8009756:	4b09      	ldr	r3, [pc, #36]	; (800977c <_Bfree+0x3c>)
 8009758:	4809      	ldr	r0, [pc, #36]	; (8009780 <_Bfree+0x40>)
 800975a:	218a      	movs	r1, #138	; 0x8a
 800975c:	f000 fcca 	bl	800a0f4 <__assert_func>
 8009760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009764:	6006      	str	r6, [r0, #0]
 8009766:	60c6      	str	r6, [r0, #12]
 8009768:	b13c      	cbz	r4, 800977a <_Bfree+0x3a>
 800976a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800976c:	6862      	ldr	r2, [r4, #4]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009774:	6021      	str	r1, [r4, #0]
 8009776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	0800a85d 	.word	0x0800a85d
 8009780:	0800a8ea 	.word	0x0800a8ea

08009784 <__multadd>:
 8009784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009788:	690d      	ldr	r5, [r1, #16]
 800978a:	4607      	mov	r7, r0
 800978c:	460c      	mov	r4, r1
 800978e:	461e      	mov	r6, r3
 8009790:	f101 0c14 	add.w	ip, r1, #20
 8009794:	2000      	movs	r0, #0
 8009796:	f8dc 3000 	ldr.w	r3, [ip]
 800979a:	b299      	uxth	r1, r3
 800979c:	fb02 6101 	mla	r1, r2, r1, r6
 80097a0:	0c1e      	lsrs	r6, r3, #16
 80097a2:	0c0b      	lsrs	r3, r1, #16
 80097a4:	fb02 3306 	mla	r3, r2, r6, r3
 80097a8:	b289      	uxth	r1, r1
 80097aa:	3001      	adds	r0, #1
 80097ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097b0:	4285      	cmp	r5, r0
 80097b2:	f84c 1b04 	str.w	r1, [ip], #4
 80097b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097ba:	dcec      	bgt.n	8009796 <__multadd+0x12>
 80097bc:	b30e      	cbz	r6, 8009802 <__multadd+0x7e>
 80097be:	68a3      	ldr	r3, [r4, #8]
 80097c0:	42ab      	cmp	r3, r5
 80097c2:	dc19      	bgt.n	80097f8 <__multadd+0x74>
 80097c4:	6861      	ldr	r1, [r4, #4]
 80097c6:	4638      	mov	r0, r7
 80097c8:	3101      	adds	r1, #1
 80097ca:	f7ff ff79 	bl	80096c0 <_Balloc>
 80097ce:	4680      	mov	r8, r0
 80097d0:	b928      	cbnz	r0, 80097de <__multadd+0x5a>
 80097d2:	4602      	mov	r2, r0
 80097d4:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <__multadd+0x84>)
 80097d6:	480d      	ldr	r0, [pc, #52]	; (800980c <__multadd+0x88>)
 80097d8:	21b5      	movs	r1, #181	; 0xb5
 80097da:	f000 fc8b 	bl	800a0f4 <__assert_func>
 80097de:	6922      	ldr	r2, [r4, #16]
 80097e0:	3202      	adds	r2, #2
 80097e2:	f104 010c 	add.w	r1, r4, #12
 80097e6:	0092      	lsls	r2, r2, #2
 80097e8:	300c      	adds	r0, #12
 80097ea:	f7fe f92f 	bl	8007a4c <memcpy>
 80097ee:	4621      	mov	r1, r4
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7ff ffa5 	bl	8009740 <_Bfree>
 80097f6:	4644      	mov	r4, r8
 80097f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097fc:	3501      	adds	r5, #1
 80097fe:	615e      	str	r6, [r3, #20]
 8009800:	6125      	str	r5, [r4, #16]
 8009802:	4620      	mov	r0, r4
 8009804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009808:	0800a8cf 	.word	0x0800a8cf
 800980c:	0800a8ea 	.word	0x0800a8ea

08009810 <__hi0bits>:
 8009810:	0c03      	lsrs	r3, r0, #16
 8009812:	041b      	lsls	r3, r3, #16
 8009814:	b9d3      	cbnz	r3, 800984c <__hi0bits+0x3c>
 8009816:	0400      	lsls	r0, r0, #16
 8009818:	2310      	movs	r3, #16
 800981a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800981e:	bf04      	itt	eq
 8009820:	0200      	lsleq	r0, r0, #8
 8009822:	3308      	addeq	r3, #8
 8009824:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009828:	bf04      	itt	eq
 800982a:	0100      	lsleq	r0, r0, #4
 800982c:	3304      	addeq	r3, #4
 800982e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009832:	bf04      	itt	eq
 8009834:	0080      	lsleq	r0, r0, #2
 8009836:	3302      	addeq	r3, #2
 8009838:	2800      	cmp	r0, #0
 800983a:	db05      	blt.n	8009848 <__hi0bits+0x38>
 800983c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009840:	f103 0301 	add.w	r3, r3, #1
 8009844:	bf08      	it	eq
 8009846:	2320      	moveq	r3, #32
 8009848:	4618      	mov	r0, r3
 800984a:	4770      	bx	lr
 800984c:	2300      	movs	r3, #0
 800984e:	e7e4      	b.n	800981a <__hi0bits+0xa>

08009850 <__lo0bits>:
 8009850:	6803      	ldr	r3, [r0, #0]
 8009852:	f013 0207 	ands.w	r2, r3, #7
 8009856:	4601      	mov	r1, r0
 8009858:	d00b      	beq.n	8009872 <__lo0bits+0x22>
 800985a:	07da      	lsls	r2, r3, #31
 800985c:	d423      	bmi.n	80098a6 <__lo0bits+0x56>
 800985e:	0798      	lsls	r0, r3, #30
 8009860:	bf49      	itett	mi
 8009862:	085b      	lsrmi	r3, r3, #1
 8009864:	089b      	lsrpl	r3, r3, #2
 8009866:	2001      	movmi	r0, #1
 8009868:	600b      	strmi	r3, [r1, #0]
 800986a:	bf5c      	itt	pl
 800986c:	600b      	strpl	r3, [r1, #0]
 800986e:	2002      	movpl	r0, #2
 8009870:	4770      	bx	lr
 8009872:	b298      	uxth	r0, r3
 8009874:	b9a8      	cbnz	r0, 80098a2 <__lo0bits+0x52>
 8009876:	0c1b      	lsrs	r3, r3, #16
 8009878:	2010      	movs	r0, #16
 800987a:	b2da      	uxtb	r2, r3
 800987c:	b90a      	cbnz	r2, 8009882 <__lo0bits+0x32>
 800987e:	3008      	adds	r0, #8
 8009880:	0a1b      	lsrs	r3, r3, #8
 8009882:	071a      	lsls	r2, r3, #28
 8009884:	bf04      	itt	eq
 8009886:	091b      	lsreq	r3, r3, #4
 8009888:	3004      	addeq	r0, #4
 800988a:	079a      	lsls	r2, r3, #30
 800988c:	bf04      	itt	eq
 800988e:	089b      	lsreq	r3, r3, #2
 8009890:	3002      	addeq	r0, #2
 8009892:	07da      	lsls	r2, r3, #31
 8009894:	d403      	bmi.n	800989e <__lo0bits+0x4e>
 8009896:	085b      	lsrs	r3, r3, #1
 8009898:	f100 0001 	add.w	r0, r0, #1
 800989c:	d005      	beq.n	80098aa <__lo0bits+0x5a>
 800989e:	600b      	str	r3, [r1, #0]
 80098a0:	4770      	bx	lr
 80098a2:	4610      	mov	r0, r2
 80098a4:	e7e9      	b.n	800987a <__lo0bits+0x2a>
 80098a6:	2000      	movs	r0, #0
 80098a8:	4770      	bx	lr
 80098aa:	2020      	movs	r0, #32
 80098ac:	4770      	bx	lr
	...

080098b0 <__i2b>:
 80098b0:	b510      	push	{r4, lr}
 80098b2:	460c      	mov	r4, r1
 80098b4:	2101      	movs	r1, #1
 80098b6:	f7ff ff03 	bl	80096c0 <_Balloc>
 80098ba:	4602      	mov	r2, r0
 80098bc:	b928      	cbnz	r0, 80098ca <__i2b+0x1a>
 80098be:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <__i2b+0x24>)
 80098c0:	4805      	ldr	r0, [pc, #20]	; (80098d8 <__i2b+0x28>)
 80098c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098c6:	f000 fc15 	bl	800a0f4 <__assert_func>
 80098ca:	2301      	movs	r3, #1
 80098cc:	6144      	str	r4, [r0, #20]
 80098ce:	6103      	str	r3, [r0, #16]
 80098d0:	bd10      	pop	{r4, pc}
 80098d2:	bf00      	nop
 80098d4:	0800a8cf 	.word	0x0800a8cf
 80098d8:	0800a8ea 	.word	0x0800a8ea

080098dc <__multiply>:
 80098dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e0:	4691      	mov	r9, r2
 80098e2:	690a      	ldr	r2, [r1, #16]
 80098e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	bfb8      	it	lt
 80098ec:	460b      	movlt	r3, r1
 80098ee:	460c      	mov	r4, r1
 80098f0:	bfbc      	itt	lt
 80098f2:	464c      	movlt	r4, r9
 80098f4:	4699      	movlt	r9, r3
 80098f6:	6927      	ldr	r7, [r4, #16]
 80098f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098fc:	68a3      	ldr	r3, [r4, #8]
 80098fe:	6861      	ldr	r1, [r4, #4]
 8009900:	eb07 060a 	add.w	r6, r7, sl
 8009904:	42b3      	cmp	r3, r6
 8009906:	b085      	sub	sp, #20
 8009908:	bfb8      	it	lt
 800990a:	3101      	addlt	r1, #1
 800990c:	f7ff fed8 	bl	80096c0 <_Balloc>
 8009910:	b930      	cbnz	r0, 8009920 <__multiply+0x44>
 8009912:	4602      	mov	r2, r0
 8009914:	4b44      	ldr	r3, [pc, #272]	; (8009a28 <__multiply+0x14c>)
 8009916:	4845      	ldr	r0, [pc, #276]	; (8009a2c <__multiply+0x150>)
 8009918:	f240 115d 	movw	r1, #349	; 0x15d
 800991c:	f000 fbea 	bl	800a0f4 <__assert_func>
 8009920:	f100 0514 	add.w	r5, r0, #20
 8009924:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009928:	462b      	mov	r3, r5
 800992a:	2200      	movs	r2, #0
 800992c:	4543      	cmp	r3, r8
 800992e:	d321      	bcc.n	8009974 <__multiply+0x98>
 8009930:	f104 0314 	add.w	r3, r4, #20
 8009934:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009938:	f109 0314 	add.w	r3, r9, #20
 800993c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009940:	9202      	str	r2, [sp, #8]
 8009942:	1b3a      	subs	r2, r7, r4
 8009944:	3a15      	subs	r2, #21
 8009946:	f022 0203 	bic.w	r2, r2, #3
 800994a:	3204      	adds	r2, #4
 800994c:	f104 0115 	add.w	r1, r4, #21
 8009950:	428f      	cmp	r7, r1
 8009952:	bf38      	it	cc
 8009954:	2204      	movcc	r2, #4
 8009956:	9201      	str	r2, [sp, #4]
 8009958:	9a02      	ldr	r2, [sp, #8]
 800995a:	9303      	str	r3, [sp, #12]
 800995c:	429a      	cmp	r2, r3
 800995e:	d80c      	bhi.n	800997a <__multiply+0x9e>
 8009960:	2e00      	cmp	r6, #0
 8009962:	dd03      	ble.n	800996c <__multiply+0x90>
 8009964:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009968:	2b00      	cmp	r3, #0
 800996a:	d05a      	beq.n	8009a22 <__multiply+0x146>
 800996c:	6106      	str	r6, [r0, #16]
 800996e:	b005      	add	sp, #20
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	f843 2b04 	str.w	r2, [r3], #4
 8009978:	e7d8      	b.n	800992c <__multiply+0x50>
 800997a:	f8b3 a000 	ldrh.w	sl, [r3]
 800997e:	f1ba 0f00 	cmp.w	sl, #0
 8009982:	d024      	beq.n	80099ce <__multiply+0xf2>
 8009984:	f104 0e14 	add.w	lr, r4, #20
 8009988:	46a9      	mov	r9, r5
 800998a:	f04f 0c00 	mov.w	ip, #0
 800998e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009992:	f8d9 1000 	ldr.w	r1, [r9]
 8009996:	fa1f fb82 	uxth.w	fp, r2
 800999a:	b289      	uxth	r1, r1
 800999c:	fb0a 110b 	mla	r1, sl, fp, r1
 80099a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099a4:	f8d9 2000 	ldr.w	r2, [r9]
 80099a8:	4461      	add	r1, ip
 80099aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80099b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099b6:	b289      	uxth	r1, r1
 80099b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099bc:	4577      	cmp	r7, lr
 80099be:	f849 1b04 	str.w	r1, [r9], #4
 80099c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099c6:	d8e2      	bhi.n	800998e <__multiply+0xb2>
 80099c8:	9a01      	ldr	r2, [sp, #4]
 80099ca:	f845 c002 	str.w	ip, [r5, r2]
 80099ce:	9a03      	ldr	r2, [sp, #12]
 80099d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099d4:	3304      	adds	r3, #4
 80099d6:	f1b9 0f00 	cmp.w	r9, #0
 80099da:	d020      	beq.n	8009a1e <__multiply+0x142>
 80099dc:	6829      	ldr	r1, [r5, #0]
 80099de:	f104 0c14 	add.w	ip, r4, #20
 80099e2:	46ae      	mov	lr, r5
 80099e4:	f04f 0a00 	mov.w	sl, #0
 80099e8:	f8bc b000 	ldrh.w	fp, [ip]
 80099ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099f0:	fb09 220b 	mla	r2, r9, fp, r2
 80099f4:	4492      	add	sl, r2
 80099f6:	b289      	uxth	r1, r1
 80099f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80099fc:	f84e 1b04 	str.w	r1, [lr], #4
 8009a00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009a04:	f8be 1000 	ldrh.w	r1, [lr]
 8009a08:	0c12      	lsrs	r2, r2, #16
 8009a0a:	fb09 1102 	mla	r1, r9, r2, r1
 8009a0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009a12:	4567      	cmp	r7, ip
 8009a14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a18:	d8e6      	bhi.n	80099e8 <__multiply+0x10c>
 8009a1a:	9a01      	ldr	r2, [sp, #4]
 8009a1c:	50a9      	str	r1, [r5, r2]
 8009a1e:	3504      	adds	r5, #4
 8009a20:	e79a      	b.n	8009958 <__multiply+0x7c>
 8009a22:	3e01      	subs	r6, #1
 8009a24:	e79c      	b.n	8009960 <__multiply+0x84>
 8009a26:	bf00      	nop
 8009a28:	0800a8cf 	.word	0x0800a8cf
 8009a2c:	0800a8ea 	.word	0x0800a8ea

08009a30 <__pow5mult>:
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	4615      	mov	r5, r2
 8009a36:	f012 0203 	ands.w	r2, r2, #3
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460f      	mov	r7, r1
 8009a3e:	d007      	beq.n	8009a50 <__pow5mult+0x20>
 8009a40:	4c25      	ldr	r4, [pc, #148]	; (8009ad8 <__pow5mult+0xa8>)
 8009a42:	3a01      	subs	r2, #1
 8009a44:	2300      	movs	r3, #0
 8009a46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a4a:	f7ff fe9b 	bl	8009784 <__multadd>
 8009a4e:	4607      	mov	r7, r0
 8009a50:	10ad      	asrs	r5, r5, #2
 8009a52:	d03d      	beq.n	8009ad0 <__pow5mult+0xa0>
 8009a54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a56:	b97c      	cbnz	r4, 8009a78 <__pow5mult+0x48>
 8009a58:	2010      	movs	r0, #16
 8009a5a:	f7fd ffe7 	bl	8007a2c <malloc>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	6270      	str	r0, [r6, #36]	; 0x24
 8009a62:	b928      	cbnz	r0, 8009a70 <__pow5mult+0x40>
 8009a64:	4b1d      	ldr	r3, [pc, #116]	; (8009adc <__pow5mult+0xac>)
 8009a66:	481e      	ldr	r0, [pc, #120]	; (8009ae0 <__pow5mult+0xb0>)
 8009a68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a6c:	f000 fb42 	bl	800a0f4 <__assert_func>
 8009a70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a74:	6004      	str	r4, [r0, #0]
 8009a76:	60c4      	str	r4, [r0, #12]
 8009a78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a80:	b94c      	cbnz	r4, 8009a96 <__pow5mult+0x66>
 8009a82:	f240 2171 	movw	r1, #625	; 0x271
 8009a86:	4630      	mov	r0, r6
 8009a88:	f7ff ff12 	bl	80098b0 <__i2b>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a92:	4604      	mov	r4, r0
 8009a94:	6003      	str	r3, [r0, #0]
 8009a96:	f04f 0900 	mov.w	r9, #0
 8009a9a:	07eb      	lsls	r3, r5, #31
 8009a9c:	d50a      	bpl.n	8009ab4 <__pow5mult+0x84>
 8009a9e:	4639      	mov	r1, r7
 8009aa0:	4622      	mov	r2, r4
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f7ff ff1a 	bl	80098dc <__multiply>
 8009aa8:	4639      	mov	r1, r7
 8009aaa:	4680      	mov	r8, r0
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7ff fe47 	bl	8009740 <_Bfree>
 8009ab2:	4647      	mov	r7, r8
 8009ab4:	106d      	asrs	r5, r5, #1
 8009ab6:	d00b      	beq.n	8009ad0 <__pow5mult+0xa0>
 8009ab8:	6820      	ldr	r0, [r4, #0]
 8009aba:	b938      	cbnz	r0, 8009acc <__pow5mult+0x9c>
 8009abc:	4622      	mov	r2, r4
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f7ff ff0b 	bl	80098dc <__multiply>
 8009ac6:	6020      	str	r0, [r4, #0]
 8009ac8:	f8c0 9000 	str.w	r9, [r0]
 8009acc:	4604      	mov	r4, r0
 8009ace:	e7e4      	b.n	8009a9a <__pow5mult+0x6a>
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad6:	bf00      	nop
 8009ad8:	0800aa38 	.word	0x0800aa38
 8009adc:	0800a85d 	.word	0x0800a85d
 8009ae0:	0800a8ea 	.word	0x0800a8ea

08009ae4 <__lshift>:
 8009ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae8:	460c      	mov	r4, r1
 8009aea:	6849      	ldr	r1, [r1, #4]
 8009aec:	6923      	ldr	r3, [r4, #16]
 8009aee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009af2:	68a3      	ldr	r3, [r4, #8]
 8009af4:	4607      	mov	r7, r0
 8009af6:	4691      	mov	r9, r2
 8009af8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009afc:	f108 0601 	add.w	r6, r8, #1
 8009b00:	42b3      	cmp	r3, r6
 8009b02:	db0b      	blt.n	8009b1c <__lshift+0x38>
 8009b04:	4638      	mov	r0, r7
 8009b06:	f7ff fddb 	bl	80096c0 <_Balloc>
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	b948      	cbnz	r0, 8009b22 <__lshift+0x3e>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	4b2a      	ldr	r3, [pc, #168]	; (8009bbc <__lshift+0xd8>)
 8009b12:	482b      	ldr	r0, [pc, #172]	; (8009bc0 <__lshift+0xdc>)
 8009b14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b18:	f000 faec 	bl	800a0f4 <__assert_func>
 8009b1c:	3101      	adds	r1, #1
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	e7ee      	b.n	8009b00 <__lshift+0x1c>
 8009b22:	2300      	movs	r3, #0
 8009b24:	f100 0114 	add.w	r1, r0, #20
 8009b28:	f100 0210 	add.w	r2, r0, #16
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	4553      	cmp	r3, sl
 8009b30:	db37      	blt.n	8009ba2 <__lshift+0xbe>
 8009b32:	6920      	ldr	r0, [r4, #16]
 8009b34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b38:	f104 0314 	add.w	r3, r4, #20
 8009b3c:	f019 091f 	ands.w	r9, r9, #31
 8009b40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b48:	d02f      	beq.n	8009baa <__lshift+0xc6>
 8009b4a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b4e:	468a      	mov	sl, r1
 8009b50:	f04f 0c00 	mov.w	ip, #0
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	fa02 f209 	lsl.w	r2, r2, r9
 8009b5a:	ea42 020c 	orr.w	r2, r2, ip
 8009b5e:	f84a 2b04 	str.w	r2, [sl], #4
 8009b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b66:	4298      	cmp	r0, r3
 8009b68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b6c:	d8f2      	bhi.n	8009b54 <__lshift+0x70>
 8009b6e:	1b03      	subs	r3, r0, r4
 8009b70:	3b15      	subs	r3, #21
 8009b72:	f023 0303 	bic.w	r3, r3, #3
 8009b76:	3304      	adds	r3, #4
 8009b78:	f104 0215 	add.w	r2, r4, #21
 8009b7c:	4290      	cmp	r0, r2
 8009b7e:	bf38      	it	cc
 8009b80:	2304      	movcc	r3, #4
 8009b82:	f841 c003 	str.w	ip, [r1, r3]
 8009b86:	f1bc 0f00 	cmp.w	ip, #0
 8009b8a:	d001      	beq.n	8009b90 <__lshift+0xac>
 8009b8c:	f108 0602 	add.w	r6, r8, #2
 8009b90:	3e01      	subs	r6, #1
 8009b92:	4638      	mov	r0, r7
 8009b94:	612e      	str	r6, [r5, #16]
 8009b96:	4621      	mov	r1, r4
 8009b98:	f7ff fdd2 	bl	8009740 <_Bfree>
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	e7c1      	b.n	8009b2e <__lshift+0x4a>
 8009baa:	3904      	subs	r1, #4
 8009bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bb4:	4298      	cmp	r0, r3
 8009bb6:	d8f9      	bhi.n	8009bac <__lshift+0xc8>
 8009bb8:	e7ea      	b.n	8009b90 <__lshift+0xac>
 8009bba:	bf00      	nop
 8009bbc:	0800a8cf 	.word	0x0800a8cf
 8009bc0:	0800a8ea 	.word	0x0800a8ea

08009bc4 <__mcmp>:
 8009bc4:	b530      	push	{r4, r5, lr}
 8009bc6:	6902      	ldr	r2, [r0, #16]
 8009bc8:	690c      	ldr	r4, [r1, #16]
 8009bca:	1b12      	subs	r2, r2, r4
 8009bcc:	d10e      	bne.n	8009bec <__mcmp+0x28>
 8009bce:	f100 0314 	add.w	r3, r0, #20
 8009bd2:	3114      	adds	r1, #20
 8009bd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009be0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009be4:	42a5      	cmp	r5, r4
 8009be6:	d003      	beq.n	8009bf0 <__mcmp+0x2c>
 8009be8:	d305      	bcc.n	8009bf6 <__mcmp+0x32>
 8009bea:	2201      	movs	r2, #1
 8009bec:	4610      	mov	r0, r2
 8009bee:	bd30      	pop	{r4, r5, pc}
 8009bf0:	4283      	cmp	r3, r0
 8009bf2:	d3f3      	bcc.n	8009bdc <__mcmp+0x18>
 8009bf4:	e7fa      	b.n	8009bec <__mcmp+0x28>
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfa:	e7f7      	b.n	8009bec <__mcmp+0x28>

08009bfc <__mdiff>:
 8009bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	460c      	mov	r4, r1
 8009c02:	4606      	mov	r6, r0
 8009c04:	4611      	mov	r1, r2
 8009c06:	4620      	mov	r0, r4
 8009c08:	4690      	mov	r8, r2
 8009c0a:	f7ff ffdb 	bl	8009bc4 <__mcmp>
 8009c0e:	1e05      	subs	r5, r0, #0
 8009c10:	d110      	bne.n	8009c34 <__mdiff+0x38>
 8009c12:	4629      	mov	r1, r5
 8009c14:	4630      	mov	r0, r6
 8009c16:	f7ff fd53 	bl	80096c0 <_Balloc>
 8009c1a:	b930      	cbnz	r0, 8009c2a <__mdiff+0x2e>
 8009c1c:	4b3a      	ldr	r3, [pc, #232]	; (8009d08 <__mdiff+0x10c>)
 8009c1e:	4602      	mov	r2, r0
 8009c20:	f240 2132 	movw	r1, #562	; 0x232
 8009c24:	4839      	ldr	r0, [pc, #228]	; (8009d0c <__mdiff+0x110>)
 8009c26:	f000 fa65 	bl	800a0f4 <__assert_func>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c34:	bfa4      	itt	ge
 8009c36:	4643      	movge	r3, r8
 8009c38:	46a0      	movge	r8, r4
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c40:	bfa6      	itte	ge
 8009c42:	461c      	movge	r4, r3
 8009c44:	2500      	movge	r5, #0
 8009c46:	2501      	movlt	r5, #1
 8009c48:	f7ff fd3a 	bl	80096c0 <_Balloc>
 8009c4c:	b920      	cbnz	r0, 8009c58 <__mdiff+0x5c>
 8009c4e:	4b2e      	ldr	r3, [pc, #184]	; (8009d08 <__mdiff+0x10c>)
 8009c50:	4602      	mov	r2, r0
 8009c52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c56:	e7e5      	b.n	8009c24 <__mdiff+0x28>
 8009c58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c5c:	6926      	ldr	r6, [r4, #16]
 8009c5e:	60c5      	str	r5, [r0, #12]
 8009c60:	f104 0914 	add.w	r9, r4, #20
 8009c64:	f108 0514 	add.w	r5, r8, #20
 8009c68:	f100 0e14 	add.w	lr, r0, #20
 8009c6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c74:	f108 0210 	add.w	r2, r8, #16
 8009c78:	46f2      	mov	sl, lr
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c84:	fa1f f883 	uxth.w	r8, r3
 8009c88:	fa11 f18b 	uxtah	r1, r1, fp
 8009c8c:	0c1b      	lsrs	r3, r3, #16
 8009c8e:	eba1 0808 	sub.w	r8, r1, r8
 8009c92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c9a:	fa1f f888 	uxth.w	r8, r8
 8009c9e:	1419      	asrs	r1, r3, #16
 8009ca0:	454e      	cmp	r6, r9
 8009ca2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ca6:	f84a 3b04 	str.w	r3, [sl], #4
 8009caa:	d8e7      	bhi.n	8009c7c <__mdiff+0x80>
 8009cac:	1b33      	subs	r3, r6, r4
 8009cae:	3b15      	subs	r3, #21
 8009cb0:	f023 0303 	bic.w	r3, r3, #3
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	3415      	adds	r4, #21
 8009cb8:	42a6      	cmp	r6, r4
 8009cba:	bf38      	it	cc
 8009cbc:	2304      	movcc	r3, #4
 8009cbe:	441d      	add	r5, r3
 8009cc0:	4473      	add	r3, lr
 8009cc2:	469e      	mov	lr, r3
 8009cc4:	462e      	mov	r6, r5
 8009cc6:	4566      	cmp	r6, ip
 8009cc8:	d30e      	bcc.n	8009ce8 <__mdiff+0xec>
 8009cca:	f10c 0203 	add.w	r2, ip, #3
 8009cce:	1b52      	subs	r2, r2, r5
 8009cd0:	f022 0203 	bic.w	r2, r2, #3
 8009cd4:	3d03      	subs	r5, #3
 8009cd6:	45ac      	cmp	ip, r5
 8009cd8:	bf38      	it	cc
 8009cda:	2200      	movcc	r2, #0
 8009cdc:	441a      	add	r2, r3
 8009cde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ce2:	b17b      	cbz	r3, 8009d04 <__mdiff+0x108>
 8009ce4:	6107      	str	r7, [r0, #16]
 8009ce6:	e7a3      	b.n	8009c30 <__mdiff+0x34>
 8009ce8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009cec:	fa11 f288 	uxtah	r2, r1, r8
 8009cf0:	1414      	asrs	r4, r2, #16
 8009cf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cf6:	b292      	uxth	r2, r2
 8009cf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cfc:	f84e 2b04 	str.w	r2, [lr], #4
 8009d00:	1421      	asrs	r1, r4, #16
 8009d02:	e7e0      	b.n	8009cc6 <__mdiff+0xca>
 8009d04:	3f01      	subs	r7, #1
 8009d06:	e7ea      	b.n	8009cde <__mdiff+0xe2>
 8009d08:	0800a8cf 	.word	0x0800a8cf
 8009d0c:	0800a8ea 	.word	0x0800a8ea

08009d10 <__d2b>:
 8009d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d14:	4689      	mov	r9, r1
 8009d16:	2101      	movs	r1, #1
 8009d18:	ec57 6b10 	vmov	r6, r7, d0
 8009d1c:	4690      	mov	r8, r2
 8009d1e:	f7ff fccf 	bl	80096c0 <_Balloc>
 8009d22:	4604      	mov	r4, r0
 8009d24:	b930      	cbnz	r0, 8009d34 <__d2b+0x24>
 8009d26:	4602      	mov	r2, r0
 8009d28:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <__d2b+0xb0>)
 8009d2a:	4826      	ldr	r0, [pc, #152]	; (8009dc4 <__d2b+0xb4>)
 8009d2c:	f240 310a 	movw	r1, #778	; 0x30a
 8009d30:	f000 f9e0 	bl	800a0f4 <__assert_func>
 8009d34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d3c:	bb35      	cbnz	r5, 8009d8c <__d2b+0x7c>
 8009d3e:	2e00      	cmp	r6, #0
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	d028      	beq.n	8009d96 <__d2b+0x86>
 8009d44:	4668      	mov	r0, sp
 8009d46:	9600      	str	r6, [sp, #0]
 8009d48:	f7ff fd82 	bl	8009850 <__lo0bits>
 8009d4c:	9900      	ldr	r1, [sp, #0]
 8009d4e:	b300      	cbz	r0, 8009d92 <__d2b+0x82>
 8009d50:	9a01      	ldr	r2, [sp, #4]
 8009d52:	f1c0 0320 	rsb	r3, r0, #32
 8009d56:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	40c2      	lsrs	r2, r0
 8009d5e:	6163      	str	r3, [r4, #20]
 8009d60:	9201      	str	r2, [sp, #4]
 8009d62:	9b01      	ldr	r3, [sp, #4]
 8009d64:	61a3      	str	r3, [r4, #24]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bf14      	ite	ne
 8009d6a:	2202      	movne	r2, #2
 8009d6c:	2201      	moveq	r2, #1
 8009d6e:	6122      	str	r2, [r4, #16]
 8009d70:	b1d5      	cbz	r5, 8009da8 <__d2b+0x98>
 8009d72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d76:	4405      	add	r5, r0
 8009d78:	f8c9 5000 	str.w	r5, [r9]
 8009d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d80:	f8c8 0000 	str.w	r0, [r8]
 8009d84:	4620      	mov	r0, r4
 8009d86:	b003      	add	sp, #12
 8009d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d90:	e7d5      	b.n	8009d3e <__d2b+0x2e>
 8009d92:	6161      	str	r1, [r4, #20]
 8009d94:	e7e5      	b.n	8009d62 <__d2b+0x52>
 8009d96:	a801      	add	r0, sp, #4
 8009d98:	f7ff fd5a 	bl	8009850 <__lo0bits>
 8009d9c:	9b01      	ldr	r3, [sp, #4]
 8009d9e:	6163      	str	r3, [r4, #20]
 8009da0:	2201      	movs	r2, #1
 8009da2:	6122      	str	r2, [r4, #16]
 8009da4:	3020      	adds	r0, #32
 8009da6:	e7e3      	b.n	8009d70 <__d2b+0x60>
 8009da8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009db0:	f8c9 0000 	str.w	r0, [r9]
 8009db4:	6918      	ldr	r0, [r3, #16]
 8009db6:	f7ff fd2b 	bl	8009810 <__hi0bits>
 8009dba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dbe:	e7df      	b.n	8009d80 <__d2b+0x70>
 8009dc0:	0800a8cf 	.word	0x0800a8cf
 8009dc4:	0800a8ea 	.word	0x0800a8ea

08009dc8 <_calloc_r>:
 8009dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dca:	fba1 2402 	umull	r2, r4, r1, r2
 8009dce:	b94c      	cbnz	r4, 8009de4 <_calloc_r+0x1c>
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	9201      	str	r2, [sp, #4]
 8009dd4:	f7fd febc 	bl	8007b50 <_malloc_r>
 8009dd8:	9a01      	ldr	r2, [sp, #4]
 8009dda:	4605      	mov	r5, r0
 8009ddc:	b930      	cbnz	r0, 8009dec <_calloc_r+0x24>
 8009dde:	4628      	mov	r0, r5
 8009de0:	b003      	add	sp, #12
 8009de2:	bd30      	pop	{r4, r5, pc}
 8009de4:	220c      	movs	r2, #12
 8009de6:	6002      	str	r2, [r0, #0]
 8009de8:	2500      	movs	r5, #0
 8009dea:	e7f8      	b.n	8009dde <_calloc_r+0x16>
 8009dec:	4621      	mov	r1, r4
 8009dee:	f7fd fe3b 	bl	8007a68 <memset>
 8009df2:	e7f4      	b.n	8009dde <_calloc_r+0x16>

08009df4 <__sfputc_r>:
 8009df4:	6893      	ldr	r3, [r2, #8]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	b410      	push	{r4}
 8009dfc:	6093      	str	r3, [r2, #8]
 8009dfe:	da08      	bge.n	8009e12 <__sfputc_r+0x1e>
 8009e00:	6994      	ldr	r4, [r2, #24]
 8009e02:	42a3      	cmp	r3, r4
 8009e04:	db01      	blt.n	8009e0a <__sfputc_r+0x16>
 8009e06:	290a      	cmp	r1, #10
 8009e08:	d103      	bne.n	8009e12 <__sfputc_r+0x1e>
 8009e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e0e:	f7fe bc5f 	b.w	80086d0 <__swbuf_r>
 8009e12:	6813      	ldr	r3, [r2, #0]
 8009e14:	1c58      	adds	r0, r3, #1
 8009e16:	6010      	str	r0, [r2, #0]
 8009e18:	7019      	strb	r1, [r3, #0]
 8009e1a:	4608      	mov	r0, r1
 8009e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <__sfputs_r>:
 8009e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e24:	4606      	mov	r6, r0
 8009e26:	460f      	mov	r7, r1
 8009e28:	4614      	mov	r4, r2
 8009e2a:	18d5      	adds	r5, r2, r3
 8009e2c:	42ac      	cmp	r4, r5
 8009e2e:	d101      	bne.n	8009e34 <__sfputs_r+0x12>
 8009e30:	2000      	movs	r0, #0
 8009e32:	e007      	b.n	8009e44 <__sfputs_r+0x22>
 8009e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e38:	463a      	mov	r2, r7
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f7ff ffda 	bl	8009df4 <__sfputc_r>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d1f3      	bne.n	8009e2c <__sfputs_r+0xa>
 8009e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e48 <_vfiprintf_r>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	b09d      	sub	sp, #116	; 0x74
 8009e50:	4614      	mov	r4, r2
 8009e52:	4698      	mov	r8, r3
 8009e54:	4606      	mov	r6, r0
 8009e56:	b118      	cbz	r0, 8009e60 <_vfiprintf_r+0x18>
 8009e58:	6983      	ldr	r3, [r0, #24]
 8009e5a:	b90b      	cbnz	r3, 8009e60 <_vfiprintf_r+0x18>
 8009e5c:	f7fd fd20 	bl	80078a0 <__sinit>
 8009e60:	4b89      	ldr	r3, [pc, #548]	; (800a088 <_vfiprintf_r+0x240>)
 8009e62:	429d      	cmp	r5, r3
 8009e64:	d11b      	bne.n	8009e9e <_vfiprintf_r+0x56>
 8009e66:	6875      	ldr	r5, [r6, #4]
 8009e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6a:	07d9      	lsls	r1, r3, #31
 8009e6c:	d405      	bmi.n	8009e7a <_vfiprintf_r+0x32>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	059a      	lsls	r2, r3, #22
 8009e72:	d402      	bmi.n	8009e7a <_vfiprintf_r+0x32>
 8009e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e76:	f7fd fdd6 	bl	8007a26 <__retarget_lock_acquire_recursive>
 8009e7a:	89ab      	ldrh	r3, [r5, #12]
 8009e7c:	071b      	lsls	r3, r3, #28
 8009e7e:	d501      	bpl.n	8009e84 <_vfiprintf_r+0x3c>
 8009e80:	692b      	ldr	r3, [r5, #16]
 8009e82:	b9eb      	cbnz	r3, 8009ec0 <_vfiprintf_r+0x78>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4630      	mov	r0, r6
 8009e88:	f7fe fc86 	bl	8008798 <__swsetup_r>
 8009e8c:	b1c0      	cbz	r0, 8009ec0 <_vfiprintf_r+0x78>
 8009e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e90:	07dc      	lsls	r4, r3, #31
 8009e92:	d50e      	bpl.n	8009eb2 <_vfiprintf_r+0x6a>
 8009e94:	f04f 30ff 	mov.w	r0, #4294967295
 8009e98:	b01d      	add	sp, #116	; 0x74
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	4b7b      	ldr	r3, [pc, #492]	; (800a08c <_vfiprintf_r+0x244>)
 8009ea0:	429d      	cmp	r5, r3
 8009ea2:	d101      	bne.n	8009ea8 <_vfiprintf_r+0x60>
 8009ea4:	68b5      	ldr	r5, [r6, #8]
 8009ea6:	e7df      	b.n	8009e68 <_vfiprintf_r+0x20>
 8009ea8:	4b79      	ldr	r3, [pc, #484]	; (800a090 <_vfiprintf_r+0x248>)
 8009eaa:	429d      	cmp	r5, r3
 8009eac:	bf08      	it	eq
 8009eae:	68f5      	ldreq	r5, [r6, #12]
 8009eb0:	e7da      	b.n	8009e68 <_vfiprintf_r+0x20>
 8009eb2:	89ab      	ldrh	r3, [r5, #12]
 8009eb4:	0598      	lsls	r0, r3, #22
 8009eb6:	d4ed      	bmi.n	8009e94 <_vfiprintf_r+0x4c>
 8009eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eba:	f7fd fdb5 	bl	8007a28 <__retarget_lock_release_recursive>
 8009ebe:	e7e9      	b.n	8009e94 <_vfiprintf_r+0x4c>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec4:	2320      	movs	r3, #32
 8009ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ece:	2330      	movs	r3, #48	; 0x30
 8009ed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a094 <_vfiprintf_r+0x24c>
 8009ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed8:	f04f 0901 	mov.w	r9, #1
 8009edc:	4623      	mov	r3, r4
 8009ede:	469a      	mov	sl, r3
 8009ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee4:	b10a      	cbz	r2, 8009eea <_vfiprintf_r+0xa2>
 8009ee6:	2a25      	cmp	r2, #37	; 0x25
 8009ee8:	d1f9      	bne.n	8009ede <_vfiprintf_r+0x96>
 8009eea:	ebba 0b04 	subs.w	fp, sl, r4
 8009eee:	d00b      	beq.n	8009f08 <_vfiprintf_r+0xc0>
 8009ef0:	465b      	mov	r3, fp
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7ff ff93 	bl	8009e22 <__sfputs_r>
 8009efc:	3001      	adds	r0, #1
 8009efe:	f000 80aa 	beq.w	800a056 <_vfiprintf_r+0x20e>
 8009f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f04:	445a      	add	r2, fp
 8009f06:	9209      	str	r2, [sp, #36]	; 0x24
 8009f08:	f89a 3000 	ldrb.w	r3, [sl]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80a2 	beq.w	800a056 <_vfiprintf_r+0x20e>
 8009f12:	2300      	movs	r3, #0
 8009f14:	f04f 32ff 	mov.w	r2, #4294967295
 8009f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f1c:	f10a 0a01 	add.w	sl, sl, #1
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	9307      	str	r3, [sp, #28]
 8009f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f28:	931a      	str	r3, [sp, #104]	; 0x68
 8009f2a:	4654      	mov	r4, sl
 8009f2c:	2205      	movs	r2, #5
 8009f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f32:	4858      	ldr	r0, [pc, #352]	; (800a094 <_vfiprintf_r+0x24c>)
 8009f34:	f7f6 f95c 	bl	80001f0 <memchr>
 8009f38:	9a04      	ldr	r2, [sp, #16]
 8009f3a:	b9d8      	cbnz	r0, 8009f74 <_vfiprintf_r+0x12c>
 8009f3c:	06d1      	lsls	r1, r2, #27
 8009f3e:	bf44      	itt	mi
 8009f40:	2320      	movmi	r3, #32
 8009f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f46:	0713      	lsls	r3, r2, #28
 8009f48:	bf44      	itt	mi
 8009f4a:	232b      	movmi	r3, #43	; 0x2b
 8009f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f50:	f89a 3000 	ldrb.w	r3, [sl]
 8009f54:	2b2a      	cmp	r3, #42	; 0x2a
 8009f56:	d015      	beq.n	8009f84 <_vfiprintf_r+0x13c>
 8009f58:	9a07      	ldr	r2, [sp, #28]
 8009f5a:	4654      	mov	r4, sl
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f04f 0c0a 	mov.w	ip, #10
 8009f62:	4621      	mov	r1, r4
 8009f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f68:	3b30      	subs	r3, #48	; 0x30
 8009f6a:	2b09      	cmp	r3, #9
 8009f6c:	d94e      	bls.n	800a00c <_vfiprintf_r+0x1c4>
 8009f6e:	b1b0      	cbz	r0, 8009f9e <_vfiprintf_r+0x156>
 8009f70:	9207      	str	r2, [sp, #28]
 8009f72:	e014      	b.n	8009f9e <_vfiprintf_r+0x156>
 8009f74:	eba0 0308 	sub.w	r3, r0, r8
 8009f78:	fa09 f303 	lsl.w	r3, r9, r3
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	46a2      	mov	sl, r4
 8009f82:	e7d2      	b.n	8009f2a <_vfiprintf_r+0xe2>
 8009f84:	9b03      	ldr	r3, [sp, #12]
 8009f86:	1d19      	adds	r1, r3, #4
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	9103      	str	r1, [sp, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	bfbb      	ittet	lt
 8009f90:	425b      	neglt	r3, r3
 8009f92:	f042 0202 	orrlt.w	r2, r2, #2
 8009f96:	9307      	strge	r3, [sp, #28]
 8009f98:	9307      	strlt	r3, [sp, #28]
 8009f9a:	bfb8      	it	lt
 8009f9c:	9204      	strlt	r2, [sp, #16]
 8009f9e:	7823      	ldrb	r3, [r4, #0]
 8009fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8009fa2:	d10c      	bne.n	8009fbe <_vfiprintf_r+0x176>
 8009fa4:	7863      	ldrb	r3, [r4, #1]
 8009fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa8:	d135      	bne.n	800a016 <_vfiprintf_r+0x1ce>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	1d1a      	adds	r2, r3, #4
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	9203      	str	r2, [sp, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bfb8      	it	lt
 8009fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fba:	3402      	adds	r4, #2
 8009fbc:	9305      	str	r3, [sp, #20]
 8009fbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0a4 <_vfiprintf_r+0x25c>
 8009fc2:	7821      	ldrb	r1, [r4, #0]
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	f7f6 f912 	bl	80001f0 <memchr>
 8009fcc:	b140      	cbz	r0, 8009fe0 <_vfiprintf_r+0x198>
 8009fce:	2340      	movs	r3, #64	; 0x40
 8009fd0:	eba0 000a 	sub.w	r0, r0, sl
 8009fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8009fd8:	9b04      	ldr	r3, [sp, #16]
 8009fda:	4303      	orrs	r3, r0
 8009fdc:	3401      	adds	r4, #1
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe4:	482c      	ldr	r0, [pc, #176]	; (800a098 <_vfiprintf_r+0x250>)
 8009fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fea:	2206      	movs	r2, #6
 8009fec:	f7f6 f900 	bl	80001f0 <memchr>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d03f      	beq.n	800a074 <_vfiprintf_r+0x22c>
 8009ff4:	4b29      	ldr	r3, [pc, #164]	; (800a09c <_vfiprintf_r+0x254>)
 8009ff6:	bb1b      	cbnz	r3, 800a040 <_vfiprintf_r+0x1f8>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	3307      	adds	r3, #7
 8009ffc:	f023 0307 	bic.w	r3, r3, #7
 800a000:	3308      	adds	r3, #8
 800a002:	9303      	str	r3, [sp, #12]
 800a004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a006:	443b      	add	r3, r7
 800a008:	9309      	str	r3, [sp, #36]	; 0x24
 800a00a:	e767      	b.n	8009edc <_vfiprintf_r+0x94>
 800a00c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a010:	460c      	mov	r4, r1
 800a012:	2001      	movs	r0, #1
 800a014:	e7a5      	b.n	8009f62 <_vfiprintf_r+0x11a>
 800a016:	2300      	movs	r3, #0
 800a018:	3401      	adds	r4, #1
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	4619      	mov	r1, r3
 800a01e:	f04f 0c0a 	mov.w	ip, #10
 800a022:	4620      	mov	r0, r4
 800a024:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a028:	3a30      	subs	r2, #48	; 0x30
 800a02a:	2a09      	cmp	r2, #9
 800a02c:	d903      	bls.n	800a036 <_vfiprintf_r+0x1ee>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0c5      	beq.n	8009fbe <_vfiprintf_r+0x176>
 800a032:	9105      	str	r1, [sp, #20]
 800a034:	e7c3      	b.n	8009fbe <_vfiprintf_r+0x176>
 800a036:	fb0c 2101 	mla	r1, ip, r1, r2
 800a03a:	4604      	mov	r4, r0
 800a03c:	2301      	movs	r3, #1
 800a03e:	e7f0      	b.n	800a022 <_vfiprintf_r+0x1da>
 800a040:	ab03      	add	r3, sp, #12
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	462a      	mov	r2, r5
 800a046:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <_vfiprintf_r+0x258>)
 800a048:	a904      	add	r1, sp, #16
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7fd fe94 	bl	8007d78 <_printf_float>
 800a050:	4607      	mov	r7, r0
 800a052:	1c78      	adds	r0, r7, #1
 800a054:	d1d6      	bne.n	800a004 <_vfiprintf_r+0x1bc>
 800a056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a058:	07d9      	lsls	r1, r3, #31
 800a05a:	d405      	bmi.n	800a068 <_vfiprintf_r+0x220>
 800a05c:	89ab      	ldrh	r3, [r5, #12]
 800a05e:	059a      	lsls	r2, r3, #22
 800a060:	d402      	bmi.n	800a068 <_vfiprintf_r+0x220>
 800a062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a064:	f7fd fce0 	bl	8007a28 <__retarget_lock_release_recursive>
 800a068:	89ab      	ldrh	r3, [r5, #12]
 800a06a:	065b      	lsls	r3, r3, #25
 800a06c:	f53f af12 	bmi.w	8009e94 <_vfiprintf_r+0x4c>
 800a070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a072:	e711      	b.n	8009e98 <_vfiprintf_r+0x50>
 800a074:	ab03      	add	r3, sp, #12
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	462a      	mov	r2, r5
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <_vfiprintf_r+0x258>)
 800a07c:	a904      	add	r1, sp, #16
 800a07e:	4630      	mov	r0, r6
 800a080:	f7fe f91e 	bl	80082c0 <_printf_i>
 800a084:	e7e4      	b.n	800a050 <_vfiprintf_r+0x208>
 800a086:	bf00      	nop
 800a088:	0800a7d8 	.word	0x0800a7d8
 800a08c:	0800a7f8 	.word	0x0800a7f8
 800a090:	0800a7b8 	.word	0x0800a7b8
 800a094:	0800aa44 	.word	0x0800aa44
 800a098:	0800aa4e 	.word	0x0800aa4e
 800a09c:	08007d79 	.word	0x08007d79
 800a0a0:	08009e23 	.word	0x08009e23
 800a0a4:	0800aa4a 	.word	0x0800aa4a

0800a0a8 <_read_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	4d07      	ldr	r5, [pc, #28]	; (800a0c8 <_read_r+0x20>)
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	4608      	mov	r0, r1
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	602a      	str	r2, [r5, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f7f7 fdac 	bl	8001c14 <_read>
 800a0bc:	1c43      	adds	r3, r0, #1
 800a0be:	d102      	bne.n	800a0c6 <_read_r+0x1e>
 800a0c0:	682b      	ldr	r3, [r5, #0]
 800a0c2:	b103      	cbz	r3, 800a0c6 <_read_r+0x1e>
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
 800a0c8:	2000503c 	.word	0x2000503c

0800a0cc <nanf>:
 800a0cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a0d4 <nanf+0x8>
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	7fc00000 	.word	0x7fc00000

0800a0d8 <__ascii_wctomb>:
 800a0d8:	b149      	cbz	r1, 800a0ee <__ascii_wctomb+0x16>
 800a0da:	2aff      	cmp	r2, #255	; 0xff
 800a0dc:	bf85      	ittet	hi
 800a0de:	238a      	movhi	r3, #138	; 0x8a
 800a0e0:	6003      	strhi	r3, [r0, #0]
 800a0e2:	700a      	strbls	r2, [r1, #0]
 800a0e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0e8:	bf98      	it	ls
 800a0ea:	2001      	movls	r0, #1
 800a0ec:	4770      	bx	lr
 800a0ee:	4608      	mov	r0, r1
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <__assert_func>:
 800a0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0f6:	4614      	mov	r4, r2
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <__assert_func+0x2c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4605      	mov	r5, r0
 800a100:	68d8      	ldr	r0, [r3, #12]
 800a102:	b14c      	cbz	r4, 800a118 <__assert_func+0x24>
 800a104:	4b07      	ldr	r3, [pc, #28]	; (800a124 <__assert_func+0x30>)
 800a106:	9100      	str	r1, [sp, #0]
 800a108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a10c:	4906      	ldr	r1, [pc, #24]	; (800a128 <__assert_func+0x34>)
 800a10e:	462b      	mov	r3, r5
 800a110:	f000 f80e 	bl	800a130 <fiprintf>
 800a114:	f000 f840 	bl	800a198 <abort>
 800a118:	4b04      	ldr	r3, [pc, #16]	; (800a12c <__assert_func+0x38>)
 800a11a:	461c      	mov	r4, r3
 800a11c:	e7f3      	b.n	800a106 <__assert_func+0x12>
 800a11e:	bf00      	nop
 800a120:	2000004c 	.word	0x2000004c
 800a124:	0800aa55 	.word	0x0800aa55
 800a128:	0800aa62 	.word	0x0800aa62
 800a12c:	0800aa90 	.word	0x0800aa90

0800a130 <fiprintf>:
 800a130:	b40e      	push	{r1, r2, r3}
 800a132:	b503      	push	{r0, r1, lr}
 800a134:	4601      	mov	r1, r0
 800a136:	ab03      	add	r3, sp, #12
 800a138:	4805      	ldr	r0, [pc, #20]	; (800a150 <fiprintf+0x20>)
 800a13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a13e:	6800      	ldr	r0, [r0, #0]
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	f7ff fe81 	bl	8009e48 <_vfiprintf_r>
 800a146:	b002      	add	sp, #8
 800a148:	f85d eb04 	ldr.w	lr, [sp], #4
 800a14c:	b003      	add	sp, #12
 800a14e:	4770      	bx	lr
 800a150:	2000004c 	.word	0x2000004c

0800a154 <_fstat_r>:
 800a154:	b538      	push	{r3, r4, r5, lr}
 800a156:	4d07      	ldr	r5, [pc, #28]	; (800a174 <_fstat_r+0x20>)
 800a158:	2300      	movs	r3, #0
 800a15a:	4604      	mov	r4, r0
 800a15c:	4608      	mov	r0, r1
 800a15e:	4611      	mov	r1, r2
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	f7f7 fd80 	bl	8001c66 <_fstat>
 800a166:	1c43      	adds	r3, r0, #1
 800a168:	d102      	bne.n	800a170 <_fstat_r+0x1c>
 800a16a:	682b      	ldr	r3, [r5, #0]
 800a16c:	b103      	cbz	r3, 800a170 <_fstat_r+0x1c>
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	bd38      	pop	{r3, r4, r5, pc}
 800a172:	bf00      	nop
 800a174:	2000503c 	.word	0x2000503c

0800a178 <_isatty_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	4d06      	ldr	r5, [pc, #24]	; (800a194 <_isatty_r+0x1c>)
 800a17c:	2300      	movs	r3, #0
 800a17e:	4604      	mov	r4, r0
 800a180:	4608      	mov	r0, r1
 800a182:	602b      	str	r3, [r5, #0]
 800a184:	f7f7 fd7f 	bl	8001c86 <_isatty>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_isatty_r+0x1a>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_isatty_r+0x1a>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	2000503c 	.word	0x2000503c

0800a198 <abort>:
 800a198:	b508      	push	{r3, lr}
 800a19a:	2006      	movs	r0, #6
 800a19c:	f000 f82c 	bl	800a1f8 <raise>
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	f7f7 fd2d 	bl	8001c00 <_exit>

0800a1a6 <_raise_r>:
 800a1a6:	291f      	cmp	r1, #31
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	d904      	bls.n	800a1ba <_raise_r+0x14>
 800a1b0:	2316      	movs	r3, #22
 800a1b2:	6003      	str	r3, [r0, #0]
 800a1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1bc:	b112      	cbz	r2, 800a1c4 <_raise_r+0x1e>
 800a1be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1c2:	b94b      	cbnz	r3, 800a1d8 <_raise_r+0x32>
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 f831 	bl	800a22c <_getpid_r>
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	4601      	mov	r1, r0
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1d4:	f000 b818 	b.w	800a208 <_kill_r>
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d00a      	beq.n	800a1f2 <_raise_r+0x4c>
 800a1dc:	1c59      	adds	r1, r3, #1
 800a1de:	d103      	bne.n	800a1e8 <_raise_r+0x42>
 800a1e0:	2316      	movs	r3, #22
 800a1e2:	6003      	str	r3, [r0, #0]
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	e7e7      	b.n	800a1b8 <_raise_r+0x12>
 800a1e8:	2400      	movs	r4, #0
 800a1ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	4798      	blx	r3
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	e7e0      	b.n	800a1b8 <_raise_r+0x12>
	...

0800a1f8 <raise>:
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <raise+0xc>)
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	f7ff bfd2 	b.w	800a1a6 <_raise_r>
 800a202:	bf00      	nop
 800a204:	2000004c 	.word	0x2000004c

0800a208 <_kill_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4d07      	ldr	r5, [pc, #28]	; (800a228 <_kill_r+0x20>)
 800a20c:	2300      	movs	r3, #0
 800a20e:	4604      	mov	r4, r0
 800a210:	4608      	mov	r0, r1
 800a212:	4611      	mov	r1, r2
 800a214:	602b      	str	r3, [r5, #0]
 800a216:	f7f7 fce3 	bl	8001be0 <_kill>
 800a21a:	1c43      	adds	r3, r0, #1
 800a21c:	d102      	bne.n	800a224 <_kill_r+0x1c>
 800a21e:	682b      	ldr	r3, [r5, #0]
 800a220:	b103      	cbz	r3, 800a224 <_kill_r+0x1c>
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	bd38      	pop	{r3, r4, r5, pc}
 800a226:	bf00      	nop
 800a228:	2000503c 	.word	0x2000503c

0800a22c <_getpid_r>:
 800a22c:	f7f7 bcd0 	b.w	8001bd0 <_getpid>

0800a230 <logf>:
 800a230:	b508      	push	{r3, lr}
 800a232:	ed2d 8b02 	vpush	{d8}
 800a236:	eeb0 8a40 	vmov.f32	s16, s0
 800a23a:	f000 f827 	bl	800a28c <__ieee754_logf>
 800a23e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a246:	d60f      	bvs.n	800a268 <logf+0x38>
 800a248:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a250:	dc0a      	bgt.n	800a268 <logf+0x38>
 800a252:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25a:	d108      	bne.n	800a26e <logf+0x3e>
 800a25c:	f7fd f9ee 	bl	800763c <__errno>
 800a260:	2322      	movs	r3, #34	; 0x22
 800a262:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a284 <logf+0x54>
 800a266:	6003      	str	r3, [r0, #0]
 800a268:	ecbd 8b02 	vpop	{d8}
 800a26c:	bd08      	pop	{r3, pc}
 800a26e:	f7fd f9e5 	bl	800763c <__errno>
 800a272:	ecbd 8b02 	vpop	{d8}
 800a276:	2321      	movs	r3, #33	; 0x21
 800a278:	6003      	str	r3, [r0, #0]
 800a27a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a27e:	4802      	ldr	r0, [pc, #8]	; (800a288 <logf+0x58>)
 800a280:	f7ff bf24 	b.w	800a0cc <nanf>
 800a284:	ff800000 	.word	0xff800000
 800a288:	0800aa90 	.word	0x0800aa90

0800a28c <__ieee754_logf>:
 800a28c:	ee10 3a10 	vmov	r3, s0
 800a290:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a294:	d106      	bne.n	800a2a4 <__ieee754_logf+0x18>
 800a296:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800a42c <__ieee754_logf+0x1a0>
 800a29a:	eddf 7a65 	vldr	s15, [pc, #404]	; 800a430 <__ieee754_logf+0x1a4>
 800a29e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a2a2:	4770      	bx	lr
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	da02      	bge.n	800a2ae <__ieee754_logf+0x22>
 800a2a8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a2ac:	e7f5      	b.n	800a29a <__ieee754_logf+0xe>
 800a2ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a2b2:	db02      	blt.n	800a2ba <__ieee754_logf+0x2e>
 800a2b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a2b8:	4770      	bx	lr
 800a2ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2be:	bfb8      	it	lt
 800a2c0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800a434 <__ieee754_logf+0x1a8>
 800a2c4:	485c      	ldr	r0, [pc, #368]	; (800a438 <__ieee754_logf+0x1ac>)
 800a2c6:	bfbe      	ittt	lt
 800a2c8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a2cc:	f06f 0118 	mvnlt.w	r1, #24
 800a2d0:	ee17 3a90 	vmovlt	r3, s15
 800a2d4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800a2d8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a2dc:	4418      	add	r0, r3
 800a2de:	bfa8      	it	ge
 800a2e0:	2100      	movge	r1, #0
 800a2e2:	3a7f      	subs	r2, #127	; 0x7f
 800a2e4:	440a      	add	r2, r1
 800a2e6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800a2ea:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800a2ee:	4319      	orrs	r1, r3
 800a2f0:	ee00 1a10 	vmov	s0, r1
 800a2f4:	4951      	ldr	r1, [pc, #324]	; (800a43c <__ieee754_logf+0x1b0>)
 800a2f6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800a2fa:	f103 000f 	add.w	r0, r3, #15
 800a2fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a302:	4001      	ands	r1, r0
 800a304:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a308:	bb89      	cbnz	r1, 800a36e <__ieee754_logf+0xe2>
 800a30a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a312:	d10f      	bne.n	800a334 <__ieee754_logf+0xa8>
 800a314:	2a00      	cmp	r2, #0
 800a316:	f000 8085 	beq.w	800a424 <__ieee754_logf+0x198>
 800a31a:	ee07 2a90 	vmov	s15, r2
 800a31e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800a440 <__ieee754_logf+0x1b4>
 800a322:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a444 <__ieee754_logf+0x1b8>
 800a326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a32a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a32e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800a332:	4770      	bx	lr
 800a334:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a448 <__ieee754_logf+0x1bc>
 800a338:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a33c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800a340:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a344:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a348:	b912      	cbnz	r2, 800a350 <__ieee754_logf+0xc4>
 800a34a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a34e:	4770      	bx	lr
 800a350:	ee07 2a90 	vmov	s15, r2
 800a354:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800a440 <__ieee754_logf+0x1b4>
 800a358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a35c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a360:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a364:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800a444 <__ieee754_logf+0x1b8>
 800a368:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800a36c:	4770      	bx	lr
 800a36e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a372:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a376:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a44c <__ieee754_logf+0x1c0>
 800a37a:	eddf 4a35 	vldr	s9, [pc, #212]	; 800a450 <__ieee754_logf+0x1c4>
 800a37e:	4935      	ldr	r1, [pc, #212]	; (800a454 <__ieee754_logf+0x1c8>)
 800a380:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800a384:	4419      	add	r1, r3
 800a386:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800a38a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a38e:	430b      	orrs	r3, r1
 800a390:	2b00      	cmp	r3, #0
 800a392:	ee07 2a90 	vmov	s15, r2
 800a396:	ee26 5a06 	vmul.f32	s10, s12, s12
 800a39a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a39e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800a3a2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800a458 <__ieee754_logf+0x1cc>
 800a3a6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a3aa:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800a45c <__ieee754_logf+0x1d0>
 800a3ae:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a3b2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a460 <__ieee754_logf+0x1d4>
 800a3b6:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a3ba:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800a464 <__ieee754_logf+0x1d8>
 800a3be:	eee7 4a87 	vfma.f32	s9, s15, s14
 800a3c2:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a468 <__ieee754_logf+0x1dc>
 800a3c6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a3ca:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a3ce:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a3d2:	dd1c      	ble.n	800a40e <__ieee754_logf+0x182>
 800a3d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a3d8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a3dc:	ee27 7a00 	vmul.f32	s14, s14, s0
 800a3e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a3e8:	b922      	cbnz	r2, 800a3f4 <__ieee754_logf+0x168>
 800a3ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a3f2:	4770      	bx	lr
 800a3f4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800a440 <__ieee754_logf+0x1b4>
 800a3f8:	eee6 7a86 	vfma.f32	s15, s13, s12
 800a3fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a400:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a404:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a444 <__ieee754_logf+0x1b8>
 800a408:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800a40c:	4770      	bx	lr
 800a40e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a412:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a416:	2a00      	cmp	r2, #0
 800a418:	d0e9      	beq.n	800a3ee <__ieee754_logf+0x162>
 800a41a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a440 <__ieee754_logf+0x1b4>
 800a41e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800a422:	e7ed      	b.n	800a400 <__ieee754_logf+0x174>
 800a424:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800a430 <__ieee754_logf+0x1a4>
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	cc000000 	.word	0xcc000000
 800a430:	00000000 	.word	0x00000000
 800a434:	4c000000 	.word	0x4c000000
 800a438:	004afb20 	.word	0x004afb20
 800a43c:	007ffff0 	.word	0x007ffff0
 800a440:	3717f7d1 	.word	0x3717f7d1
 800a444:	3f317180 	.word	0x3f317180
 800a448:	3eaaaaab 	.word	0x3eaaaaab
 800a44c:	3e1cd04f 	.word	0x3e1cd04f
 800a450:	3e178897 	.word	0x3e178897
 800a454:	ffcf5c30 	.word	0xffcf5c30
 800a458:	3e638e29 	.word	0x3e638e29
 800a45c:	3ecccccd 	.word	0x3ecccccd
 800a460:	3e3a3325 	.word	0x3e3a3325
 800a464:	3e924925 	.word	0x3e924925
 800a468:	3f2aaaab 	.word	0x3f2aaaab

0800a46c <_init>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	bf00      	nop
 800a470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a472:	bc08      	pop	{r3}
 800a474:	469e      	mov	lr, r3
 800a476:	4770      	bx	lr

0800a478 <_fini>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	bf00      	nop
 800a47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47e:	bc08      	pop	{r3}
 800a480:	469e      	mov	lr, r3
 800a482:	4770      	bx	lr
